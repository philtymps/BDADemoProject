
package test;

import java.util.List;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.datatype.XMLGregorianCalendar;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "Soap", targetNamespace = "urn:partner.soap.sforce.com")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface Soap {


    /**
     * Login to the Salesforce.com SOAP Api
     * 
     * @param password
     * @param username
     * @return
     *     returns test.LoginResult
     * @throws LoginFault_Exception
     * @throws InvalidIdFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "login", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Login")
    @ResponseWrapper(localName = "loginResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.LoginResponse")
    public LoginResult login(
        @WebParam(name = "username", targetNamespace = "urn:partner.soap.sforce.com")
        String username,
        @WebParam(name = "password", targetNamespace = "urn:partner.soap.sforce.com")
        String password)
        throws InvalidIdFault_Exception, LoginFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Describe an sObject
     * 
     * @param sObjectType
     * @return
     *     returns test.DescribeSObjectResult
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSObject", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSObject")
    @ResponseWrapper(localName = "describeSObjectResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSObjectResponse")
    public DescribeSObjectResult describeSObject(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType)
        throws InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Describe multiple sObjects (upto 100)
     * 
     * @param sObjectType
     * @return
     *     returns java.util.List<test.DescribeSObjectResult>
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSObjects", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSObjects")
    @ResponseWrapper(localName = "describeSObjectsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSObjectsResponse")
    public List<DescribeSObjectResult> describeSObjects(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> sObjectType)
        throws InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Describe the Global state
     * 
     * @return
     *     returns test.DescribeGlobalResult
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeGlobal", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeGlobal")
    @ResponseWrapper(localName = "describeGlobalResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeGlobalResponse")
    public DescribeGlobalResult describeGlobal()
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Describe all the data category groups available for a given set of types
     * 
     * @param sObjectType
     * @return
     *     returns java.util.List<test.DescribeDataCategoryGroupResult>
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeDataCategoryGroups", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeDataCategoryGroups")
    @ResponseWrapper(localName = "describeDataCategoryGroupsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeDataCategoryGroupsResponse")
    public List<DescribeDataCategoryGroupResult> describeDataCategoryGroups(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> sObjectType)
        throws InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Describe the data category group structures for a given set of pair of types and data category group name
     * 
     * @param topCategoriesOnly
     * @param pairs
     * @return
     *     returns java.util.List<test.DescribeDataCategoryGroupStructureResult>
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeDataCategoryGroupStructures", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeDataCategoryGroupStructures")
    @ResponseWrapper(localName = "describeDataCategoryGroupStructuresResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeDataCategoryGroupStructuresResponse")
    public List<DescribeDataCategoryGroupStructureResult> describeDataCategoryGroupStructures(
        @WebParam(name = "pairs", targetNamespace = "urn:partner.soap.sforce.com")
        List<DataCategoryGroupSobjectTypePair> pairs,
        @WebParam(name = "topCategoriesOnly", targetNamespace = "urn:partner.soap.sforce.com")
        boolean topCategoriesOnly)
        throws InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Describes your Knowledge settings, such as if knowledgeEnabled is on or off, its default language and supported languages
     * 
     * @return
     *     returns test.KnowledgeSettings
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeKnowledgeSettings", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeKnowledgeSettings")
    @ResponseWrapper(localName = "describeKnowledgeSettingsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeKnowledgeSettingsResponse")
    public KnowledgeSettings describeKnowledgeSettings()
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Describe a list of FlexiPage and their contents
     * 
     * @param flexiPages
     * @param contexts
     * @return
     *     returns java.util.List<test.DescribeFlexiPageResult>
     * @throws InvalidIdFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeFlexiPages", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeFlexiPages")
    @ResponseWrapper(localName = "describeFlexiPagesResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeFlexiPagesResponse")
    public List<DescribeFlexiPageResult> describeFlexiPages(
        @WebParam(name = "flexiPages", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> flexiPages,
        @WebParam(name = "contexts", targetNamespace = "urn:partner.soap.sforce.com")
        List<FlexipageContext> contexts)
        throws InvalidIdFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Describe the items in an AppMenu
     * 
     * @param networkId
     * @param appMenuType
     * @return
     *     returns test.DescribeAppMenuResult
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeAppMenu", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeAppMenu")
    @ResponseWrapper(localName = "describeAppMenuResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeAppMenuResponse")
    public DescribeAppMenuResult describeAppMenu(
        @WebParam(name = "appMenuType", targetNamespace = "urn:partner.soap.sforce.com")
        AppMenuType appMenuType,
        @WebParam(name = "networkId", targetNamespace = "urn:partner.soap.sforce.com")
        String networkId)
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Describe Gloal and Themes
     * 
     * @return
     *     returns test.DescribeGlobalTheme
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeGlobalTheme", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeGlobalTheme2")
    @ResponseWrapper(localName = "describeGlobalThemeResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeGlobalThemeResponse")
    public DescribeGlobalTheme describeGlobalTheme()
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Describe Themes
     * 
     * @param sobjectType
     * @return
     *     returns test.DescribeThemeResult
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeTheme", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeTheme")
    @ResponseWrapper(localName = "describeThemeResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeThemeResponse")
    public DescribeThemeResult describeTheme(
        @WebParam(name = "sobjectType", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> sobjectType)
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Describe the layout of the given sObject or the given actionable global page.
     * 
     * @param sObjectType
     * @param recordTypeIds
     * @param layoutName
     * @return
     *     returns test.DescribeLayoutResult
     * @throws InvalidIdFault_Exception
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeLayout", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeLayout")
    @ResponseWrapper(localName = "describeLayoutResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeLayoutResponse")
    public DescribeLayoutResult describeLayout(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "layoutName", targetNamespace = "urn:partner.soap.sforce.com")
        String layoutName,
        @WebParam(name = "recordTypeIds", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> recordTypeIds)
        throws InvalidIdFault_Exception, InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Describe the layout of the SoftPhone
     * 
     * @return
     *     returns test.DescribeSoftphoneLayoutResult
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSoftphoneLayout", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSoftphoneLayout")
    @ResponseWrapper(localName = "describeSoftphoneLayoutResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSoftphoneLayoutResponse")
    public DescribeSoftphoneLayoutResult describeSoftphoneLayout()
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Describe the search view of an sObject
     * 
     * @param sObjectType
     * @return
     *     returns java.util.List<test.DescribeSearchLayoutResult>
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSearchLayouts", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSearchLayouts")
    @ResponseWrapper(localName = "describeSearchLayoutsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSearchLayoutsResponse")
    public List<DescribeSearchLayoutResult> describeSearchLayouts(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> sObjectType)
        throws InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Describe a list of entity names that reflects the current user's searchable entities
     * 
     * @param includeOnlyEntitiesWithTabs
     * @return
     *     returns java.util.List<test.DescribeSearchableEntityResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSearchableEntities", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSearchableEntities")
    @ResponseWrapper(localName = "describeSearchableEntitiesResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSearchableEntitiesResponse")
    public List<DescribeSearchableEntityResult> describeSearchableEntities(
        @WebParam(name = "includeOnlyEntitiesWithTabs", targetNamespace = "urn:partner.soap.sforce.com")
        boolean includeOnlyEntitiesWithTabs);

    /**
     * Describe a list of objects representing the order and scope of objects on a users search result page
     * 
     * @return
     *     returns java.util.List<test.DescribeSearchScopeOrderResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSearchScopeOrder", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSearchScopeOrder")
    @ResponseWrapper(localName = "describeSearchScopeOrderResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSearchScopeOrderResponse")
    public List<DescribeSearchScopeOrderResult> describeSearchScopeOrder();

    /**
     * Describe the compact layouts of the given sObject
     * 
     * @param sObjectType
     * @param recordTypeIds
     * @return
     *     returns test.DescribeCompactLayoutsResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeCompactLayouts", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeCompactLayouts")
    @ResponseWrapper(localName = "describeCompactLayoutsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeCompactLayoutsResponse")
    public DescribeCompactLayoutsResult describeCompactLayouts(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "recordTypeIds", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> recordTypeIds);

    /**
     * Describe the Path Assistants for the given sObject and optionally RecordTypes
     * 
     * @param picklistValue
     * @param sObjectType
     * @param recordTypeIds
     * @return
     *     returns test.DescribePathAssistantsResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describePathAssistants", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribePathAssistants")
    @ResponseWrapper(localName = "describePathAssistantsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribePathAssistantsResponse")
    public DescribePathAssistantsResult describePathAssistants(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "picklistValue", targetNamespace = "urn:partner.soap.sforce.com")
        String picklistValue,
        @WebParam(name = "recordTypeIds", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> recordTypeIds);

    /**
     * Describe the approval layouts of the given sObject
     * 
     * @param approvalProcessNames
     * @param sObjectType
     * @return
     *     returns test.DescribeApprovalLayoutResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeApprovalLayout", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeApprovalLayout")
    @ResponseWrapper(localName = "describeApprovalLayoutResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeApprovalLayoutResponse")
    public DescribeApprovalLayoutResult describeApprovalLayout(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "approvalProcessNames", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> approvalProcessNames);

    /**
     * Describe the ListViews as SOQL metadata for the generation of SOQL.
     * 
     * @param request
     * @return
     *     returns test.DescribeSoqlListViewResult
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSoqlListViews", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSoqlListViews")
    @ResponseWrapper(localName = "describeSoqlListViewsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSoqlListViewsResponse")
    public DescribeSoqlListViewResult describeSoqlListViews(
        @WebParam(name = "request", targetNamespace = "urn:partner.soap.sforce.com")
        DescribeSoqlListViewsRequest request)
        throws InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Execute the specified list view and return the presentation-ready results.
     * 
     * @param request
     * @return
     *     returns test.ExecuteListViewResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "executeListView", targetNamespace = "urn:partner.soap.sforce.com", className = "test.ExecuteListView")
    @ResponseWrapper(localName = "executeListViewResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.ExecuteListViewResponse")
    public ExecuteListViewResult executeListView(
        @WebParam(name = "request", targetNamespace = "urn:partner.soap.sforce.com")
        ExecuteListViewRequest request);

    /**
     * Describe the ListViews of a SObject as SOQL metadata for the generation of SOQL.
     * 
     * @param offset
     * @param limit
     * @param sObjectType
     * @param recentsOnly
     * @param isSoqlCompatible
     * @return
     *     returns test.DescribeSoqlListViewResult
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeSObjectListViews", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSObjectListViews")
    @ResponseWrapper(localName = "describeSObjectListViewsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeSObjectListViewsResponse")
    public DescribeSoqlListViewResult describeSObjectListViews(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "recentsOnly", targetNamespace = "urn:partner.soap.sforce.com")
        boolean recentsOnly,
        @WebParam(name = "isSoqlCompatible", targetNamespace = "urn:partner.soap.sforce.com")
        ListViewIsSoqlCompatible isSoqlCompatible,
        @WebParam(name = "limit", targetNamespace = "urn:partner.soap.sforce.com")
        int limit,
        @WebParam(name = "offset", targetNamespace = "urn:partner.soap.sforce.com")
        int offset)
        throws InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Describe the tabs that appear on a users page
     * 
     * @return
     *     returns java.util.List<test.DescribeTabSetResult>
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeTabs", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeTabs")
    @ResponseWrapper(localName = "describeTabsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeTabsResponse")
    public List<DescribeTabSetResult> describeTabs()
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Describe all tabs available to a user
     * 
     * @return
     *     returns java.util.List<test.DescribeTab>
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeAllTabs", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeAllTabs")
    @ResponseWrapper(localName = "describeAllTabsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeAllTabsResponse")
    public List<DescribeTab> describeAllTabs()
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Describe the primary compact layouts for the sObjects requested
     * 
     * @param sObjectTypes
     * @return
     *     returns java.util.List<test.DescribeCompactLayout>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describePrimaryCompactLayouts", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribePrimaryCompactLayouts")
    @ResponseWrapper(localName = "describePrimaryCompactLayoutsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribePrimaryCompactLayoutsResponse")
    public List<DescribeCompactLayout> describePrimaryCompactLayouts(
        @WebParam(name = "sObjectTypes", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> sObjectTypes);

    /**
     * Create a set of new sObjects
     * 
     * @param sObjects
     * @return
     *     returns java.util.List<test.SaveResult>
     * @throws InvalidIdFault_Exception
     * @throws InvalidSObjectFault_Exception
     * @throws InvalidFieldFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "create", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Create")
    @ResponseWrapper(localName = "createResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.CreateResponse")
    public List<SaveResult> create(
        @WebParam(name = "sObjects", targetNamespace = "urn:partner.soap.sforce.com")
        List<SObject> sObjects)
        throws InvalidFieldFault_Exception, InvalidIdFault_Exception, InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Update a set of sObjects
     * 
     * @param sObjects
     * @return
     *     returns java.util.List<test.SaveResult>
     * @throws InvalidIdFault_Exception
     * @throws InvalidSObjectFault_Exception
     * @throws InvalidFieldFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "update", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Update")
    @ResponseWrapper(localName = "updateResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.UpdateResponse")
    public List<SaveResult> update(
        @WebParam(name = "sObjects", targetNamespace = "urn:partner.soap.sforce.com")
        List<SObject> sObjects)
        throws InvalidFieldFault_Exception, InvalidIdFault_Exception, InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Update or insert a set of sObjects based on object id
     * 
     * @param sObjects
     * @param externalIDFieldName
     * @return
     *     returns java.util.List<test.UpsertResult>
     * @throws InvalidIdFault_Exception
     * @throws InvalidSObjectFault_Exception
     * @throws InvalidFieldFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "upsert", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Upsert")
    @ResponseWrapper(localName = "upsertResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.UpsertResponse")
    public List<UpsertResult> upsert(
        @WebParam(name = "externalIDFieldName", targetNamespace = "urn:partner.soap.sforce.com")
        String externalIDFieldName,
        @WebParam(name = "sObjects", targetNamespace = "urn:partner.soap.sforce.com")
        List<SObject> sObjects)
        throws InvalidFieldFault_Exception, InvalidIdFault_Exception, InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Merge and update a set of sObjects based on object id
     * 
     * @param request
     * @return
     *     returns java.util.List<test.MergeResult>
     * @throws InvalidIdFault_Exception
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     * @throws InvalidFieldFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "merge", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Merge")
    @ResponseWrapper(localName = "mergeResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.MergeResponse")
    public List<MergeResult> merge(
        @WebParam(name = "request", targetNamespace = "urn:partner.soap.sforce.com")
        List<MergeRequest> request)
        throws InvalidFieldFault_Exception, InvalidIdFault_Exception, InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Delete a set of sObjects
     * 
     * @param ids
     * @return
     *     returns java.util.List<test.DeleteResult>
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "delete", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Delete")
    @ResponseWrapper(localName = "deleteResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DeleteResponse")
    public List<DeleteResult> delete(
        @WebParam(name = "ids", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> ids)
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Undelete a set of sObjects
     * 
     * @param ids
     * @return
     *     returns java.util.List<test.UndeleteResult>
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "undelete", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Undelete")
    @ResponseWrapper(localName = "undeleteResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.UndeleteResponse")
    public List<UndeleteResult> undelete(
        @WebParam(name = "ids", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> ids)
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Empty a set of sObjects from the recycle bin
     * 
     * @param ids
     * @return
     *     returns java.util.List<test.EmptyRecycleBinResult>
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "emptyRecycleBin", targetNamespace = "urn:partner.soap.sforce.com", className = "test.EmptyRecycleBin")
    @ResponseWrapper(localName = "emptyRecycleBinResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.EmptyRecycleBinResponse")
    public List<EmptyRecycleBinResult> emptyRecycleBin(
        @WebParam(name = "ids", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> ids)
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Get a set of sObjects
     * 
     * @param sObjectType
     * @param ids
     * @param fieldList
     * @return
     *     returns java.util.List<test.SObject>
     * @throws MalformedQueryFault_Exception
     * @throws InvalidIdFault_Exception
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     * @throws InvalidFieldFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "retrieve", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Retrieve")
    @ResponseWrapper(localName = "retrieveResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.RetrieveResponse")
    public List<SObject> retrieve(
        @WebParam(name = "fieldList", targetNamespace = "urn:partner.soap.sforce.com")
        String fieldList,
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "ids", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> ids)
        throws InvalidFieldFault_Exception, InvalidIdFault_Exception, InvalidSObjectFault_Exception, MalformedQueryFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Submit an entity to a workflow process or process a workitem
     * 
     * @param actions
     * @return
     *     returns java.util.List<test.ProcessResult>
     * @throws InvalidIdFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "process", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Process")
    @ResponseWrapper(localName = "processResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.ProcessResponse")
    public List<ProcessResult> process(
        @WebParam(name = "actions", targetNamespace = "urn:partner.soap.sforce.com")
        List<ProcessRequest> actions)
        throws InvalidIdFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * convert a set of leads
     * 
     * @param leadConverts
     * @return
     *     returns java.util.List<test.LeadConvertResult>
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "convertLead", targetNamespace = "urn:partner.soap.sforce.com", className = "test.ConvertLead")
    @ResponseWrapper(localName = "convertLeadResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.ConvertLeadResponse")
    public List<LeadConvertResult> convertLead(
        @WebParam(name = "leadConverts", targetNamespace = "urn:partner.soap.sforce.com")
        List<LeadConvert> leadConverts)
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Logout the current user, invalidating the current session.
     * 
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @RequestWrapper(localName = "logout", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Logout")
    @ResponseWrapper(localName = "logoutResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.LogoutResponse")
    public void logout()
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Logs out and invalidates session ids
     * 
     * @param sessionIds
     * @return
     *     returns java.util.List<test.InvalidateSessionsResult>
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "invalidateSessions", targetNamespace = "urn:partner.soap.sforce.com", className = "test.InvalidateSessions")
    @ResponseWrapper(localName = "invalidateSessionsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.InvalidateSessionsResponse")
    public List<InvalidateSessionsResult> invalidateSessions(
        @WebParam(name = "sessionIds", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> sessionIds)
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Get the IDs for deleted sObjects
     * 
     * @param endDate
     * @param sObjectType
     * @param startDate
     * @return
     *     returns test.GetDeletedResult
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "getDeleted", targetNamespace = "urn:partner.soap.sforce.com", className = "test.GetDeleted")
    @ResponseWrapper(localName = "getDeletedResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.GetDeletedResponse")
    public GetDeletedResult getDeleted(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "startDate", targetNamespace = "urn:partner.soap.sforce.com")
        XMLGregorianCalendar startDate,
        @WebParam(name = "endDate", targetNamespace = "urn:partner.soap.sforce.com")
        XMLGregorianCalendar endDate)
        throws InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Get the IDs for updated sObjects
     * 
     * @param endDate
     * @param sObjectType
     * @param startDate
     * @return
     *     returns test.GetUpdatedResult
     * @throws InvalidSObjectFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "getUpdated", targetNamespace = "urn:partner.soap.sforce.com", className = "test.GetUpdated")
    @ResponseWrapper(localName = "getUpdatedResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.GetUpdatedResponse")
    public GetUpdatedResult getUpdated(
        @WebParam(name = "sObjectType", targetNamespace = "urn:partner.soap.sforce.com")
        String sObjectType,
        @WebParam(name = "startDate", targetNamespace = "urn:partner.soap.sforce.com")
        XMLGregorianCalendar startDate,
        @WebParam(name = "endDate", targetNamespace = "urn:partner.soap.sforce.com")
        XMLGregorianCalendar endDate)
        throws InvalidSObjectFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Create a Query Cursor
     * 
     * @param queryString
     * @return
     *     returns test.QueryResult
     * @throws InvalidQueryLocatorFault_Exception
     * @throws InvalidIdFault_Exception
     * @throws MalformedQueryFault_Exception
     * @throws InvalidSObjectFault_Exception
     * @throws InvalidFieldFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "query", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Query")
    @ResponseWrapper(localName = "queryResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.QueryResponse")
    public QueryResult query(
        @WebParam(name = "queryString", targetNamespace = "urn:partner.soap.sforce.com")
        String queryString)
        throws InvalidFieldFault_Exception, InvalidIdFault_Exception, InvalidQueryLocatorFault_Exception, InvalidSObjectFault_Exception, MalformedQueryFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Create a Query Cursor, including deleted sObjects
     * 
     * @param queryString
     * @return
     *     returns test.QueryResult
     * @throws InvalidQueryLocatorFault_Exception
     * @throws InvalidIdFault_Exception
     * @throws MalformedQueryFault_Exception
     * @throws InvalidSObjectFault_Exception
     * @throws InvalidFieldFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "queryAll", targetNamespace = "urn:partner.soap.sforce.com", className = "test.QueryAll")
    @ResponseWrapper(localName = "queryAllResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.QueryAllResponse")
    public QueryResult queryAll(
        @WebParam(name = "queryString", targetNamespace = "urn:partner.soap.sforce.com")
        String queryString)
        throws InvalidFieldFault_Exception, InvalidIdFault_Exception, InvalidQueryLocatorFault_Exception, InvalidSObjectFault_Exception, MalformedQueryFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Gets the next batch of sObjects from a query
     * 
     * @param queryLocator
     * @return
     *     returns test.QueryResult
     * @throws InvalidQueryLocatorFault_Exception
     * @throws MalformedQueryFault_Exception
     * @throws InvalidFieldFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "queryMore", targetNamespace = "urn:partner.soap.sforce.com", className = "test.QueryMore")
    @ResponseWrapper(localName = "queryMoreResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.QueryMoreResponse")
    public QueryResult queryMore(
        @WebParam(name = "queryLocator", targetNamespace = "urn:partner.soap.sforce.com")
        String queryLocator)
        throws InvalidFieldFault_Exception, InvalidQueryLocatorFault_Exception, MalformedQueryFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Search for sObjects
     * 
     * @param searchString
     * @return
     *     returns test.SearchResult
     * @throws InvalidSObjectFault_Exception
     * @throws MalformedSearchFault_Exception
     * @throws InvalidFieldFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "search", targetNamespace = "urn:partner.soap.sforce.com", className = "test.Search")
    @ResponseWrapper(localName = "searchResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.SearchResponse")
    public SearchResult search(
        @WebParam(name = "searchString", targetNamespace = "urn:partner.soap.sforce.com")
        String searchString)
        throws InvalidFieldFault_Exception, InvalidSObjectFault_Exception, MalformedSearchFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Gets server timestamp
     * 
     * @return
     *     returns test.GetServerTimestampResult
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "getServerTimestamp", targetNamespace = "urn:partner.soap.sforce.com", className = "test.GetServerTimestamp")
    @ResponseWrapper(localName = "getServerTimestampResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.GetServerTimestampResponse")
    public GetServerTimestampResult getServerTimestamp()
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Set a user's password
     * 
     * @param password
     * @param userId
     * @return
     *     returns test.SetPasswordResult
     * @throws InvalidIdFault_Exception
     * @throws InvalidNewPasswordFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "setPassword", targetNamespace = "urn:partner.soap.sforce.com", className = "test.SetPassword")
    @ResponseWrapper(localName = "setPasswordResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.SetPasswordResponse")
    public SetPasswordResult setPassword(
        @WebParam(name = "userId", targetNamespace = "urn:partner.soap.sforce.com")
        String userId,
        @WebParam(name = "password", targetNamespace = "urn:partner.soap.sforce.com")
        String password)
        throws InvalidIdFault_Exception, InvalidNewPasswordFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Reset a user's password
     * 
     * @param userId
     * @return
     *     returns test.ResetPasswordResult
     * @throws InvalidIdFault_Exception
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "resetPassword", targetNamespace = "urn:partner.soap.sforce.com", className = "test.ResetPassword")
    @ResponseWrapper(localName = "resetPasswordResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.ResetPasswordResponse")
    public ResetPasswordResult resetPassword(
        @WebParam(name = "userId", targetNamespace = "urn:partner.soap.sforce.com")
        String userId)
        throws InvalidIdFault_Exception, UnexpectedErrorFault_Exception
    ;

    /**
     * Returns standard information relevant to the current user
     * 
     * @return
     *     returns test.GetUserInfoResult
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "getUserInfo", targetNamespace = "urn:partner.soap.sforce.com", className = "test.GetUserInfo")
    @ResponseWrapper(localName = "getUserInfoResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.GetUserInfoResponse")
    public GetUserInfoResult getUserInfo()
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Send existing draft EmailMessage
     * 
     * @param ids
     * @return
     *     returns java.util.List<test.SendEmailResult>
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "sendEmailMessage", targetNamespace = "urn:partner.soap.sforce.com", className = "test.SendEmailMessage")
    @ResponseWrapper(localName = "sendEmailMessageResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.SendEmailMessageResponse")
    public List<SendEmailResult> sendEmailMessage(
        @WebParam(name = "ids", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> ids)
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Send outbound email
     * 
     * @param messages
     * @return
     *     returns java.util.List<test.SendEmailResult>
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "sendEmail", targetNamespace = "urn:partner.soap.sforce.com", className = "test.SendEmail")
    @ResponseWrapper(localName = "sendEmailResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.SendEmailResponse")
    public List<SendEmailResult> sendEmail(
        @WebParam(name = "messages", targetNamespace = "urn:partner.soap.sforce.com")
        List<Email> messages)
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Perform a template merge on one or more blocks of text.
     * 
     * @param renderRequests
     * @return
     *     returns java.util.List<test.RenderEmailTemplateResult>
     * @throws UnexpectedErrorFault_Exception
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "renderEmailTemplate", targetNamespace = "urn:partner.soap.sforce.com", className = "test.RenderEmailTemplate")
    @ResponseWrapper(localName = "renderEmailTemplateResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.RenderEmailTemplateResponse")
    public List<RenderEmailTemplateResult> renderEmailTemplate(
        @WebParam(name = "renderRequests", targetNamespace = "urn:partner.soap.sforce.com")
        List<RenderEmailTemplateRequest> renderRequests)
        throws UnexpectedErrorFault_Exception
    ;

    /**
     * Perform a series of predefined actions such as quick create or log a task
     * 
     * @param quickActions
     * @return
     *     returns java.util.List<test.PerformQuickActionResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "performQuickActions", targetNamespace = "urn:partner.soap.sforce.com", className = "test.PerformQuickActions")
    @ResponseWrapper(localName = "performQuickActionsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.PerformQuickActionsResponse")
    public List<PerformQuickActionResult> performQuickActions(
        @WebParam(name = "quickActions", targetNamespace = "urn:partner.soap.sforce.com")
        List<PerformQuickActionRequest> quickActions);

    /**
     * Describe the details of a series of quick actions
     * 
     * @param quickActions
     * @return
     *     returns java.util.List<test.DescribeQuickActionResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeQuickActions", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeQuickActions")
    @ResponseWrapper(localName = "describeQuickActionsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeQuickActionsResponse")
    public List<DescribeQuickActionResult> describeQuickActions(
        @WebParam(name = "quickActions", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> quickActions);

    /**
     * Describe the details of a series of quick actions available for the given contextType
     * 
     * @param contextType
     * @return
     *     returns java.util.List<test.DescribeAvailableQuickActionResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeAvailableQuickActions", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeAvailableQuickActions")
    @ResponseWrapper(localName = "describeAvailableQuickActionsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeAvailableQuickActionsResponse")
    public List<DescribeAvailableQuickActionResult> describeAvailableQuickActions(
        @WebParam(name = "contextType", targetNamespace = "urn:partner.soap.sforce.com")
        String contextType);

    /**
     * Retreive the template sobjects, if appropriate, for the given quick action names in a given context
     * 
     * @param quickActionNames
     * @param contextId
     * @return
     *     returns java.util.List<test.QuickActionTemplateResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "retrieveQuickActionTemplates", targetNamespace = "urn:partner.soap.sforce.com", className = "test.RetrieveQuickActionTemplates")
    @ResponseWrapper(localName = "retrieveQuickActionTemplatesResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.RetrieveQuickActionTemplatesResponse")
    public List<QuickActionTemplateResult> retrieveQuickActionTemplates(
        @WebParam(name = "quickActionNames", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> quickActionNames,
        @WebParam(name = "contextId", targetNamespace = "urn:partner.soap.sforce.com")
        String contextId);

    /**
     * Describe visualforce for an org
     * 
     * @param includeAllDetails
     * @param namespacePrefix
     * @return
     *     returns test.DescribeVisualForceResult
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeVisualForce", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeVisualForce")
    @ResponseWrapper(localName = "describeVisualForceResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeVisualForceResponse")
    public DescribeVisualForceResult describeVisualForce(
        @WebParam(name = "includeAllDetails", targetNamespace = "urn:partner.soap.sforce.com")
        boolean includeAllDetails,
        @WebParam(name = "namespacePrefix", targetNamespace = "urn:partner.soap.sforce.com")
        String namespacePrefix);

    /**
     * Return the renameable nouns from the server for use in presentation using the salesforce grammar engine
     * 
     * @param onlyRenamed
     * @param includeFields
     * @param nouns
     * @return
     *     returns java.util.List<test.DescribeNounResult>
     */
    @WebMethod
    @WebResult(name = "result", targetNamespace = "urn:partner.soap.sforce.com")
    @RequestWrapper(localName = "describeNouns", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeNouns")
    @ResponseWrapper(localName = "describeNounsResponse", targetNamespace = "urn:partner.soap.sforce.com", className = "test.DescribeNounsResponse")
    public List<DescribeNounResult> describeNouns(
        @WebParam(name = "nouns", targetNamespace = "urn:partner.soap.sforce.com")
        List<String> nouns,
        @WebParam(name = "onlyRenamed", targetNamespace = "urn:partner.soap.sforce.com")
        boolean onlyRenamed,
        @WebParam(name = "includeFields", targetNamespace = "urn:partner.soap.sforce.com")
        boolean includeFields);

}
