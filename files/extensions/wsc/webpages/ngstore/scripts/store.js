/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


var iss = angular.module('store',[/*'ngAnimate',*/'ngAria','ngTouch',/*'ui.router',*/'ui.select','isc.shared'/*'ngMessages','x1.ui.top-navigation',*//*'x1.ui.left-navigation',*//*'x1.ui.tooltip','x1.ui.popover','x1.ui.tabs'*/]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc controllerinfo
 *@viewname store.app
 *@package store
 *@class app
 *@description Store application shell controller
 *
 */
(function(angular,iscCore){
  'use strict';  
  
  angular.module('store').controller('store.app',
    ['$scope','$rootScope','iscScreen','iscState','iscMashup','iscResourcePermission','iscAppContext','iscModal','iscI18n','iscRule','iscOrder','iscObjectUtility','iscAppInfo','$timeout','$document', 'iscHttpRequest','iscPortletShipment','iscPersona',
  	function($scope,$rootScope,iscScreen,iscState,iscMashup,iscResourcePermission,iscAppContext,iscModal,iscI18n,iscRule,iscOrder,iscObjectUtility,iscAppInfo,$timeout,$document, iscHttpRequest,iscPortletShipment,iscPersona) {  		
  		iscScreen.initializeScreen($scope,{
  		 model:{
        	inboxModel:{}
        },
		 mashupRefs : [
		    		{
                        	/**
							*@description This mashup is used to get the polling interval for displaying alerts.
							*/
                            mashupRefId: 'getRuleDetails_AlertPollingInterval',
                            mashupId: 'getRuleDetails_AlertPollingInterval'

                        },
                        
                        {
                        	/**
							*@description This mashup is used to get alerts assigned to user
							*/
                            mashupRefId: 'getAlertStatistics',
                            mashupId: 'getAlertStatistics',
                            modelName:"inboxModel"

                        }
    		],
    		ui:{
    			showGlobalSearch: 'N',
    			hideGlobalSearchAction : 'N',
				isOpenMobileMenu : false,
                isOpenDesktopMenu : false,
                showAlertsIcon: true
    		},
    		/**
  		 		*@iscdoc uimethod
		 			*@viewname store.app
  		 		*@methodname uiShowAboutBox
  		 		*@description Opens the about modal window
  		 		*/	    						
        uiShowAboutBox : function(){
    			iscModal.openModal('store.views.about.about',{},{});
    		}, 
				uiShowOnlineHelp : function(){
					/* Get dimensions of call center window and open help with same dimensions */
					var height = "innerHeight" in window 
						 ? window.innerHeight
						 : document.documentElement.offsetHeight;
					var width = "innerWidth" in window 
						 ? window.innerWidth
						 : document.documentElement.offsetWidth;
					var dimensions = "width=" + width + ", height=" + height;			
					var parameters = dimensions + ",status=yes,toolbar=no,menubar=no,location=no,resizable=yes,scrollbars=yes";					
					var url = iscAppInfo.getActiveHelpURL();
					var win = window.open(url,"Product_name", parameters);
					win.focus();					
				},
				/**
  		 		*@iscdoc uimethod
		 			*@viewname store.app
  		 		*@methodname uiShowHome
  		 		*@description Opens home screen
  		 		*/	    		
    		uiShowHome : function(){
    			//$state.go('home',{},{location:'replace'});
    			iscState.goToState('/home',{},{});
    		},
    		/**
  		 		*@iscdoc uimethod
		 			*@viewname store.app
  		 		*@methodname uiDoSwitch
  		 		*@description Switches the application to order fullfillment
  		 		*/				
    		uiDoSwitch : function(){
    		    var appDeviceMode = iscAppInfo.getAppDeviceMode();
				var redirectURL = "";
				if(appDeviceMode === 'mobile'){
					redirectURL = iscAppInfo.getApplicationContext()+"/store/mobile/container/home.do";
				}
				else {
					redirectURL = iscAppInfo.getApplicationContext()+"/store/container/home.do";
				}
				window.location.href = iscHttpRequest.addAdditionalParamsInURL(redirectURL, "GET");
	    		  
	    	},
			
				/**
  		 		*@iscdoc uimethod
		 			*@viewname store.app
  		 		*@methodname uiDoLogout
  		 		*@description Logs out the the user and redirects the app to login page			
  		 		*/    		
    		uiDoLogout:function(){
    			window.location.pathname = iscAppInfo.getApplicationContext()+"/ngstore/logout.do";				
    		},
				/**
  		 		*@iscdoc uimethod
		 			*@viewname store.app
  		 		*@methodname uiAlertClose
  		 		*@description Closes the alert message		 			
  		 		*/    		
    		uiAlertClose:function(){
    		  $rootScope.ui.showAlertMessage=false;
    		},
    		
    		uiCloseGlobalSearch:function(eventArg) {
    			$scope.$emit('uiSearchClose',{'data':'close'});
				if (eventArg != null) {
					eventArg.preventDefault();
					eventArg.stopPropagation();
				}
    		},
    		
    		uiHandleGlobalSearchResult:function(searchResult) {
    			
    			var mode = 'global-search';
    			if(!iscCore.isVoid(searchResult) && !iscCore.isVoid(searchResult.Mode)) {
    				mode = searchResult.Mode;
    			}
    			
    			if(mode == 'global-search') {
    				$rootScope.$emit("uiSearchClose","close");
    				if("orderList" == searchResult.NextPage.action) {
    					iscState.goToState('order-list',{input:searchResult.NextPage.model},{});
    				} else if("orderDetails" == searchResult.NextPage.action) {
    					
    					if("0001" ==  searchResult.NextPage.model.Order.DocumentType) {
    						iscOrder.viewOrderFromList(searchResult.NextPage.model.Order,false);
    					} else {
    						iscState.goToState('order-list',{input:searchResult.NextPage.model, callAPI:"N"},{});
    					}
    					
    					
    				}else if("customerList" == searchResult.NextPage.action) {
    					iscState.goToState('customer-list',{input:searchResult.NextPage.model},{});
    				}else if("customerDetails" == searchResult.NextPage.action) {
    					iscState.goToState('customer-details',{input:searchResult.NextPage.model},{});
    				}else if("shipmentList" == searchResult.NextPage.action) {
						if('basicSearch' == searchResult.NextPage.type){
							iscPortletShipment.handleShipmentOrderBarcodeTranslation(searchResult.NextPage.model, 'shipmentsummary');
						}else if('advancedSearch' == searchResult.NextPage.type){
							iscState.goToState('globalshipmentsearch',{input:searchResult.NextPage.model,ignoreDocumentType:searchResult.NextPage.ignoreDocumentType},{});
						}
    				}
    			} 
    			
    		},
		   /**
			*@iscdoc uimethod
			*@viewname store.app
			*@methodname uiToggle
			*@description Called when the app header menu is toggled. Invokes the 'uiCloseGlobalSearch' method to close the global search mask			
			*/
			uiToggle : function() {
				this.uiCloseGlobalSearch();
				this.uiCloseAlertSearch();
			},
    		/**
  		 		*@iscdoc viewinit
		 			*@viewname store.app
  		 		*@methodname initialize
  		 		*@description Initializes the store application shell
  		 		*/
    		initialize : function(){
				
				if (iscPersona.getUsePersonaBasedHomepageFlagValue() !== true) {
					this.ui.showAlertsIcon = false;
				}
    			
    			if(!iscResourcePermission.hasPermission("WSC000036") && !iscResourcePermission.hasPermission("WSC000031") && !iscResourcePermission.hasPermission("WSC000037")) {
    				this.ui.hideGlobalSearchAction = 'Y'; 
    			}
    			
    			
    		  $rootScope.$emit("$stateChangeStart");
					// code to trigger document click in mobile devices
					$document.bind('touchend', function(event) {
						$document.triggerHandler('click', [event]);						
					});
					
		   	 $rootScope.$on('uiSearchClose',function(event,args){
	  			 	if (args){
	  					  $scope.ui.showGlobalSearch = 'N';
	  			    } 

	  					   
	  			 });
	  			 
	  			 
	  		$rootScope.$on('uiAlertSearchClose',function(event,args){
	  					  $scope.ui.showAlertSearch = 'N';
	  					   
	  			    });
	  			 
	  			 
	  			 
	  			 var inputObj = {};
	  			 inputObj.Rules={};
	  			 iscMashup.callMashup(this,"getRuleDetails_AlertPollingInterval",inputObj,{}).then(this.handleResults.bind(this)); 
    		},
    		
    		
    		
    		handleResults : function(res){
    			var defaultTime = 60000;
    			var apiOutput = iscMashup.getMashupOutput(res,"getRuleDetails_AlertPollingInterval");
    			var rulesObj = apiOutput.Rules;
    			var ruleSetValue = rulesObj.RuleSetValue;
    			
    			this._startPolling(ruleSetValue,defaultTime);
    			
    		
    		},
    		
    		_startPolling : function(pollingTime,defaultPollingTime){
    			var that=this;
    			var poller = function(){
    				var inputObj = {};
	  			 	inputObj.getAlertStatisticsForUser={};
    				iscMashup.callMashup(that,"getAlertStatistics",inputObj,{showMask:false}).then(that.handleGetExceptionList.bind(that));
    			
    			}
    		
    			poller();
				setInterval(poller, pollingTime || defaultPollingTime);
    		
    		},
    		
			handleGetExceptionList : function(res){
    			var apiOutput = iscMashup.getMashupOutput(res,"getAlertStatistics");
    			$rootScope.ui.alertCount=apiOutput.getAlertStatisticsForUser.TotalAlerts;
    		},
    		uiHandleToggleAlertSearch : function(){
      			if(this.ui.showAlertSearch === 'Y'){
      				this.ui.showAlertSearch = 'N';
      			}else {
      				this.ui.showAlertSearch = 'Y';
      				//this.uiCloseShipmentSearch();
      				
      				var inputObj = {};
	  			 	inputObj.getAlertStatisticsForUser={};
    				iscMashup.callMashup(this,"getAlertStatistics",inputObj,{showMask:false}).then(this.handleGetExceptionList.bind(this));
      			}
      			
      		
      		},
    		
    		uiCloseAlertSearch: function(){
      			this.ui.showAlertSearch = 'N';
      		}
      		
    		
    		
    		
    		
    		
      });
  	}
  ]);
  
  
})(window.angular,window.iscCore);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
(function (angular) {
	'use strict';

	//code to configure default state for the application i.e home or manager dashboard
	angular.module('store').config(['iscStateProvider', 'iscAppInfoProvider' ,function(iscStateProvider, iscAppInfoProvider) {
		iscStateProvider.otherwise(iscAppInfoProvider.getLandingPageState());
  }]);
 
	// Code to check onbeforeunload and show confirmation message before exit
  angular.module('store').run(['$window','iscI18n','iscAppInfo',function($window,iscI18n,iscAppInfo){
    
    var checkOnExit = function(){      
      return iscI18n.translate('shell.MESSAGE_Confirm_exit_dirty');
    };
    
    if(!iscAppInfo.isDevMode() && iscAppInfo.isCheckOnExitEnabled()){
      $window.onbeforeunload=checkOnExit;  
    }
    
  }]);
  
	
	// Code to track http requests and session timeout
	angular.module('store').config(['$httpProvider', function ($httpProvider) {
    $httpProvider.interceptors.push(['$window','$q','$rootScope','iscAppInfo',function ($window,$q, $rootScope,iscAppInfo/*,iscTemplate*/) {
        if ($rootScope.activeCalls === undefined) {
            $rootScope.activeCalls  = 0;
        }
    		var updateActiveCalls = function(config,type){    			
  				if(type==="INCREMENT" && config.showMask){
  					$rootScope.activeCalls += 1;
  				}
  				else if(type==="DECREMENT" && config.showMask){
  					$rootScope.activeCalls -= 1;
  				}    			
    		};
				var removeCommentsForHtml = function(response){
					if(iscAppInfo.isDevMode() && response.headers()["content-type"]==="text/html"){
						response.data = response.data.replace(/<!--[\s\S]*?-->/g,"");
					}					
				};
    		var seesionTimedOut = function(response){
    		  if (response.headers().loginpage==="true" || response.headers().redirectpage==="true"){
    		    $window.location.reload();
    		  }
    		};
        return {
          request: function (config) {				
			      updateActiveCalls(config,"INCREMENT"); 
			      config.headers.SCIAjax = "true";               
            return config;
          },
          requestError: function (rejection) {
			      updateActiveCalls(rejection.config,"DECREMENT");                
            return rejection;
          },
          response: function (response) {
            seesionTimedOut(response);
			      updateActiveCalls(response.config,"DECREMENT");
						removeCommentsForHtml(response);
            return response;
          },
          responseError: function (rejection) {
			      seesionTimedOut(rejection);
			      updateActiveCalls(rejection.config,"DECREMENT");                
            return rejection;
          }
        };
    }]);
}]);

})(window.angular);




/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

(function(iscCore){
    angular.module('store').controller('storeLoginCtrl',['$scope','$rootScope','$timeout','iscRequest','iscModal','iscI18n','iscAppContext','iscAppInfo', function($scope,$rootScope,$timeout,iscRequest,iscModal,iscI18n,iscAppContext,iscAppInfo) {
        $scope.ui = {};
        $scope.ui.displayUserId = "";
        $scope.ui.password = "";
        $scope.ui.enterpriseCode = iscRequest.getRequestParam("EnterpriseCode");
        $scope.ui.storeId = iscRequest.getRequestParam("StoreId");
        $scope.ui.storeLocaleCode = iscRequest.getRequestParam("StoreLocaleCode");
        $scope.ui.landingpage = iscRequest.getRequestParam("landingpage");
        $scope.ui.embedded = iscRequest.getRequestParam("Embedded");
        $scope.ui.errorMsg = iscRequest.getRequestParam("ErrorMsg");
        if(!iscCore.hasBundleKey("login."+$scope.ui.errorMsg)){
          	$scope.ui.errorMsg = "";
        }
        
        var loginSubmitted = false;
        $scope.ui.doLogin = function(){
            document.getElementById("fieldsForm").action=""+iscAppInfo.getApplicationContext()+"/"+"store/"+(iscAppContext.isMobile()?"mobile/":"")+"processLogin.do"
            if(!iscCore.isVoid($scope.ui.displayUserId) && !iscCore.isVoid($scope.ui.password) && !loginSubmitted ){
                  loginSubmitted = true;
                  $scope.ui.errorMsg = "";
                  document.getElementById("fieldsForm").submit();
            }
            else if(iscCore.isVoid($scope.ui.displayUserId) && iscCore.isVoid($scope.ui.password)){
                $scope.ui.errorMsg = "MESSAGE_User_id_password_required";
            }
            else if(iscCore.isVoid($scope.ui.displayUserId)){
                $scope.ui.errorMsg = "MESSAGE_User_id_required"
            }
            else if(iscCore.isVoid($scope.ui.password)){
                $scope.ui.errorMsg = "MESSAGE_Password_required"
            } 
        };

        /*if($scope.ui.errorMsg!==""){
          iscModal.showErrorMessage(iscI18n.translate($scope.ui.errorMsg));
        }
        */
        $scope.ui.actionPath = "";
        /*var paths = window.location.pathname.split('/');
        var path = "/"
        for(var i =1;i<paths.length-1;i++){
            path+=paths[i]+"/";
        }
        $scope.ui.actionPath = path+"processLogin.do";*/
        
        console.log("isMobile : "+iscAppContext.isMobile());
        console.log(""+iscAppInfo.getApplicationContext()+"/"+"store/"+(iscAppContext.isMobile()?"mobile/":"")+"processLogin.do");
    }]);

    
})(window.iscCore);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/




angular.module('store').config(['iscModalProvider',function(iscModalProvider){
	
	var aboutConf = {
			  animation: true,
			  templateUrl: './store/views/about/about.tpl.html',
			  controller:'store.views.about.about',
			  size: 'lg',
			  windowClass: 'about-box-dialog',	
		};
	
	iscModalProvider.registerModal("store.views.about.about",aboutConf);
	
}]);

/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/





angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('alertspreview',{
		  templateUrl: './store/views/alerts/alerts-preview.tpl.html',
      controller:'store.views.alerts.alerts-preview'
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.customer-lookup-portlet
 *@package store.views.home
 *@class customer-lookup-portlet
 *@viewtemplate ./store/views/home/customer-lookup-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('customerlookupportlet', {
		templateUrl: './store/views/home/customer-lookup-portlet.tpl.html',
		controller: 'store.views.home.customer-lookup-portlet',
		sequenceNumber: 50,//old values for legacy reasons on Q22017 portlets. Newer ones have same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000047',
		personaConfig: {
			personaName: 'Customer_Service',
			personaSequenceNumber: 20,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/customer-lookup-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.customer-lookup-portlet-mini'
		},
		// optional.
		sitemapConfig: {
			sitemapTitleKey: 'globals.TITLE_Customer',
			sitemapLinkKey: 'home.TITLE_FindCustomer',
			sitemapLinkActionMethod: 'uiFindCustomers'
		}
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.find-products-portlet
 *@package store.views.home
 *@class find-products-portlet
 *@viewtemplate ./store/views/home/find-products-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('findproductsportlet', {
		templateUrl: './store/views/home/find-products-portlet.tpl.html',
		controller: 'store.views.home.find-products-portlet',
		sequenceNumber: 10,//old values for legacy reasons on Q22017 portlets. Newer ones have same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000031',
		personaConfig: {
			personaName: 'Customer_Service',
			personaSequenceNumber: 5,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/find-products-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.find-products-portlet-mini'
		},
		// optional.
		sitemapConfig: {
			sitemapTitleKey: 'home.TITLE_Order',
			sitemapLinkKey: 'home.TITLE_FindProducts',
			sitemapLinkActionMethod: 'uiOpenFindProducts'
		}
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.in-store-appointment-portlet
 *@package store.views.home
 *@class in-store-appointment-portlet
 *@viewtemplate ./store/views/home/in-store-appointment-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('instoreappointmentportlet', {
		templateUrl: './store/views/home/in-store-appointment-portlet.tpl.html',
		controller: 'store.views.home.in-store-appointment-portlet',
		sequenceNumber: 25,//Defined post Q22017. Has same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000073',
		personaConfig: {
			personaName: 'Customer_Service',
			personaSequenceNumber: 25,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/in-store-appointment-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.in-store-appointment-portlet-mini'
		},
		// optional.
		sitemapConfig: {
			sitemapTitleKey: 'home.TITLE_InStoreAppointment',
			sitemapLinkKey: 'instoreappointment.ACTION_ViewAppointments',
			sitemapLinkActionMethod: 'uiViewAppointments'
		}
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.instore-receiving-portlet
 *@package store.views.home
 *@class instore-receiving-portlet
 *@viewtemplate ./store/views/home/instore-receiving-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('instorereceivingportlet', {
		templateUrl: './store/views/home/instore-receiving-portlet.tpl.html',
		controller: 'store.views.home.instore-receiving-portlet',
		sequenceNumber: 40,//old values for legacy reasons on Q22017 portlets. Newer ones have same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000041',
		personaConfig: {
			personaName: 'Order_Fulfillment',// We are not moving this and its related tpl and js files to order-fulfillment because we have already shipped this.
			personaSequenceNumber: 20,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/instore-receiving-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.instore-receiving-portlet-mini'
		},
		// optional.
		sitemapConfig: {
			sitemapTitleKey: 'home.TITLE_Shipment',
			sitemapLinkKey: 'home.TITLE_InStoreReceiving',
			sitemapLinkActionMethod: 'uiOpenReceivingShipmentList'
		}
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.quick-checkout-portlet
 *@package store.views.home
 *@class quick-checkout-portlet
 *@viewtemplate ./store/views/home/quick-checkout-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('quickcheckoutportlet', {
		templateUrl: './store/views/home/quick-checkout-portlet.tpl.html',
		controller: 'store.views.home.quick-checkout-portlet',
		sequenceNumber: 20,//old values for legacy reasons on Q22017 portlets. Newer ones have same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000031',
		personaConfig: {
			personaName: 'Customer_Service',
			personaSequenceNumber: 10,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/quick-checkout-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.quick-checkout-portlet-mini'
		},
		// optional.
		sitemapConfig: {
			sitemapTitleKey: '',
			sitemapLinkKey: '',
			sitemapLinkActionMethod: ''
		}
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.returns-portlet
 *@package store.views.home
 *@class returns-portlet
 *@viewtemplate ./store/views/home/returns-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('returnsportlet', {
		templateUrl: './store/views/home/returns-portlet.tpl.html',
		controller: 'store.views.home.returns-portlet',
		sequenceNumber: 30,//old values for legacy reasons on Q22017 portlets. Newer ones have same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000033',
		personaConfig: {
			personaName: 'Customer_Service',
			personaSequenceNumber: 15,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/returns-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.returns-portlet-mini'
		},
		// optional.
		sitemapConfig: {
			sitemapTitleKey: 'home.TITLE_Returns',
			sitemapLinkKey: 'home.TITLE_ReturnItems',
			sitemapLinkActionMethod: 'uiOpenReturns'
		}
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.store-home
 *@package store.views.home
 *@class store-home
 *@viewtemplate ./store/views/home/store-home.tpl.html
 *@viewtemplate ./store/views/home/store-home.header.tpl.html 
 */

angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('/home',{
    	templateUrl: './store/views/home/store-home.tpl.html',
    	controller: 'store.views.home.store-home'
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling shipment Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.list.shipment-list
 *@package store.views.shipment.list
 *@class shipment-list
 *@description Shows shipment list.
 *@modaltemplate ./store/views/shipment/list/shipment-list.tpl.html
 */
 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("mytaskslist", {
			templateUrl: "./store/views/my-tasks/my-tasks-list.tpl.html",
			controller: "store.views.my-tasks.my-tasks-list"
		});
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/*angular.module('store').config(['$stateProvider','$urlRouterProvider',
	function($stateProvider,$urlRouterProvider) {
		$stateProvider.state('ordercapture',{
    	url: '/ordercapture',
		  templateUrl: './store/views/order/order-capture-wizard.tpl.html'
    });
}]);
*/
/**
 *@iscdoc wizardinfo
 *@wizardname store.views.order.order-capture-wizard
 *@package store.views.order
 *@class order-capture-wizard
 *@wizardtemplate init ./store/views/order/order-capture-init.tpl.html
 *@wizardtemplate finish ./store/views/order/order-capture-finish.tpl.html
 *@wizardcontroller	init store.views.order.order-capture-init
 *@wizardcontroller finish store.views.order.order-capture-finish
 *@wizardpage productSearch "./store/views/order/item-search/search-results.tpl.html" "store.views.order.item-search.item-search"
 *@wizardpage addItems "./store/views/order/add-cart/add-items.tpl.html" "store.views.order.add-cart.add-items"
 *@wizardpage cartDetails "./store/views/order/view-cart/view-cart.tpl.html" "store.views.order.view-cart.view-cart"
 *@wizardpage paymentCapture "./store/views/order/payment/order-capture-payment.tpl.html" "store.views.order.payment.order-capture-payment"
 *@description Handles the wizard navigation for 'Order Capture' flow.
 *
 */
angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('ordercapture',{
		/**
		 *@iscdoc wizardconfig
		 *@wizardname store.views.order.order-capture-wizard
		 *@configtype State
		 *@description Sets the state for the 'Order Capture' wizard.
		 *@configdata stateName "ordercapture" The state to transition to
		 *@configdata templateUrl "./store/views/order/order-capture-wizard.tpl.html" Template file to load for state change
		 *@configdata addToHistory "false" The state needs not be considered for 'Back' button handling
		 *
		 */
		  templateUrl: './store/views/order/order-capture-wizard.tpl.html',
		  addToHistory:false
    });
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc wizardinfo
 *@wizardname store.views.order.order-modification-wizard
 *@package store.views.order
 *@class order-modification-wizard
 *@wizardtemplate init ./store/views/order/order-modification-init.tpl.html
 *@wizardtemplate finish ./store/views/order/order-modification-finish.tpl.html
 *@wizardcontroller	init store.views.order.order-modification-init
 *@wizardcontroller finish store.views.order.order-modification-finish
 *@wizardpage productSearch "./store/views/order/item-search/search-results.tpl.html" "store.views.order.item-search.item-search"
 *@wizardpage addItems "./store/views/order/add-cart/add-items.tpl.html" "store.views.order.add-cart.add-items"
 *@wizardpage cartDetails "./store/views/order/view-cart/view-cart.tpl.html" "store.views.order.view-cart.view-cart"
 *@wizardpage paymentCapture "./store/views/order/payment/order-capture-payment.tpl.html" "store.views.order.payment.order-capture-payment"
 *@description Handles the wizard navigation for 'Order Modification' flow.
 *
 */
angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('ordermodification',{
		/**
		 *@iscdoc wizardconfig
		 *@wizardname store.views.order.order-modification-wizard
		 *@configtype State
		 *@description Sets the state for the 'Order Modification' wizard.
		 *@configdata stateName "ordermodification" The state to transition to
		 *@configdata templateUrl "./store/views/order/order-modification-wizard.tpl.html" Template file to load for state change
		 *@configdata addToHistory "false" The state needs not be considered for 'Back' button handling
		 *
		 */
		  templateUrl: './store/views/order/order-modification-wizard.tpl.html',
		  addToHistory:false
    });
}]);


/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58) 
* (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has beendeposited with the U.S. Copyright Office. 
******************************************************************************/
angular.module('store').config(['iscTaskProvider',
	function(iscTaskProvider) {
	
	
	/*var orderAddCommentsTaskConfig = {
			'tasks':[
				
				{

					'taskId':'comments',
					'taskName':'comments',		
					getTask:function(order){
						var task = {};					
						task.taskId = "comments";
						task.taskName = "ordersummary.ACTION_Comments";
						task.isDisabled = false;
						task.isPrimary = false;
						task.isHidden = false;
						task.isDefault = false;
						task.action = ['iscModal','$q',function (iscModal,$q){
							var deferred = $q.defer();
							var coInput = {};
							coInput.Order = order;
							var orderInput = {
								modalInput: function(){
									return coInput;
								}
							};
												
							iscModal.openModal('store.views.order.comments.comments',orderInput).then(function(callBackData){
								if(callBackData.cancelOrderAPIOutput.cancelOrderAPISuccess) {
									var returnData = {'taskName': task.taskId, 'taskAPIOutput': callBackData.cancelOrderAPIOutput};
									deferred.resolve(returnData);
								}
							}.bind(this),
							angular.noop);
							return deferred.promise;
						}];			
						return task;
					}
				
				}
			]
		};

		iscTaskProvider.addTask('ORDER','ORDER_COMMENTS',orderAddCommentsTaskConfig);*/

		
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/*angular.module('store').config(['$stateProvider','$urlRouterProvider',
	function($stateProvider,$urlRouterProvider) {
		$stateProvider.state('ordercapture',{
    	url: '/ordercapture',
		  templateUrl: './store/views/order/return-wizard.tpl.html'
    });
}]);
*/
/**
 *@iscdoc wizardinfo
 *@wizardname store.views.order.return-order-wizard
 *@package store.views.order
 *@class return-order-wizard
 *@wizardtemplate init ./store/views/order/return-init.tpl.html
 *@wizardtemplate finish ./store/views/order/return-finish.tpl.html
 *@wizardcontroller	init store.views.order.return-init
 *@wizardcontroller finish store.views.order.return-finish
 *@wizardpage orderDetails "./store/views/return/sales-order-details/sales-order-details.tpl.html" "store.views.return.sales-order-details.sales-order-details"
 *@wizardpage orderList "./store/views/return/sales-order-list/sales-order-list.tpl.html" "store.views.return.sales-order-list.sales-order-list"
 *@wizardpage itemList "./store/views/return/item-list/return-item-list.tpl.html" "store.views.return.item-list.return-item-list"
 *@wizardpage addReturnItem "../store/views/return/add-return-item/add-return-item.tpl.html" "store.views.return.add-return-item.add-return-item"
 *@wizardpage returnsList "./store/views/return/returns-list/returns-list.tpl.html" "store.views.return.returns-list.returns-list"
 *@wizardpage customerList "./store/views/return/customer-list/customer-list.tpl.html" "store.views.return.customer-list.customer-list"
 *@wizardpage customerDetails "./store/views/return/customer-details/customer-details.tpl.html" "store.views.return.customer-details.customer-details"
 *@wizardpage exchangeItem "./store/views/return/exchange-item/exchange-item.tpl.html" "store.views.return.exchange-item.exchange-item"
 *@wizardpage productSearch "./store/views/return/item-list/exchange-item-list.tpl.html" "store.views.return.item-list.exchange-item-list"
 *@wizardpage addItems "./store/views/return/add-exch-item/add-exchange-item.tpl.html" "store.views.return.add-exch-item.add-exchange-item"
 *@wizardpage payment "./store/views/return/payment/return-payment.tpl.html" "store.views.return.payment.return-payment"
 *@description Handles the wizard navigation for 'Return Order/Products' flow.
 *
 */
angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('returnorder',{
		/**
		 *@iscdoc wizardconfig
		 *@wizardname store.views.order.return-order-wizard
		 *@configtype State
		 *@description Sets the state for the 'Return Order' wizard.
		 *@configdata stateName "returnorder" The state to transition to
		 *@configdata templateUrl "./store/views/order/return-order-wizard.tpl.html" Template file to load for state change
		 *@configdata addToHistory "false" The state needs not be considered for 'Back' button handling
		 *
		 */
		  templateUrl: './store/views/return/return-wizard.tpl.html',
		  addToHistory:false
    });
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('sitemap',{
		  templateUrl: './store/views/sitemap/sitemap.tpl.html',
      controller:'store.views.sitemap.sitemap'
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewName store.views.common.address.addressselectionpopup
 *@package store.views.common.address
 *@class addressSelectionPopup
 *@description Screen config for rendering the list of addresses for Selection in Payment Capture.
 *@modaltemplate ./store/views/common/address/addressselectionpopup.tpl.html
 *  
 */



angular.module('store').config(['iscModalProvider',function(iscModalProvider){
	
	 /**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.common.address.addressselectionpopup
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/common/address/addressselectionpopup.tpl.html" template html to load
	  *@configdata controller "store.views.common.address.addressselectionpopup" controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
	
	var addressSelectionPopupConf = {
			  animation: true,
			  templateUrl: './store/views/common/address/addressselectionpopup.tpl.html',
			  controller:'store.views.common.address.addressselectionpopup',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'address-select-dialog'			  
		};
	
	iscModalProvider.registerModal("store.views.common.address.addressselectionpopup",addressSelectionPopupConf);
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.customer.customerpopup
 *@package store.views.common.customer
 *@class customerpopup
 *@description Screen config for rendering customer list and creation.
 *  
 */



angular.module('store').config(['iscModalProvider',function(iscModalProvider){

    /**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.common.customer.customerpopup
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/common/customer/customerpopup.tpl.html" template html to load
	  *@configdata controller "store.views.common.customer.customerpopup" controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
	
	var customerpopupConf = {
			  animation: true,
			  templateUrl: './store/views/common/customer/customerpopup.tpl.html',
			  controller:'store.views.common.customer.customerpopup',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'customer-dialog'
			  
		};
	
	iscModalProvider.registerModal("store.views.common.customer.customerpopup",customerpopupConf);
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.fulfillment.fulfillmentoptions
 *@package store.views.common.fulfillment
 *@class fulfillmentoptions
 *@description Provides the path to locate Edit Delivery Method/fulfillmentoptions popup.
 *@modaltemplate ./store/views/common/fulfillment/fulfillmentoptions.tpl.html
 */


angular.module('store').config(['iscModalProvider',function(iscModalProvider){

	
	
	iscModalProvider.registerModal("store.views.common.fulfillment.fulfillmentoptions",
		{
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.common.fulfillment.fulfillmentoptions
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/common/fulfillment/fulfillmentoptions.tpl.html" Template html to load
	  *@configdata controller "store.views.common.fulfillment.fulfillmentoptions" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
		
			  animation: true,
			  templateUrl: './store/views/common/fulfillment/fulfillmentoptions.tpl.html',
			  controller:'store.views.common.fulfillment.fulfillmentoptions',
			  size: 'lg',
			  keyboard : true,
			  backdrop : 'static',
			  windowClass: 'fulfillment-options-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.gift.giftoptions
 *@package store.views.common.gift
 *@class giftoptions
 *@description Provides the path to locate giftoptions popup.
 *@modaltemplate ./store/views/common/gift/giftoptions.tpl.html
 */


angular.module('store').config(['iscModalProvider',function(iscModalProvider){

	iscModalProvider.registerModal("store.views.common.gift.giftoptions",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.common.gift.giftoptions
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/common/gift/giftoptions.tpl.html" Template html to load
	  *@configdata controller "store.views.common.gift.giftoptions" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
		
			  animation: true,
			  templateUrl: './store/views/common/gift/giftoptions.tpl.html',
			  controller:'store.views.common.gift.giftoptions',
			  size: 'md',
			  keyboard : true,
			  backdrop : 'static',
			  windowClass: 'gift-options-dialog'
			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@name store.views.common.orderaddress.orderaddresspopup
 *@package store.views.common.orderaddress
 *@class orderaddresspopup
 *@description screen for Add/Edit of addressess at order header/Line level
 *  
 */



angular.module('store').config(['iscModalProvider',function(iscModalProvider){
	
	var orderaddresspopupConf = {
			  animation: true,
			  templateUrl: './store/views/common/orderaddress/orderaddresspopup.tpl.html',
			  controller:'store.views.common.orderaddress.orderaddresspopup',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'order-address-dialog'
			  
		};
	
	iscModalProvider.registerModal("store.views.common.orderaddress.orderaddresspopup",orderaddresspopupConf);
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.priceoverride.priceoverride
 *@package store.views.common.priceoverride
 *@class priceoverride
 *@description Provides the path to locate priceoverride popup.
 *@modaltemplate ./store/views/common/priceoverride/priceoverride.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.common.priceoverride.priceoverride",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.common.priceoverride.priceoverride
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/common/priceoverride/priceoverride.tpl.html" Template html to load
	  *@configdata controller "store.views.common.priceoverride.priceoverride" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
			
			  animation: true,
			  templateUrl: './store/views/common/priceoverride/priceoverride.tpl.html',
			  controller:'store.views.common.priceoverride.priceoverride',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'record-shortage-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.product.product-details-share
 *@package store.views.common.product
 *@class product-details-share
 *@description Provides the path to locate product details share popup.
 *@modaltemplate ./store/views/common/product/product-details-share.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.common.product.product-details-share",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.common.product.product-details-share
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/common/product/product-details-share.tpl.html" Template html to load
	  *@configdata controller "store.views.common.product.product-details-share" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
			
			  animation: true,
			  templateUrl: './store/views/common/product/product-details-share.tpl.html',
			  controller:'store.views.common.product.product-details-share',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'sm',
			  windowClass: 'product-details-share-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.product.product-details
 *@package store.views.common.product
 *@class product-details
 *@description This modal displays Product details.
 *@modaltemplate ./store/views/common/product/product-details.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.common.product.product-details",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.common.product.product-details
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/common/product/product-details.tpl.html" Template html to load
		  *@configdata controller "store.views.common.product.product-details" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/common/product/product-details.tpl.html',
			  controller:'store.views.common.product.product-details',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'product-details-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.shortage.record-shortage
 *@package store.views.common.shortage
 *@class record-shortage
 *@description This modal displays Product details.
 *@modaltemplate ./store/views/common/shortage/record-shortage.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.common.shortage.record-shortage",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.common.shortage.record-shortage
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/common/shortage/record-shortage.tpl.html" Template html to load
		  *@configdata controller "store.views.common.shortage.record-shortage" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/common/shortage/record-shortage.tpl.html',
			  controller:'store.views.common.shortage.record-shortage',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'record-shortage-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.storesearch.storesearch
 *@package store.views.common.storesearch
 *@class storesearch
 *@description provides the path to locate storesearch popup.
 *@modaltemplate ./store/views/common/storesearch/storesearch.tpl.html
 */



angular.module('store').config(['iscModalProvider',function(iscModalProvider){
	
	
	iscModalProvider.registerModal("store.views.common.storesearch.storesearch",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.common.storesearch.storesearch
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/common/storesearch/storesearch.tpl.html" Template html to load
	  *@configdata controller "store.views.common.storesearch.storesearch" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
		
			  animation: true,
			  templateUrl: './store/views/common/storesearch/storesearch.tpl.html',
			  controller:'store.views.common.storesearch.storesearch',
			  size: 'lg',
			  keyboard : true,
			  backdrop : 'static',
			  windowClass: 'store-search-dialog'		  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('customer-details',{
		    templateUrl: './store/views/customer/cust-details/global-customer-details.tpl.html',
			controller:'store.views.customer.cust-details.global-customer-details',
			resourceId:'',
			addToHistory:true
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('customer-list',{
		    templateUrl: './store/views/customer/cust-list/global-customer-list.tpl.html',
			controller:'store.views.customer.cust-list.global-customer-list',
			resourceId:'',
			addToHistory:true
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('customerprofilewizard',{
		/**
		 *@iscdoc wizardconfig
		 *@wizardname store.views.customer.customer-profile-wizard
		 *@configtype State
		 *@description Sets the state for the 'Customer Profile' wizard.
		 *@configdata stateName "customerprofilewizard" The state to transition to
		 *@configdata templateUrl "./store/views/cusotmer/customer-profile-wizard.tpl.htm" Template file to load for state change
		 *@configdata resourceId "WSC000048" Resource permission for the wizard
         *@configdata addToHistory "true" The state needs not be considered for 'Back' button handling
		 *
		 */
        /**
         *@iscdoc wizardinfo
         *@wizardname store.views.customer.customer-profile-wizard
         *@package store.views.customer
         *@class customer-profile-wizard
         *@wizardtemplate init ./store/views/customer/customer-profile/customer-profile-init.tpl.html
         *@wizardtemplate finish ./store/views/customer/customer-profile/customer-profile-finish.tpl.html
         *@wizardcontroller	init store.views.customer.customer-profile.customer-profile-init
         *@wizardcontroller finish store.views.customer.customer-profile.customer-profile-finish
         *@wizardpage customerdetails "./store/views/customer/customer-profile/customer-profile-details.tpl.html" "store.views.customer.customer-profile.customer-profile-details"
         *@wizardpage orderhistory "./store/views/customer/customer-profile/customer-profile-order-history.tpl.html" "store.views.customer.customer-profile.customer-profile-order-history"
         *@description Handles the wizard navigation for 'Customer profile' flow.
         *
         */
		  templateUrl: './store/views/customer/customer-profile/customer-profile-wizard.tpl.html',
          resourceId:'WSC000047',
		  addToHistory:true
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.customer.customer-profile.product-details
 *@package store.views.customer.customer-profile
 *@class product-details
 *@description This modal displays Product details.
 *@modaltemplate ./store/views/customer/customer-profile/product-details.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.customer.customer-profile.product-details",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.customer.customer-profile.product-details
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/common/product/product-details.tpl.html" Template html to load
		  *@configdata controller "store.views.common.product.product-details" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/customer/customer-profile/product-details.tpl.html',
			  controller:'store.views.customer.customer-profile.product-details',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'product-details-dialog',
			  ariaLabelledBy: 'modalTitle'
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.customer.notes.customernotes
 *@package store.views.customer.notes
 *@class customernotes
 *@description Adds notes to the customer profile.
 *@modaltemplate ./store/views/customer/notes/notes.tpl.html
 */


angular.module('store').config(['iscModalProvider',function(iscModalProvider){

	iscModalProvider.registerModal("store.views.customer.notes.customernotes",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.customer.notes.customernotes
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/customer/notes/customernotes.tpl.html" Template html to load
	  *@configdata controller "store.views.customer.notes.customernotes" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
		
			  animation: true,
			  templateUrl: './store/views/customer/notes/customernotes.tpl.html',
			  controller:'store.views.customer.notes.customernotes',
			  size: 'md',
			  keyboard : true,
			  backdrop : 'static',
			  windowClass: 'comment-dialog',
			  ariaLabelledBy: 'modalTitle'
			  
		});
	
}]);


/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.common.customer-pickup-portlet
 *@package store.views.home.common
 *@class customer-pickup-portlet
 *@viewtemplate ./store/views/home/common/customer-pickup-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('customerpickupportlet', {
		templateUrl: './store/views/home/common/customer-pickup-portlet.tpl.html',
		controller: 'store.views.home.common.customer-pickup-portlet',
		sequenceNumber: 15,//Defined post Q22017. Has same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000068',
		personaConfig: {
			personaName: 'Order_Fulfillment',
			personaSequenceNumber: 15,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/common/customer-pickup-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.common.customer-pickup-portlet-mini'
		},
		// optional.
		sitemapConfig: {
			sitemapTitleKey: 'pickupportlet.TITLE_CustomerPickup',
			sitemapLinkKey: 'pickupportlet.ACTION_CustomerPickup',
			sitemapLinkActionMethod: 'uiPickupOrders'
		}
    });
}]);

/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.common.moretasks-portlet
 *@package store.views.home.common
 *@class moretasks-portlet
 *@viewtemplate ./store/views/home/common/moretasks-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('moretasksportlet', {
		templateUrl: './store/views/home/common/moretasks-portlet.tpl.html',
		controller: 'store.views.home.common.moretasks-portlet',
		sequenceNumber: -100,//Defined post Q22017. Has same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: '',//Ignore.
		personaConfig: {
			//Ignore, There is no mini view & no personaName or personaSequenceNumber.
			personaName: '',
			personaSequenceNumber: -100,//Ignore, it is dynamic - not calculated but always 2nd or 3rd position.
			miniViewTemplateUrl: '',//Ignore, not of any use here.
			miniViewController: ''//Ignore, not of any use here.
		},
		childPortletsArray: []//Ignore, it is dynamic - All portlets that are 2nd or 3rd onwards will come here. Evaluated in js and not passed in html and therefore to portlet directive.
    });
}]);

/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.common.mytasks-portlet
 *@package store.views.home.common
 *@class mytasks-portlet
 *@viewtemplate ./store/views/home/common/mytasks-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('mytasksportlet', {
		templateUrl: './store/views/home/common/mytasks-portlet.tpl.html',
		controller: 'store.views.home.common.mytasks-portlet',
		sequenceNumber: 30,//Defined post Q22017. Has same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000071',
		personaConfig: {
			personaName: 'Order_Fulfillment',
			personaSequenceNumber: 30,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/common/mytasks-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.common.mytasks-portlet-mini'
		},
		// optional.
		sitemapConfig: {
			sitemapTitleKey: 'mytasksportlet.TITLE_MyTasks',
			sitemapLinkKey: 'mytasksportlet.ACTION_MyTasks',
			sitemapLinkActionMethod: 'uiViewMyTasks'
		}
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.home.manager-dashboard.manager-dashboard
 *@package store.views.home.manager-dashboard
 *@class manager-dashboard
 *@description Shows manager dashboard.
 *@modaltemplate ./store/views/home/manager-dashboard/manager-dashboard.tpl.html
 */

angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('/manager-dashboard',{
    	templateUrl: './store/views/home/manager-dashboard/manager-dashboard.tpl.html',
    	controller: 'store.views.home.manager-dashboard.manager-dashboard'
    });
}]);
/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.order-fulfillment.pack-portlet
 *@package store.views.home.order-fulfillment
 *@class pack-portlet
 *@viewtemplate ./store/views/home/order-fulfillment/pack-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('packportlet', {
		templateUrl: './store/views/home/order-fulfillment/pack-portlet.tpl.html',
		controller: 'store.views.home.order-fulfillment.pack-portlet',
		sequenceNumber: 10,//Defined post Q22017. Has same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000062',
		personaConfig: {
			personaName: 'Order_Fulfillment',
			personaSequenceNumber: 10,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/order-fulfillment/pack-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.order-fulfillment.pack-portlet-mini'
		},
		// optional.
		sitemapConfig: {
			sitemapTitleKey: 'packportlet.TITLE_PackOrders',
			sitemapLinkKey: 'packportlet.ACTION_PackOrders',
			sitemapLinkActionMethod: 'uiPackOrders'
		}
    });
}]);

/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.order-fulfillment.pick-portlet
 *@package store.views.home.order-fulfillment
 *@class pick-portlet
 *@viewtemplate ./store/views/home/order-fulfillment/pick-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('pickportlet', {
		templateUrl: './store/views/home/order-fulfillment/pick-portlet.tpl.html',
		controller: 'store.views.home.order-fulfillment.pick-portlet',
		sequenceNumber: 5,//Defined post Q22017. Has same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000053|WSC000057|WSC000058',
		personaConfig: {
			personaName: 'Order_Fulfillment',
			personaSequenceNumber: 5,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/order-fulfillment/pick-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.order-fulfillment.pick-portlet-mini'
		},
		// optional. Can be array too.
		sitemapConfig: [
			{
				sitemapTitleKey: 'pickportlet.TITLE_PickOrders',
				sitemapLinkKey: 'pickportlet.ACTION_PickOrders',
				sitemapLinkActionMethod: 'uiPickOrders',
				resourceId: 'WSC000057|WSC000058'
			},{
				sitemapTitleKey: 'pickportlet.TITLE_PickOrders',
				sitemapLinkKey: 'pickportlet.ACTION_BATCHPICK',
				sitemapLinkActionMethod: 'uiBatchPickOrders',
				resourceId: 'WSC000053'
			}
		]
    });
}]);

/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/
/**
 *@iscdoc viewrootconfig
 *@viewname store.views.home.order-fulfillment.ship-portlet
 *@package store.views.home.order-fulfillment
 *@class ship-portlet
 *@viewtemplate ./store/views/home/order-fulfillment/ship-portlet.tpl.html
 */

angular.module('store').config(['iscPortletPvdrProvider', function(iscPortletPvdrProvider) {
	iscPortletPvdrProvider.registerPortlet('shipportlet', {
		templateUrl: './store/views/home/order-fulfillment/ship-portlet.tpl.html',
		controller: 'store.views.home.order-fulfillment.ship-portlet',
		sequenceNumber: 25,//Defined post Q22017. Has same number as personaSequenceNumber. Can skip for custom portlets with personaConfig.
		showPortlet: true,
		resourceId: 'WSC000067',
		personaConfig: {
			personaName: 'Order_Fulfillment',
			personaSequenceNumber: 25,//these are in multiples of 5.
			miniViewTemplateUrl: './store/views/home/order-fulfillment/ship-portlet-mini.tpl.html',
			miniViewController: 'store.views.home.order-fulfillment.ship-portlet-mini'
		},
		// optional.
		sitemapConfig: {
			sitemapTitleKey: 'shipportlet.TITLE_ShipOrders',
			sitemapLinkKey: 'shipportlet.ACTION_ShipPackagess',
			sitemapLinkActionMethod: 'uiShipPackages'
		}
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').config(['iscStateProvider',
                                function(iscStateProvider){
		
		iscStateProvider.state('customer-appeasement', {
			templateUrl: './store/views/order/appeasement/customer-appeasement.tpl.html',
			controller: 'store.views.order.appeasement.customer-appeasement'
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.order.cancel.cancelorder
 *@package store.views.order.cancel
 *@class cancelorder
 *@description Cancels the order created.
 *@modaltemplate ./store/views/order/cancel/cancelorder.tpl.html
 */


angular.module('store').config(['iscModalProvider',function(iscModalProvider){

	iscModalProvider.registerModal("store.views.order.cancel.cancelorder",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.order.cancel.cancelorder
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/order/cancel/cancelorder.tpl.html" Template html to load
	  *@configdata controller "store.views.order.cancel.cancelorder" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
		
			  animation: true,
			  templateUrl: './store/views/order/cancel/cancelorder.tpl.html',
			  controller:'store.views.order.cancel.cancelorder',
			  size: 'md',
			  keyboard : true,
			  backdrop : 'static',
			  windowClass: 'cancel-order-dialog'
			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.order.cancel.cancelorderline
 *@package store.views.order.cancel
 *@class cancelorderline
 *@description Cancels an order line.
 *@modaltemplate ./store/views/order/cancel/cancelorderline.tpl.html
 */


angular.module('store').config(['iscModalProvider',function(iscModalProvider){

	iscModalProvider.registerModal("store.views.order.cancel.cancelorderline",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.order.cancel.cancelorderline
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/order/cancel/cancelorderline.tpl.html" Template html to load
	  *@configdata controller "store.views.order.cancel.cancelorderline" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
		
			  animation: true,
			  templateUrl: './store/views/order/cancel/cancelorderline.tpl.html',
			  controller:'store.views.order.cancel.cancelorderline',
			  size: 'md',
			  keyboard : true,
			  backdrop : 'static',
			  windowClass: 'cancel-order-dialog'
			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.order.cancel.cancelorder
 *@package store.views.order.cancel
 *@class cancelorder
 *@description Cancels the order created.
 *@modaltemplate ./store/views/order/cancel/cancelorder.tpl.html
 */


angular.module('store').config(['iscModalProvider',function(iscModalProvider){

	iscModalProvider.registerModal("store.views.order.comments.comments",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.order.cancel.cancelorder
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/order/cancel/cancelorder.tpl.html" Template html to load
	  *@configdata controller "store.views.order.cancel.cancelorder" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
		
			  animation: true,
			  templateUrl: './store/views/order/comments/comments.tpl.html',
			  controller:'store.views.order.comments.comments',
			  size: 'md',
			  keyboard : true,
			  backdrop : 'static',
			  windowClass: 'comment-dialog'
			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.order.list.global-order-list
 *@package store.views.order.list
 *@class global-order-list
 *@description Used to display a list of orders.
 *@modaltemplate ./store/views/order/list/global-order-list.tpl.html
 */

angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('order-list',{
		    templateUrl: './store/views/order/list/global-order-list.tpl.html',
			controller:'store.views.order.list.global-order-list',
			resourceId:'',
			addToHistory:true
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').config(['iscStateProvider','iscTaskProvider',
	function(iscStateProvider,iscTaskProvider) {
		iscStateProvider.state('ordersummary',{
			templateUrl: './store/views/order/order-summary/order-summary.tpl.html',
			controller:'store.views.order.order-summary.order-summary'
    });
	
	var orderSummaryTaskConfig = {
		'tasks':[
			{
				'taskId':'cancelOrder',
				'taskName':'Cancel Order',		
				getTask:function(order){
					var task = {};					
					task.taskId = "cancelOrder";
					task.taskName = "ordersummary.ACTION_CancelOrder";
					task.isDisabled = order.IsCancellationAllowed =='N';
					task.isPrimary = false;
					task.isHidden = false;
					task.isDefault = false;
					task.resourcePermission = 'WSC000035';
					task.action = ['iscModal','$q',function (iscModal,$q){
						var deferred = $q.defer();
						var coInput = {};
						coInput.Order = order;
						var cancelOrderInput = {
							modalInput: function(){
								return coInput;
							}
						};
											
						iscModal.openModal('store.views.order.cancel.cancelorder',cancelOrderInput).then(function(callBackData){
							if(callBackData.cancelOrderAPIOutput.cancelOrderAPISuccess) {
								var returnData = {'taskName': task.taskId, 'taskAPIOutput': callBackData.cancelOrderAPIOutput};
								deferred.resolve(returnData);
							}
						}.bind(this),
						angular.noop);
						return deferred.promise;
					}];	
					
					
						if(order.DraftOrderFlag =='Y')
							task.isHidden= true;
						else 
							task.isHidden= false;
						
					
					return task;
				}
			}
			
		]
	};
	
	
	   
	  var orderSummaryAppeasementTaskConfig = {
			'tasks':[
				{
					'taskId':'appeaseCustomer',
					'taskName':'Appease Customer',		
					getTask:function(order){
						var task = {};					
						task.taskId = "appeaseCustomer";
						task.taskName = "customerappeasement.ACTION_Appease_Customer";
						task.isDisabled = order.IsAppeasementAllowed =='N';
						task.isPrimary = false;
						task.isHidden = false;
						task.isDefault = false;
						task.resourcePermission = 'WSC000054';
						task.action = ['iscState','$q',function (iscState,$q){
							var deferred = $q.defer();
							var appeaseInput = {};
							appeaseInput.Order = order;
							iscState.goToState('customer-appeasement',{orderInput:appeaseInput,showBackLink:true},{});
							return deferred.promise;
						}];	
							
						
						return task;
					}
				}
				
			]
		};
	
	iscTaskProvider.addTask('ORDER','APPEASE_CUSTOMER',orderSummaryAppeasementTaskConfig);

	iscTaskProvider.addTask('ORDER','CANCEL_ORDER',orderSummaryTaskConfig);
	
	
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.receiving.notes.shipment-notes
 *@package store.views.receiving.notes
 *@class shipment-notes
 *@description Adds note to a shipment and displays the existing notes.
 *@modaltemplate ./store/views/receiving/notes/shipment-notes.tpl.html
 */


angular.module('store').config(['iscModalProvider',function(iscModalProvider){

	iscModalProvider.registerModal("store.views.receiving.notes.shipment-notes",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.receiving.notes.shipment-notes
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/receiving/notes/shipment-notes.tpl.html" Template html to load
	  *@configdata controller "store.views.receiving.notes.shipment-notes" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
		
			  animation: true,
			  templateUrl: './store/views/receiving/notes/shipment-notes.tpl.html',
			  controller:'store.views.receiving.notes.shipment-notes',
			  size: 'md',
			  keyboard : true,
			  backdrop : 'static',
			  windowClass: 'comment-dialog',
			  ariaLabelledBy: 'modalTitle'
			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.receiving.receive-shipment
 *@package store.views.receiving
 *@class receive-shipment
 *@description Used to display a list of containers/products to be received.
 *@modaltemplate ./store/views/receiving/receive-shipment.tpl.html
 */

angular.module('store').config(['iscStateProvider','iscTaskProvider',
	function(iscStateProvider,iscTaskProvider) {
		iscStateProvider.state('receive-shipment',{
			
			/**
			 *@iscdoc wizardconfig
			 *@wizardname store.views.receiving.receive-shipment-wizard
			 *@configtype State
			 *@description Sets the state for the 'Receive Shipment' wizard.
			 *@configdata stateName "receive-shipment" The state to transition to
			 *@configdata templateUrl "./store/views/receiving/receive-shipment-wizard.tpl.html" Template file to load for state change
			 *@configdata addToHistory "false" The state needs not be considered for 'Back' button handling
			 *
			 */
			
		    templateUrl: './store/views/receiving/receive-shipment/receive-shipment-wizard.tpl.html',
			resourceId:'WSC000041',
			addToHistory:false
		});
		
		var shipmentReceiveAllTaskConfig = {
				'tasks':[
					{
						'taskId':'shipmentReceiveAll',
						'taskName':'Receive All shipment',		
						getTask:function(shipment){
							var task = {};					
							task.taskId = "shipmentReceiveAll";
							task.taskName = "instorereceiving.ACTION_ReceiveAll";
							task.isDisabled = false;
							task.isPrimary = false;
							task.isHidden = false;
							task.isDefault = false;
							task.resourcePermission = 'WSC000045';
							task.action = ['iscModal','$q',function (iscModal,$q){
								var deferred = $q.defer();
								var tempShipment = {};
								tempShipment.Shipment = shipment;
								var shipmentReceiveAllInput = {
									modalInput: function(){
										return tempShipment;
									}
								};
													
								iscModal.openModal('store.views.receiving.receive-shipment.common.receive-full.receive-full-shipment',shipmentReceiveAllInput).then(function(callBackData){
									if(callBackData.receiveOrderAPICallBack.apiSuccess) {
										var returnData = {'taskName': task.taskId, 'taskAPIOutput': callBackData.receiveOrderAPICallBack.apiOutput};
										deferred.resolve(returnData);
									}
								}.bind(this),
								angular.noop);
								return deferred.promise;
							}];	
							
							return task;
						}
					}
					
				]
			};

			iscTaskProvider.addTask('RECEIVE_SHIPMENT','RECEIVE_ALL_SHIPMENT',shipmentReceiveAllTaskConfig);
			
		}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling shipment Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.receiving.receiving-shipment-list.receiving-shipment-list
 *@package store.views.receiving.receiving-shipment-list
 *@class receiving-shipment-list
 *@description Shows shipment list for receiving flow.
 *@modaltemplate ./store/views/receiving/receiving-shipment-list/receiving-shipment-list.tpl.html
 */
 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("receivingShipmentList", {
			templateUrl: "./store/views/receiving/receiving-shipment-list/receiving-shipment-list.tpl.html",
			controller: "store.views.receiving.receiving-shipment-list.receiving-shipment-list"
		});
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling shipment Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.receiving.receiving-shipment-summary.receiving-shipment-summary
 *@package store.views.receiving.receiving-shipment-summary
 *@class receiving-shipment-summary
 *@description Shows shipment summary for receiving flow.
 *@modaltemplate ./store/views/receiving/receiving-shipment-summary/receiving-shipment-summary.tpl.html
 */
 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("receivingShipmentSummary", {
			templateUrl: "./store/views/receiving/receiving-shipment-summary/receiving-shipment-summary.tpl.html",
			controller: "store.views.receiving.receiving-shipment-summary.receiving-shipment-summary"
		});
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('returnsummary',{
		  templateUrl: './store/views/return/return-summary/return-summary.tpl.html',
      controller:'store.views.return.return-summary.return-summary'
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



angular.module('store').config(['iscTaskProvider',
	function(iscTaskProvider) {
		var backroomPickRelatedTasksConfig = {
		'tasks':[
				{
					'taskId':'performBackroomPick',
					'taskName':'Perform Backroom Pick',		
					getTask:function(shipmentModel,relatedTaskMode){
						
						if(shipmentModel.Status) {
							var task = {};					
							task.taskId = "performBackroomPick";
							task.isPrimary = false;
							task.isDisabled = true;
							task.sequence = 10;
							var shipNode = (shipmentModel.ShipNode.ShipNode == null) ? shipmentModel.ShipNode : shipmentModel.ShipNode.ShipNode;
							var currentStoreName = iscCore.getFromContext("storeName");
							
							var allowedTransactionList = [];
							if(shipmentModel.AllowedTransactions && shipmentModel.AllowedTransactions.Transaction) {
								var allowedTransactions = shipmentModel.AllowedTransactions.Transaction;								
								for(i=0;i<allowedTransactions.length;i++){
									allowedTransactionList.push(allowedTransactions[i].Tranid);
								}
							}
							
							
							if(shipmentModel.DeliveryMethod) {
								var deliveryMethod = shipmentModel.DeliveryMethod;
								if(deliveryMethod == "SHP") {
									task.resourcePermission = "WSC000058";
								} else {
									task.resourcePermission = "WSC000057";
								}
							}
							
							if(currentStoreName == shipNode && shipmentModel.Status) {
								var shipmentStatus = shipmentModel.Status.Status?shipmentModel.Status.Status:shipmentModel.Status;
								
								if(allowedTransactionList.length > 0 && (allowedTransactionList.indexOf("YCD_BACKROOM_PICK_IN_PROGRESS") > -1 || allowedTransactionList.indexOf("YCD_BACKROOM_PICK") > -1 || allowedTransactionList.indexOf("YCD_BACKROOM_PICK_IN_PROGRESS.0006") > -1 || allowedTransactionList.indexOf("YCD_BACKROOM_PICK.0006") > -1)){
									if(shipmentStatus.match("1100.70.06.10") || shipmentStatus.match("1100.70.06.20") ) {
										task.isDisabled = false;
										task.isPrimary = true;
									}
								}
								
								if(shipmentStatus.match("1100.70.06.20")) {
									task.taskName = "shipmentsummary.ACTION_ContinueBackroomPick";
								} else if(shipmentStatus.match("1100.70.06.10")) {
									task.taskName = "shipmentsummary.ACTION_StartBackroomPick";
								} else {
									task.taskName = "shipmentsummary.ACTION_StartBackroomPick";
								}
							}
							
							
							task.isHidden = false;
							task.isDefault = false;
							
							task.action = ['iscState','$timeout','$q',function (iscState,$timeout,$q){
								var deferred = $q.defer();
								$timeout(function(){
									var returnData = {'taskName': task.taskId, 'taskAPIOutput': {}};
									deferred.resolve(returnData);
								},0);
								
								iscState.goToState("backroomPickWizard", {
									input: {
										Shipment: {
											ShipmentKey: shipmentModel.ShipmentKey
										}
									}
								}, {});
								
								return deferred.promise;
							}];			
							return task;
						}
					}
				},
				
				{
					'taskId':'assignStagingLocation',
					'taskName':'Assign Staging Location',		
					getTask:function(shipmentModel){
						
						if(shipmentModel.Status) {
							var task = {};					
							task.taskId = "assignStagingLocation";
							task.taskName = "shipmentsummary.ACTION_AssignStagingLocation";
							
							var shipmentStatus = shipmentModel.Status.Status?shipmentModel.Status.Status:shipmentModel.Status;
								
							if(shipmentStatus.match("1100.70.06.20") || shipmentStatus.match("1100.70.06.30") || shipmentStatus.match("1100.70.06.50") ) {
								task.isDisabled = false;
							} else {
								task.isDisabled = true;
							}
							
							task.isPrimary = false;
							task.isHidden = false;
							task.isDefault = false;
							task.ruleName = "enableStagingLocation";
                            task.sequence = 20;
							task.action = ['iscModal','$timeout','$q',function (iscModal,$timeout,$q){
								var deferred = $q.defer();
								
								var popInput = {};
								popInput.shipment = {};
								popInput.shipment.Shipment = {};
								popInput.shipment.Shipment = shipmentModel;

				    			var stagingLocationPopupInput = {
									 modalInput: function(){
										return popInput;
									}   

								};

				    			iscModal.openModal('store.views.shipment.common.staging-location.staging-location',stagingLocationPopupInput,{}).then(function(callBackData){
				    				if(callBackData.data !== null && callBackData.data !== undefined){
										shipmentModel.HoldLocation = callBackData.data.StagingLocation;
										var returnData = {'taskName': task.taskId, 'taskAPIOutput': shipmentModel};
										deferred.resolve(returnData);
				    				}
				    			});
								
								return deferred.promise;
							}];	
							return task;
						}
					}
				}
				
			]
		};
		
	iscTaskProvider.addTask('SHIPMENT','BACKROOM_PICK_RT',backroomPickRelatedTasksConfig);
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/*angular.module('store').config(['$stateProvider','$urlRouterProvider',
	function($stateProvider,$urlRouterProvider) {
		$stateProvider.state('ordercapture',{
    	url: '/ordercapture',
		  templateUrl: './store/views/shipment/batchpick/batchpick-wizard.tpl.html'
    });
}]);
*/
/**
 *@iscdoc wizardinfo
 *@wizardname store.views.shipment.batchpick.batchpick-wizard
 *@package store.views.shipment.batchpick
 *@class batchpick-wizard
 *@wizardtemplate init ./store/views/shipment/batchpick/batchpick-init.tpl.html
 *@wizardtemplate finish ./store/views/shipment/batchpick/batchpick-finish.tpl.html
 *@wizardcontroller	init store.views.shipment.batchpick.batchpick-init
 *@wizardcontroller finish store.views.shipment.batchpick.batchpick-finish
 *@wizardpage batchlist "./store/views/shipment/batchpick/batchlist/batchlist.tpl.html" "store.views.shipment.batchpick.batchlist.batchlist"
 *@description Handles the wizard navigation for 'Batch Pick' flow.
 *
 */
angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('batchpick',{
		/**
		 *@iscdoc wizardconfig
		 *@wizardname store.views.shipment.batchpick.batchpick-wizard
		 *@configtype State
		 *@description Sets the state for the 'Batch Pick' wizard.
		 *@configdata stateName "batchpick" The state to transition to
		 *@configdata templateUrl "./store/views/shipment/batchpick/batchpick-wizard.tpl.html" Template file to load for state change
		 *@configdata addToHistory "false" The state needs not be considered for 'Back' button handling
		 *
		 */
		  templateUrl: './store/views/shipment/batchpick/batchpick-wizard.tpl.html',
		  addToHistory:false
    });
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/




angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('shipmentConfirmDetails',{
		    templateUrl: './store/views/shipment/confirm/shipment-confirm-detail.tpl.html',
			controller:'store.views.shipment.confirm.shipment-confirm',
			addToHistory:true
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.list.shipment-list
 *@package store.views.shipment.list
 *@class shipment-list
 *@description Shows shipment list.
 *@modaltemplate ./store/views/shipment/list/shipment-list.tpl.html
 */
 
 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("shipmentConfirmList", {
			templateUrl: "./store/views/shipment/confirm/shipment-confirm-list.tpl.html",
			controller: "store.views.shipment.confirm.shipment-confirm-list"
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/




angular.module('store').config(['iscTaskProvider',
	function(iscTaskProvider) {
		var packRelatedTasksConfig = {
		'tasks':[
				{
					'taskId':'performPack',
					'taskName':'Perform Pack',		
					getTask:function(shipmentModel,relatedTaskMode){
						
						if(shipmentModel.Status) {
							var task = {};					
							task.taskId = "performPack";
							task.isPrimary = false;
							task.isDisabled = true;
                            task.sequence = 50;
							
							var shipNode = (shipmentModel.ShipNode.ShipNode == null) ? shipmentModel.ShipNode : shipmentModel.ShipNode.ShipNode;
							var currentStoreName = iscCore.getFromContext("storeName");
							
							var allowedTransactions = shipmentModel.AllowedTransactions.Transaction;
							var allowedTransactionList = [];
							for(i=0;i<allowedTransactions.length;i++){
								allowedTransactionList.push(allowedTransactions[i].Tranid);
							}
							
							task.resourcePermission = "WSC000062";
							
							if(shipmentModel.DeliveryMethod == 'SHP') {
								task.isHidden = false;
							} else {
								task.isHidden = true;
							}
							task.isDefault = false;
							
							if(currentStoreName == shipNode && shipmentModel.Status) {
								var shipmentStatus = shipmentModel.Status.Status?shipmentModel.Status.Status:shipmentModel.Status;
								
								if((allowedTransactionList.indexOf("YCD_UNDO_BACKROOM_PICK") > -1 && allowedTransactionList.indexOf("PACK_SHIPMENT_COMPLETE") > -1) || (allowedTransactionList.indexOf("PACK_SHIPMENT_COMPLETE") > -1 && allowedTransactionList.indexOf("UNDO_PACK_SHMT_COMPLETE") > -1 ) ||(allowedTransactionList.indexOf("YCD_UNDO_BACKROOM_PICK.0006") > -1 && allowedTransactionList.indexOf("PACK_SHIPMENT_COMPLETE.0006") > -1) ||((allowedTransactionList.indexOf("PACK_SHIPMENT_COMPLETE.0006") > -1 && allowedTransactionList.indexOf("UNDO_PACK_SHP_CMP.0006") > -1 ))){
									if(shipmentStatus.match("1100.70.06.50") || shipmentStatus.match("1100.70.06.70") ) {
										task.isDisabled = false;
										task.isPrimary = true;
									}
								}
								
								if(shipmentStatus.match("1100.70.06.50")) {
									task.taskName = "shipmentsummary.ACTION_StartPackShipment";
								} else if(shipmentStatus.match("1100.70.06.70")) {
									task.taskName = "shipmentsummary.ACTION_ContinuePackShipment";
								} else {
									if(shipmentModel.DeliveryMethod == 'SHP') {
										task.taskName = "shipmentsummary.ACTION_StartPackShipment";
									}
								}
							}
							
							task.action = ['iscState','$timeout','$q',function (iscState,$timeout,$q){
								var deferred = $q.defer();
								$timeout(function(){
									var returnData = {'taskName': task.taskId, 'taskAPIOutput': {}};
									deferred.resolve(returnData);
								},0);
								
								iscState.goToState("containerpack", {
									input: {
										Shipment: {
											ShipmentKey: shipmentModel.ShipmentKey
										}
									}
								}, {});
								
								return deferred.promise;
							}];			
							return task;
						}
					}
				},
				
				/*{
					'taskId':'printPackSlip',
					'taskName':'Print Pack Slip',		
					getTask:function(shipmentModel,relatedTaskMode){
						if(shipmentModel.Status) {
							var task = {};
							task.taskId = "printPackSlip";
							task.isPrimary = false;
							task.isDisabled = true;
							task.taskName = "shipmentsummary.ACTION_PrintPackSlip";
							task.resourcePermission = "WSC000064";
							
							var shipNode = (shipmentModel.ShipNode.ShipNode == null) ? shipmentModel.ShipNode : shipmentModel.ShipNode.ShipNode;
							var currentStoreName = iscCore.getFromContext("storeName");
							
							if(shipmentModel.DeliveryMethod == 'SHP') {
								task.isHidden = false;
							} else {
								task.isHidden = true;
							}
							task.isDefault = false;
							
							if(currentStoreName == shipNode && shipmentModel.Status) {
								var shipmentStatus = shipmentModel.Status.Status?shipmentModel.Status.Status:shipmentModel.Status;
								if(shipmentModel.DeliveryMethod == 'SHP' && shipmentStatus.match("1300")) {
									task.isDisabled = false;
								}
								
							}
							
							task.action = ['iscMashup','$timeout','$q','iscPrint','iscModal',function (iscMashup,$timeout,$q,iscPrint,iscModal){
								var deferred = $q.defer();
								var printPackSlipInput = {Shipment:{ShipmentKey:shipmentModel.ShipmentKey}};
								
								iscMashup.callSimpleMashup(null,"store.views.shipment.containerpack.print_packSlip",printPackSlipInput,{}).then(function(response){
									var printPackSlipOutput = response.MashupRefs.MashupRef[0].Output;
									if(!iscCore.isVoid(printPackSlipOutput.Output.out)){
										$timeout(function(){
											iscPrint.printHtmlOutput(printPackSlipOutput);
											var returnData = {'taskName': task.taskId, 'taskAPIOutput': response};
											deferred.resolve(returnData);
										},0);
									}
									else{
										iscModal.showErrorMessage("containerlist.Message_Print_failure");
									}
								},angular.noop								
								);
								return deferred.promise;
							}];
							
							return task;
						}
						
					}
				},
				
				{
					'taskId':'unpackShipment',
					'taskName':'Unpack Shipment',		
					getTask:function(shipmentModel,relatedTaskMode){
						if(shipmentModel.Status) {
							var task = {};
							task.taskId = "unpackShipment";
							task.isPrimary = false;
							task.isDisabled = true;
							task.taskName = "shipmentsummary.ACTION_UnpackPackage";
							task.resourcePermission = "WSC000063";
							
							var shipNode = (shipmentModel.ShipNode.ShipNode == null) ? shipmentModel.ShipNode : shipmentModel.ShipNode.ShipNode;
							var currentStoreName = iscCore.getFromContext("storeName");
							
							if(shipmentModel.DeliveryMethod == 'SHP') {
								task.isHidden = false;
							} else {
								task.isHidden = true;
							}
							task.isDefault = false;
							
							if(currentStoreName == shipNode && shipmentModel.Status) {
								var shipmentStatus = shipmentModel.Status.Status?shipmentModel.Status.Status:shipmentModel.Status;
								if(shipmentModel.DeliveryMethod == 'SHP' && (shipmentStatus.match("1300") || shipmentStatus.match("1100.70.06.70"))) {
									task.isDisabled = false;
								}
								
							}
							
							task.action = ['iscState','$timeout','$q',function (iscState,$timeout,$q){
								var deferred = $q.defer();
								$timeout(function(){
									var returnData = {'taskName': task.taskId, 'taskAPIOutput': {}};
									deferred.resolve(returnData);
								},0);
								
								iscState.goToState("container-unpack", {
									input: {
										Shipment: {
											ShipmentKey: shipmentModel.ShipmentKey
										}
									}
								}, {});
								
								return deferred.promise;
							}];
							
							return task;
						}
						
					}
				}*/
				
			]
		};

	iscTaskProvider.addTask('SHIPMENT','PACK_RT',packRelatedTasksConfig);
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/




angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('containerpack',{
		/**
		 *@iscdoc wizardconfig
		 *@wizardname store.views.shipment.containerpack.containerpack-wizard
		 *@configtype State
		 *@description Sets the state for the 'Pack Shipment' wizard.
		 *@configdata stateName "containerpack" The state to transition to
		 *@configdata templateUrl "./store/views/shipment/containerpack/containerpack-wizard.tpl.html" Template file to load for state change
		 *@configdata addToHistory "false" The state needs not be considered for 'Back' button handling
		 *
		 */
		  templateUrl: './store/views/shipment/containerpack/containerpack-wizard.tpl.html',
		  addToHistory:false
    });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/





/**
 *@iscdoc viewrootconfig
 *@viewname store.views.shipment.pack.extn-pack-search-list
 *@package store.views.shipment.pack
 *@class extn-pack-search-list
 *@viewtemplate ./store/views/shipment/pack/extn-pack-search-list.tpl.html
 */

angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('extn-pack-search-list',{
		    templateUrl: './store/views/shipment/containerpack/extn-pack-search-list.tpl.html',
			controller:'store.views.shipment.containerpack.extn-pack-search-list',
			resourceId:'WSC000019',
			addToHistory:true
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/





/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.containerunpack.container-unpack-reason
 *@package store.views.shipment.containerunpack
 *@class container-unpack-reason
 *@description This modal displays Product details.
 *@modaltemplate ./store/views/shipment/containerunpack/container-unpack-reason.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.shipment.containerunpack.container-unpack-reason",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.shipment.containerunpack.container-unpack-reason
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/shipment/containerunpack/container-unpack-reason.tpl.html" Template html to load
		  *@configdata controller "store.views.shipment.containerunpack.container-unpack-reason" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/shipment/containerunpack/container-unpack-reason.tpl.html',
			  controller:'store.views.shipment.containerunpack.container-unpack-reason',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'sm',
			  windowClass: 'container-unpack-reason'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/




angular.module('store').config(['iscTaskProvider',
	function(iscTaskProvider) {
		var customerPickupRelatedTasksConfig = {
		'tasks':[
				{
					'taskId':'performCustomerPickup',
					'taskName':'Perform Customer Pickup',		
					getTask:function(shipmentModel,relatedTaskMode){
						
						if(shipmentModel.Status) {
							var task = {};					
							task.taskId = "performCustomerPickup";
							task.isPrimary = false;
							task.isDisabled = true;
							task.sequence = 30;
							var shipNode = (shipmentModel.ShipNode.ShipNode == null) ? shipmentModel.ShipNode : shipmentModel.ShipNode.ShipNode;
							var currentStoreName = iscCore.getFromContext("storeName");
							
							var allowedTransactionList = [];
							if(shipmentModel.AllowedTransactions && shipmentModel.AllowedTransactions.Transaction) {
								var allowedTransactions = shipmentModel.AllowedTransactions.Transaction;
								for(i=0;i<allowedTransactions.length;i++){
									allowedTransactionList.push(allowedTransactions[i].Tranid);
								}
							}
							
							task.resourcePermission = "WSC000068";
							
							if(shipmentModel.DeliveryMethod == 'PICK') {
								task.isHidden = false;
							} else {
								task.isHidden = true;
							}
							task.isDefault = false;
							
							if(currentStoreName == shipNode && shipmentModel.Status) {
								var shipmentStatus = shipmentModel.Status.Status?shipmentModel.Status.Status:shipmentModel.Status;
								
								if(allowedTransactionList.length > 0 && (allowedTransactionList.indexOf("CONFIRM_SHIPMENT") > -1 && shipmentModel.DeliveryMethod == 'PICK')){
									if(shipmentStatus.match("1100.70.06.30")) {
										task.isDisabled = false;
										task.isPrimary = true;
									}
								}
								
								if(shipmentStatus.match("1100.70.06.30")) {
									task.taskName = "shipmentsummary.ACTION_CustomerPick";
								} else {
									if(shipmentModel.DeliveryMethod == 'PICK') {
										task.taskName = "shipmentsummary.ACTION_CustomerPick";
									}
								}
							}
							
							task.action = ['iscState','$timeout','$q',function (iscState,$timeout,$q){
								var deferred = $q.defer();
								$timeout(function(){
									var returnData = {'taskName': task.taskId, 'taskAPIOutput': {}};
									deferred.resolve(returnData);
								},0);
								
								iscState.goToState("customer-pickup", {
									input: {
										Shipment: {
											ShipmentKey: shipmentModel.ShipmentKey
										}
									}
								}, {});
								
								return deferred.promise;
							}];
							
							return task;
						}
					}
				},
				
				{
					'taskId':'printPickupAck',
					'taskName':'Print Pickup Acknowledgement',		
					getTask:function(shipmentModel,relatedTaskMode){
						if(shipmentModel.Status) {
							var task = {};
							task.taskId = "printPickupAck";
							task.isPrimary = false;
							task.isDisabled = true;
							task.taskName = "shipmentsummary.ACTION_PrintPickupAcknowledgement";
							task.resourcePermission = "WSC000070";
                            task.sequence = 40;
							
							var shipNode = (shipmentModel.ShipNode.ShipNode == null) ? shipmentModel.ShipNode : shipmentModel.ShipNode.ShipNode;
							var currentStoreName = iscCore.getFromContext("storeName");
							
							if(shipmentModel.DeliveryMethod == 'PICK') {
								task.isHidden = false;
							} else {
								task.isHidden = true;
							}
							task.isDefault = false;
							
							if(currentStoreName == shipNode && shipmentModel.Status) {
								var shipmentStatus = shipmentModel.Status.Status?shipmentModel.Status.Status:shipmentModel.Status;
								var shipmentNode = shipmentModel.ShipNode.ShipNode?shipmentModel.ShipNode.ShipNode:shipmentModel.ShipNode;
								
								if(shipmentModel.DeliveryMethod == 'PICK' && shipmentStatus.match("1400")) {
									task.isDisabled = false;
									
									task.action = ['iscMashup','$timeout','$q','iscPrint','iscModal',function (iscMashup,$timeout,$q,iscPrint,iscModal){
										var deferred = $q.defer();
										var printAckInput = {
											Shipment:{
												ShipmentKey:shipmentModel.ShipmentKey,
												ShipNode : shipmentNode,
												Currency : shipmentModel.Currency
											}
										};
										
										iscMashup.callSimpleMashup(null,"store.views.shipment.customer-pickup.printAcknowledgement",printAckInput,{}).then(function(response){
											var printAckOutput = response.MashupRefs.MashupRef[0].Output;
											if(!iscCore.isVoid(printAckOutput.Output.out)){
												$timeout(function(){
													iscPrint.printHtmlOutput(printAckOutput);
													var returnData = {'taskName': task.taskId, 'taskAPIOutput': response};
													deferred.resolve(returnData);
												},0);
											}
											else{
												iscModal.showErrorMessage("shipmentsummary.Message_Print_failure");
											}
										}								
										);
										return deferred.promise;
									}];
								}	
							}
							return task;
						}
						
					}
				}
			]
		};

		iscTaskProvider.addTask('SHIPMENT','CUSTOMERPICKUP_RT',customerPickupRelatedTasksConfig);
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/




/**
 *@iscdoc wizardinfo
 *@wizardname store.views.shipment.customer-pickup.customer-pickup-wizard
 *@package store.views.shipment.customer-pickup
 *@class customer-pickup-wizard
 *@wizardtemplate init ./store/views/shipment/customer-pickup/customer-pickup-init.tpl.html
 *@wizardtemplate finish ./store/views/shipment/customer-pickup/customer-pickup-finish.tpl.html
 *@wizardcontroller	init store.views.shipment.customer-pickup.customer-pickup-init
 *@wizardcontroller finish store.views.shipment.customer-pickup.customer-pickup-finish
 *@wizardpage singlepagepickup "./store/views/shipment/customer-pickup/customer-pickup-single-page.tpl.html" "store.views.shipment.customer-pickup.customer-pickup-page"
 *@description Handles the wizard navigation for 'Customer Pickup' flow.
 *
 */
angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('customer-pickup',{
		/**
		 *@iscdoc wizardconfig
		 *@wizardname store.views.shipment.customer-pickup.customer-pickup-wizard
		 *@configtype State
		 *@description Sets the state for the 'Customer Pickup' wizard.
		 *@configdata stateName "customer-pickup" The state to transition to
		 *@configdata templateUrl "./store/views/shipment/customerpickup/customer-pickup-wizard.tpl.html" Template file to load for state change
		 *@configdata addToHistory "false" The state needs not be considered for 'Back' button handling
		 *
		 */
		  templateUrl: './store/views/shipment/customer-pickup/customer-pickup-wizard.tpl.html',
          resourceId:'WSC000068',
		  addToHistory:false
    });
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.list.shipment-list
 *@package store.views.shipment.list
 *@class shipment-list
 *@description Shows shipment list.
 *@modaltemplate ./store/views/shipment/list/shipment-list.tpl.html
 */
 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("globalshipmentsearch", {
			templateUrl: "./store/views/shipment/global-shipment-search/global-shipment-search-list.tpl.html",
			controller: "store.views.shipment.global-shipment-search.global-shipment-search"
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.list.shipment-list
 *@package store.views.shipment.list
 *@class shipment-list
 *@description Shows shipment list.
 *@modaltemplate ./store/views/shipment/list/shipment-list.tpl.html
 */
 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("shipmentList", {
			templateUrl: "./store/views/shipment/list/shipment-list.tpl.html",
			controller: "store.views.shipment.list.shipment-list"
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('shipmentsearch',{
		    templateUrl: './store/views/shipment/search/shipment-search.tpl.html',
			controller:'store.views.shipment.search.shipment-search'
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('shipmentsummary',{
		    templateUrl: './store/views/shipment/summary/shipment-summary.tpl.html',
			controller:'store.views.shipment.summary.shipment-summary',
			resourceId:'',
			addToHistory:true
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



angular.module('store').config(['iscTaskProvider',
	function(iscTaskProvider) {
		var addViewNotesAppointmentRelatedTasksConfig = {
		'tasks':[
				{
					'taskId':'addViewAppointmentNotes',
					'taskName':'Add/View Notes for Appointment details',		
					getTask:function(orderModel){
						
						if(orderModel) {
							var task = {};					
							task.taskId = "addViewAppointmentNotes";
							task.taskName = "appointmentnotes.ACTION_Add_notes";
							
							task.isPrimary = false;
							task.isHidden = false;
							task.isDefault = false;
							task.isDisabled = false;
							task.resourcePermission = "WSC000073";
                            task.sequence = 20;
							
                            if(orderModel.Notes.NumberOfNotes !== '0'){
                                task.taskName = iscCore.translate("appointmentnotes.ACTION_View_notes",{count:orderModel.Notes.NumberOfNotes});
                            }
                            
                            
							
							task.action = ['iscModal','$timeout','$q',function (iscModal,$timeout,$q){
								var deferred = $q.defer();
								
                                var popupInput = {
                                    Order :{
                                        OrderHeaderKey:orderModel.OrderHeaderKey
                                    }
                                }
                                var commentsModalInput = {
                                        modalInput: function(){
                                            return popupInput;
                                        }
                                };

                                iscModal.openModal('store.views.appointments.common.add-view-notes.add-view-notes',commentsModalInput,{})
                                    .then(function(callBackData){
                                        orderModel.Notes.NumberOfNotes = callBackData.NoteList.TotalNumberOfRecords;
                                        if(orderModel.Notes.NumberOfNotes !== '0'){
                                            task.taskName = iscCore.translate("appointmentnotes.ACTION_View_notes",{count:orderModel.Notes.NumberOfNotes});
                                        }
                                        var returnData = {'taskName': task.taskId, 'taskAPIOutput': callBackData};
										deferred.resolve(returnData);
                                    }.bind(this),angular.noop);
								return deferred.promise;
							}];	
							return task;
						}
					}
				}
				
			]
		};
		
	iscTaskProvider.addTask('WORK_ORDER','ADD_VIEW_NOTES',addViewNotesAppointmentRelatedTasksConfig);
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.order.cancel.cancelorder
 *@package store.views.order.cancel
 *@class cancelorder
 *@description Cancels the order created.
 *@modaltemplate ./store/views/order/cancel/cancelorder.tpl.html
 */


angular.module('store').config(['iscModalProvider',function(iscModalProvider){

	iscModalProvider.registerModal("store.views.appointments.common.add-view-notes.add-view-notes",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.appointments.common.add-view-notes.add-view-notes
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/appointments/common/add-view-notes/add-view-notes.tpl.html" Template html to load
	  *@configdata controller "store.views.appointments.common.add-view-notes.add-view-notes" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "md"
	  */
		
			  animation: true,
			  templateUrl: './store/views/appointments/common/add-view-notes/add-view-notes.tpl.html',
			  controller:'store.views.appointments.common.add-view-notes.add-view-notes',
			  size: 'md',
			  keyboard : true,
			  backdrop : 'static',
			  windowClass: 'add-view-notes-appointment-dialog comment-dialog'
			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.appointments.common.appointment-list.appointment-list
 *@package store.views.appointments.common.appointment-list
 *@class appointment-list
 *@description Shows appointment list.
 *@modaltemplate ./store/views/appointments/common/appointment-list/appointment-list.tpl.html
 */
 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("appointmentlist", {
			templateUrl: "./store/views/appointments/common/appointment-list/appointment-list.tpl.html",
			controller: "store.views.appointments.common.appointment-list.appointment-list"
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/




angular.module('store').config(['iscTaskProvider',
	function(iscTaskProvider) {
		var addViewNotesAppointmentRelatedTasksConfig = {
		'tasks':[
				{
					'taskId':'editAppointment',
					'taskName':'Edit Appointment details',		
					getTask:function(orderModel){
						
						if(orderModel) {
							var task = {};					
							task.taskId = "editAppointment";
							task.taskName = "globals.ACTION_EDIT";
							
							task.isPrimary = false;
							task.isHidden = false;
							task.isDefault = false;
							task.isDisabled = false;
							task.resourcePermission = "WSC000074";
							task.sequence = 10;
                            
                            if(orderModel.DraftOrderFlag == 'Y' || orderModel.MinOrderStatus.match("3700.7777") || orderModel.MinOrderStatus.match("9000")){
                                task.isDisabled = true;
                            }
                            
							task.action = ['iscState','iscInStoreAppointment','$timeout','$q',function (iscState,iscInStoreAppointment,$timeout,$q){
								var deferred = $q.defer();
								
                               
                                $timeout(function(){
									var returnData = {'taskName': task.taskId, 'taskAPIOutput': {}};
									deferred.resolve(returnData);
								},0);
                                
                                //iscState.goToState('manage-appointment',{input:{Order:{OrderHeaderKey:orderModel.OrderHeaderKey}}},{});
                                iscInStoreAppointment.openCreateAppointmentWizard({input:{Order:{OrderHeaderKey:orderModel.OrderHeaderKey}}});

								return deferred.promise;
							}];	
							return task;
						}
					}
				}
				
			]
		};
		
	iscTaskProvider.addTask('WORK_ORDER','EDIT_APPOINTMENT',addViewNotesAppointmentRelatedTasksConfig);
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('appointment-summary',{
		    templateUrl: './store/views/appointments/common/appointment-summary/appointment-summary.tpl.html',
			controller:'store.views.appointments.common.appointment-summary.appointment-summary',
			resourceId:'WSC000073',
			addToHistory:true
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



angular.module('store').config(['iscTaskProvider',
	function(iscTaskProvider) {
		var cancelAppointmentRelatedTasksConfig = {
		'tasks':[
				{
					'taskId':'cancelAppointment',
					'taskName':'Cancel Appointment details',		
					getTask:function(orderModel){
						
						if(orderModel) {
							var task = {};					
							task.taskId = "cancelAppointment";
							task.taskName = "cancelAppointment.ACTION_CancelAppointment";
							
							task.isPrimary = false;
							task.isHidden = false;
							task.isDefault = false;
							task.isDisabled = false;
							task.resourcePermission = "WSC000075";
                            task.sequence = 40;
							
							if(orderModel.MinOrderStatus) {
								
								var orderStatus = orderModel.MinOrderStatus;
								
								if(orderStatus.match("3700.7777") || orderStatus.match("9000") ) {
									task.isDisabled = true;
								}
							}
							
							task.action = ['iscModal','$timeout','$q',function (iscModal,$timeout,$q){
								var deferred = $q.defer();
								
								var popInput = {};
								popInput.appointmentModel = orderModel;

				    			var cancelAppointmentPopupInput = {
									 modalInput: function(){
										return popInput;
									}   

								};

				    			iscModal.openModal('store.views.appointments.common.cancel-appointment.cancel-appointment',cancelAppointmentPopupInput,{}).then(function(callBackData){
				    				if(callBackData.data !== null && callBackData.data !== undefined && callBackData.data.markAsCancelSuccess){
										
										var returnData = {'taskName': task.taskId, 'taskAPIOutput': callBackData.data};
										deferred.resolve(returnData);
				    				}
				    			},angular.noop);
								
								return deferred.promise;
							}];	
							return task;
						}
					}
				}
				
			]
		};
		
	iscTaskProvider.addTask('WORK_ORDER','CANCEL_APPOINTMENT',cancelAppointmentRelatedTasksConfig);
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.backroompick.included-in-batch.included-in-batch-shipment
 *@package store.views.backroompick.shortage
 *@class included-in-batch-shipment
 *@description This modal displays Product details.
 *@modaltemplate ./store/views/backroompick/included-in-batch/included-in-batch-shipment.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.appointments.common.cancel-appointment.cancel-appointment",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.shipment.backroom-pick.common.print-pick-ticket.print-pick-ticket
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/appointments/common/cancel-appointment/cancel-appointment.tpl.html" Template html to load
		  *@configdata controller store.views.appointments.common.cancel-appointment.cancel-appointment" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/appointments/common/cancel-appointment/cancel-appointment.tpl.html',
			  controller:'store.views.appointments.common.cancel-appointment.cancel-appointment',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'cancel-appointment-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



angular.module('store').config(['iscTaskProvider',
	function(iscTaskProvider) {
		var markAsCompleteAppointmentRelatedTasksConfig = {
		'tasks':[
				{
					'taskId':'markAsCompleteAppointment',
					'taskName':'Mark as Complete Appointment details',		
					getTask:function(orderModel){
						
						if(orderModel) {
							var task = {};					
							task.taskId = "markAsCompleteAppointment";
							task.taskName = "completeAppointment.ACTION_MarkAsComplete";
							
							task.isPrimary = false;
							task.isHidden = false;
							task.isDefault = false;
							task.isDisabled = false;
							task.sequence = 30;
							if(orderModel.MinOrderStatus) {
								
								var orderStatus = orderModel.MinOrderStatus;
								
								if(orderModel.DraftOrderFlag == 'Y' || orderStatus.match("3700.7777") || orderStatus.match("9000") ) {
									task.isDisabled = true;
								}
							}
							
							task.action = ['iscModal','$timeout','$q',function (iscModal,$timeout,$q){
								var deferred = $q.defer();
								
								var popInput = {};
								popInput.appointmentModel = orderModel;

				    			var markAsCompleteAppointmentPopupInput = {
									 modalInput: function(){
										return popInput;
									}   

								};

				    			iscModal.openModal('store.views.appointments.common.mark-as-complete-appointment.mark-as-complete-appointment',markAsCompleteAppointmentPopupInput,{}).then(function(callBackData){
				    				if(callBackData.data !== null && callBackData.data !== undefined && callBackData.data.markAsCompleteSuccess){
										
										var returnData = {'taskName': task.taskId, 'taskAPIOutput': callBackData.data};
										deferred.resolve(returnData);
				    				}
				    			},angular.noop);
								
								return deferred.promise;
							}];	
							return task;
						}
					}
				}
				
			]
		};
		
	iscTaskProvider.addTask('WORK_ORDER','MARK_AS_COMPLETE_APPOINTMENT',markAsCompleteAppointmentRelatedTasksConfig);
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.backroompick.included-in-batch.included-in-batch-shipment
 *@package store.views.backroompick.shortage
 *@class included-in-batch-shipment
 *@description This modal displays Product details.
 *@modaltemplate ./store/views/backroompick/included-in-batch/included-in-batch-shipment.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.appointments.common.mark-as-complete-appointment.mark-as-complete-appointment",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.shipment.backroom-pick.common.print-pick-ticket.print-pick-ticket
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/appointments/common/mark-as-complete-appointment/mark-as-complete-appointment.tpl.html" Template html to load
		  *@configdata controller store.views.appointments.common.mark-as-complete-appointment.mark-as-complete-appointment" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/appointments/common/mark-as-complete-appointment/mark-as-complete-appointment.tpl.html',
			  controller:'store.views.appointments.common.mark-as-complete-appointment.mark-as-complete-appointment',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'mark-as-complete-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.appointments.common.service-description.service-description
 *@package store.views.appointments.common.service-description
 *@class service-description
 *@description Shows the popup with service description. User can add the service from the pop-up.
 *@modaltemplate ./store/views/appointments/common/service-description/service-description.tpl.html
 */


angular.module('store').config(['iscModalProvider',function(iscModalProvider){

	iscModalProvider.registerModal("store.views.appointments.common.service-description.service-description",{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.appointments.common.service-description.service-description
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/appointments/common/service-description/service-description.tpl.html" Template html to load
		  *@configdata controller "store.views.appointments.common.service-description.service-description" Controller associated with modal
		  *@configdata keyboard "false"
		  *@configdata size "md"
		  */
		animation: true,
		templateUrl: './store/views/appointments/common/service-description/service-description.tpl.html',
		controller:'store.views.appointments.common.service-description.service-description',
		size: 'md',
		keyboard : true,
		backdrop : 'static',
		windowClass: 'service-description-dialog',
		ariaLabelledBy: 'modalTitle'  
	});
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/




angular.module('store').config(['iscTaskProvider',
	function(iscTaskProvider) {
		var shareAppointmentRelatedTasksConfig = {
		'tasks':[
				{
					'taskId':'shareAppointment',
					'taskName':'Share Appointment details',		
					getTask:function(orderModel){
						
						if(orderModel) {
							var task = {};					
							task.taskId = "shareAppointment";
							task.taskName = "globals.ACTION_Share";
							
							task.isPrimary = false;
							task.isHidden = false;
							task.isDefault = false;
							task.sequence = 50;
							if(orderModel.DraftOrderFlag == 'Y') {
								task.isDisabled = true;
							}
							
							task.action = ['iscModal','$timeout','$q',function (iscModal,$timeout,$q){
								var deferred = $q.defer();
								
								var popInput = {};
								popInput.appointmentModel = orderModel;

				    			var shareAppointmentPopupInput = {
									 modalInput: function(){
										return popInput;
									}   

								};

				    			iscModal.openModal('store.views.appointments.common.share-appointment.share-appointment',shareAppointmentPopupInput,{}).then(function(callBackData){
				    				if(callBackData.data !== null && callBackData.data !== undefined){
										
										var returnData = {'taskName': task.taskId, 'taskAPIOutput': orderModel};
										deferred.resolve(returnData);
				    				}
				    			},angular.noop);
								
								return deferred.promise;
							}];	
							return task;
						}
					}
				}
				
			]
		};
		
	iscTaskProvider.addTask('WORK_ORDER','SHARE_APPOINTMENT',shareAppointmentRelatedTasksConfig);
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.appointments.common.share-appointment.share-appointment
 *@package store.views.appointments.common.share-appointment
 *@class share-appointment
 *@description Provides the configuration for share pop-up that comes in Appointment summary
 *@modaltemplate ./store/views/appointments/common/share-appointment/share-appointment.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.appointments.common.share-appointment.share-appointment",
		{
		
	/**
	  *@iscdoc viewmodalconfig
	  *@viewname store.views.appointments.common.share-appointment.share-appointment
	  *@configtype modalConfig
	  *@configdata animation "true"
	  *@configdata templateUrl "./store/views/appointments/common/share-appointment/share-appointment.tpl.html" Template html to load
	  *@configdata controller "store.views.appointments.common.share-appointment.share-appointment" Controller associated with modal
	  *@configdata keyboard "false"
	  *@configdata size "sm"
	  */
			
			animation: true,
			templateUrl: './store/views/appointments/common/share-appointment/share-appointment.tpl.html',
			controller:'store.views.appointments.common.share-appointment.share-appointment',
			keyboard : true,
			backdrop : 'static',
			size: 'sm',
			windowClass: 'share-appointment-dialog',
			ariaLabelledBy: 'modalTitle'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.appointments.in-store.change-store.change-store
 *@package store.views.appointments.in-store.change-store
 *@class change-store
 *@description provides the path to locate change-store popup.
 *@modaltemplate ./store/views/appointments/in-store/change-store/change-store.tpl.html
 */



angular.module('store').config(['iscModalProvider',function(iscModalProvider){
	
	
	iscModalProvider.registerModal("store.views.appointments.in-store.change-store.change-store",
		{
		
			/**
			*@iscdoc viewmodalrootconfig
			*@viewname store.views.appointments.in-store.change-store.change-store
			*@configtype modalConfig
			*@configdata animation "true"
			*@configdata templateUrl "./store/views/appointments/in-store/change-store/change-store.tpl.html" Template html to load
			*@configdata controller "store.views.appointments.in-store.change-store.change-store" Controller associated with modal
			*@configdata keyboard "false"
			*@configdata size "md"
			*/

			animation: true,
			templateUrl: './store/views/appointments/in-store/change-store/change-store.tpl.html',
			controller:'store.views.appointments.in-store.change-store.change-store',
			size: 'lg',
			keyboard : true,
			backdrop : 'static',
			windowClass: 'full-screen-modal screen-container change-store-dialog'		  
		}
	);
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("storeAppointmentCalendar", {
			templateUrl: "./store/views/appointments/in-store/store-appointments/appointments-calendar.tpl.html",
			controller: "store.views.appointments.in-store.store-appointments.appointments-calendar"
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.customer.customer-profile.list.customer-profile-list
 *@package store.views.customer.customer-profile.list
 *@class customer-profile-list
 *@description Used to display customer profile details.
 *@modaltemplate ./store/views/customer/customer-profile/list/customer-profile-list.tpl.html
 */

angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('customerProfileList',{
		    templateUrl: './store/views/customer/customer-profile/list/customer-profile-list.tpl.html',
			controller:'store.views.customer.customer-profile.list.customer-profile-list',
			resourceId:'',
			addToHistory:true
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.priceoverride.priceoverride
 *@package store.views.common.priceoverride
 *@class priceoverride
 *@description Provides the path to locate priceoverride popup.
 *@modaltemplate ./store/views/common/priceoverride/priceoverride.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.return.common.disposition.return-disposition",
		{
		
			  animation: true,
			  templateUrl: './store/views/return/common/disposition/return-disposition.tpl.html',
			  controller:'store.views.return.common.disposition.return-disposition',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'return-disposition-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.return.common.override.override-policy-violation
 *@package store.views.return.common.override
 *@class override-policy-violation
 *@description Provides the path to locate override policy popup.
 *@modaltemplate ./store/views/return/common/override/override-policy-violation.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.return.common.override.override-policy-violation",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.return.common.override.override-policy-violation
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/return/common/override/override-policy-violation.tpl.html" Template html to load
		  *@configdata controller "store.views.return.common.override.override-policy-violation" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/return/common/override/override-policy-violation.tpl.html',
			  controller:'store.views.return.common.override.override-policy-violation',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'override-policy-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.priceoverride.priceoverride
 *@package store.views.common.priceoverride
 *@class priceoverride
 *@description Provides the path to locate priceoverride popup.
 *@modaltemplate ./store/views/common/priceoverride/priceoverride.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.return.common.reason.return-reason-multiple",
		{
		
			  animation: true,
			  templateUrl: './store/views/return/common/reason/return-reason-multiple.tpl.html',
			  controller:'store.views.return.common.reason.return-reason-multiple',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'return-reason-multiple-dialog'			  
		});
	
	iscModalProvider.registerModal("store.views.return.common.reason.return-reason-oneline",
			{
			
				  animation: true,
				  templateUrl: './store/views/return/common/reason/return-reason-multiple.tpl.html',
				  controller:'store.views.return.common.reason.return-reason-multiple',
				  keyboard : true,
				  backdrop : 'static',
				  size: 'md',
				  windowClass: 'return-reason-multiple-dialog single-product'			  
			});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.priceoverride.priceoverride
 *@package store.views.common.priceoverride
 *@class priceoverride
 *@description Provides the path to locate priceoverride popup.
 *@modaltemplate ./store/views/common/priceoverride/priceoverride.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.return.common.reason.return-reason-single",
		{
		
			  animation: true,
			  templateUrl: './store/views/return/common/reason/return-reason-single.tpl.html',
			  controller:'store.views.return.common.reason.return-reason-single',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'return-reason-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.backroom-pick.pick-order-list.pick-order-list
 *@package store.views.shipment.backroom-pick.pick-order-list
 *@class pick-order-list
 *@description Pick Order list screen is the list of Orders which are either Ready For picking or Picking in progress. 
 */
 
 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("pickorderlist", {
			templateUrl: "./store/views/shipment/backroom-pick/pick-order-list/pick-order-list.tpl.html",
			controller: "store.views.shipment.backroom-pick.pick-order-list.pick-order-list"
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



/**
 *@iscdoc wizardinfo
 *@wizardname store.views.order.return-order-wizard
 *@package store.views.order
 *@class return-order-wizard
 *@wizardtemplate init ./store/views/order/return-init.tpl.html
 *@wizardtemplate finish ./store/views/order/return-finish.tpl.html
 *@wizardcontroller	init store.views.order.return-init
 *@wizardcontroller finish store.views.order.return-finish
 *@wizardpage orderDetails "./store/views/return/sales-order-details/sales-order-details.tpl.html" "store.views.return.sales-order-details.sales-order-details"
 *@wizardpage orderList "./store/views/return/sales-order-list/sales-order-list.tpl.html" "store.views.return.sales-order-list.sales-order-list"
 *@wizardpage itemList "./store/views/return/item-list/return-item-list.tpl.html" "store.views.return.item-list.return-item-list"
 *@wizardpage addReturnItem "../store/views/return/add-return-item/add-return-item.tpl.html" "store.views.return.add-return-item.add-return-item"
 *@wizardpage returnsList "./store/views/return/returns-list/returns-list.tpl.html" "store.views.return.returns-list.returns-list"
 *@wizardpage customerList "./store/views/return/customer-list/customer-list.tpl.html" "store.views.return.customer-list.customer-list"
 *@wizardpage customerDetails "./store/views/return/customer-details/customer-details.tpl.html" "store.views.return.customer-details.customer-details"
 *@wizardpage exchangeItem "./store/views/return/exchange-item/exchange-item.tpl.html" "store.views.return.exchange-item.exchange-item"
 *@wizardpage productSearch "./store/views/return/item-list/exchange-item-list.tpl.html" "store.views.return.item-list.exchange-item-list"
 *@wizardpage addItems "./store/views/return/add-exch-item/add-exchange-item.tpl.html" "store.views.return.add-exch-item.add-exchange-item"
 *@wizardpage payment "./store/views/return/payment/return-payment.tpl.html" "store.views.return.payment.return-payment"
 *@description Handles the wizard navigation for 'Return Order/Products' flow.
 *
 */
angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('backroomPickWizard',{
		/**
		 *@iscdoc wizardconfig
		 *@wizardname store.views.shipment.backroom-pick.wizard.backroom-pick-wizard
		 *@configtype State
		 *@description Sets the state for the 'Backroom Pick' wizard.
		 *@configdata stateName "backroomPickWizard" The state to transition to
		 *@configdata templateUrl "./store/views/shipment/backroom-pick/wizard/backroom-pick-wizard.tpl.html" Template file to load for state change
		 *@configdata addToHistory "false" The state needs not be considered for 'Back' button handling
		 *
		 */
		  templateUrl: './store/views/shipment/backroom-pick/wizard/backroom-pick-wizard.tpl.html',
		  addToHistory:false
    });
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.abandon.abandon-shipment
 *@package store.views.common.shortage
 *@class abandon-shipment
 *@description This modal displays Product details.
 *@modaltemplate ./store/views/common/abandon/abandon-shipment.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.shipment.common.abandon-shipment.abandon-shipment",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.shipment.common.abandon-shipment.abandon-shipment
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/shipment/common/abandon-shipment/abandon-shipment.tpl.html" Template html to load
		  *@configdata controller "store.views.shipment.common.abandon-shipment.abandon-shipment" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/shipment/common/abandon-shipment/abandon-shipment.tpl.html',
			  controller:'store.views.shipment.common.abandon-shipment.abandon-shipment',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'abandon-shipment-dialog full-height-modal-mobile'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/






angular.module('store').config(['iscModalProvider',function(iscModalProvider){

	iscModalProvider.registerModal("store.views.shipment.common.product-details.product-details",
		{
			  animation: true,
			  templateUrl: './store/views/shipment/common/product-details/product-details.tpl.html',
			  controller:'store.views.shipment.common.product-details.product-details',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'obs-product-details-dialog',
			  ariaLabelledBy: 'modalTitle'
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.common.record-shortage.record-shortage
 *@package store.views.common.shortage
 *@class record-shortage
 *@description This modal displays Product details.
 *@modaltemplate ./store/views.shipment.common/record-shortage.record-shortage.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.shipment.common.record-shortage.record-shortage",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.shipment.common.record-shortage.record-shortage
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views.shipment.common/record-shortage.record-shortage.tpl.html" Template html to load
		  *@configdata controller ""store.views.shipment.common.record-shortage.record-shortage" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/shipment/common/record-shortage/record-shortage.tpl.html',
			  controller:'store.views.shipment.common.record-shortage.record-shortage',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'record-shortage-dialog full-height-modal'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.common.staging-location.staging-location
 *@package store.views.common.shortage
 *@class staging-location
 *@description This modal displays Product details.
 *@modaltemplate ./store/views.shipment.common/staging-location.staging-location.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.shipment.common.staging-location.staging-location",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.shipment.common.staging-location.staging-location
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views.shipment.common/staging-location.staging-location.tpl.html" Template html to load
		  *@configdata controller "store.views.shipment.common.staging-location.staging-location" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/shipment/common/staging-location/staging-location.tpl.html',
			  controller:'store.views.shipment.common.staging-location.staging-location',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'staging-location-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.list.shipment-list
 *@package store.views.shipment.list
 *@class shipment-list
 *@description Shows shipment list.
 *@modaltemplate ./store/views/shipment/list/shipment-list.tpl.html
 */
 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("packorderlist", {
			templateUrl: "./store/views/shipment/containerpack/pack-order-list/pack-order-list.tpl.html",
			controller: "store.views.shipment.containerpack.pack-order-list.pack-order-list"
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/





/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.common.shortage.record-shortage
 *@package store.views.common.shortage
 *@class record-shortage
 *@description This modal displays Product details.
 *@modaltemplate ./store/views/common/shortage/record-shortage.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.shipment.containerpack.pack-products.pack-container-products",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.shipment.containerpack.pack-products.pack-container-products
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/shipment/containerpack/pack-products/pack-container-products.tpl.html" Template html to load
		  *@configdata controller "store.views.shipment.containerpack.pack-products.pack-container-products" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/shipment/containerpack/pack-products/pack-container-products.tpl.html',
			  controller:'store.views.shipment.containerpack.pack-products.pack-container-products',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'pack-container-products'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.list.shipment-list
 *@package store.views.shipment.list
 *@class shipment-list
 *@description Shows shipment list.
 *@modaltemplate ./store/views/shipment/list/shipment-list.tpl.html
 */
 
angular.module("store").config([
	"iscStateProvider", function(iscStateProvider) {
		iscStateProvider.state("customerpickorderlist", {
			templateUrl: "./store/views/shipment/customer-pickup/customer-pick-order-list/customer-pick-order-list.tpl.html",
			controller: "store.views.shipment.customer-pickup.customer-pick-order-list.customer-pick-order-list"
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/




/**
 *@iscdoc wizardinfo
 *@wizardname store.views.appointments.in-store.manage-appointment.wizard.manage-appointment-wizard
 *@package store.views.appointments.in-store.manage-appointment.wizard
 *@class manage-appointment-wizard
 *@wizardtemplate init ./store/views/appointments/in-store/manage-appointment/wizard/manage-appointment-init.tpl.html
 *@wizardtemplate finish ./store/views/appointments/in-store/manage-appointment/wizard/manage-appointment-finish.tpl.html
 *@wizardcontroller	init store.views.appointments.in-store.manage-appointment.wizard.manage-appointment-init
 *@wizardcontroller finish store.views.appointments.in-store.manage-appointment.wizard.manage-appointment-finish
 *@description Handles the wizard navigation for 'Manage Appointments' flow.
 *@wizardpage select-services "./store/views/appointments/in-store/manage-appointment/select-services/select-services.tpl.html" "store.views.appointments.in-store.manage-appointment.select-services.select-services"
 *@wizardpage appointment-schedule "./store/views/appointments/in-store/manage-appointment/schedule/appointment-schedule.tpl.html" "store.views.appointments.in-store.manage-appointment.schedule.appointment-schedule"
 *@wizardpage customer-lookup "./store/views/appointments/in-store/manage-appointment/customer-lookup/customer-lookup.tpl.html" "store.views.appointments.in-store.manage-appointment.customer-lookup"
 */
angular.module('store').config(['iscStateProvider',
	function(iscStateProvider) {
		iscStateProvider.state('manage-appointment',{
		/**
		 *@iscdoc wizardconfig
		 *@wizardname store.views.appointments.in-store.manage-appointment.wizard.manage-appointment-wizard
		 *@configtype State
		 *@description Sets the state for the 'Create Appointment' wizard.
		 *@configdata stateName "manage-appointment" The state to transition to
		 *@configdata templateUrl "./store/views/appointments/in-store/manage-appointment/wizard/manage-appointment-wizard.tpl.html" Template file to load for state change
		 *@configdata addToHistory "false" The state needs not be considered for 'Back' button handling
		 *
		 */
		  templateUrl: './store/views/appointments/in-store/manage-appointment/wizard/manage-appointment-wizard.tpl.html',
		  addToHistory:false
    });
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.receiving.receive-shipment.common.multiple-shipments.multiple-receiving-shipments
 *@package store.views.receiving.receive-shipment.common.multiple-shipments
 *@class multiple-receiving-shipments
 *@description Provides the path to locate multiple receiving shipments popup
 *@modaltemplate ./store/views/receiving/receive-shipment/common/multiple-shipments/multiple-receiving-shipments.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.receiving.receive-shipment.common.multiple-shipments.multiple-receiving-shipments",
		{
		
			  animation: true,
			  templateUrl: './store/views/receiving/receive-shipment/common/multiple-shipments/multiple-receiving-shipments.tpl.html',
			  controller:'store.views.receiving.receive-shipment.common.multiple-shipments.multiple-receiving-shipments',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'multiple-receiving-shipments-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.receiving.receive-shipment.common.receive-full.receive-full-shipment
 *@package store.views.receiving.receive-shipment.common.receive-full.
 *@class receive-full-shipment
 *@description Provides the path to locate receiving full shipment popup
 *@modaltemplate ./store/views/receiving/receive-shipment/common/receive-full/receive-full-shipment.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.receiving.receive-shipment.common.receive-full.receive-full-shipment",
		{
		
			  animation: true,
			  templateUrl: './store/views/receiving/receive-shipment/common/receive-full/receive-full-shipment.tpl.html',
			  controller:'store.views.receiving.receive-shipment.common.receive-full.receive-full-shipment',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'receive-full-shipment-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.receiving.receive-shipment.common.receive-later.receive-later
 *@package store.views.receiving.receive-shipment.common
 *@class receive-later.receive-later
 *@description Provides the path to locate receive later shipment popup.
 *@modaltemplate ./store/views/receiving/receive-shipment/common/receive-later/receive-later.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.receiving.receive-shipment.common.receive-later.receive-later",
		{
		
			  animation: true,
			  templateUrl: './store/views/receiving/receive-shipment/common/receive-later/receive-later.tpl.html',
			  controller:'store.views.receiving.receive-shipment.common.receive-later.receive-later',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'receive-later-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.receiving.receive-shipment.common.record-damage.record-damage
 *@package store.views.receiving.receive-shipment.common.record-damage
 *@class record-damage
 *@description Provides the path to locate record damage popup.
 *@modaltemplate ./store/views/receiving/receive-shipment/common/record-damage/record-damage.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.receiving.receive-shipment.common.record-damage.record-damage",
		{
		
			  animation: true,
			  templateUrl: './store/views/receiving/receive-shipment/common/record-damage/record-damage.tpl.html',
			  controller:'store.views.receiving.receive-shipment.common.record-damage.record-damage',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'record-damage-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.receiving.receive-shipment.common.view-container.view-container
 *@package store.views.receiving.receive-shipment.common.view-container
 *@class view-container
 *@description Provides the path to locate view container popup.
 *@modaltemplate ./store/views/receiving/receive-shipment/common/view-container/view-container.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.receiving.receive-shipment.common.view-container.view-container",
		{
		
			  animation: true,
			  templateUrl: './store/views/receiving/receive-shipment/common/view-container/view-container.tpl.html',
			  controller:'store.views.receiving.receive-shipment.common.view-container.view-container',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'view-container-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.backroompick.included-in-batch.included-in-batch-shipment
 *@package store.views.backroompick.shortage
 *@class included-in-batch-shipment
 *@description This modal displays Product details.
 *@modaltemplate ./store/views/backroompick/included-in-batch/included-in-batch-shipment.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.shipment.backroom-pick.common.print-pick-ticket.print-pick-ticket",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.shipment.backroom-pick.common.print-pick-ticket.print-pick-ticket
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/shipment/backroom-pick/common/print-pick-ticket/print-pick-ticket.tpl.html" Template html to load
		  *@configdata controller store.views.shipment.backroom-pick.common.print-pick-ticket.print-pick-ticket" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/shipment/backroom-pick/common/print-pick-ticket/print-pick-ticket.tpl.html',
			  controller:'store.views.shipment.backroom-pick.common.print-pick-ticket.print-pick-ticket',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'print-pick-ticket-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.backroompick.included-in-batch.included-in-batch-shipment
 *@package store.views.backroompick.shortage
 *@class included-in-batch-shipment
 *@description This modal displays Product details.
 *@modaltemplate ./store/views/backroompick/included-in-batch/included-in-batch-shipment.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.shipment.backroom-pick.common.shipment-in-batch.shipment-in-batch",
		{
		
		/**
		  *@iscdoc viewmodalconfig
		  *@viewname store.views.shipment.backroom-pick.common.shipment-in-batch.shipment-in-batch
		  *@configtype modalConfig
		  *@configdata animation "true"
		  *@configdata templateUrl "./store/views/shipment/backroom-pick/common/shipment-in-batch/shipment-in-batch.tpl.html" Template html to load
		  *@configdata controller "store.views.shipment.backroom-pick.common.shipment-in-batch.shipment-in-batch" Controller associated with modal
		  *@configdata keyboard "true"
		  *@configdata size "md"
		  */
		
		
			  animation: true,
			  templateUrl: './store/views/shipment/backroom-pick/common/shipment-in-batch/shipment-in-batch.tpl.html',
			  controller:'store.views.shipment.backroom-pick.common.shipment-in-batch.shipment-in-batch',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'shipment-in-batch-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.batchpick.batch-list.departments.batch-list-departments
 *@package store.views.shipment.batchpick.batch-list.departments
 *@class batch-list-departments
 *@description Provides the path to locate batch list departments popup.
 *@modaltemplate ./store/views/shipment/batchpick/batch-list/departments/batch-list-departments.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.shipment.batchpick.batch-list.departments.batch-list-departments",
		{
		
			  animation: true,
			  templateUrl: './store/views/shipment/batchpick/batch-list/departments/batch-list-departments.tpl.html',
			  controller:'store.views.shipment.batchpick.batch-list.departments.batch-list-departments',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'batch-list-departments-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodalrootconfig
 *@viewname store.views.shipment.batchpick.batch-list.pref.batch-list-preferences
 *@package store.views.shipment.batchpick.batch-list.pref
 *@class batch-list-preferences
 *@description Provides the path to locate batch list pref popup.
 *@modaltemplate ./store/views/shipment/batchpick/batch-list/pref/batch-list-preferences.tpl.html
 */

angular.module('store').config(['iscModalProvider',function(iscModalProvider){


	iscModalProvider.registerModal("store.views.shipment.batchpick.batch-list.pref.batch-list-preferences",
		{
		
			  animation: true,
			  templateUrl: './store/views/shipment/batchpick/batch-list/pref/batch-list-preferences.tpl.html',
			  controller:'store.views.shipment.batchpick.batch-list.pref.batch-list-preferences',
			  keyboard : true,
			  backdrop : 'static',
			  size: 'md',
			  windowClass: 'batch-list-pref-dialog'			  
		});
	
}]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc ViewModalController
 *@name store.views.about.about
 *@package store.views.about
 *@class about
 *@description This controller is used for handling about modal popup screen
 * 
 * 
 * 
 * 
 * 
 */



angular.module('store').controller('store.views.about.about',
  ['$scope','$rootScope','$uibModalInstance','modalInput','iscScreen','iscMashup','iscResourcePermission',
	function($scope,$rootScope,$uibModalInstance,modalInput,iscScreen,iscMashup,iscResourcePermission) {
		iscScreen.initializeScreen($scope,{      
  		model:{
  		  /**
         *@iscdoc Model
         *@name versionDetails
         *@description This model stores the version details of the application
         */
         "versionDetails":{}
  		},  		
  		mashupRefs : [
  		  /**
  		   *@iscdoc Mashup
  		   *@Description This mashup is used to get the version details of the application
  		   */
  		  {
					mashupRefId: 'getVersionManagerDetails',
					mashupId: 'getVersionManagerDetailsForStore',
					modelName : 'versionDetails'					
				}
			],
			/**
  		 *@scDoc UI
  		 */
			ui:{
			},
			/**
  		 *@iscdoc UIMethod
  		 *@method uiClose
  		 *@description This method closes the modal popup
  		 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},
			/**
  		 *@iscdoc ViewInit
  		 *@method initialize
  		 *@desciption This method initializes the dashboard content by calling mashups
  		 */
			initialize : function(){
				if(iscResourcePermission.hasPermission('WSCSYS00001')){
					iscMashup.callMashup(this,'getVersionManagerDetails',{},{});
				}
			}
  	});
	}
]);


/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/




/**
 *@iscdoc viewinfo
 *@viewname store.views.return.returns-list.returns-list
 *@package store.views.return.returns-list
 *@class returns-list
 *@description Displays return and exchange order lines
 *
 */
angular.module('store').controller('store.views.alerts.alerts-preview',
  ['$animate','$scope','$rootScope', '$timeout','iscScreen','iscWizard','$locale','iscStateParams','iscMashup','iscModal','iscResourcePermission','$filter','iscReturn','iscI18n','iscOrder','iscState','iscAppContext','$interval','iscShipment',
	function($animate,$scope,$rootScope,$timeout, iscScreen,iscWizard,$locale,iscStateParams,iscMashup,iscModal,iscResourcePermission,$filter,iscReturn,iscI18n,iscOrder, iscState,iscAppContext,$interval,iscShipment) {
		
		iscWizard.initializeWizardPage($scope,{
			
			   	         
            model:{
            	 "getHotPickList" : {} ,
            	 "getSlaList" : {},
            	 "getAlertStatisticsForUser":{}
            },
            mashupRefs:[
                        {
                        	/**
							*@description This mashup is used to get alerts of type HOT_PICK .
							*/
                            mashupRefId: 'getExceptionList_ForHotPick',
                            mashupId: 'getExceptionList_ForHotPick',
                            modelName : 'getHotPickList'

                        },
                        
                        {
                        	/**
							*@description This mashup is used to get alerts of type SLA .
							*/
                            mashupRefId: 'getExceptionList_ForNearSLA',
                            mashupId: 'getExceptionList_ForNearSLA',
                            modelName : 'getSlaList'

                        },
                        
                        {
                        	/**
							*@description This mashup is used to resolve alerts of type HOT_PICK .
							*/
                            mashupRefId: 'resolveException_HotPick',
                            mashupId: 'resolveException_HotPick'

                        },
                        
                        {
                        	/**
							*@description This mashup is used to resolve alerts of type SLA .
							*/
                            mashupRefId: 'resolveException_Sla',
                            mashupId: 'resolveException_Sla'

                        },
                        
                        {
                        	/**
							*@description This mashup is used to get list of alerts assigned to current user .
							*/
                            mashupRefId: 'getAlertStatistics',
                            mashupId: 'getAlertStatistics',
                            modelName : 'getAlertStatisticsForUser'

                        },
                        
                        
                        
                         {
                        	/**
							*@description This mashup is used to resolve generic exceptions
							*/
                            mashupRefId: 'resolveException',
                            mashupId: 'resolveException'

                        },
                        
                        {
                        	/**
							*@description This mashup is used to refresh exception count
							*/
                            mashupRefId: 'getAlertStatistics',
                            mashupId: 'getAlertStatistics'

                        }
                        
                       ],
            ui:{
            	showHotPickAlerts:false ,
            	
            	showSlaAlerts:false,
            	
            	inboxCountHotPick:20,
            	
            	inboxCountSla: 20
            	

            },
            
	         /**
	         * @description method to initialize the controller and search for product using the input to the page.
	         */
	         initialize: function(){
	         
	         	var inputObj={};
		  		inputObj.getAlertStatisticsForUser={};
		  		iscMashup.callMashup(this,"getAlertStatistics",inputObj,{});
		  		
		  		
		  		 $scope.$watch('ui.showHotPickAlerts',function(newData,oldData){
             		 if(newData){
             		 	$scope.uiGetHotPickList();
             		 }
          		 });
          		 
          		 
          		  $scope.$watch('ui.showSlaAlerts',function(newData,oldData){
             		 if(newData){
             		 	$scope.uiGetSlaList();
             		 }
          		 });
          		 
          		 $rootScope.$on('uiAlertSearchClose',function(event,args){
	  					  $scope.ui.showAlertSearch = 'N';
	  					   
	  			 });
		  		
		  		
		  		
	         },
	        
	         
	         
		  	uiGetHotPickList : function(){
		  		var inputObj={};
		  		inputObj.Inbox={};
		  		inputObj.Inbox.ComplexQuery={};
		  		inputObj.Inbox.ComplexQuery.Or={};
		  	//	iscMashup.callMashup(this,"getExceptionList_ForHotPick",inputObj,{}).then(this.handleHotPickList.bind(this));
		  		iscMashup.callMashup(this,"getExceptionList_ForHotPick",inputObj,{});
		  	},
		  	
		  	
		  	uiGetSlaList : function(){
		  		var inputObj={};
		  		inputObj.Inbox={};
		  		inputObj.Inbox.ComplexQuery={};
		  		inputObj.Inbox.ComplexQuery.Or={};
		  		//iscMashup.callMashup(this,"getExceptionList_ForNearSLA",inputObj,{}).then(this.handleNearSLAList.bind(this));
		  		iscMashup.callMashup(this,"getExceptionList_ForNearSLA",inputObj,{});
		  	},
		  	
		  	
		  	uiGetOtherExceptions : function(exceptionType){
		  	
		  		var inputObj={};
		  		inputObj.Inbox={};
		  		inputObj.Inbox.ExceptionType=exceptionType;
		  		iscMashup.callMashup(this,"getExceptionList_Generic",inputObj,{});
		  		
		  	},
		  	
		  	
		  	
		  	 uiInboxScrollActionValidator : function(){
			             	return true;
			 },
			  
			 uiGetInboxListNextForHotPick: function(){
			            	
		       if(this.ui.inboxCountHotPick <= this.model.getHotPickList.InboxList.Inbox.length){
			                  this.ui.inboxCountHotPick+=5;
			         }
		      },
		      
		      
		      
		    
		      
		     uiGetInboxListNextForSla: function(){
			            	
		       if(this.ui.inboxCountSla <= this.model.getSlaList.InboxList.Inbox.length){
			                  this.ui.inboxCountSla+=5;
			         }
		      },

			uiResolveHotPickException : function(inbox){
		
				var input = {};
				input.ResolutionDetails={};
				input.ResolutionDetails.Inbox={};
				input.ResolutionDetails.Inbox.InboxKey=inbox.InboxKey;
				iscMashup.callMashup(this,"resolveException_HotPick",input,{}).then(this.handleResolutionForHotPickException.bind(this,inbox.ShipmentKey));
				
			},
			
			
			uiResolveSlaException : function(inbox){
				var input = {};
				input.ResolutionDetails={};
				input.ResolutionDetails.Inbox={};
				input.ResolutionDetails.Inbox.InboxKey=inbox.InboxKey;
				iscMashup.callMashup(this,"resolveException_Sla",input,{}).then(this.handleResolutionForSlaException.bind(this,inbox.ShipmentKey));
				
			},
			
			handleResolutionForHotPickException : function(shipmentKey,response){
				this.uiAlertSearchClose();
				iscState.goToState('backroomPickWizard',{input:{Shipment:{ShipmentKey:shipmentKey}}},{}); 
				this.refreshCount();
			},
			
			
			
			handleResolutionForSlaException : function(shipmentKey,response){
				this.uiAlertSearchClose();
				iscState.goToState('backroomPickWizard',{input:{Shipment:{ShipmentKey:shipmentKey}}},{}); 
				this.refreshCount();
			},
			
			uiGetImageUrl:function(imageUrl){
				return iscShipment.getFullURLForImage(imageUrl);
			},

			
			uiAlertSearchClose : function(){
				$scope.$emit('uiAlertSearchClose',{}); 
			},
			
			refreshCount : function(){
				var inputObj = {};
	  			inputObj.getAlertStatisticsForUser={};
    			iscMashup.callMashup(this,"getAlertStatistics",inputObj,{showMask:false}).then(this.handleGetExceptionList.bind(this));
			},
			
			handleGetExceptionList : function(res){
				var apiOutput = iscMashup.getMashupOutput(res,"getAlertStatistics");
    			$rootScope.ui.alertCount=apiOutput.getAlertStatisticsForUser.TotalAlerts;
			
			}
				
	 
		  	


		  	
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

(function(angular,iscCore){
  'use strict';  
  
  angular.module('store').controller('store.views.application-layout.header',
    ['$scope','$rootScope','iscScreen','iscState','iscMashup','iscResourcePermission','iscPersona','iscModal','iscI18n','iscRule','iscOrder','iscObjectUtility','iscAppInfo','$timeout','$document', 'iscHttpRequest','iscPortletShipment','iscAppContext',
  	function($scope,$rootScope,iscScreen,iscState,iscMashup,iscResourcePermission,iscPersona,iscModal,iscI18n,iscRule,iscOrder,iscObjectUtility,iscAppInfo,$timeout,$document, iscHttpRequest,iscPortletShipment,iscAppContext) {  		
  		iscScreen.initializeScreen($scope,{
  		 model:{
        	inboxModel:{}
        },
		 mashupRefs : [
		    		{
                        	/**
							*@description This mashup is used to get the polling interval for displaying alerts.
							*/
                            mashupRefId: 'getRuleDetails_AlertPollingInterval',
                            mashupId: 'getRuleDetails_AlertPollingInterval'

                        },
                        
                        {
                        	/**
							*@description This mashup is used to get alerts assigned to user
							*/
                            mashupRefId: 'getAlertStatistics',
                            mashupId: 'getAlertStatistics',
                            modelName:"inboxModel"

                        }
    		],
    		ui:{
    			showGlobalSearch: 'N',
    			hideGlobalSearchAction : 'N',
				isOpenMobileMenu : false,
                isOpenDesktopMenu : false,
                showAlertsIcon: true
    		},
    		/**
  		 		*@iscdoc uimethod
		 			*@viewname store.views.application-layout.header
  		 		*@methodname uiShowAboutBox
  		 		*@description Opens the about modal window
  		 		*/	    						
        uiShowAboutBox : function(){
    			iscModal.openModal('store.views.about.about',{},{});
    		}, 
				uiShowOnlineHelp : function(){
					/* Get dimensions of call center window and open help with same dimensions */
					var height = "innerHeight" in window 
						 ? window.innerHeight
						 : document.documentElement.offsetHeight;
					var width = "innerWidth" in window 
						 ? window.innerWidth
						 : document.documentElement.offsetWidth;
					var dimensions = "width=" + width + ", height=" + height;			
					var parameters = dimensions + ",status=yes,toolbar=no,menubar=no,location=no,resizable=yes,scrollbars=yes";					
					var url = iscAppInfo.getActiveHelpURL();
					var win = window.open(url,"Product_name", parameters);
					win.focus();					
				},
				/**
  		 		*@iscdoc uimethod
		 			*@viewname store.views.application-layout.header
  		 		*@methodname uiShowHome
  		 		*@description Opens home screen
  		 		*/
    		uiShowHome : function(){
				var currentPersonaName = iscPersona.getCurrentPersona();
				var currentState = iscState.currentState;
				if (!iscPersona.isOOTBPersona(currentPersonaName) && iscPersona.getPersonaSwitchAction(currentPersonaName) != null) {
					var actionToPerform = iscPersona.getPersonaSwitchAction(currentPersonaName);
					actionToPerform(currentPersonaName);
				} else {
					if (currentPersonaName === "Manager_Dashboard" && currentState != null && currentState.path !== "/manager-dashboard") {
						iscState.goToState("/manager-dashboard", {}, {});
					} else if (currentPersonaName !== "Manager_Dashboard") {
						if (currentState != null && currentState.path === "/home" && currentState.params != null && currentState.params.personaName === currentPersonaName) {
							// do nothing.
						} else {
							iscState.goToState("/home", {
								"personaName": currentPersonaName
							}, {});
						}
					}
				}
    		},
    		/**
  		 		*@iscdoc uimethod
		 			*@viewname store.views.application-layout.header
  		 		*@methodname uiDoSwitch
  		 		*@description Switches the application to order fullfillment
  		 		*/				
    		uiDoSwitch : function(){
    		    var appDeviceMode = iscAppInfo.getAppDeviceMode();
				var redirectURL = "";
				if(appDeviceMode === 'mobile'){
					redirectURL = iscAppInfo.getApplicationContext()+"/store/mobile/container/home.do";
				}
				else {
					redirectURL = iscAppInfo.getApplicationContext()+"/store/container/home.do";
				}
				window.location.href = iscHttpRequest.addAdditionalParamsInURL(redirectURL, "GET");
	    		  
	    	},
			
				/**
  		 		*@iscdoc uimethod
		 			*@viewname store.views.application-layout.header
  		 		*@methodname uiDoLogout
  		 		*@description Logs out the the user and redirects the app to login page			
  		 		*/    		
    		uiDoLogout:function(){
    			//If environemnt name is null, then it indicates an on-premise deployment.
    			//Also test if the environment is launched in production environment.
    			
    			var emailId =iscAppContext.getFromContext("ibmID");
				if(!emailId) {
					emailId =iscAppContext.getFromContext("emailID");
				}
				
    			var isProdEnv = iscAppContext.getFromContext("isProductionEnv");
				if(isProdEnv && (isProdEnv === "Y" || isProdEnv === "y") && emailId){
    				this.showNPSSurvey();
	    		}else {
	    				window.location.pathname = iscAppInfo.getApplicationContext()+"/ngstore/logout.do";	
	    			
	    			}
    		
    		},
    		
    		/**
  		 		*@iscdoc uimethod
		 			*@viewname store.views.application-layout.header
  		 		*@methodname showNPSSurvey
  		 		*@description Determines the logic for showing NPS survey pop up		 			
  		 		*/
    		
    		showNPSSurvey : function(){
    				var triggerFlagList= {};
	    			var availablePersonas = iscAppContext.getFromContext("availablePersonas");
	    			//Check if store user has access only to manager dashboard. If yes, set trigger to false
	    			if(availablePersonas.length == 1 && availablePersonas[0].id === "Manager_Dashboard"){
	    				//Store user has access only to manager dashboard, so set trigger1 to false.
	    				triggerFlagList["trigger3"] = false;
	    			//	triggerFlagList["trigger4"] = false;
	    			}else{
	    				triggerFlagList["trigger3"] = true;
	    			//	triggerFlagList["trigger4"] = true;
	    			}
	    			
	    			this.setParamsOnWindowObject(triggerFlagList);
	    			
					window.location.pathname = iscAppInfo.getApplicationContext()+"/ngstore/logout.do";	
    		
    		},
				/**
  		 		*@iscdoc uimethod
		 			*@viewname store.views.application-layout.header
  		 		*@methodname uiAlertClose
  		 		*@description Closes the alert message		 			
  		 		*/    		
    		uiAlertClose:function(){
    		  $rootScope.ui.showAlertMessage=false;
    		},
    		
    		uiCloseGlobalSearch:function(eventArg) {
    			$scope.$emit('uiSearchClose',{'data':'close'});
				if (eventArg != null) {
					eventArg.preventDefault();
					eventArg.stopPropagation();
				}
    		},
    		
    		uiHandleGlobalSearchResult:function(searchResult) {
    			
    			var mode = 'global-search';
    			if(!iscCore.isVoid(searchResult) && !iscCore.isVoid(searchResult.Mode)) {
    				mode = searchResult.Mode;
    			}
    			
    			if(mode == 'global-search') {
    				$rootScope.$emit("uiSearchClose","close");
    				if("orderList" == searchResult.NextPage.action) {
    					iscState.goToState('order-list',{input:searchResult.NextPage.model},{});
    				} else if("orderDetails" == searchResult.NextPage.action) {
    					
    					if("0001" ==  searchResult.NextPage.model.Order.DocumentType) {
    						iscOrder.viewOrderFromList(searchResult.NextPage.model.Order,false);
    					} else {
    						iscState.goToState('order-list',{input:searchResult.NextPage.model, callAPI:"N"},{});
    					}
    					
    					
    				}else if("customerList" == searchResult.NextPage.action) {
    					iscState.goToState('customer-list',{input:searchResult.NextPage.model},{});
    				}else if("customerDetails" == searchResult.NextPage.action) {
    					iscState.goToState('customer-details',{input:searchResult.NextPage.model},{});
    				}else if("shipmentList" == searchResult.NextPage.action) {
						if('basicSearch' == searchResult.NextPage.type){
							iscPortletShipment.handleShipmentOrderBarcodeTranslation(searchResult.NextPage.model, 'shipmentsummary');
						}else if('advancedSearch' == searchResult.NextPage.type){
							iscState.goToState('globalshipmentsearch',{input:searchResult.NextPage.model,ignoreDocumentType:searchResult.NextPage.ignoreDocumentType},{});
						}
    				}
    			} 
    			
    		},
		   /**
			*@iscdoc uimethod
			*@viewname store.views.application-layout.header
			*@methodname uiToggle
			*@description Called when the app header menu is toggled. Invokes the 'uiCloseGlobalSearch' method to close the global search mask			
			*/
			uiToggle : function() {
				this.uiCloseGlobalSearch();
				this.uiCloseAlertSearch();
			},
    		/**
  		 		*@iscdoc viewinit
		 			*@viewname store.views.application-layout.header
  		 		*@methodname initialize
  		 		*@description Initializes the store application shell
  		 		*/
    		initialize : function(){
    			
    			if(!iscResourcePermission.hasPermission("WSC000036") && !iscResourcePermission.hasPermission("WSC000031") && !iscResourcePermission.hasPermission("WSC000037")) {
    				this.ui.hideGlobalSearchAction = 'Y'; 
    			}
    			
    			
    		  $rootScope.$emit("$stateChangeStart");
					// code to trigger document click in mobile devices
					$document.bind('touchend', function(event) {
						$document.triggerHandler('click', [event]);						
					});
					
		   	 $rootScope.$on('uiSearchClose',function(event,args){
	  			 	if (args){
	  					  $scope.ui.showGlobalSearch = 'N';
	  			    } 

	  					   
	  			 });
	  			 
	  			 
	  		$rootScope.$on('uiAlertSearchClose',function(event,args){
	  					  $scope.ui.showAlertSearch = 'N';
	  					   
	  			    });
	  			 
	  			 
	  			 
	  			 var inputObj = {};
	  			 inputObj.Rules={};
	  			 iscMashup.callMashup(this,"getRuleDetails_AlertPollingInterval",inputObj,{}).then(this.handleResults.bind(this)); 
    		},
    		
    		
    		
    		handleResults : function(res){
    			var defaultTime = 60000;
    			var apiOutput = iscMashup.getMashupOutput(res,"getRuleDetails_AlertPollingInterval");
    			var rulesObj = apiOutput.Rules;
    			var ruleSetValue = rulesObj.RuleSetValue;
    			
    			this._startPolling(ruleSetValue,defaultTime);
    			
    		
    		},
    		
    		_startPolling : function(pollingTime,defaultPollingTime){
    			var that=this;
    			var poller = function(){
    				var inputObj = {};
	  			 	inputObj.getAlertStatisticsForUser={};
    				iscMashup.callMashup(that,"getAlertStatistics",inputObj,{showMask:false}).then(that.handleGetExceptionList.bind(that));
    			
    			}
    		
    			poller();
				setInterval(poller, pollingTime || defaultPollingTime);
    		
    		},
    		
			handleGetExceptionList : function(res){
    			var apiOutput = iscMashup.getMashupOutput(res,"getAlertStatistics");
    			$rootScope.ui.alertCount=apiOutput.getAlertStatisticsForUser.TotalAlerts;
    		},
    		uiHandleToggleAlertSearch : function(){
      			if(this.ui.showAlertSearch === 'Y'){
      				this.ui.showAlertSearch = 'N';
      			}else {
      				this.ui.showAlertSearch = 'Y';
      				//this.uiCloseShipmentSearch();
      				
      				var inputObj = {};
	  			 	inputObj.getAlertStatisticsForUser={};
    				iscMashup.callMashup(this,"getAlertStatistics",inputObj,{showMask:false}).then(this.handleGetExceptionList.bind(this));
      			}
      			
      		
      		},
    		
    		uiCloseAlertSearch: function(){
      			this.ui.showAlertSearch = 'N';
      		},
      		
      		
      		setParamsOnWindowObject : function(triggerFlagList){
      		
      		   var emailId =iscAppContext.getFromContext("ibmID");
				if(!emailId) {
					emailId =iscAppContext.getFromContext("emailID");
				}
      		   var userInfo = iscData.userInfo;
      		   var otherInfo = {};
      		   otherInfo["FirstName"]=iscAppContext.getFromContext("firstName");
      		   otherInfo["LastName"]=iscAppContext.getFromContext("lastName");
      		   otherInfo["EmailID"]=emailId;
      		   otherInfo["TenantName"]=iscAppContext.getFromContext("tenantName");
      		   otherInfo["icn"]=iscAppContext.getFromContext("customerICN");
      		   
			   var sMetaData = JSON.stringify(iscAppInfo.getIBMMetaObject(userInfo,otherInfo,triggerFlagList));
			   localStorage.setItem("IBM_Meta",sMetaData);
					
      		
      		}
	
      });
  	}
  ]);
  
  
})(window.angular,window.iscCore);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.customer-lookup-portlet-mini", [
	"$scope", "iscScreen",
	function($scope, iscScreen) {
		iscScreen.initializeScreen($scope, {
			model: {},
			mashupRefs: [],
			ui: {},
			initialize: function() {
				
			}
		});	
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.home.customer-lookup-portlet
 *@package store.views.home
 *@class customer-lookup-portlet
 *@description This portlet is used to Lookup/identify customers based on customer details like First name, Last name, EmailID and Phone number.
 *
 */
angular.module("store").controller("store.views.home.customer-lookup-portlet",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscAppContext","$timeout","iscDomUtility",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup, iscAppContext,$timeout,iscDomUtility){
		
		iscScreen.initializeScreen($scope,{  
			
			
			model:{
				
			},
			
			mashupRefs:[
			            	
			            	/**
			            	 * @description This mashup is used to find customers based on search criteria. 
			            	 */
							{
								 mashupRefId: 'findCustomerProfileBySearchCriteria',
							    mashupId: 'store.views.home.findCustomerProfileBySearchCriteria'
							
							}
							            
					      ],      
			ui : {
				/**
				*@property {Boolean}  showAdvanceSearch - used to show/hide display of Advance Search options on click of Advance Search link in the portlet.
				*/
				showAdvanceSearch:false,
				/**
				*@property {Boolean}  setFocus - used to set focus on Search by EmailID/Phone number field. 
				*/
				setFocus:false,
				/**
				*@property {String}  lookupType - contains the search type (EMAILID, PHONE_NUMBER or ADV_SEARCH) based on the search operation performed on portlet. 
				*/
				lookupType:""
			},
			
			/**
			 * @description This method handles the initialization of the portlet.
			 */
			initialize : function(){
				
				var that = this;
				
				$scope.$watch("ui.CustomerPaymentMethod.DisplayCreditCardNo",function(newValue, oldValue){
					
					var onlyDigitsRegEx = /^\d+$/;
					
					if(!iscCore.isVoid(newValue) && (newValue.length > 4 || !onlyDigitsRegEx.test(newValue))) {       
						that.ui.CustomerPaymentMethod.DisplayCreditCardNo = oldValue;
					}
					
				});
				
				$scope.$watch("ui.showAdvanceSearch",function (newValue, oldValue) {
					
					if(newValue) {
						iscDomUtility.setFocus(document.getElementById('lookupCustomerfirstName'));
					} 
					
				});
				
			},
			
			/**
			 * @description This method is used to validate the search text entered in portlet and invoke getCompleteCustomerList API to find customers matching the search text.
			 */
			uiFindCustomers:function() {
				
				if (!iscCore.isVoid(this.model.lookupValue)) {
					
					 var getCompleteCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:{ComplexQuery:{Or:{Exp:[]}}}}}};
					 
					 if(this.model.lookupValue.indexOf("@") > -1) {
						 this.ui.lookupType = 'EMAILID';
						 var emailExp = {Name:"EmailID",QryType:"EQ",Value:this.model.lookupValue};
						 getCompleteCustomerListInput.Customer.CustomerContactList.CustomerContact.ComplexQuery.Or.Exp.push(emailExp);
					 } else {
						 this.ui.lookupType = 'PHONE_NUMBER';
						 var phoneNoExp = {Name:"DayPhone",QryType:"EQ",Value:this.model.lookupValue};
						 getCompleteCustomerListInput.Customer.CustomerContactList.CustomerContact.ComplexQuery.Or.Exp.push(phoneNoExp);
					 } 
					 
					iscMashup.callMashup(this,"findCustomerProfileBySearchCriteria",getCompleteCustomerListInput,{}).then(this.processCustomerProfileSearchResult.bind(this,getCompleteCustomerListInput),angular.noop);
					
				} else {
					iscModal.showErrorMessage(iscI18n.translate('customerprofile.MSG_InvalidCustomerSearchData'));
				}
				
			},
			
			/**
			 * @description This method invokes getCompleteCustomerList API to find customers matching the search criteria.
			 */
			uiFindCustomerBySearchCriteria:function() {
				
				 this.ui.lookupType = 'ADV_SEARCH';
				
				 var getCompleteCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:{}}}};
				
				 if(this.ui.search && this.ui.search.CustomerContactList) {
					 getCompleteCustomerListInput.Customer.CustomerContactList.CustomerContact = this.ui.search.CustomerContactList.CustomerContact;
		   		 }
				 
	   			 if(this.ui.CustomerPaymentMethod && this.ui.CustomerPaymentMethod.DisplayCreditCardNo){
	   			 	getCompleteCustomerListInput.Customer.CustomerPaymentMethodList = {CustomerPaymentMethod:this.ui.CustomerPaymentMethod};
			     }
	   			
	   			 iscMashup.callMashup(this,"findCustomerProfileBySearchCriteria",getCompleteCustomerListInput,{}).then(this.processCustomerProfileSearchResult.bind(this,getCompleteCustomerListInput),angular.noop);
			},
			
			 /**
				 * @description Callback handler for
				 *              findCustomerProfileBySearchCriteria mashup. This
				 *              method processes the getCompleteCustomerList API
				 *              output and navigates to Customer Profile or
				 *              Customer List screen depending on the number of
				 *              customers returned by mashup.
				 * @param {Object}
				 *            findCustomerProfileInput - contains the API input used for finding customers. This is used for retaining the search criteria.
				 * @param {Object}
				 *            response - mashup response JSON object
				 */
			processCustomerProfileSearchResult:function(findCustomerProfileInput,response) {
				 
				 var customerSearchList = iscMashup.getMashupOutput(response,"findCustomerProfileBySearchCriteria");
		    	 var action = "", model = {};
		    	 console.log("Customer Profiles Output : ",customerSearchList);
		   	 
		    	 if(customerSearchList.CustomerList.TotalNumberOfRecords === '1'){
		    		 model = {Customer:customerSearchList.CustomerList.Customer[0]};
		    		 action = 'customerdetails';
		    	 }else{
		    		 model.getCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:{}}}};;
		    		 model.lookupType = this.ui.lookupType;
		    		 
		    		 model.getCustomerListInput = findCustomerProfileInput;
		    		 
		    		 action = 'customerlist';
		    	 }
		    	 
		    	if(action == 'customerdetails') {
					iscState.goToState('customerprofilewizard',{action:action,input:model},{});
				} else if(action == 'customerlist') {
					iscState.goToState('customerProfileList',{input:model},{});
				}
		    	
		    	this.model.lookupValue = "";
				 
			 },
			 
			 /**
			 * @description This method is used to close/hide the Advance Search criteria screen on click of cancel button.
			 */
			 uiCloseAdvanceSearch:function() {
				 this.ui.showAdvanceSearch = false;
				 $timeout(function (){
				        document.getElementById('lookupCustomerAdvanceSearchLink').focus();
				    }, 500);
			 }
			
			
			
		});	
}]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.find-products-portlet-mini", [
	"$scope", "iscScreen",
	function($scope, iscScreen) {
		iscScreen.initializeScreen($scope, {
			model: {},
			mashupRefs: [],
			ui: {},
			initialize: function() {
				
			}
		});	
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



angular.module("store").controller("store.views.home.find-products-portlet",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","$interval","$rootScope",
	function($scope,iscScreen,iscState,iscModal,iscI18n,$interval,$rootScope){
		iscScreen.initializeScreen($scope,{  
			model:{
				/**
         *@iscdoc model
		 		 *@viewname store.views.home.store-home
         *@name addProductInput
         *@description This model contains the scan input for find products
         */
        "addProductInput":{}
			},
			uiOpenAddItems: function(type){
				if(!iscCore.isVoid(this.model.addProductInput.value)){
					iscState.goToState('ordercapture',{action:type,input:this.model.addProductInput.value},{});
				}
				else{
					iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
				}
			}
		});	
}]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.in-store-appointment-portlet-mini", [
	"$scope", "iscScreen", "iscMashup","iscInStoreAppointment",
	function($scope, iscScreen, iscMashup,iscInStoreAppointment) {
		iscScreen.initializeScreen($scope, {
			model: {},
			mashupRefs: [
			/**
			 * @description This mashup is get open appointment count for today to be executed in current store.
			 */
			{
				mashupRefId: 'getStoreOpenAppointmentCountForToday',
			    mashupId: 'store.views.home.getStoreOpenAppointmentCount'
			}],
			
			ui: {
				/**
				*@property {Boolean} isMashupCallInProgress - true if mashup call in progress. False otherwise
				*/
				isMashupCallInProgress: true,
				/**
				*@property {Number} displayCount - contains the open appointment count for today, in the current store. 
				*/
				displayCount: 0
			},
			
			/**
			 * @description This method invokes APIs for getting open appointment count for current store
			 */
			initialize: function() {
				iscMashup.callMashup(this, "getStoreOpenAppointmentCountForToday", {
					"WorkOrderAppointment": {StoreTimezoneOffset:iscInStoreAppointment.getCurrentStoreTimezoneOffset()}
				}, {showMask: false}).then(this.handleInitAPIs.bind(this), angular.noop);
			},
			
			/**
			 * @description This callback handler for mashups invoked in invokeInitAPIs(). This method initializes open appointment count model.
			 * 
			 * @param {Object} response - API response JSON object
			 */
			handleInitAPIs: function(response) {
				var storeAppointmentList = iscMashup.getMashupOutput(response, "getStoreOpenAppointmentCountForToday");
				this.ui.displayCount = Number(storeAppointmentList.WorkOrderAppointments.TotalNumberOfRecords);
				this.ui.isMashupCallInProgress = false;
			}
		});	
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.home.in-store-appointment-portlet
 *@package store.views.home
 *@class in-store-appointment-portlet
 *@description This portlet is display the in-store appointment open count and upcoming appointment based on current time. User can also search for appointments based on appointment reference number and customer details.
 *
 */
angular.module("store").controller("store.views.home.in-store-appointment-portlet",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","$filter","iscInStoreAppointment","iscAppContext","$timeout","iscResourcePermission","iscDomUtility",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup, $filter,iscInStoreAppointment, iscAppContext,$timeout,iscResourcePermission,iscDomUtility){
		
		iscScreen.initializeScreen($scope,{  
			
			
			model:{
				
				/**
				 * @description This model contains upcoming appointment details JSON model based on current time.
				 */
				upcomingAppointmentDetails:{},
				/**
				 * @description This model contains user entered or scanned appointment reference number.
				 */
				lookupReferenceNo:"",
				/**
				 * @description This model contains user entered customer search criteria.
				 */
				customerSearchCriteria:{}
				
			},
			
			mashupRefs:[
							/**
							 * @description This mashup is get open appointment count for today to be executed in current store.
							 */
							{
								mashupRefId: 'getStoreOpenAppointmentCountForToday',
							    mashupId: 'store.views.home.getStoreOpenAppointmentCount'
							
							},
							/**
							 * @description This mashup is get upcoming appointment details based on current time.
							 */
							{
								mashupRefId: 'getUpcomingStoreAppointmentDetailsByCurrentTime',
							    mashupId: 'store.views.home.getUpcomingStoreAppointmentDetailsByCurrentTime'
								
							},
							/**
							 * @description This mashup is search work order based on user provided reference number.
							 */
							{
								mashupRefId: 'searchWorkOrderByWorkOrderNumber',
							    mashupId: 'store.views.home.searchWorkOrderByWorkOrderNumber'
							
							},
							/**
							 * @description This mashup is search for work order based on scanned reference number.
							 */
							{
								mashupRefId: 'translateBarCodeForWorkOrder',
							    mashupId: 'store.views.home.translateBarCodeForWorkOrder'
							},
							/**
							 * @description This mashup is search for appointments based on customer search details.
							 */
							{
								mashupRefId: 'findAppointmentsByCustomerDetails',
							    mashupId: 'store.views.home.findAppointmentsByCustomerDetails'
							}
							            
					      ],      
			ui : {
				/**
				*@property {Boolean} showAdvanceSearch - used to show/hide display of Advance Search options on click of Advance Search link in the portlet.
				*/
				showAdvanceSearch:false,
				/**
				*@property {Boolean} setFocus - used to set focus on Search by EmailID/Phone number field. 
				*/
				setFocus:false,
				/**
				*@property {Number} storeAppointmentCount - contains the open appointment count for today to be executed in current store. 
				*/
				storeAppointmentCount:0,
				/**
				*@property {Number} upcomingAppntCount - contains the upcoming appointment count for today to be executed in current store based on current time.
				*/
				upcomingAppntCount:0,
				/**
				*@property {Boolean} hasPermissionToCreateAppnt - true if user has permission for in-store appointment. False, otherwise.
				*/
				hasPermissionToCreateAppnt:iscResourcePermission.hasPermission("WSC000074")
			},
			
			/**
			 * @description This method handles the initialization of the portlet by invoking appropriate APIs and initializing watchers.
			 */
			initialize : function(){
				
				this.invokeInitAPIs();
				this.initializeWatchers();
				
			},
			
			/**
			 * @description This method invokes APIs for getting open appointment count and upcoming appointment details for current store
			 */
			invokeInitAPIs:function() {
				
				
				var mashupArray = [];
				
				var apiInput = {WorkOrderAppointment:{}};
				
				mashupArray.push(iscMashup.getMashupRefObj(this,'getStoreOpenAppointmentCountForToday',apiInput));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getUpcomingStoreAppointmentDetailsByCurrentTime',apiInput));
				
				iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitAPIs.bind(this),angular.noop);
				
			},
			
			/**
			 * @description This method initializes the watcher required for setting focus.
			 */
			initializeWatchers:function() {
				
				$scope.$watch("ui.showAdvanceSearch",function (newValue, oldValue) {
					
					if(newValue) {
						iscDomUtility.setFocus(document.getElementById('lookupCustomerfirstName'));
					} 
					
				});
			},
			
			/**
			 * @description This callback handler for mashups invoked in invokeInitAPIs(). This method initializes open appointment count and upcoming appointment details model.
			 * 
			 * @param {Object} response - API response JSON object
			 */
			handleInitAPIs:function(response) {
				
				var storeAppointmentList = iscMashup.getMashupOutput(response,"getStoreOpenAppointmentCountForToday");
				var storeUpcomingAppointmentList = iscMashup.getMashupOutput(response,"getUpcomingStoreAppointmentDetailsByCurrentTime");
				
				console.log("storeAppointmentList - ",storeAppointmentList);
				console.log("storeAppointmentDetails - ",storeUpcomingAppointmentList);
				
				this.ui.storeAppointmentCount = Number(storeAppointmentList.WorkOrderAppointments.TotalNumberOfRecords);
				this.ui.upcomingAppntCount = Number(storeUpcomingAppointmentList.WorkOrderAppointments.TotalNumberOfRecords);
				if(this.ui.upcomingAppntCount > 0) {
					this.model.upcomingAppointmentDetails = {WorkOrderAppointment:storeUpcomingAppointmentList.WorkOrderAppointments.WorkOrderAppointment[0]};
				}
			},
			
			/**
			 * @description This method launches create appointment wizard
			 */
			uiOpenCreateAppointmentWizard:function() {
				iscInStoreAppointment.openCreateAppointmentWizard({});
			},
			
			/**
			 * @description This method launches store appointment calendar view.
			 */
			uiShowStoreAppointmentView:function() {
				iscInStoreAppointment.viewStoreApppointmentCalendar();
			},
			
			/**
			 * @description This method returns the service description of upcoming appointment.
			 */
			uiGetServiceDesription:function() {
				return iscInStoreAppointment.getServiceDescriptionForAppointment(this.model.upcomingAppointmentDetails);
			},
			
			/**
			 * @description This method returns the customer name of upcoming appointment.
			 */
			uiGetCustomerName:function() {
				return iscInStoreAppointment.getCustomerDisplayNameForAppointment(this.model.upcomingAppointmentDetails);
			},
			
			uiViewAppointmentSummary:function() {
				
				var workOrder = this.model.upcomingAppointmentDetails.WorkOrderAppointment.WorkOrder;
				var appntSummaryInput = {Order:{OrderHeaderKey:workOrder.OrderHeaderKey,WorkOrderKey:workOrder.WorkOrderKey}};
				iscInStoreAppointment.openAppointmentSummary(appntSummaryInput);
			},
			
			/**
			 * @description This method invokes API for searching work orders. Appropriate APIs is invoked based on action viz. when reference number is scanned & entered manually.
			 * @param {String} searchType - contains SCAN - reference number barcode is scanned or SEARCH - reference number is manually entered.  
			 */
			uiLookupReferenceNo:function(searchType) {
				
				if (!iscCore.isVoid(this.model.lookupReferenceNo)) {
					if(searchType == 'SCAN'){
						var translateBarCodeApiInput = {BarCode:{BarCodeData:this.model.lookupReferenceNo}};
						iscMashup.callMashup(this,"translateBarCodeForWorkOrder", translateBarCodeApiInput,{}).then(this.processBarCodeTranslation.bind(this),angular.noop);
					}else{
						var searchWorkOrderInput = {WorkOrder:{WorkOrderNo:this.model.lookupReferenceNo}};
						iscMashup.callMashup(this,"searchWorkOrderByWorkOrderNumber", searchWorkOrderInput,{}).then(this.processBarCodeSearch.bind(this),angular.noop);
					}
					this.model.lookupReferenceNo = "";
				} else {
					iscModal.showErrorMessage(iscI18n.translate('instoreappointment.MSG_InvalidBarCodeData'));
				}
				
			},
			
			/**
			 * @description This method is a callback handler for translateBarCodeForWorkOrder API invoked in uiLookupReferenceNo(). This method processes the API output and 
			 * navigates to appointment summary if work order is found else appropriate error message is displayed.
			 * 
			 * @param {Object} response - API response JSON object. 
			 */
			processBarCodeTranslation:function(response){
				var numberOfTranslations = 0, workOrder = {};
				var apiOutput = iscMashup.getMashupOutput(response,"translateBarCodeForWorkOrder");

				if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.BarCode.Translations) && !iscCore.isVoid(apiOutput.BarCode.Translations.TotalNumberOfRecords)) {
					numberOfTranslations = $filter('number')(apiOutput.BarCode.Translations.TotalNumberOfRecords);
					
					if (numberOfTranslations == 1 && apiOutput.BarCode.Translations.Translation[0].WorkOrderContextualInfo) {
						
						var workOrderCtxInfo = apiOutput.BarCode.Translations.Translation[0].WorkOrderContextualInfo;
						/**
						 * System cancelled work orders should not be identified as they are hidden from UI in appnt summary
						 */
						if(workOrderCtxInfo && workOrderCtxInfo.IsSystemCancelledWorkOrder === "Y") {
							numberOfTranslations = 0;
						} else {
							workOrder = {Order:{OrderHeaderKey:apiOutput.BarCode.Translations.Translation[0].WorkOrderContextualInfo.OrderHeaderKey, 
								WorkOrderKey:apiOutput.BarCode.Translations.Translation[0].WorkOrderContextualInfo.WorkOrderKey}};
						}
						
					}
				}
				
				this.handleFinalOutput(numberOfTranslations,workOrder);
				
			},

			/**
			 * @description This method is a callback handler for searchWorkOrderByWorkOrderNumber API invoked in uiLookupReferenceNo(). This method processes the API output and 
			 * navigates to appointment summary if work order is found else appropriate error message is displayed.
			 * 
			 *  @param {Object} response - API response JSON object.  
			 */
			processBarCodeSearch:function(response){
				var numberOfWorkOrders = 0, salesOrder = {};
				
				var apiOutput = iscMashup.getMashupOutput(response,"searchWorkOrderByWorkOrderNumber");

				if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.WorkOrders) && !iscCore.isVoid(apiOutput.WorkOrders.TotalNumberOfRecords)) {
					numberOfWorkOrders = $filter('number')(apiOutput.WorkOrders.TotalNumberOfRecords);
					if (numberOfWorkOrders == 1 && apiOutput.WorkOrders.WorkOrder[0]) {
						
						var workOrder = apiOutput.WorkOrders.WorkOrder[0];
						if(iscInStoreAppointment.isSystemCancelledWorkOrder(workOrder)) {
							numberOfWorkOrders = 0;
						} else {
							 salesOrder = {Order:{OrderHeaderKey:apiOutput.WorkOrders.WorkOrder[0].OrderHeaderKey, 
									WorkOrderKey:apiOutput.WorkOrders.WorkOrder[0].WorkOrderKey}};
						}
						
					}
				}
				
				this.handleFinalOutput(numberOfWorkOrders,salesOrder);
				
			},
			
			/**
			 * @description This method navigates to appointment summary else appropriate error message is displayed.
			 * 
			 *  @param {Object} salesOrder - sales order JSON model.
			 *  @param {Number} numberOfWorkOrders - number of work orders found.
			 */
			handleFinalOutput:function(numberOfWorkOrders, salesOrder) {
				
				if(numberOfWorkOrders == 0) {
					iscModal.showErrorMessage(iscI18n.translate('instoreappointment.MSG_NoWorkOrderFound'));
				} else {
					iscInStoreAppointment.openAppointmentSummary(salesOrder);
				}
				
			},
			
			/**
			 * @description This method invokes API to search customers based on search criteria.
			 */
			uiFindAppointmentsByCustomerDetails:function() {
				
				var getCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:this.model.customerSearchCriteria}}};
				iscMashup.callMashup(this,"findAppointmentsByCustomerDetails", getCustomerListInput,{}).then(this.processCustomerList.bind(this),angular.noop);
				
			},
			
			/**
			 * @description This method is a callback handler for findAppointmentsByCustomerDetails API invoked in uiFindAppointmentsByCustomerDetails(). This method processes the API output and 
			 * navigates to:
			 * 		appointment-list - If customer is valid and multiple open appointments are found.
			 * 		appointment-summary - If customer is valid and single open appointments are found.
			 * 		customer search result - If multiple or no customers are found for search criteria.
			 * 
			 *  @param {Object} response - API response JSON object.  
			 */
			processCustomerList:function(response) {
				
				var apiOutput = iscMashup.getMashupOutput(response,"findAppointmentsByCustomerDetails");
				var numberOfCustomers = Number(apiOutput.CustomerList.TotalNumberOfRecords);
				if(numberOfCustomers == 1) {
					
					var numberOfOpenAppnts = Number(apiOutput.CustomerList.OpenAppointmentCount);
					if(numberOfOpenAppnts == 1) {
						var salesOrder = {Order:{OrderHeaderKey:apiOutput.CustomerList.WorkOrder.OrderHeaderKey}};
						iscInStoreAppointment.openAppointmentSummary(salesOrder);
					} else {
						var customer = {Customer:{CustomerID:apiOutput.CustomerList.Customer[0].CustomerID, CustomerKey:apiOutput.CustomerList.Customer[0].CustomerKey}};
						var filterOptions = {'Status':'OPEN'};
						iscInStoreAppointment.openAppointmentList(customer, filterOptions);
					}
					
				} else {
					var getCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:this.model.customerSearchCriteria}}};
					iscState.goToState('customer-list',{input:getCustomerListInput, callApi:true, context:'APPOINTMENT'},{});
				}
				this.model.customerSearchCriteria = "";

			},

			 
			 /**
			 *@description This method is used to close/hide the Advance Search criteria screen on click of cancel button.
			 */
			 uiCloseAdvanceSearch:function() {
				 this.ui.showAdvanceSearch = false;
				 $timeout(function (){
				        document.getElementById('lookupRefNoAdvanceSearchLink').focus();
				    }, 500);
			 }
			
			
			
		});	
}]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.instore-receiving-portlet-mini", [
	"$scope", "iscScreen", "iscMashup",
	function($scope, iscScreen, iscMashup) {
		iscScreen.initializeScreen($scope, {
			model: {},
			mashupRefs: [{
				mashupRefId: 'getIncomingReceivingShipmentsCount',
				mashupId: 'store.views.home.getIncomingReceivingShipmentsCount'
			}, {
				mashupRefId: 'getDelayedReceivingShipmentsCount',
				mashupId: 'store.views.home.getDelayedReceivingShipmentsCount'
			}, {
				mashupRefId: 'getReceiviedShipmentsCount',
				mashupId: 'store.views.home.getReceiviedShipmentsCount'
			}],
			
			ui: {
				isMashupCallInProgress: true,
				incomingCount: 0,
				delayedCount: 0,
				receivedCount: 0,
				displayCount: 0
			},
			
			initialize: function() {
				var mashupArray = [];
				mashupArray.push(iscMashup.getMashupRefObj(this, 'getIncomingReceivingShipmentsCount', {
					"Shipment": {
						"FromExpectedDeliveryDate": "",
						"ToExpectedDeliveryDate": ""
					}
				}));
				mashupArray.push(iscMashup.getMashupRefObj(this, 'getDelayedReceivingShipmentsCount', {
					"Shipment": {
						"ExpectedDeliveryDate": ""
					}
				}));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getReceiviedShipmentsCount', {
					"Receipt": {
						"FromReceiptDate": "",
						"ToReceiptDate": ""
					}
				}));
				iscMashup.callMashups(this, mashupArray, {showMask: false}).then(this.handleInitApiCalls.bind(this), angular.noop);
			},
			
			handleInitApiCalls: function(response) {
				var incomingShipmentCount = iscMashup.getMashupOutput(response, "getIncomingReceivingShipmentsCount");
				var delayedShipmentCount = iscMashup.getMashupOutput(response, "getDelayedReceivingShipmentsCount");
				var receivedShipmentCount = iscMashup.getMashupOutput(response, "getReceiviedShipmentsCount");
				
				if (!iscCore.isVoid(incomingShipmentCount) && !iscCore.isVoid(incomingShipmentCount.Shipments) && !iscCore.isVoid(incomingShipmentCount.Shipments.TotalNumberOfRecords)) {
					this.ui.incomingCount = Number(incomingShipmentCount.Shipments.TotalNumberOfRecords);
				}
				if (!iscCore.isVoid(delayedShipmentCount) && !iscCore.isVoid(delayedShipmentCount.Shipments) && !iscCore.isVoid(delayedShipmentCount.Shipments.TotalNumberOfRecords)) {
					this.ui.delayedCount = Number(delayedShipmentCount.Shipments.TotalNumberOfRecords);
				}
				if (!iscCore.isVoid(receivedShipmentCount) && !iscCore.isVoid(receivedShipmentCount.ReceiptList) && !iscCore.isVoid(receivedShipmentCount.ReceiptList.TotalNumberOfRecords)) {
					this.ui.receivedCount = Number(receivedShipmentCount.ReceiptList.TotalNumberOfRecords);
				}
				this.ui.displayCount = this.ui.incomingCount + this.ui.delayedCount + this.ui.receivedCount;
				this.ui.isMashupCallInProgress = false;
			 }
		});	
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.instore-receiving-portlet",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscAppContext","$filter","$timeout","iscDomUtility","iscPersona",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup, iscAppContext,$filter,$timeout,iscDomUtility,iscPersona){
		iscScreen.initializeScreen($scope,{  
			model:{	
				
				
              "receivingShipmentCount":{"IncomingCount":"0","DelayedCount":"0","ReceivedCount":"0","TotalCount":"0"},
              "scanInput":{}
				
			},
			
			mashupRefs:[

							
							{
								 mashupRefId: 'getIncomingReceivingShipmentsCount',
							     mashupId: 'store.views.home.getIncomingReceivingShipmentsCount'
							
							},
							
							{
								 mashupRefId: 'getDelayedReceivingShipmentsCount',
							     mashupId: 'store.views.home.getDelayedReceivingShipmentsCount'
							
							},
							
							{
								 mashupRefId: 'getReceiviedShipmentsCount',
							     mashupId: 'store.views.home.getReceiviedShipmentsCount'
							
							},
							{
								 mashupRefId: 'getShipmentListForReceiving',
							     mashupId: 'store.views.receiving.getShipmentListForReceiving'
							},
							{
								 mashupRefId: 'translateBarCodeForShipmentReceiving',
							     mashupId: 'store.views.home.translateBarCodeForShipmentReceiving'
							}
							
			],      
			ui : {
				showAdvanceSearch:false,
				// New for usePersonaBasedHomepageFlag - for charts start.
				/**
				*@property {Boolean} new_usePersonaBasedHomepage - true if new persona based home page is set as true in SBC. It results in displaying semi-circle chart on the portlet to indicate progress of receiving charts. False, otherwise and the old fixed semi-circle is displayed.
				*/
				new_usePersonaBasedHomepage: false
				// New for usePersonaBasedHomepageFlag - for charts end.
			},
			
			initialize : function(){
				
				 var mashupArray = [];
				 this.ui.new_usePersonaBasedHomepage = iscPersona.getUsePersonaBasedHomepageFlagValue();
	        	 mashupArray.push(iscMashup.getMashupRefObj(this,'getIncomingReceivingShipmentsCount',{Shipment:{"FromExpectedDeliveryDate":"","ToExpectedDeliveryDate":""}}));
		         mashupArray.push(iscMashup.getMashupRefObj(this,'getDelayedReceivingShipmentsCount', {Shipment:{"ExpectedDeliveryDate":""}}));
		         mashupArray.push(iscMashup.getMashupRefObj(this,'getReceiviedShipmentsCount', {Receipt:{"FromReceiptDate":"","ToReceiptDate":""}}));
		         
		         iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				
			},
			
			handleInitApiCalls: function(response) {
	        	 
	        	 var incomingShipmentCount = iscMashup.getMashupOutput(response,"getIncomingReceivingShipmentsCount");
	        	 var delayedShipmentCount = iscMashup.getMashupOutput(response,"getDelayedReceivingShipmentsCount");
	        	 var receivedShipmentCount = iscMashup.getMashupOutput(response,"getReceiviedShipmentsCount");
	        	 
	        	 var totalShipmentCount = Number(0);
	        	 if(!iscCore.isVoid(incomingShipmentCount) && !iscCore.isVoid(incomingShipmentCount.Shipments) && !iscCore.isVoid(incomingShipmentCount.Shipments.TotalNumberOfRecords)) {
	        		 this.model.receivingShipmentCount.IncomingCount = $filter('number')(incomingShipmentCount.Shipments.TotalNumberOfRecords);
	        		 totalShipmentCount += Number(incomingShipmentCount.Shipments.TotalNumberOfRecords);
	        	 } 
	        	 
	        	if(!iscCore.isVoid(delayedShipmentCount) && !iscCore.isVoid(delayedShipmentCount.Shipments) && !iscCore.isVoid(delayedShipmentCount.Shipments.TotalNumberOfRecords)) {
	        		this.model.receivingShipmentCount.DelayedCount = $filter('number')(delayedShipmentCount.Shipments.TotalNumberOfRecords);
	        		totalShipmentCount +=  Number(delayedShipmentCount.Shipments.TotalNumberOfRecords);
	        	} 
	        	
	        	if(!iscCore.isVoid(receivedShipmentCount) && !iscCore.isVoid(receivedShipmentCount.ReceiptList) && !iscCore.isVoid(receivedShipmentCount.ReceiptList.TotalNumberOfRecords)) {
	        		this.model.receivingShipmentCount.ReceivedCount = $filter('number')(receivedShipmentCount.ReceiptList.TotalNumberOfRecords);
	        		totalShipmentCount += Number(receivedShipmentCount.ReceiptList.TotalNumberOfRecords);
	        	}
	        	
	        	this.model.receivingShipmentCount.TotalCount = $filter('number')(totalShipmentCount);
	        	 
	        	console.log("this.receivingShipmentCount : ",this.model.receivingShipmentCount);
	        	 
			 },
			 
			 uiScanBarCodeData:function() {
				 
				 if (!iscCore.isVoid(this.model.scanInput.value)) {
						
					 var translateBarCodeApiInput = {BarCode:{BarCodeData:this.model.scanInput.value}};
					 iscMashup.callMashup(this,"translateBarCodeForShipmentReceiving",translateBarCodeApiInput,{}).then(this.processBarCodeTranslation.bind(this),angular.noop);
					 this.model.scanInput.value = "";
					} else {
						iscModal.showErrorMessage(iscI18n.translate('instorereceiving.MSG_InvalidBarCodeData'));
					}
				 
				 
			 },
			 
			 processBarCodeTranslation:function(response)  {
				 
				 var numberOfReceivableShipments = 0,shipments = "", barCodeTranslatedEntity = "", productQtyToReceive = 0;
				 var apiOutput = iscMashup.getMashupOutput(response,"translateBarCodeForShipmentReceiving");
				 if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.BarCode.Shipments) && !iscCore.isVoid(apiOutput.BarCode.Shipments.TotalNumberOfRecords)) {
					 barCodeTranslatedEntity = apiOutput.BarCode.BarCodeTranslatedEntity;
					 barCodeTranslatedValue = apiOutput.BarCode.BarCodeTranslatedValue;
					 numberOfReceivableShipments = $filter('number')(apiOutput.BarCode.Shipments.TotalNumberOfRecords);
					 shipments = {Shipments:apiOutput.BarCode.Shipments};
				 }
				 
				 var autoReceive = {AutoReceiveEntity:barCodeTranslatedEntity, TranslatedEntityValue:barCodeTranslatedValue};
				 if("PRODUCT" == barCodeTranslatedEntity) {
					 autoReceive.AutoReceiveProductQuantity = apiOutput.BarCode.ProductQuantityToReceive;
				 }
					
				 if("0" == numberOfReceivableShipments) {
					 iscModal.showErrorMessage(iscI18n.translate('instorereceiving.MSG_ShipmentNotFound'));
				 } else if ("1" == numberOfReceivableShipments) {
					 this.openReceiveShipmentWizard(shipments.Shipments.Shipment[0], autoReceive);
				 } else {
					this.openMultipleReceivingShipmentsModal(shipments,autoReceive);
				 }
				 
			 },
			 
			 uiOpenAdvanceSearch: function() {
			 	this.ui.showAdvanceSearch = true;
			 	iscDomUtility.setFocus(document.getElementById('packageId'));
			 },
			 
			 uiAdvanceClose: function() {
			 	this.ui.showAdvanceSearch = false;
			 	$timeout(function (){
			       document.getElementById('advanceSearchLink').focus();
			    }, 500);
			 },
			 
			 uiAdvanceSearch:function() {
				 if(!this.validateSearchInput()) {
					 iscModal.showErrorMessage(iscI18n.translate('instorereceiving.MSG_AdvanceSearchBlankCriteria'));
				 } else {
					 iscMashup.callMashup(this,"getShipmentListForReceiving",this.getAdvanceSearchInput(),{}).then(this.processAdvanceSearchResults.bind(this),angular.noop);
				 }
			 },
			 
			 validateSearchInput:function() {
				
				 var isSearchInputValid = true;
				 
				 if(iscCore.isVoid(this.ui.search)) {
					 isSearchInputValid = false;
				 } else if(!iscCore.isVoid(this.ui.search) && iscCore.isVoid(this.ui.search.PackageId) && iscCore.isVoid(this.ui.search.ShipmentNo) && iscCore.isVoid(this.ui.search.OrderNo) && iscCore.isVoid(this.ui.search.ProductCode) &&iscCore.isVoid(this.ui.search.POTONo)) {
					isSearchInputValid = false;
				 }
				 
				 return isSearchInputValid;
				 
			 },
			 
			 processAdvanceSearchResults:function(response) {
				 
				 var numberOfReceivableShipments = 0,shipments = "";;
				 var apiOutput = iscMashup.getMashupOutput(response,"getShipmentListForReceiving");
				 if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.Shipments) && !iscCore.isVoid(apiOutput.Shipments.TotalNumberOfRecords)) {
					 numberOfReceivableShipments = $filter('number')(apiOutput.Shipments.TotalNumberOfRecords);
					 shipments = {Shipments:apiOutput.Shipments};
				 }
				 
				 if("0" == numberOfReceivableShipments) {
					 iscModal.showErrorMessage(iscI18n.translate('instorereceiving.MSG_ShipmentNotFound'));
				 } else if ("1" == numberOfReceivableShipments) {
					 this.openReceiveShipmentWizard(shipments.Shipments.Shipment[0],"")
				 } else {
					this.openMultipleReceivingShipmentsModal(shipments,"");
				 }
				 
			 },
			 
			 openMultipleReceivingShipmentsModal:function(shipmentList, autoReceive) {
					
				 	var that = this;
					var popupInput = {};
					popupInput.shipmentList = shipmentList;
					if(autoReceive) {
						popupInput.entity = autoReceive.AutoReceiveEntity;
					} else {
						popupInput.entity = "";
					}
					
					var multipleReceivingShipPopupInput = {
						 modalInput: function(){
			      			return popupInput;
			      		}   
					   
					};
					   
					iscModal.openModal('store.views.receiving.receive-shipment.common.multiple-shipments.multiple-receiving-shipments',multipleReceivingShipPopupInput,{}).then(function(callBackData){
						if(callBackData.data !== null && callBackData.data !== undefined){
							that.openReceiveShipmentWizard(callBackData.data, autoReceive);
						}
					},angular.noop);
					
				},
				
				uiHandleSearchResult : function(searchResult) {
					console.log("searchResult is:",searchResult);
					iscState.goToState('receive-shipment',{action:searchResult.action,input:searchResult.model},{});
				},
				
				openReceiveShipmentWizard:function(shipment, autoReceive) {
					
					var shipmentToReceive = {Shipment:{ShipmentKey:shipment.ShipmentKey,ShipmentContainerizedFlag:shipment.ShipmentContainerizedFlag}};
					iscState.goToState('receive-shipment',{action:"receiveShipment",input:shipmentToReceive, autoReceive:autoReceive},{});
					
				},
			 
			 
			 /**
			  * <Shipment MaximumRecords="10" ShipmentKey="" ShipmentNo="" ReceivingNode="xml:CurrentStore:/Store/@ShipNode">
					<Containers>
						<Container ContainerNo="" ContainerScm=""/>
					</Containers>
					<ShipmentLines>
						<ShipmentLine OrderNo="">
							<OrderLine ChainedFromOrderHeaderKey=""/>
						</ShipmentLine>
					</ShipmentLines>
					<ComplexQuery>
						<Or>
							<Exp Name="DocumentType" Value="0006"/>
							<Exp Name="DocumentType" Value="0005"/>
						</Or>
						<Or>
							<Exp Name="Status" Value="1400" QryType="FLIKE"/>
							<Exp Name="Status" Value="1600" QryType="FLIKE" />
						</Or>
					</ComplexQuery>
				</Shipment>
			  */
			 getAdvanceSearchInput:function() {
				
				 var shipment = {Shipment:{}};
				 
				 if(!iscCore.isVoid(this.ui.search.PackageId)) {
					 if(!shipment.Shipment.Containers) {
						 shipment.Shipment.Containers = {};
						 shipment.Shipment.Containers.Container = {};
					 }
					 shipment.Shipment.Containers.Container.ContainerScm = this.ui.search.PackageId;
					 shipment.Shipment.Containers.Container.ContainerType = "Case";
				 }
				 
				 if(!iscCore.isVoid(this.ui.search.ShipmentNo)) {
					 shipment.Shipment.ShipmentNo =  this.ui.search.ShipmentNo;
				 }
				 
				 if(!iscCore.isVoid(this.ui.search.OrderNo)) {
					 if(!shipment.Shipment.ShipmentLines) {
						 shipment.Shipment.ShipmentLines = {};
						 shipment.Shipment.ShipmentLines.ShipmentLine = {};
					 }
					 
					shipment.Shipment.ShipmentLines.ShipmentLine.OrderLine = {ChainedFromOrder:{OrderNo:this.ui.search.OrderNo}};
				 }
				 
				 if(!iscCore.isVoid(this.ui.search.ProductCode)) {
					 if(!shipment.Shipment.ShipmentLines) {
						 shipment.Shipment.ShipmentLines = {};
						 shipment.Shipment.ShipmentLines.ShipmentLine = {};
					 }
					 shipment.Shipment.ShipmentLines.ShipmentLine.ItemID = this.ui.search.ProductCode;
				 }
				 
				 if(!iscCore.isVoid(this.ui.search.POTONo)) {
					 if(!shipment.Shipment.ShipmentLines) {
						 shipment.Shipment.ShipmentLines = {};
						 shipment.Shipment.ShipmentLines.ShipmentLine = {};
					 }
					 shipment.Shipment.ShipmentLines.ShipmentLine.OrderNo = this.ui.search.POTONo;
				 }
				 
				 return shipment;
				 
				 
			 },
			 
			 uiOpenInboundShipmentList: function(tabToOpen) {
				 if (tabToOpen != null) {
					 iscState.goToState("receivingShipmentList", {
						"defaultTab": tabToOpen.toLowerCase()
					 }, {});
				 }
			 }
			
		});	
}]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.quick-checkout-portlet-mini", [
	"$scope", "iscScreen",
	function($scope, iscScreen) {
		iscScreen.initializeScreen($scope, {
			model: {},
			mashupRefs: [],
			ui: {},
			initialize: function() {
				
			}
		});	
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/






angular.module("store").controller("store.views.home.quick-checkout-portlet",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscAppContext","iscMashup",
	function($scope,iscScreen,iscState,iscModal,iscI18n,iscAppContext,iscMashup){
		iscScreen.initializeScreen($scope,{  
			model:{
				/**
         *@iscdoc model
		 		 *@viewname store.views.home.store-home
         *@name quickCheckoutProductInput
         *@description This model contains the scan input for Quick CheckOut
         */
        "quickCheckoutProductInput":{}
			},
			mashupRefs : [ 
				/**
				 *@iscdoc mashup
				 *@viewname store.views.home.store-home
				 *@mashupid quickCheckOut_getCompleteItemList
				 *@mashuprefid quickCheckOut_getCompleteItemList
				 *@description Validates the scanned item for quick checkout
				*/
  			{   
  				mashupRefId: 'quickCheckOut_getCompleteItemList',
  				mashupId: 'quickCheckOut_getCompleteItemList'  				
  			}  			
  		], 
			uiCheckout : function(type){			
				if(!iscCore.isVoid(this.model.quickCheckoutProductInput.value)){
					/*iscState.goToState('ordercapture',{operation:type,input:this.model.addProductInput.value},{});*/
					this.getCompleteItemDetails(this.model.quickCheckoutProductInput.value);
				}
				else{
					iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.MSG_InvalidBarCodeData'));
				}			
			},
			
        getCompleteItemDetails: function(itemId){
        	var getCompleteItemDetailsApiInput = this.getCompleteItemDetailsApiInput(itemId,true);
        	iscMashup.callMashup(this,"quickCheckOut_getCompleteItemList",getCompleteItemDetailsApiInput,{}).then(this.handleBarcodeTransaltion.bind(this),angular.noop);
        },
        
        
        getCompleteItemDetailsApiInput: function(itemId,sendBarCode){
        	var getCompleteItemDetailsInput = {};
        	getCompleteItemDetailsInput.Item = {};
        	getCompleteItemDetailsInput.Item.ItemID = itemId;
        	if(sendBarCode){
        		getCompleteItemDetailsInput.Item.BarCode = {};
        		getCompleteItemDetailsInput.Item.BarCode.BarCodeData = itemId;
        	}
        	/*send entryType for create Order api*/
        	
        	getCompleteItemDetailsInput.Item.EntryType = iscAppContext.getFromContext('storeEntryType');
        	return getCompleteItemDetailsInput;
        },
			 
			handleBarcodeTransaltion: function(data){
      	var output = iscMashup.getMashupOutput(data,"quickCheckOut_getCompleteItemList");
				if(output.Order.OrderHeaderKey!==null){
					iscState.goToState('ordercapture',{action:'QUICKCHECKOUT',orderModel:output},{});
				}else{
				/*TODO throw error */ 
				}
        this.model.quickCheckoutProductInput ={};
     	},
		});	
}]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.returns-portlet-mini", [
	"$scope", "iscScreen",
	function($scope, iscScreen) {
		iscScreen.initializeScreen($scope, {
			model: {},
			mashupRefs: [],
			ui: {},
			initialize: function() {
				
			}
		});	
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.returns-portlet",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscAppContext",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup, iscAppContext){
		iscScreen.initializeScreen($scope,{  
			model:{				
			},
			
			mashupRefs:[
					            {
							        /**
									   *@iscdoc mashup
									   *@viewname store.views.home.returns-portlet
									   *@mashupid returnLookup_getCustomerListPaginated
									   *@mashuprefid advanceSearch_getCustomerListPaginated
									   *@modelname getCustomerListPaginated
									   *@description Gets the customer list.
									   */
					            	mashupRefId: 'advanceSearch_getCustomerListPaginated',
					            	mashupId: 'returnLookup_getCustomerListPaginated',
					            	modelName : 'getCustomerListPaginated'
					            }
					      ],      
			uiHandleSearchResult : function(searchResult) {
				console.log("searchResult is:",searchResult);
				iscState.goToState('returnorder',{action:searchResult.NextPage.action,input:searchResult.NextPage.model,callAPI:searchResult.NextPage.callAPI},{});
			},
			ui : {
				AdanceCustomerSearchShown:false,
				AdanceSearchShown:false
			},
			uiIsAdvanceSearchShown : function(){
				if(this.ui.AdvanceCustomerSearchShown===true || this.ui.AdvanceSearchShown===true)
				{
					return true;
				}else
					return false;	
			},
			
			initialize : function(){
				$scope.lookupSelection = "ORDER";
				 $scope.ui.AdvanceCustomerSearchShown = false;
				 $scope.ui.AdvanceSearchShown = false;
				//$scope.showCustomerAdvanceSearch=false;
				
				$scope.$on('AdvanceCustomerSelection',function(event,args){
			   
			       if (args){
					  $scope.lookupSelection = args.data;
					  $scope.ui.AdvanceCustomerSearchShown = true;
			    	}  
					   
				 });
				$scope.$on('AdvanceCustomerSelectionhide',function(event,args){
			   
			       if (args){
					  $scope.lookupSelection = args.data;
					  $scope.ui.AdvanceCustomerSearchShown = false;
			    	}  
					   
				 });	
				
				$scope.$on('AdvanceSearchSelection',function(event,args){
					   
				       if (args){
						  $scope.lookupSelection = args.data;
						  $scope.ui.AdvanceSearchShown = true;
				    	}  
						   
					 });
					$scope.$on('AdvanceSearchSelectionhide',function(event,args){
				   
				       if (args){
						  $scope.lookupSelection = args.data;
						  $scope.ui.AdvanceSearchShown = false;
				    	}  
						   
					 });	
					
			}
			
			
		});	
}]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.home.store-home-footer
 *@package store.views.home
 *@class store-home-footer
 *@description Displays the footer part home page of the IBM Sterling Store application.
 *
 */

angular.module('store').controller('store.views.home.store-home-footer', ['$scope', '$rootScope', 'iscScreen', 'iscAppInfo', 'iscState', 'iscStateParams', 'iscResourcePermission', 'iscMashup', 'iscHttpRequest', 'iscPersona', 'iscPortletService','iscAppContext',
	function($scope, $rootScope, iscScreen, iscAppInfo, iscState, iscStateParams, iscResourcePermission, iscMashup, iscHttpRequest, iscPersona, iscPortletService,iscAppContext) {
		iscScreen.initializeScreen($scope, {
			model: {},
			mashupRefs: [
				/**
				 * @description This mashup is used to update the userUiState with curently selected persona.
				 */
				{
					mashupRefId: "updateUserPersonaUserUiState",
					mashupId: "store.views.home.home-footer.updateUserPersona"
				}
			],
			ui: {
				availableActions: []
			},
			
			hasPermissionToAtleastOneResource: function(personaName, checkOldSpecPortlets) {
				var personaToResourceIdList = iscPersona.getAllPersonaToResourceIdListForVisiblePortlets();
				var resourceIdListPersona = personaToResourceIdList[personaName];
				var resourceIdListStrOldSpec = personaToResourceIdList["_oldSpec"];
				var canAccessAtleastOneResource = false;
				
				if (resourceIdListPersona != null) {
					canAccessAtleastOneResource = iscResourcePermission.hasPermissionToOneOfTheResources(resourceIdListPersona);
				}
				if (canAccessAtleastOneResource === false && checkOldSpecPortlets === true && !iscCore.isVoid(resourceIdListStrOldSpec)) {
					canAccessAtleastOneResource = iscResourcePermission.hasPermissionToOneOfTheResources(resourceIdListStrOldSpec);
				}
				return canAccessAtleastOneResource;
			},
			
	  		initialize: function() {
				// NOTE: This code and some other methods are very similar to sitemap. So, we do have duplication.
				var currentPersonaName = iscPersona.getCurrentPersona();
				if (iscPersona.isSpecialPersona(currentPersonaName)) {
					// We need to populate the permissions array as special persona does not have portlets. Otherwise this must just be called from home page.
					iscPortletService.getAllVisibleSortedPortletsForPersonaAndExtraProcessing(currentPersonaName);
				}
				var personaList = iscPersona.getPersonaList();
				for (var i = 0; i < personaList.length; i++) {
					var aPersonaObj = personaList[i];
					if (currentPersonaName !== aPersonaObj["CodeName"] && !iscCore.isVoid(aPersonaObj["CodeName"])) {
						var hasPermissionForMinOneResource = false;
						if (iscPersona.isSpecialPersona(aPersonaObj["CodeName"])) {
							hasPermissionForMinOneResource = this.hasPermissionToAtleastOneResource(aPersonaObj["CodeName"], false);
						} else {
							hasPermissionForMinOneResource = this.hasPermissionToAtleastOneResource(aPersonaObj["CodeName"], true);
						}
						if (hasPermissionForMinOneResource === true) {
							this.ui.availableActions.push({
								"id": aPersonaObj["CodeName"],
								"name": "home.TOOLTIP_" + aPersonaObj["CodeName"]
							});
						}
					}
				}
				iscAppContext.addToContext("availablePersonas", this.ui.availableActions);
				
				if(localStorage.hasOwnProperty("IBM_Meta")){
					localStorage.removeItem("IBM_Meta");
				}	
				
				var npsScriptsLoaded = iscAppInfo.isNPSScriptsLoaded();
				var isProdEnv = iscAppContext.getFromContext("isProductionEnv");
				var emailId =iscAppContext.getFromContext("ibmID");
				if(!emailId) {
					emailId =iscAppContext.getFromContext("emailID");
				}
				
				if(isProdEnv && (isProdEnv === "Y" || isProdEnv === "y") && emailId && !npsScriptsLoaded){
					this.showNPSSurvey();
					iscAppInfo.setNPSScriptsLoaded(true);
					
				}
				
				
	  		},
	  		
	  		
	  		showNPSSurvey : function(){
        		var triggerFlagList= {};
	    			var availablePersonas = iscAppContext.getFromContext("availablePersonas");
	    			//Check if store user has access only to manager dashboard. If yes, set trigger to false
	    			if(availablePersonas.length == 1 && availablePersonas[0].id === "Manager_Dashboard"){
	    				//Store user has access only to manager dashboard, so set trigger1 to false.
	    				triggerFlagList["trigger1"] = false;
	    				//triggerFlagList["trigger2"] = false;
	    			}else{
	    				triggerFlagList["trigger1"] = true;
	    				//triggerFlagList["trigger2"] = true;
	    			}
	    			
	    			this.setWindowParams(triggerFlagList);
	    			
	    			if ((typeof (KAMPYLE_ONSITE_SDK) !== "undefined") && typeof KAMPYLE_ONSITE_SDK.updatePageView === "function") {
								
								KAMPYLE_ONSITE_SDK.updatePageView();
								
					}else{
							var script = document.createElement('script');
							script.src = "https://nebula-cdn.kampyle.com/we/28600/onsite/embed.js";
							document.getElementsByTagName('head')[0].appendChild(script);			
					}
	    			
        	},
        	
        	setWindowParams : function(triggerFlagList){
        		var emailId =iscAppContext.getFromContext("ibmID");
				if(!emailId) {
					emailId =iscAppContext.getFromContext("emailID");
				}
        	
        	   var userInfo = iscData.userInfo;
      		   var otherInfo = {};
      		   otherInfo["FirstName"]=iscAppContext.getFromContext("firstName");
      		   otherInfo["LastName"]=iscAppContext.getFromContext("lastName");
      		   otherInfo["EmailID"]=emailId;
      		   otherInfo["TenantName"]=iscAppContext.getFromContext("tenantName");
      		   otherInfo["icn"]=iscAppContext.getFromContext("customerICN");
      		   
        	   var metaObject = iscAppInfo.getIBMMetaObject(userInfo,otherInfo,triggerFlagList)
      			window.IBM_Meta = metaObject;
        	},
        	
	  		
	  		uiOpenSiteMap: function() {
				iscState.goToState("sitemap", {}, {});
			},
			
			uiPerformAction: function(anAction) {
				iscPersona.updateCurrentPersona(anAction.id);
				var inputJson = {
					"UserUiState": {
						"Definition": anAction.id
					}
				};
				if (!iscPersona.isOOTBPersona(anAction.id) && iscPersona.getPersonaSwitchAction(anAction.id) != null) {
					var actionToPerform = iscPersona.getPersonaSwitchAction(anAction.id);
					actionToPerform(anAction.id);
				} else {
					if (anAction.id === "Dojo_Order_Fulfill") {
						this.uiGoToDojoBackRoomPickup();
					} else if (anAction.id === "Manager_Dashboard") {
						iscMashup.callMashup(this, "updateUserPersonaUserUiState", inputJson, {showMask: false});
						iscState.goToState("/manager-dashboard", {}, {});
					} else {
						iscMashup.callMashup(this, "updateUserPersonaUserUiState", inputJson, {showMask: false});
						iscState.goToState("/home", {
							"personaName": anAction.id
						}, {
							"forceRefresh": true
						});
					}
				}
			},
	        
			uiGoToDojoBackRoomPickup: function() {
				window.onbeforeunload = null;
				$rootScope.activeCalls++;
				var appDeviceMode = iscAppInfo.getAppDeviceMode();
				var redirectURL = "";
				if (appDeviceMode === "mobile") {
					redirectURL = iscAppInfo.getApplicationContext() + "/store/mobile/container/home.do";
				} else {
					redirectURL = iscAppInfo.getApplicationContext() + "/store/container/home.do";
				}
				window.location.href = iscHttpRequest.addAdditionalParamsInURL(redirectURL, "GET");
			}
		});
	}]
);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.home.store-home
 *@package store.views.home
 *@class store-home
 *@description Displays the home page of the IBM Sterling Store application.
 *
 */

angular.module('store').controller('store.views.home.store-home', ['$scope', '$rootScope', 'iscScreen', 'iscAppInfo', 'iscState', 'iscHttpRequest', 'iscResourcePermission', 'iscAppContext', 'iscPortletPvdr', 'iscStateParams','iscPersona', 'iscPortletService',
	function($scope, $rootScope, iscScreen, iscAppInfo, iscState, iscHttpRequest, iscResourcePermission, iscAppContext, iscPortletPvdr, iscStateParams, iscPersona, iscPortletService) {
		iscScreen.initializeScreen($scope, {
			model: {},
			mashupRefs: [],
			ui: {
				activePortlet:0,
				allVisibleSortedPortlets: null,
				hasMgrDashboardPermission: (iscResourcePermission.hasPermission("WSC000038") || iscResourcePermission.hasPermission("WSC000039")),
				availableActions: [{
					"id": "orderFulfillmentView",
					"name": "home.TOOLTIP_SwitchView"
				}, {
					"id": "managerDashboardView",
					"name": "home.TOOLTIP_ManagerDashboard"
				}],
				// New for usePersonaBasedHomepageFlag start.
				new_activePortlet: 0,
				new_allVisibleSortedPortlets: null,
				new_usePersonaBasedHomepage: false,
				new_allVisibleSortedPortlets_isCountZero: false
				// New for usePersonaBasedHomepageFlag end.
			},

			initialize: function() {
				if (iscPersona.getUsePersonaBasedHomepageFlagValue() !== true) {
		  			iscAppContext.removeFromContext("inStoreReceiving_shipmentListConfigData");
		            $scope.$on('$beforeStateChange',function(e,data){
		                iscAppContext.addToContext("HOME_PAGE_ACTIVE_PORTLET",this.ui.activePortlet);
		            }.bind(this)); 
		            var activePortlet = iscAppContext.getFromContext("HOME_PAGE_ACTIVE_PORTLET");
		            if(!iscCore.isVoid(activePortlet)){
		                this.ui.activePortlet = activePortlet;
		            }
		            this.ui.allVisibleSortedPortlets = iscPortletPvdr.getAllVisibleSortedPortlets();
				} else {
					this.new_personaBasedInitialize();// New for usePersonaBasedHomepageFlag.
				}
			},
        
			uiGoToBackRoomPickup : function(){
				window.onbeforeunload = null;
				$rootScope.activeCalls++;
				var appDeviceMode = iscAppInfo.getAppDeviceMode();//iscAppContext.isMobile()?'mobile':'destop';
				var redirectURL = "";
				if(appDeviceMode === 'mobile'){
					redirectURL = iscAppInfo.getApplicationContext()+"/store/mobile/container/home.do";
				}
				else {
					redirectURL = iscAppInfo.getApplicationContext()+"/store/container/home.do";
				}
				window.location.href = iscHttpRequest.addAdditionalParamsInURL(redirectURL, "GET");
			},
			
			uiOpenSiteMap:function(){
				iscState.goToState('sitemap',{},{});
			},
			
			uiPerformAction: function(anAction) {
				if (anAction.id === "orderFulfillmentView") {
					this.uiGoToBackRoomPickup();
				} else {
					iscState.goToState("/manager-dashboard", {}, {});
				}
			},
			// New for usePersonaBasedHomepageFlag start.
			new_personaBasedInitialize: function() {
				iscAppContext.removeFromContext("inStoreReceiving_shipmentListConfigData");
				this.ui.new_usePersonaBasedHomepage = true;
				$scope.$on("$beforeStateChange", function(e, data) {
					// If state I am changing to is /home or /manager-dashboard, do not persist - because we are changing personas.
					if (data != null && data.state !== "/home" && data.state !== "/manager-dashboard") {
						iscAppContext.addToContext("HOME_PAGE_ACTIVE_PORTLET_PERSONA_SCOPE", this.ui.new_activePortlet);
					} else {
						iscAppContext.addToContext("HOME_PAGE_ACTIVE_PORTLET_PERSONA_SCOPE", 0);
					}
				}.bind(this));
				var currentPersonaName = iscPersona.getCurrentPersona();
				this.ui.new_allVisibleSortedPortlets = iscPortletService.getAllVisibleSortedPortletsForPersonaAndExtraProcessing(currentPersonaName);
				this.ui.new_allVisibleSortedPortlets_isCountZero = (this.ui.new_allVisibleSortedPortlets == null || this.ui.new_allVisibleSortedPortlets.length === 0) ? true : false;
				
				var new_activePortlet = iscAppContext.getFromContext("HOME_PAGE_ACTIVE_PORTLET_PERSONA_SCOPE");
				if (!iscCore.isVoid(new_activePortlet)) {
					this.ui.new_activePortlet = new_activePortlet;
				}
			}
			// New for usePersonaBasedHomepageFlag end.
		});
	}
]);
/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.my-tasks.my-tasks-list
 *@package store.views.my-tasks
 *@class my-tasks-list
 *@description My Tasks screen is the list of Orders and Batched assinged to the logged in user 
 *
 */

angular.module("store").controller("store.views.my-tasks.my-tasks-list",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscAppContext","iscStateParams","iscResourcePermission","$timeout","iscWizard","iscShipment","$filter",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup, iscAppContext,iscStateParams,iscResourcePermission,$timeout,iscWizard,iscShipment,$filter){
		
		iscScreen.initializeScreen($scope,{  
			model:{
				/**
				 *@description Holds the Output of getShipmentList API
				 */
				shipmentList:{},
				
				/**
				 *@description Holds the output of getStoreBatchList API which gets list of batches for the logged in user
				 */
				batchCountOutput:{},
				
				/**
				 *@description Holds the output of getStoreBatchList API
				 */
				batchList:{}
			},
			
            mashupRefs:[
                {
            	   /**
				    *@iscdoc mashup
		   			*@viewname store.views.my-tasks.my-tasks-list
		   			*@mashupid store.views.my-tasks.getShipmentListForMyTasks
	   			    *@mashuprefid getShipmentListForMyTasks
		   			*@description Fetches the list of shipments assigned to the logged in user.
		   			*/
                    mashupRefId: 'getShipmentListForMyTasks',
                    mashupId: 'store.views.my-tasks.getShipmentListForMyTasks',
                    modelName:'shipmentList',
                    isPaginated: true,
					pageSize : 15,
					append : true,
					appendPath : 'Shipments.Shipment'
                },
                
                  
				{
                	 /**
 				    *@iscdoc mashup
 		   			*@viewname store.views.my-tasks.my-tasks-list
 		   			*@mashupid store.views.home.common.getShipmentListCountForMyTasks
 		   			*@mashuprefid getShipmentListCountForMyTasks
 		   			*@description Fetches the Count of orders assinged to the logged in user..
 		   			*/
					mashupRefId: 'getShipmentListCountForMyTasks',
					mashupId: 'store.views.home.common.getShipmentListCountForMyTasks',
					modelName:'shipmentCountOutput'
				},
				
				{  
					 /**
	 				    *@iscdoc mashup
	 		   			*@viewname store.views.my-tasks.my-tasks-list
	 		   			*@mashupid store.views.home.common.getBatchListCountForMyTasks
	 		   			*@mashuprefid getBatchListCountForMyTasks
	 		   			*@description Fetches the Count of batches assinged to the logged in user..
	 		   			*/
					mashupRefId: 'getBatchListCountForMyTasks',
					mashupId: 'store.views.home.common.getBatchListCountForMyTasks',
					modelName:'batchCountOutput'
				},
				
				{
					   /**
	 				    *@iscdoc mashup
	 		   			*@viewname store.views.my-tasks.my-tasks-list
	 		   			*@mashupid store.views.my-tasks.getBatchListForStore
	 		   			*@mashuprefid getBatchList
	 		   			*@description Fetches the list of batches assigned to the logged in user.
	 		   			*/
	                    mashupRefId: 'getBatchList',
	                    mashupId: 'store.views.my-tasks.getBatchListForStore'
                       
	            }
               
            ],
            ui : {
            	 /**
				 *@property {Boolean} apiCallInProgress - flag to identify if any mashup call is in progress.
				 */
                apiCallInProgress:false,
                
                /**
				 *@property {String} selectedShipmentKey - ShipmentKey of the selected shipment from the list.
				 */	
                selectedShipmentKey:"",
               
                /**
				 *@property {Number} numOfOrders - Number of Shipments for a active tab.
				 */	
                numOfOrders : -1,
                
                /**
				 *@property {String} selectedStoreBatchKey - StoreBatchKey of the selected batch from the list.
				 */	
                selectedStoreBatchKey : "",
                
                /**
				 *@property {String} sortOptions - Holds the sorting order of shipments.
				 */
                sortOptions:'N',
                
                /**
				 *@property {Boolean} hasPermissionForBatchPicking - Holds the value of the resource permission for BatchPicking.
				 */
                hasPermissionForBatchPicking:iscResourcePermission.hasPermission("WSC000053"),
                
                /**
				 *@property {Boolean} hasPermissionForOrders - Holds the value of the resource permission for pick and pack.
				 */
                hasPermissionForOrders:iscResourcePermission.hasPermission("WSC000057")||iscResourcePermission.hasPermission("WSC000058")||iscResourcePermission.hasPermission("WSC000062"),
               
                /**
				 *@property {Boolean} showOrdersView - Flag to show Orders Tab.
				 */
                showOrdersView:true,
                /**
				 *@property {Boolean} showBatchesView - Flag to show Batches Tab.
				 */
                showBatchesView:false,
                
                /**
				 *@property {Number} apiPageSize - Page size for getShipmentList or getStoreBatchList apis
				 */
                apiPageSize:15
                
			},
			
			/**
			 *@description Initializes the My tasks screen by invoking the required mashup calls.
			 */
			initialize : function(){
				
				var mashupArray = [];
				var apiInput = {};
				apiInput = this.prepareApiInputForSorting();
				if(this.ui.hasPermissionForOrders && this.ui.hasPermissionForBatchPicking){
				   mashupArray.push(iscMashup.getMashupRefObj(this,'getBatchListCountForMyTasks',{}));
				   mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentListForMyTasks',apiInput));	
				}
				this.ui.apiCallInProgress =true;
				if(mashupArray.length > 0) {
					iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				}else{
					iscMashup.callMashup(this,"getShipmentListForMyTasks",apiInput,{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);
				}
				
			},
			
			/**
			 *@description Call back handler for the apis called in initialize method.
			 */
           handleInitApiCalls:function(data){
        	   
        	    var mashupRef = data.MashupRefs.MashupRef;
             	if(mashupRef !== null && mashupRef !== undefined){
           		var len = mashupRef.length;
           		for(var i = 0; i < len; i++){
           			var mashupRefObj = mashupRef[i];
           			if(mashupRefObj.mashupRefId === 'getShipmentListForMyTasks'){
           				this.processPaginatedShipmentList(data);
           			}
           		
           		}	
           		
             	}   
           },
           
           /**
			*@description process getShipmentList api.
			 */ 
           processPaginatedShipmentList:function(response) {
                
                this.ui.apiCallInProgress = false;
                var output = iscMashup.getMashupOutput(response,"getShipmentListForMyTasks");
                this.ui.numOfOrders =  $filter('number')(output.Page.Output.Shipments.TotalNumberOfRecords);
                if(output.Page.Output.Shipments.Shipment){
                	if(iscCore.isVoid(this.ui.selectedShipmentKey)){
	            		this.ui.selectedShipmentKey = output.Page.Output.Shipments.Shipment[0].ShipmentKey;
	            	}
                    this.processShipment(output.Page.Output.Shipments);
                }
            },
            
            /**
		     *@description Massage shipment object with UI attributes
			 */
            processShipment : function(shipments){
                for(var i = 0; i < shipments.Shipment.length; i++){
                    var shipment = shipments.Shipment[i];
                    
                    shipment.OrderNoToDisplay = iscShipment.getDisplayOrderNumber(shipment.DisplayOrderNo, '|', ', ', true);
                    shipment.StatusDescriptionToDisplay = iscShipment.getShipmentStatusDescription(shipment);
                    
                }
                
            },
          
            /**
			 *@description Identifies the Shipment chosen by the User from the list.
			 */
			uiSelectShipment : function(shipment){
				this.ui.selectedShipmentKey = shipment.ShipmentKey;
			},
            
			/**
			 *@description Validates if next page action should be performed by checking whether the last page is already fetched.
			 */
	        uiOrderListScrollActionValidator : function(){
	        	if (this.model.shipmentList.Page.IsLastPage !=="N") {
					return false;
				}else
					return true;
	        },
	        
	        /**
			 *@description Identifies the Batch chosen by the User from the list.
			 */
			uiSelectBatch : function(batch){
				this.ui.selectedBatchKey = batch.StoreBatchKey;
			},
			
			/**
			 *@description Gets the Paginated records for getShipmentList api when the next page action is performed.
			 */
	        uiGetNextPackingRecords: function() {
				if (this.model.shipmentList.Page.IsLastPage !=="N") {
					return;
				}
				this.ui.apiCallInProgress = true;
			    var apiInput = iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions,'SHP',this.ui.statusArray);
				iscMashup.callPaginatedMashup(this, "getShipmentList", apiInput, "NEXT", {}).then(this.processPaginatedShipmentList.bind(this));
			},
			
			/**
			 *@description Opens Shipment summary screen for the selected shipment from the list.
			 */
            uiGoToShipmentSummary:function(shipment){
				iscState.goToState('shipmentsummary',{input:{Shipment:{ShipmentKey: shipment.ShipmentKey},flowName:'Pack'}},{}); 
			},
			
			 /**
			 *@description Initializes the active tab data by setting appropriate flags and apis.
			 */	
             uiUpdateSelection : function(selectedTab){
				if(selectedTab == "Order"){
					this.ui.showOrdersView=true;
					this.ui.showBatchesView=false;
					if(iscCore.isVoid(this.model.shipmentList) && !this.ui.apiCallInProgress){
						iscMashup.callPaginatedMashup(this,'getShipmentListForMyTasks',{},"START",{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);
					}
				}
				else if(selectedTab == "Batch"){
					this.ui.showOrdersView=false;
					this.ui.showBatchesView=true;
	                  
					if(iscCore.isVoid(this.model.batchList)){
						var mashupInput = {"StoreBatch":{"PageSize":this.ui.apiPageSize,"NotStarted":"N","skipFilterOptions":"Y"}};
		                this.callGetBatchList(mashupInput);
					}
				}
			},
		
			/**
			 *@description Initializes getStoreBatchList api to paint Batch tab
			 */		
		  callGetBatchList : function(input){
	            	iscMashup.callMashup(this,'getBatchList',input,{}).then(function(data){
	            		var output = iscMashup.getMashupOutput(data,'getBatchList');
	            		this.handleGetBatchListPaginatedOutput(output,false);
	            	}.bind(this),angular.noop);
	       },
	      
	       /**
			 *@description Callback handler for getStoreBatchList api
			 */	
	       handleGetBatchListPaginatedOutput: function(output, onNext){
           	this.ui.apiCallInProgress = false;
           	
     			 if(onNext){
     				//append the next page results with the total results
     				var itemList = output.Page.Output.StoreBatchList.StoreBatch;
     				for(var i = 0;i < itemList.length; i++){
                           this.model.batchlist.Page.Output.StoreBatchList.StoreBatch.push(itemList[i]);
                   }
     				this.model.batchlist.Page.PageNumber = output.Page.PageNumber;
     				this.model.batchlist.Page.IsLastPage = output.Page.IsLastPage;
     			 }else{
     				this.model.batchlist =  output;
     			 }
     			this.massageBatchList(); 
           },
          
           /**
			 *@description Massage the batchlist from getStoreBatchList api
			 */	
           massageBatchList:function(){
               
           	var batchList = this.model.batchlist;
           	if(iscCore.isVoid(this.ui.selectedBatchKey)){
        		this.ui.selectedBatchKey = this.model.batchlist.Page.Output.StoreBatchList.StoreBatch[0].StoreBatchKey;
        	}
           	var itemList = this.model.batchlist.Page.Output.StoreBatchList.StoreBatch;
           	var batch = {};
 				for(var i = 0;i < itemList.length; i++){
                     batch =  itemList[i];
                     if(!iscCore.isVoid(batch.DepartmentDisplayDesc) && batch.DepartmentDisplayDesc.lastIndexOf(",") != -1) {
                   	  batch.uiDepartmentDisplayDesc ='MULTIPLE';
                     }else{
                   	  batch.uiDepartmentDisplayDesc = batch.DepartmentDisplayDesc;
                     }
               }
           	
           },
           
            /**
			 *@description Gets the Paginated records for getShipmentList api when the next page action is performed.
			 */
           
           uiGetNextMyTaskRecords:function(){
        	 
        	   if (this.model.shipmentList.Page.IsLastPage !=="N") {
					return;
				}
				this.ui.apiCallInProgress = true;
				var apiInput = {};
				apiInput = this.prepareApiInputForSorting();
				iscMashup.callPaginatedMashup(this, "getShipmentListForMyTasks", apiInput, "NEXT", {}).then(this.processPaginatedShipmentList.bind(this));
				
           },
           
            /**
			 *@description Gets the Paginated records for getStoreBatchList api when the next page action is performed.
			 */
           
           uiGetNextBatchRecords: function(){
           	/*
           	 * Let's say ui.pageSize is 5 and apiPageSize is 100. If 5 records are available in the current model,
           	 * paint those. If less than 5 are available, get more records from API call and then paint 5 or less (whatever is the output)
           	 * But if this was the last of the pages (no more records are available, then paint whatever remains)
           	 */
           	var batchListModel = this.model.batchlist.Page.Output.StoreBatchList;
           	var actualRecordsInModel = batchListModel.StoreBatch.length;
           	console.log("actualRecordsInModel="+actualRecordsInModel);
           	if(actualRecordsInModel - this.ui.recordShownCount >= this.ui.pageSize ){
                   this.ui.recordShownCount+=this.ui.pageSize;
                   console.log("Using existing model - doing client side pagination");
                 }else{
               	  if(this.model.batchlist.Page.IsLastPage != 'Y'){
               		  var currentPageNo = Number(this.model.batchlist.Page.PageNumber);
               		  var getSBListInput = {StoreBatch:{"PageNumber":currentPageNo+1, "PageSize":this.ui.apiPageSize,"NotStarted":"N","skipFilterOptions":"Y",
               			  PreviousPage:{PageNumber:currentPageNo,
               				  StoreBatch:{
               					  StoreBatchKey:batchListModel.StoreBatch[actualRecordsInModel-1].StoreBatchKey,
               					  BatchNo:batchListModel.StoreBatch[actualRecordsInModel-1].BatchNo,
               					  }}
               		  		}};
               		  
     				  console.log("calling API with input="+getSBListInput);
     				  this.ui.searchInProgress = true;
     				     iscMashup.callMashup(this,'getBatchList',getSBListInput,"NEXT",{}).then(function(data){
   	            		var output = iscMashup.getMashupOutput(data,'getBatchList');
   	            		this.handleGetBatchListPaginatedOutput(output,true);
     				    	this.ui.searchInProgress = false;
   	            	}.bind(this),angular.noop);
               	  }else{
               		  this.ui.recordShownCount = actualRecordsInModel;
               		  console.log("not calling API but painting numItemsInModel="+numRecordsInModel+" items");
               	  }
               	 
                 }
           },
          
            /**
			 *@description This method handles on click of cancel button in cart details screen.
			 */
		  uiClose : function(){
				iscState.goToState("/home", {}, {});
          },
          
            /**
			 *@description Opens pack flow for the selected shipment from the list.
			 */  
          
          uiOpenPackFlow : function(shipment){
        	  iscState.goToState("containerpack", {input:{"Shipment" : { "ShipmentKey" : shipment.ShipmentKey}}}, {});
          },
          
          /**
			 *@description Opens batch flow for the selected batch from the list.
			 */  
          uiOpenContinueBatch:function(batch){
        	  iscState.goToState('batchpick', {action: 'skipbatchList', input: {"batch" : batch,"skipBatchList":false}}, {});
			},
		
			/**
			 *@description Opens Backroom pick flow for the selected shipment from the list.
			 */	
          uiOpenPickFlow : function(shipmentKey){
				iscState.goToState("backroomPickWizard", {input:{"Shipment" : { "ShipmentKey" : shipmentKey}}}, {});
			},
		
			/**
			 *@description Opens departments popup for the selected batch from the list.
			 */		
          uiOpenDepartmentModal: function(batch){
				var that=this;
  			var popupInput = {DepData:{}};
				popupInput.DepData.Departments = batch.DepartmentDisplayDesc;
				popupInput.DepData.BatchNo = batch.BatchNo;
  			var departmentsPopupInput = {
					 modalInput: function(){
						return popupInput;
					}   
				};
  			
  			iscModal.openModal('store.views.shipment.batchpick.batch-list.departments.batch-list-departments',departmentsPopupInput,{}).then(function(callBackData){},angular.noop);
			},
          
			/**
			 *@description Prepares api input for sorting orders.
			 */	
			prepareApiInputForSorting:function(){
				
				    var apiInput = {};
				    apiInput.Shipment = {};	
		       		apiInput.Shipment.OrderBy = {};
					apiInput.Shipment.OrderBy.Attribute = {};  
					apiInput.Shipment.OrderBy.Attribute.Desc = this.ui.sortOptions; 
					return apiInput;
					
			},
			
			/**
			 *@description Sorts the list of Orders based on user input criteria.
			 */	
			uiApplySortOptions : function(data){
	        		if(data.sortOption == 'NEW_TO_OLD'){
	        			this.ui.sortOptions = 'Y';
	        			
	    			}else if(data.sortOption == 'OLD_TO_NEW'){
	    				this.ui.sortOptions = 'N';
	    			}	
	        		var apiInput = this.prepareApiInputForSorting();
	        		this.model.shipmentList = {};	
	        		
	            iscMashup.callPaginatedMashup(this,'getShipmentListForMyTasks',apiInput,"START",{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);
				
			}
            
        });
    }]);
			 
			 
            

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').controller('store.views.order.order-capture-finish',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscState',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams,iscState) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  		},
  		
			initialize : function(){
			  // show order summary screen on wizard finish and wizard close
			  if(iscWizard.getWizardAction()==="FINISH"){
			    var orderInput = iscWizard.getWizardModel("orderModel");
			    iscState.goToState('ordersummary',{orderInput:orderInput},{});  
			  }
			  else if(iscWizard.getWizardAction()==="CLOSE"){
			    iscState.goToPreviousState();
			  }
			  
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').controller('store.views.order.order-capture-init',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  		},
  		
			initialize : function(){
				console.log(iscStateParams);
                
                if(iscStateParams.params.customerInfo) {
				    iscWizard.setWizardModel("customerModel",iscStateParams.params.customerInfo);
				}
                
				if(iscStateParams.params.action==="SEARCH"){
					iscWizard.gotoCustomPage('productSearch',iscStateParams.params,{});
				}
				if(iscStateParams.params.action==="SCAN"){
					iscWizard.gotoCustomPage('addItems',iscStateParams.params,{});
                    if(iscStateParams.params.orderInfo) {
                        iscWizard.setWizardModel("orderModel",iscStateParams.params.orderInfo);
                    }
				}
				if(iscStateParams.params.action==="QUICKCHECKOUT"){
	            	iscWizard.setWizardModel("orderModel",iscStateParams.params.orderModel);
					iscWizard.gotoCustomPage('cartDetails',iscStateParams.params,{});
				}
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').controller('store.views.order.order-modification-finish',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscState',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams,iscState) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  		},
  		
			initialize : function(){
			  // show order summary screen on wizard finish and wizard close
			  if(iscWizard.getWizardAction()==="FINISH"){
			    var orderInput = iscWizard.getWizardModel("orderModel");
			    iscState.goToState('ordersummary',{orderInput:orderInput},{});  
			  }
			  else if(iscWizard.getWizardAction()==="CLOSE"){
			    iscState.goToPreviousState();
			  }
			  
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').controller('store.views.order.order-modification-init',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  		},
  		
			initialize : function(){
				if(iscStateParams.params.action==="EDITORDER"){
	            	iscWizard.setWizardModel("orderHeaderKey",iscStateParams.params.orderHeaderKey);
					iscWizard.gotoCustomPage('editOrderDetails',iscStateParams.params,{});
				}
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').controller('store.views.return.return-finish',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscState',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams,iscState) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  		},
  		
			initialize : function(){
			  // If return order has no lines and exchange order is confirmed, move to Order summary for exchange order instead of return summary
			  if(iscWizard.getWizardAction()==="FINISH"){
			    var orderInput = iscWizard.getWizardModel("returnOrder");
			    var returnLinesInput = iscWizard.getWizardModel("returnLinesModel");
			   /** if(returnLinesInput && returnLinesInput.TotalNumberOfRecords && returnLinesInput.TotalNumberOfRecords <= 0){
			    	orderInput = iscWizard.getWizardModel("exchangeOrderModel");
			    	iscState.goToState('ordersummary',{orderInput:orderInput},{}); 
			    }
			    else { **/
			    	iscState.goToState('returnsummary',{input:orderInput},{});
			   // }
			  }
			  else if(iscWizard.getWizardAction()==="CLOSE"){
			    iscState.goToPreviousState();
			  }
			  
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58),  IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').controller('store.views.return.return-init',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscOrder','iscModal','iscI18n',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams, iscOrder, iscModal, iscI18n) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		              
  		            {
		  				/**
							*@description This mashup is used to get sales order details.
							*/
                        mashupRefId: 'getCompleteOrderDetails',
                        mashupId: 'orderDetails_getCompleteOrderDetails'

                    },
                    {
                    	
                    	/**
							*@description This mashup is used to delete the return orders linked to a sales order
							*/
                    	mashupRefId: 'deleteLinkedReturnOrders',
                    	mashupId: 'orderDetails_deleteLinkedReturnOrders'

                    	
                    }
  		],
  		
  		ui:{
  			/**
			*@property {Object}  orderDetailsStateParams - contains the stateParams config object of orderDetails action.
			*/
  			orderDetailsStateParams:""
  		},
  			
  			/**
  			 * @description This method navigates to a custom page mapped to an action.
  			 */
			initialize : function(){
				console.log(iscStateParams);
				if(iscStateParams.params.action==="orderDetails"){
					
					this.ui.orderDetailsStateParams = iscStateParams;
					this.validateSalesOrder();
					
				}else if(iscStateParams.params.action==="orderList"){
					iscWizard.gotoCustomPage('orderList',iscStateParams.params,{});
				}else if(iscStateParams.params.action==="itemList"){
					iscWizard.gotoCustomPage('itemList',iscStateParams.params,{});
				}else if(iscStateParams.params.action==="addReturnItem"){
					iscWizard.gotoCustomPage('addReturnItem',iscStateParams.params,{});
				}else if(iscStateParams.params.action==="customerList"){
					iscWizard.gotoCustomPage('customerList',iscStateParams.params,{});
				}else if(iscStateParams.params.action==="customerDetails"){
					iscWizard.gotoCustomPage('customerDetails',iscStateParams.params,{});
				}
			},
			
			/**
			 * @description This method is used to check if sales order is associated with multiple return orders by invoking getCompleteOrderDetails API.
			 */
			validateSalesOrder:function() {
				
				var orderModel = this.ui.orderDetailsStateParams.params.input;
				var apiInput = {Order:{OrderHeaderKey:orderModel.Order.OrderHeaderKey}};
				iscMashup.callMashup(this,"getCompleteOrderDetails",apiInput,{}).then(this.processSalesOrderDetails.bind(this),angular.noop);
				
			},
			
			/**
			 * @description This method is a callback handler for getCompleteOrderDetails mashup. This method checks if sales order has multiple return orders linked to it and displays a warning message to the user, to delete the linked return orders. 
			 * Otherwise, we re-direct to custom page associated with orderDetails action.
			 */
			processSalesOrderDetails:function(response) {
				
				 var that = this;
				 var apiOutput = iscMashup.getMashupOutput(response,"getCompleteOrderDetails");
				 
				 if(!iscCore.isVoid(apiOutput.Order.MultipleReturnOrderExists) && "Y" == apiOutput.Order.MultipleReturnOrderExists) {
					 iscModal.showWarningMessage(iscI18n.translate('orderDetails.MSG_MultipleReturnOrderExists')).then(function(modalResponse) {
						 
						 var orderModel = that.ui.orderDetailsStateParams.params.input;
						 var apiInput = {Order:{OrderHeaderKey:orderModel.Order.OrderHeaderKey}};
						 iscMashup.callMashup(that,"deleteLinkedReturnOrders",apiInput,{}).then(that.postReturnOrderDelete.bind(that),angular.noop);
						 
					 });
					 
				 } else {
					 
					 this.gotoOrderDetailsPage();
					 
				 }
				
			},
			
			/**
			 * @description This method is a callback handler for deleteLinkedReturnOrders mashup. This method invokes another method to re-direct to a custom page associated with orderDetails action.
			 */
			postReturnOrderDelete:function(response) {
				this.gotoOrderDetailsPage();
			},
			
			/**
			 * @description This method is used to navigate to custom page associated with orderDetails action.
			 */
			gotoOrderDetailsPage:function() {
				iscWizard.gotoCustomPage(this.ui.orderDetailsStateParams.params.action,this.ui.orderDetailsStateParams.params,{});
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.sitemap.sitemap
 *@package store.views.sitemap
 *@class sitemap
 *@description Displays list of actions performed in store application.
 *
 */

angular.module('store').controller('store.views.sitemap.sitemap',
	['$scope','$rootScope','iscScreen','iscMashup','iscResourcePermission','iscState','iscI18n','iscAppInfo','iscHttpRequest','iscPersona','iscPortletService','iscInStoreAppointment',
	 function($scope,$rootScope,iscScreen,iscMashup,iscResourcePermission,iscState,iscI18n,iscAppInfo,iscHttpRequest,iscPersona,iscPortletService,iscInStoreAppointment) {
		iscScreen.initializeScreen($scope,{
			model: {},
			mashupRefs: [
			    //New for usePersonaBasedHomepageFlag start.
				/**
				 * @description This mashup is used to update the userUiState with curently selected persona.
				 */
				{
					mashupRefId: "updateUserPersonaUserUiState",
					mashupId: "store.views.home.home-footer.updateUserPersona"
				}
				// New for usePersonaBasedHomepageFlag end.
			],
			ui: {
				hasMgrDashboardPermission: (iscResourcePermission.hasPermission("WSC000038") || iscResourcePermission.hasPermission("WSC000039")),
				// New for usePersonaBasedHomepageFlag start.
				new_usePersonaBasedHomepage: false,
				personaAndPortletList: []
				// New for usePersonaBasedHomepageFlag end.
			},
			/**
			 *@description Initializes the screen
			 */
			// New for usePersonaBasedHomepageFlag start.
			initialize: function() {
				// NOTE: This code and some other methods are very similar to footer. So, we do have duplication.
				this.ui.new_usePersonaBasedHomepage = iscPersona.getUsePersonaBasedHomepageFlagValue();
				if (this.ui.new_usePersonaBasedHomepage === true) {
					var accessiblePersonasAndActionsArray = [];
					var currentPersonaName = iscPersona.getCurrentPersona();
					var personaList = iscPersona.getPersonaList();
					for (var i = 0; i < personaList.length; i++) {
						var aPersonaObj = personaList[i];
						if (currentPersonaName !== aPersonaObj["CodeName"] && !iscCore.isVoid(aPersonaObj["CodeName"])) {
							var hasPermissionForMinOneResource = false;
							if (iscPersona.isSpecialPersona(aPersonaObj["CodeName"])) {
								hasPermissionForMinOneResource = this.hasPermissionToAtleastOneResource(aPersonaObj["CodeName"], false);
							} else {
								hasPermissionForMinOneResource = this.hasPermissionToAtleastOneResource(aPersonaObj["CodeName"], true);
							}
							if (hasPermissionForMinOneResource === true) {
								accessiblePersonasAndActionsArray.push({
									"sitemapTitleKey": "home.TOOLTIP_" + aPersonaObj["CodeName"],
									"sitemapLinkKey": "home.TOOLTIP_" + aPersonaObj["CodeName"],
									"sitemapLinkActionMethod": this.getMethodStringForOOTBCodes(aPersonaObj["CodeName"])
								});
							}
						}
					}
					
					var visibleSortedPortlets = iscPortletService.getAllVisibleSortedPortletsForPersonaAndExtraProcessing(currentPersonaName);
					this.ui.personaAndPortletList = this.getSitemapConfigArray(visibleSortedPortlets);
					this.ui.personaAndPortletList = accessiblePersonasAndActionsArray.concat(this.ui.personaAndPortletList);
				}
			},
			hasPermissionToAtleastOneResource: function(personaName, checkOldSpecPortlets) {
				var personaToResourceIdList = iscPersona.getAllPersonaToResourceIdListForVisiblePortlets();
				var resourceIdListPersona = personaToResourceIdList[personaName];
				var resourceIdListStrOldSpec = personaToResourceIdList["_oldSpec"];
				var canAccessAtleastOneResource = false;
				
				if (resourceIdListPersona != null) {
					canAccessAtleastOneResource = iscResourcePermission.hasPermissionToOneOfTheResources(resourceIdListPersona);
				}
				if (canAccessAtleastOneResource === false && checkOldSpecPortlets === true && !iscCore.isVoid(resourceIdListStrOldSpec)) {
					canAccessAtleastOneResource = iscResourcePermission.hasPermissionToOneOfTheResources(resourceIdListStrOldSpec);
				}
				return canAccessAtleastOneResource;
			},
			getMethodStringForOOTBCodes: function(codeName) {
				var methodName = "";
				if (codeName === "Customer_Service") {
					methodName = "uiOpenCustomerService";
				} else if (codeName === "Manager_Dashboard") {
					methodName = "uiOpenManagerDashboard_new";
				} else if (codeName === "Order_Fulfillment") {
					methodName = "uiOpenOrderFulfillment_new";
				} else if (codeName === "Dojo_Order_Fulfill") {
					methodName = "uiOpenOrderFulfillment";//legacy method
				}
				return methodName;
			},
			getSitemapConfigArray: function(allVisibleSortedPortlets) {
				var sitemapConfigArray = [];
				for (var i = 0; i < allVisibleSortedPortlets.length; i++) {
					var aPortletConfig = allVisibleSortedPortlets[i];
					var aSitemapConfig = aPortletConfig.sitemapConfig;
					if (aSitemapConfig != null && iscResourcePermission.hasPermissionToOneOfTheResources(aPortletConfig.resourceId)) {
						var validatedArr = this.validateAndReturnSiteMapAsArray(aSitemapConfig);
						if (validatedArr.length > 0) {
							sitemapConfigArray = sitemapConfigArray.concat(validatedArr);
						}
					}
				}
				return sitemapConfigArray;
			},
			validateAndReturnSiteMapAsArray: function(aSitemapConfig) {
				// Validate parameters: sitemapTitleKey, sitemapLinkKey and sitemapLinkActionMethod and add to array if all 3 are there.
				// NOTE: in case of an array aSitemapConfig, each entry can have resourceId. This is always expected to be a subset of aPortletConfig.resourceId. It just can not be unrelated.
				var validatedSitemapConfigArr = [];
				if (aSitemapConfig.length != null && aSitemapConfig.length > 0) {
					for (var z = 0; z < aSitemapConfig.length; z++) {
						if (!iscCore.isVoid(aSitemapConfig[z].sitemapTitleKey) && !iscCore.isVoid(aSitemapConfig[z].sitemapLinkKey) &&
								!iscCore.isVoid(aSitemapConfig[z].sitemapLinkActionMethod)) {
							if (iscResourcePermission.hasPermissionToOneOfTheResources(aSitemapConfig[z].resourceId)) {
								validatedSitemapConfigArr.push(aSitemapConfig[z]);
							}
						}
					}
				} else {
					if (!iscCore.isVoid(aSitemapConfig.sitemapTitleKey) && !iscCore.isVoid(aSitemapConfig.sitemapLinkKey) &&
							!iscCore.isVoid(aSitemapConfig.sitemapLinkActionMethod)) {
						validatedSitemapConfigArr.push(aSitemapConfig);
					}
				}
				return validatedSitemapConfigArr;
			},
			//Actions
			uiOpenCustomerService: function() {
				this.uiPerformPersonaSwitchAction("Customer_Service");
			},
			uiOpenManagerDashboard_new: function() {
				this.uiPerformPersonaSwitchAction("Manager_Dashboard");
			},
			uiOpenOrderFulfillment_new: function() {
				this.uiPerformPersonaSwitchAction("Order_Fulfillment");
			},
			uiPerformPersonaSwitchAction: function(personaName) {
				iscPersona.updateCurrentPersona(personaName);
				var inputJson = {
					"UserUiState": {
						"Definition": personaName
					}
				};
				// Only OOTB personas supported.
				if (personaName === "Dojo_Order_Fulfill") {
					this.uiOpenOrderFulfillment();
				} else if (personaName === "Manager_Dashboard") {
					iscMashup.callMashup(this, "updateUserPersonaUserUiState", inputJson, {showMask: false});
					iscState.goToState("/manager-dashboard", {}, {});
				} else {
					iscMashup.callMashup(this, "updateUserPersonaUserUiState", inputJson, {showMask: false});
					iscState.goToState("/home", {
						"personaName": personaName
					}, {
						"forceRefresh": true
					});
				}
			},
			uiHandleSitemapLinkClick: function(methodNameToCall) {
				if (methodNameToCall != "" && this[methodNameToCall] != null) {
					this[methodNameToCall]();
				}
			},
			// New for usePersonaBasedHomepageFlag end.
			/**
			 *@description This method is used to open order fulfillment home page.
			 */
			uiOpenOrderFulfillment: function() {
				window.onbeforeunload = null;
				$rootScope.activeCalls++;
				var appDeviceMode = iscAppInfo.getAppDeviceMode();
				var redirectURL = "";
				if (appDeviceMode === 'mobile') {
					redirectURL = iscAppInfo.getApplicationContext()+"/store/mobile/container/home.do";
				} else {
					redirectURL = iscAppInfo.getApplicationContext()+"/store/container/home.do";
				}
				window.location.href = iscHttpRequest.addAdditionalParamsInURL(redirectURL, "GET");
			},
			/**
			 *@description This method is used to open manager dashboard.
			 */
			uiOpenManagerDashboard: function() {
				iscState.goToState('/manager-dashboard', {}, {});
			},
			/**
			 *@description This method is used to open product search screen in order capture flow.
			 */
			uiOpenFindProducts:function(){
				iscState.goToState('ordercapture',{action:'SEARCH',input:'',openBlankPage:true},{});
			},
			/**
			 *@description This method is used to open product search screen in return order flow.
			 */
			uiOpenReturns:function(){
				iscState.goToState('returnorder',{action:'itemList',input:'',callAPI:false},{});
			},
			/**
			 * @description This method is used to open incoming receiving shipment list screen.
			 */
			uiOpenReceivingShipmentList:function() {
				var tabToOpen = "INCOMING";
				iscState.goToState("receivingShipmentList", {"defaultTab": tabToOpen.toLowerCase()}, {});
			},
			
			uiFindCustomers:function() {
				iscState.goToState('customerProfileList',{input:'',openBlankPage:true},{});
			},			
			uiBatchPickOrders:function(){
				iscState.goToState('batchpick',{action:'batchList',input:{}},{});
			},
			uiPickOrders: function(){
				iscState.goToState('pickorderlist', {input:{"FilterOptions": "All"}}, {});
			},
			uiPackOrders: function() {
				iscState.goToState('packorderlist', {input:{"FilterOptions": "All"}}, {});
			},
			uiShipPackages: function(){
				iscState.goToState("shipmentConfirmList", {"searchCriteria": {}, "titleKey": "ALL"}, {});
			},
			uiPickupOrders: function(){
				iscState.goToState("customerpickorderlist", {input:{"FilterOptions": "All"}}, {});
			},
			uiViewMyTasks: function(){
				iscState.goToState("mytaskslist", {}, {});
			},
			uiViewAppointments: function(){
				iscInStoreAppointment.viewStoreApppointmentCalendar();
			}
				  	         
				  	          
		});
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 * @iscdoc viewmodal
 * @viewName store.views.common.address.addressselectionpopup
 * @package store.views.common.address
 * @class addressselectionpopup
 * @description This controller is used for handling address selection from a
 *              list of addresses.
 *              
 * USAGE : parent screen will have the below code block to integrate and call override price popup
 *
 *
 * 	  	selectShippingAddress = function(arg){
 *			if($scope.paymentMethod.useShpAddressForBill === 'Y' && $scope.billingAddressList && $scope.billingAddressList.PersonInfo && $scope.billingAddressList.PersonInfo.length > 0){
 *				if($scope.billingAddressList.PersonInfo.length == 1){
 *					$scope.paymentMethod.PersonInfoBillTo = angular.copy($scope.billingAddressList.PersonInfo[0]);
 *				}
 *				else {
 *					$scope.paymentMethod.useShpAddressForBill = 'N'
 *					var modalInputObj = {};
 *		        	modalInputObj.HeaderTitle = 'payment.TITLE_BillingAddress';
 *		        	modalInputObj.BodyTitle = 'payment.TITLE_SelectBillingAddress';
 *		        	modalInputObj.PersonInfoList = $scope.billingAddressList;
 *		        	var addressListInput = {
 *		        			modalInput: function(){
 *		        				return modalInputObj;
 *		        			}
 *		        	};
 *		        	iscModal.openModal('store.views.common.address.addressselectionpopup',addressListInput,{})
 *						.then(function(callBackData){
 *							if(callBackData.PersonInfo.Selected){
 *								delete callBackData.PersonInfo.Selected;
 *							}
 *		        			$scope.paymentMethod.PersonInfoBillTo = angular.copy(callBackData.PersonInfo);
 *		        			$scope.paymentMethod.useShpAddressForBill = 'Y'
 *		        			//$scope.paymentMethod.BillToKey = callBackData.PersonInfo.PersonInfoKey;
 *		   				},
 *						angular.noop);
 *				}
 *			},
 */

angular.module('store').controller(
		'store.views.common.address.addressselectionpopup',
		[
				'$scope',
				'$rootScope',
				'$uibModalInstance',
				'iscScreen',
				'modalInput',
				'iscI18n',
				function($scope, $rootScope, $uibModalInstance, iscScreen,
						modalInput, iscI18n) {

					iscScreen.initializeModalScreen($scope, {

						ui : {
							/**
							 *@iscdoc uiattr
							 *@viewname store.views.common.address.addressselectionpopup
							 *@property {String}  headerTitle - title of the popup.
							*/
							headerTitle : '',
							/**
							 *@iscdoc uiattr
							 *@viewname store.views.common.address.addressselectionpopup
							 *@property {String}  bodyTitle - title of the body of the popup.
							*/
							bodyTitle : '',
							/**
							 *@iscdoc uiattr
							 *@viewname store.views.common.address.addressselectionpopup
							 *@property {Object}  personInfoList - list of addresses for the user to select from.
							*/
							personInfoList : {},
							/**
							 *@iscdoc uiattr
							 *@viewname store.views.common.address.addressselectionpopup
							 *@property {Boolean} addressSelected - boolean flag to track if any address was selected.
							*/
							addressSelected : false,
							/**
							 *@iscdoc uiattr
							 *@viewname store.views.common.address.addressselectionpopup
							 *@property {Object}  selectedAddress - user selected address in the pop up.
							*/
							selectedAddress : {}
						},

						/**
						 * @iscdoc viewinit
						 * @viewname store.views.common.address.addressselectionpopup
						 * @method initialize
						 * @description This method initializes few
						 *             properties.
						 */
						initialize : function() {

							this.ui.personInfoList = modalInput.PersonInfoList;
							this.ui.headerTitle = modalInput.HeaderTitle;
							this.ui.bodyTitle = modalInput.BodyTitle;
						},
						/**
				  		 *@iscdoc uimethod
						 *@viewname store.views.common.address.addressselectionpopup		 
				  		 *@methodname uiSelectedAddress
				  		 *@description This method is called on selection of one address from the list of addresses.
				  		 */
						uiSelectedAddress : function(personInfo, index) {
							for (var i = 0; i < this.ui.personInfoList.PersonInfo.length; i++) {
								if (i != index) {
									this.ui.personInfoList.PersonInfo[i].Selected = "N";
								} else {
									this.ui.personInfoList.PersonInfo[i].Selected = "Y";
								}
							}
							this.ui.selectedAddress = personInfo;
							this.ui.addressSelected = true;
						},

						/**
				  		 *@iscdoc uimethod
						 *@viewname store.views.common.address.addressselectionpopup		 
				  		 *@methodname uiClose
				  		 *@description This method is called on click of Cancel button in the address selection popup.
				  		 */
						uiClose : function() {
							for (var i = 0; i < this.ui.personInfoList.PersonInfo.length; i++) {
								this.ui.personInfoList.PersonInfo[i].Selected = "N";
							}
							$uibModalInstance.dismiss('cancel');
						},

						/**
				  		 *@iscdoc uimethod
						 *@viewname store.views.common.address.addressselectionpopup		 
				  		 *@methodname uiOK
				  		 *@description This method is called on click of Ok button in the address selection popup. It sets the 
				  		 *				selected address in the resultdata of the modal call back for the parent screen.
				  		 */
						uiOK : function() {
							delete this.ui.selectedAddress.Selected;
							var resultdata = {
								PersonInfo : this.ui.selectedAddress
							};
							$uibModalInstance.close(resultdata);
						}
					});
				}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodal
 *@viewname store.views.common.customer.customerpopup
 *@package store.views.common.customer
 *@class customerpopup
 *@broadcasts 'callVerifyAddress'
 *@listens 'AddressVerified'
 *@description This controller is used for handling popup screen where customer search and creation happens. 
 */



angular.module('store').controller('store.views.common.customer.customerpopup',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscI18n',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscI18n) {
		
		
		iscScreen.initializeModalScreen($scope,{
	      
		  
		 /**
		 *@iscdoc uiattr
		 *@viewname store.views.common.customer.customerpopup
		 *@property {Object}  selectedAddress - user selected address in the pop up.
		 *@property {Object}  selectedCustomer - user selected customer in the pop up.
		 */ 
		 
	     ui:{
			selectedAddress:{},
			selectedCustomer:{}
		 },
		 
		
		 
	
	     /**
  		 *@iscdoc viewinit
		 *@viewname store.views.common.customer.customerpopup
  		 *@methodname initialize
  		 *@description This method initializes few properties
  		 */
			initialize : function(){
			
			 // initialise the state of the pop screen
			 this.uiChangeScreenState("CustomerSearch");
			 this.ui.showSearchList = false;
			 this.ui.showVerifiedAddresses = false;

			 
			 // initialize the state of pop up buttons 
			 this.ui.showSearchBtn = true;
			 this.ui.showReToSearchBtn = false;

			 
			 // Api results
			 this.ui.noRecordsFound = false;
			 

			 if(modalInput.Mode == "Identify"){
			    this.ui.mode = modalInput.Mode;
			 }else{
			    this.ui.mode = "Identify";  
			 }
				 
			 $scope.$on('AddressVerified',function(event,args){
			   
			        $scope.formScope = args.formScope;
			 
			       if (args){
				          var selectedCustomer = {"customer":{},"addressSelected":args.data}; 
				          if(args.State == "SINGLE_ADDRESS"){
						      if($scope.formScope.addressCapture.$invalid){
						         console.log("screen in error");
						      }else{
							    var resultdata = { data : selectedCustomer};	
							    $scope.uiCallManageApi(resultdata);
							  }
						  }else if (args.State == "MULTI_ADDRESS"){
							 $scope.currentSelection = { data : selectedCustomer};
							 $scope.uiChangeScreenState("AddressMatchSelected");
						  }else if (args.State == "MODIFY_ADDRESS"){
							 $scope.currentSelection = { data : selectedCustomer};
							 $scope.uiChangeScreenState("AddressBeingModified");
						  }
				   }
					 		 
				 });	 
			},
		
         /**
  		 *@iscdoc uimethod
		 *@viewname store.views.common.customer.customerpopup		 
  		 *@methodname uiCreateOnEnter
  		 *@description This method is called on pressing 'Enter' key to create/edit a customer
  		 */
         
		 uiCreateOnEnter : function (event){
		 
		   //if(event.type == "keydown" && event.keyCode == "13"){
		   
		        $scope.uiOK();
		    //}
		    
		 },
		 
		 
		 /**
  		 *@iscdoc uimethod
		 *@viewname store.views.common.customer.customerpopup
  		 *@methodname uiSelectOnEnter
  		 *@description This method is called on pressing 'Enter' key after selecting a customer address
  		 */

         uiSelectOnEnter : function (event){
		 
		   //if(event.type == "keydown" && event.keyCode == "13"){
		   
		        $scope.uiOK();
		    //}
		    
		 },		 
			
		 /**
  		 *@iscdoc method
		 *@viewname store.views.common.customer.customerpopup
  		 *@methodname uiChangeScreenState
  		 *@description method called to set the state of the customer pop up screen.
  		 */	
	     
		  
		  uiChangeScreenState : function(state){
		  
		     this.ui.screenState = state;
		  
		  
		  },
		  
		  /**
			 *@iscdoc method
			 *@viewname store.views.common.customer.customerpopup
			 *@methodname uiNewCustomerSelected
			 *@description method called on selection of 'New Customer' tab
			 */	
		  
		 
	      uiNewCustomerSelected : function() {
		       
			   this.uiChangeScreenState("NewCustomerCreation");
			   this.ui.showReToSearchBtn = false;
			   this.ui.showSearchList = false;
		  
		  },
		  
		  /**
			 *@iscdoc method
			 *@viewname store.views.common.customer.customerpopup
			 *@methodname uiCustomerSearchSelected
			 *@description method called on selection of 'Existing Customer' tab
			 */	
			 
		
		  uiCustomerSearchSelected : function() {
		  
		       this.uiChangeScreenState("CustomerSearch");
			   this.ui.showSearchList = false;
			   
		  
		  },
		  
		  
		  /**
			 *@iscdoc method
			 *@viewname store.views.common.customer.customerpopup
			 *@methodname uiReDoSearch
			 *@description method called on performing modify search
			 */
		  
		
		  uiReDoSearch : function(){

			$scope.customerAdditionalAddressKey = "";
			this.initialize();
		     
		  
		  },
		  
		  /**
			 *@iscdoc method
			 *@viewname store.views.common.customer.customerpopup
			 *@methodname uiCustomerSelected
			 *@description method called to set the selected customer in customer search tab
			 */
		  
		
		 uiCustomerSelected : function(){
		   		   
		   this.uiChangeScreenState("CustomerSelected");
		   var customer = this.ui.selectedCustomer;
		   if(customer.CustomerContactList.CustomerContact[0].CustomerAdditionalAddressList.CustomerAdditionalAddress){
		   var additionalAdd = customer.CustomerContactList.CustomerContact[0].CustomerAdditionalAddressList.CustomerAdditionalAddress
		   // for(i=0;additionalAdd.length > i ;i++){
		   //$scope.customerAdditionalAddressKey = customer.CustomerContactList.CustomerContact[0].CustomerAdditionalAddressList.CustomerAdditionalAddress[0].CustomerAdditionalAddressKey;
		   //this.ui.selectedAddress = customer.CustomerContactList.CustomerContact[0].CustomerAdditionalAddressList.CustomerAdditionalAddress[0];
		   this.ui.errorText = "";
		   var addressSelected = false;
		   //$scope.customerAdditionalAddressKey = "";
		   
		   for(i=0;additionalAdd.length > i ;i++){
				   var firstAdditionalAdd = additionalAdd[i];
				   // select default ship to address if available
				   if(firstAdditionalAdd.IsDefaultShipTo === "Y"){
					 this.ui.selectedAddress = firstAdditionalAdd;
					 $scope.customerAdditionalAddressKey = firstAdditionalAdd.CustomerAdditionalAddressKey;
					 addressSelected = true;
					 break;
				   } else if( i == additionalAdd.length-1 && !addressSelected){
					 this.ui.selectedAddress = additionalAdd[0];
					 $scope.customerAdditionalAddressKey = additionalAdd[0].CustomerAdditionalAddressKey;
				   }
			 
			 }
		   }else{
		     this.ui.selectedAddress = {};
             $scope.customerAdditionalAddressKey = {};			
		   }
		 },
		 
		 
		 /**
			 *@iscdoc method
			 *@viewname store.views.common.customer.customerpopup
			 *@methodname uiSelectedAddress
			 *@description method called to set the selected customer address in customer search tab
			 */
		 
		 
		 uiSelectedAddress : function (selectedAddress,customerRecord){
		    
			if(!this.ui.selectedCustomer.CustomerKey){
			     this.ui.errorText = iscI18n.translate('address.LABEL_Select_Customer');
			}else if (this.ui.selectedCustomer.CustomerKey != customerRecord.CustomerKey){
			     this.ui.errorText = iscI18n.translate('address.LABEL_Incorrect_Address');
			}else{
				this.ui.errorText = "";
				$scope.customerAdditionalAddressKey = selectedAddress.CustomerAdditionalAddressKey;
				this.ui.selectedAddress = selectedAddress;
				this.uiChangeScreenState("CustomerAddressSelected");
				
			}
		   
		 },
		 
		 
		
		 /**
  		 *@iscdoc uimethod
  		 *@methodname uiClose
		 *@viewname store.views.common.customer.customerpopup
  		 *@description This method closes the modal popup
  		 */
		 
		 uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},
		
		
		/**
  		 *@iscdoc uimethod
  		 *@methodname uiOK
		 *@viewname store.views.common.customer.customerpopup
  		 *@description This method is executed on click of "OK" button to propagate the data back to parent screen
  		 */

		 uiOK : function () {
		     	
			 
				if($scope.formScope && $scope.formScope.addressCapture && $scope.formScope.addressCapture.$invalid){
					  console.log("Screen is in error");	
				}
				 
		        else if(this.ui.showSearchList){
				    
					 var selectedCustomer = {"customerModel":{"Customer":this.ui.selectedCustomer},"addressSelected":this.ui.selectedAddress}; 
				     var resultdata = { data : selectedCustomer}; 
					 $uibModalInstance.close(resultdata);
		        
					
		         } else if(this.ui.screenState == "AddressMatchSelected"){
				      
					  delete $scope.currentSelection.data.addressSelected.$$hashKey;
				      $scope.uiCallManageApi($scope.currentSelection);
				 
				 }else {
			       
				      $scope.$broadcast('callVerifyAddress',{'id':'1'});
					
			    }
			    
			},
			
			
			/**
			 *@iscdoc uimethod
			 *@methodname uiSearchOnEnter
			 *@viewname store.views.common.customer.customerpopup
			 *@description This method is called on pressing 'Enter' key to search for customers
			 */
			 
			 
			 
			uiSearchOnEnter :function(){
			
			   //if(event.type == "keydown" && event.keyCode == "13"){
		          $scope.uiSearch();
		       //}
			  
			},
			
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.customer.customerpopup
			 *@methodname uiSearch
			 *@description method called to search for customers
			 */
			

			uiSearch : function (customerSearch){
			
			/* no validations in search form
			 * if(!customerSearch.$valid){
				return;
			}*/
			  
			  this.ui.selectedCustomer = {};
			  this.ui.selectedAddress = {};
			  $scope.customerAdditionalAddressKey = "";
			  
			  if(!this.ui.search){
				   this.ui.search = {};
				}
			
			  var resultdata = angular.copy(this.ui.search);
			  this.callSearchApi(resultdata);
			  
			
			},
			
			
			/**
			 *@iscdoc method
			 *@viewname store.views.common.customer.customerpopup
			 *@methodname callSearchApi
			 *@description api call to search for customers
			 */
			
			callSearchApi : function (resultdata){
			

			
			   var mashupId ="Customer_listCustomer";
			   var mashupInput = {};
			   mashupInput.Customer = {};
			   mashupInput.Customer.CustomerContactList = {};
			   mashupInput.Customer.CustomerContactList.CustomerContact = {};
			   mashupInput.Customer.CustomerContactList.CustomerContact = resultdata;
			   mashupInput.Customer.CustomerContactList.CustomerContact.EmailID = resultdata.EMailID;
			   delete mashupInput.Customer.CustomerContactList.CustomerContact.EMailID;
			   
               iscMashup.callSimpleMashup(this,mashupId, mashupInput,{}).then(this.successHandler.bind(this),this.failureHandler.bind(this));	
			 
			
			},
			
			/**
			 *@iscdoc method
			 *@viewname store.views.common.customer.customerpopup
			 *@methodname uiCallManageApi
			 *@description method called to persist customer information
			 */

			
			uiCallManageApi : function(resultdata){
			
			 // TODO - need to move this logic to mashup
			
			  var mashupId ="Customer_manageCustomer";
			  var record = resultdata.data.addressSelected;

			    var mashupInput = {};
				mashupInput.Customer = {};
				mashupInput.Customer = record
				iscMashup.callSimpleMashup(this,mashupId, mashupInput,{}).then(this.successHandler.bind(this),this.failureHandler.bind(this));	
			    
			
			
			},
			
			
			processGetCustomerListOutput : function(mashupRefObj){
			
			             this.ui.showReToSearchBtn = true;
						  var customerList = mashupRefObj.Output.CustomerList; 
						  if(customerList.Customer){
								this.uiChangeScreenState("CustomerSearchListed");
								$scope.customerList=customerList.Customer;
								$scope.customerList.TotalNumberOfRecords = customerList.TotalNumberOfRecords;
								//$scope.ui.TotalRecordText = iscI18n.translate('address.LABEL_Incorrect_Address');
								$scope.ui.TotalRecordText = iscI18n.translate('globals.MSG_TotalNumberOfRecords',{TotalNumberOfRecords: customerList.TotalNumberOfRecords});
								// auto select first customer and first additional address.
								var firstCustomer = $scope.customerList[0];
								if(firstCustomer){
								   this.ui.selectedCustomer = firstCustomer;
								   var firstContact = firstCustomer.CustomerContactList.CustomerContact[0];
								   if(firstContact){
									 var additionalAdd = firstContact.CustomerAdditionalAddressList.CustomerAdditionalAddress;
									 var addressSelected = false;
									if(!iscCore.isVoid(additionalAdd)){
										 
									 for(i=0;additionalAdd.length > i ;i++){
									       var firstAdditionalAdd = additionalAdd[i];
										   // select default ship to address if available
										   if(firstAdditionalAdd.IsDefaultShipTo === "Y"){
										     this.ui.selectedAddress = firstAdditionalAdd;
											 $scope.customerAdditionalAddressKey = firstAdditionalAdd.CustomerAdditionalAddressKey;
											 addressSelected = true;
											 break;
										   } else if( i == additionalAdd.length-1 && !addressSelected){
											 this.ui.selectedAddress = additionalAdd[0];
											 $scope.customerAdditionalAddressKey = additionalAdd[0].CustomerAdditionalAddressKey;
										   }
									 
									 }
								   }	  
								   }
								}
								
								this.ui.showSearchList = true;
								this.ui.noRecordsFound = false;
							
							
						  }else {
						     this.ui.showReToSearchBtn = false;
						     this.ui.noRecordsFound = true;
							 this.uiChangeScreenState("CustomerSearch"); 
							 
						  }
			
			
			
			},
			
			
			processManageCustomerOutput:function(mashupRefObj){
			
			          var newCustomer = mashupRefObj.Output;
					  var newAddress =  newCustomer.Customer.CustomerContactList.CustomerContact[0].CustomerAdditionalAddressList.CustomerAdditionalAddress[0];
					  var selectedCustomer = {"customerModel":newCustomer,"addressSelected":newAddress}; 
				      var resultdata = { data : selectedCustomer}; 
					   
					    
						this.ui.showVerifiedAddresses = false;					
					    $uibModalInstance.close(resultdata);
					    $uibModalInstance.dismiss('cancel');
			
			
			},
			
			uiValidatorForEmail : function(validationResponseObj, angularErrorObj, modelValue, viewValue){
		   		if(angularErrorObj.pattern || angularErrorObj.email)
		   		{
		   			validationResponseObj.booleanResponse = false;
					validationResponseObj.errorMesssage = iscI18n.translate('datatype.EmailFormat');
		   		}
		   		return validationResponseObj;
		   },
			
			
			successHandler : function (response){
			  
			   
			   
			   var mashupRefs = response.MashupRefs.MashupRef;
			   for(i=0;mashupRefs[i];i++){
			          
					 if(mashupRefs[i].mashupId){
						 var mashupId = mashupRefs[i].mashupId;
						 if(mashupId == "Customer_listCustomer"){
							   this.processGetCustomerListOutput(mashupRefs[i]);
						 }else if (mashupId == "Customer_manageCustomer"){
							   this.processManageCustomerOutput(mashupRefs[i]);
						 }		 
				 }
			 
			  }
			   
			},
			
			
			failureHandler : function (response){
			  
			  // do nothing as of now.
			
			}
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodal
 *@viewname store.views.common.fulfillment.fulfillmentoptions
 *@package store.views.common.fulfillment
 *@class fulfillmentoptions
 *@listens AddressVerified
 *@description Controller used for handling Edit Delivery Method popup 
 * 
 * USAGE : Invoking screen will have the below code snippet to integrate with Edit Delivery Method popup :
 *
 *			uiChangeDeliveryMethod : function (){
 *			
 *			var that = this;
 *			var currentStore = iscAppContext.getFromContext("storeDesc");
 *	  		var resolveData = {
 *						modalInput: function ()
 *						 {
 *						  return {	inputData : {
 *						  			orderLine : OrderLineModel,
 *						  			orderPersonInfoShipTo : ""
 *						  						}
 *					  				};
 *		  					}
 *	  					}
 * 
 *							iscModal.openModal('store.views.common.fulfillment.fulfillmentoptions',resolveData,{})
 *							.then(function(callBackData){
 *      						that.ui.currentDelMethod =callBackData.data.currentDelMethod;
 *								that.ui.newDelMethod=callBackData.data.newDelMethod;
 *								
 *     						if(callBackData.data.newDelMethod == "SHP"){
 *      							that.ui.selectedCarrier = callBackData.data.selectedCarrier;
 * 									that.ui.EarliestShipDate = callBackData.data.EarliestShipDate;
 *									that.ui.personInfoShipTo = callBackData.data.personInfoShipTo
 *      						}else if(callBackData.data.newDelMethod == "PICK"){
 *      							that.ui.selectedStore = callBackData.data.selectedStore;
 *      						}else if(callBackData.data.newDelMethod == "CARRY"){
 *      							that.ui.InStoreAvailability = callBackData.data.InStoreAvailability;
 *      						} 
 *    			 			//console.log('Modal dismissed at: ' + new Date());
 * 							},
 *						angular.noop);			
 *			
 *			},		
 * 
 * 
 * 
 */


angular.module('store').controller('store.views.common.fulfillment.fulfillmentoptions',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscWizard','iscResourcePermission','iscAppContext','$filter','iscI18n','iscItem',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscWizard,iscResourcePermission,iscAppContext,$filter,iscI18n,iscItem) {
		
		
		iscScreen.initializeModalScreen($scope,{
	
	
	    subscribers : [
	         {
	          'event':'AddressVerified',
              'handler':'verifyHandler' 		
		    }
	   ],

			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname verifyHandler
			 *@description AddressVerified event handler. 
			 */
       
	   verifyHandler : function(event,args){
				
				var info = args;
				if (info){
					  var param = angular.copy(info.data);	
					  $scope.formScope = info.formScope;
					  var that = this;
					  if($scope.formScope && $scope.formScope.addressCapture && $scope.formScope.addressCapture.$invalid){ 
					  		  that.ui.availabiltyErrorText = iscI18n.translate('fulfillmentOptions.LABEL_ShippingAddress_Error'); 									
					  }else if(info.State == "SINGLE_ADDRESS"){
					  		that.ui.availabiltyErrorText = "";
                            $scope.holdAPIcall = false;
							//that.ui.personInfoShipTo = {};
							that.setAddress(param);
							iscMashup.callMashup(that,'fulfillmentoptionsgetItemAvailabilityForStore',that.ui.getItemAvailabilityForStoreInput,{})
							.then(that.onSuccessgetItemAvailability.bind(that),angular.noop);

				
					  } else if (info.State == "MULTI_ADDRESS"){
					     $scope.currentSelection = angular.copy(param);
						 $scope.holdAPIcall = false;
					  }else if (info.State == "MODIFY_ADDRESS"){
					     $scope.currentSelection = angular.copy(param);
						 $scope.holdAPIcall = true;
					  }
			   }
								 
			 },
	   
	  
  		model:{
  		  
	  /**
         *@iscdoc model
         *@viewname store.views.common.fulfillment.fulfillmentoptions
         *@name fulfillmentOptionsItemAvailability
         *@description Holds the output data of fulfillmentoptionsgetFulfillmentOptionsforLines mashup.
         */
         "fulfillmentOptionsItemAvailability":{},
         

	  /**
         *@iscdoc model
         *@viewname store.views.common.fulfillment.fulfillmentoptions
         *@name CarrierServiceOptions
         *@description Holds the output data of mashup fulfillmentoptionsgetCarrierServiceOptionsForOrdering for Ship tab.
         */
         "CarrierServiceOptions":{},
         
         
		/*models for pickup tab starts*/
		
	  /**
         *@iscdoc model
         *@viewname store.views.common.fulfillment.fulfillmentoptions
         *@name storeList
         *@description Holds the output data of storeSelectiongetAlternateStoreAvailability mashup.
         */
         "storeList":{},

	  /**
         *@iscdoc model
         *@viewname store.views.common.fulfillment.fulfillmentoptions
         *@name searchStoreList
         *@description Holds the output data of storeSearchgetAlternateStoreAvailability mashup.
         */
         "searchStoreList":{},
         
	  /**
         *@iscdoc model
         *@viewname store.views.common.fulfillment.fulfillmentoptions
         *@name defaultRadiusValue
         *@description Holds the output data of wscCommonGetDefaultRadiusValue mashup.
         */
         "defaultRadiusValue":{},
         
	  /**
         *@iscdoc model
         *@viewname store.views.common.fulfillment.fulfillmentoptions
         *@name maxRadiusValue
         *@description Holds the output data of wscCommonGetMaxRadiusValue mashup.
         */
         "maxRadiusValue":{},
         
         /**
          *@iscdoc model
          *@viewname store.views.common.fulfillment.fulfillmentoptions
          *@name distanceUOM
          *@description Holds the distance UOM.
          */
          "distanceUOM":{},
         

	  /**
         *@iscdoc model
         *@viewname store.views.common.fulfillment.fulfillmentoptions
         *@name FulfillmentType
         *@description Holds the output data of wscCommonGetFulfillmentTypeForStore mashup.
         */
         
         "FulfillmentType":{}
  		},


  		mashupRefs : [

  		  {
		  	/**
  			  *@iscdoc mashup
  		   	  *@viewname store.views.common.fulfillment.fulfillmentoptions
  		   	  *@mashupid fulfillmentoptions_getItemAvailabilityForStore
		   	  *@mashuprefid fulfillmentoptionsgetItemAvailabilityForStore
		   	  *@modelname fulfillmentOptionsItemAvailability
  		   	  *@description Fetches item availability for all fulfillment options/delivery methods.
  		   	*/
  		  
			mashupRefId : 'fulfillmentoptionsgetItemAvailabilityForStore',
			mashupId : 'fulfillmentoptions_getItemAvailabilityForStore',
			modelName : 'fulfillmentOptionsItemAvailability'									
		  },
				
  		  {
		  	/**
  			  *@iscdoc mashup
  		   	  *@viewname store.views.common.fulfillment.fulfillmentoptions
  		   	  *@mashupid WSCfulfillmentoptions_getCarrierServiceOptionsForOrdering
		   	  *@mashuprefid fulfillmentoptionsgetCarrierServiceOptionsForOrdering
		   	  *@modelname CarrierServiceOptions
  		   	  *@description Fetches carrier services configured for ordering.
  		   	*/
  		  
			mashupRefId : 'fulfillmentoptionsgetCarrierServiceOptionsForOrdering',
			mashupId : 'WSCfulfillmentoptions_getCarrierServiceOptionsForOrdering',
			modelName : 'CarrierServiceOptions'									
		  },
				
  		  	{
		  	/**
  			  *@iscdoc mashup
  		   	  *@viewname store.views.common.fulfillment.fulfillmentoptions
  		   	  *@mashupid storeSelection_getAlternateStoreAvailability
		   	  *@mashuprefid storeSelectiongetAlternateStoreAvailability
		   	  *@modelname storeList
  		   	  *@description Fetches stores list for nearby stores tab of pickup tab.
  		   	*/
  		  	
			  mashupRefId : 'storeSelectiongetAlternateStoreAvailability',
			  mashupId : 'storeSelection_getAlternateStoreAvailability',
			  isPaginated : 'true',
			  modelName : 'storeList',
	  	      append : true,
			  appendPath : "AlternateStores.NodeList.Node"
			},

  		  	{
		  	/**
  			  *@iscdoc mashup
  		   	  *@viewname store.views.common.fulfillment.fulfillmentoptions
  		   	  *@mashupid storeSelection_getAlternateStoreAvailability
		   	  *@mashuprefid storeSearchgetAlternateStoreAvailability
		   	  *@modelname searchStoreList
  		   	  *@description Fetches stores list for search stores tab of pickup tab, based on input search criteria entered by user.
  		   	*/
  		  	
			  mashupRefId : 'storeSearchgetAlternateStoreAvailability',
			  mashupId : 'storeSelection_getAlternateStoreAvailability',
			  isPaginated : 'true',
			  modelName : 'searchStoreList',
	  	      append : true,
			  appendPath : "AlternateStores.NodeList.Node"
			},
				
			{
		  	/**
  			  *@iscdoc mashup
  		   	  *@viewname store.views.common.fulfillment.fulfillmentoptions
  		   	  *@mashupid WSC_getRuleDetails
		   	  *@mashuprefid wscCommonGetDefaultRadiusValue
		   	  *@modelname defaultRadiusValue
  		   	  *@description Fetches configured default radius value.
  		   	*/
			
			  mashupRefId : 'wscCommonGetDefaultRadiusValue',
			  mashupId : 'WSC_getRuleDetails',
			  modelName : 'defaultRadiusValue'
			},
				
			{
		  	/**
  			  *@iscdoc mashup
  		   	  *@viewname store.views.common.fulfillment.fulfillmentoptions
  		   	  *@mashupid WSC_getRuleDetails
		   	  *@mashuprefid wscCommonGetMaxRadiusValue
		   	  *@modelname maxRadiusValue
  		   	  *@description Fetches configured maximum radius value.
  		   	*/
			
			  mashupRefId : 'wscCommonGetMaxRadiusValue',
			  mashupId : 'WSC_getRuleDetails',
			  modelName : 'maxRadiusValue'
			},
												
				
				{
		  	/**
  			  *@iscdoc mashup
  		   	  *@viewname store.views.common.fulfillment.fulfillmentoptions
  		   	  *@mashupid WSC_getRuleDetails
		   	  *@mashuprefid wscCommonGetFulfillmentTypeForStore
		   	  *@modelname FulfillmentType
  		   	  *@description Fetches configured FulfillmentType/sourcing information.
  		   	*/
				
					mashupRefId: 'wscCommonGetFulfillmentTypeForStore',
					mashupId: 'WSC_getRuleDetails',
					modelName : 'FulfillmentType'
														
				},
				
			{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.common.fulfillment.fulfillmentoptions
  		   			*@mashupid WSC_getDistanceUOM
		   			*@mashuprefid wscDistanceUOM
		   			*@modelname distanceUOM
  		   			*@description Fetches distance UOM for store.
  		   			*/
				
					mashupRefId: 'wscDistanceUOM',
					mashupId: 'WSC_getDistanceUOM',
					modelName : 'distanceUOM'
														
				},
			],


			ui:{

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} pickTab - If set to true, pickup tab will be the active/current tab, used to switch between tabs.
			 */
							
				pickTab : "false",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} ShipTab - If set to true, ship tab will be the active/current tab, used to switch between tabs. 
			 */

				ShipTab : "false",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} InStoreTab - If set to true, inStore tab will be the active/current tab, used to switch between tabs. 
			 */

				InStoreTab : "false",	

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} Pick - Set based on current delivery method, if set to true, pickup tab will be the active/current tab when popup opens.
			 */

				Pick : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} Ship - Set based on current delivery method, if set to true, ship tab will be the active/current tab when popup opens.
			 */

				Ship : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} InStore - Set based on current delivery method, if set to true, inStore tab will be the active/current tab when popup opens.
			 */

				InStore : "",		

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} currentDelMethod - Current delivery method, before popup is invoked.
			 */

				currentDelMethod : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} newDelMethod - New Delivery method selected by the user on popup window.
			 */

				newDelMethod : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} availabiltyErrorText - "Not Available" error message displayed, if item is unavailable.
			 */

				availabiltyErrorText : "Not Available",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} getItemAvailabilityForStoreInput - getItemAvailabilityForStore api input json object.
			 */

				getItemAvailabilityForStoreInput : {},
				
				
				//pick Tab
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} selectedStore - store/node selected on isc-store-list directive radio option.
			 */
				
				selectedStore : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} searchedStore - store/node selected on search stores tab.
			 */

				searchedStore : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} searchedStoreDesc - store/node name/description selected on search stores tab.
			 */

				searchedStoreDesc : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} nearStore - store/node selected on nearby stores tab.
			 */

				nearStore : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} nearStoreDesc - store/node name/description selected on nearby stores tab.
			 */

				nearStoreDesc : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} selectedStoreDesc - store/node name/description selected on isc-store-list directive radio option.
			 */

				selectedStoreDesc : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} Country - Country selected as part of address input for searching alternate stores.
			 */

				Country : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} State - State selected as part of address input for searching alternate stores.
			 */

				State : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} city - City entered as part of address input for searching alternate stores.
			 */

				city : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Number} ZipCode - ZipCode entered as part of address input for searching alternate stores.
			 */

				ZipCode : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} searchStore - If set to true, input form for capturing search criteria to search alternate stores will be shown.
			 */

				searchStore : "false",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} errorText - Error message displayed.
			 */

				errorText : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} nearbyView - If set to true, nearby stores tab will be active, used to switch between tabs.
			 */

				nearbyView : "true",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} searchView - If set to true, search stores tab will be active, used to switch between tabs.
			 */

				searchView : "false",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} noOfStoresFound - Count of stores listed in nearby stores tab.
			 */

				noOfStoresFound : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} noOfStoresSearched - Count of stores listed in search stores tab.
			 */

				noOfStoresSearched : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} nearRadius - Radius value for which stores are listed in nearby stores tab currently.
			 */

				nearRadius : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} maxNearRadius - Maximum radius till which the slider can slide upto on nearby stores tab.
			 */

				maxNearRadius : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} oldNearRadius - Radius value in nearby stores tab before changing to new value(used in watch expression).
			 */

				oldNearRadius : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} nearWach - Watch applied on radius in nearby stores tab.
			 */

				nearWach : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} searchRadius - Radius value for which stores are listed in search stores tab currently.
			 */

				searchRadius : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} maxSearchRadius - Maximum radius till which the slider can slide upto on search stores tab.
			 */

				maxSearchRadius : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} oldSearchRadius - Radius value in search stores tab before changing to new value(used in watch expression).
			 */

				oldSearchRadius : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} searchWach - Watch applied on radius in search stores tab.
			 */

				searchWach : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Boolean} nearApiExecComplete - Set to true on success of storeSelectiongetAlternateStoreAvailability mashup, used for requestedActionValidator attribute
			 * of continous scrolling directive.
			 */

				nearApiExecComplete : "true",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Boolean} searchApiExecComplete - Set to true on success of storeSearchgetAlternateStoreAvailability mashup, used for requestedActionValidator attribute
			 * of continous scrolling directive.
			 */

				searchApiExecComplete : "true",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} personInfo - Address object for person-info attribute of isc-Address-Filter directive, this object is used as input for searching stores.
			 */

				personInfo : {},				

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} getAlternateStoreAvailabilityInput - getAlternateStoreAvailability api input json object.
			 */

				getAlternateStoreAvailabilityInput : {},

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} pickupUnAvailable - Avialability of item for pickup, takes values "Y" or "N".
			 */

				pickupUnAvailable : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Boolean} FetchNextRecords - Value used for requestedActionValidator attribute of continous scrolling directive,
			 * shows the readiness of the screen to fetch next set of paginated records.
			 */

				FetchNextRecords : false,

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} noStoreFound - "No Stores found" message displayed when there is no search results found.
			 */

				noStoreFound : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} searchButtonClick - Attribute used to retain the search screen if there is no search results found.
			 */

				searchButtonClick : "false",
				//
				
				//Ship Tab

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} carrierUnAvailable - This attribute will be set to true if shipping address is unavailable hence carriers are not fetched.
			 */

				carrierUnAvailable  : "N",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} shipUnAvailable - Avialability of item for ship, takes values "Y" or "N".
			 */

				shipUnAvailable : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} selectedStore - Selected carrier object on popup window.
			 */

				selectedCarrier : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} selectedCarrierDesc - Description of the selected carrier on popup window.
			 */

				selectedCarrierDesc : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} EarliestShipDate - Earliest date on which item is available for shippping. 
			 */

				EarliestShipDate  :"",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} displayEarliestShipDate - Display formatted earliest date on which item is available for shippping.
			 */

				displayEarliestShipDate : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} personInfoShipTo - Address json object used as model attribute in address-capture directive and address display directive,
			 * also forms the part of the getCarrierServiceOptionsForOrdering api input. 
			 */

				personInfoShipTo : {},

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} tmpPersonInfoShipTo - Address json object in which state object is converted to string.
			 */

				tmpPersonInfoShipTo : {},

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} addShipAddress - This is set to true/false based on ui mode, set to true if add shipping address form is open.
			 */

				addShipAddress : "false",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} editShipAddress - This is set to true/false based on ui mode, set to true if edit shipping address form is open.
			 */

				editShipAddress : "false",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} getCarrierServiceOptionsForOrderingInput - getCarrierServiceOptionsForOrdering api input json object.
			 */

				getCarrierServiceOptionsForOrderingInput : {},

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} noCarriers - Set to true if there are no carrier services configured.
			 */

				noCarriers : "false",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} carriersNotConfigured - Message displayed if carriers are not configuresd.
			 */

				carriersNotConfigured : "",
				//
				
				
				//InStore Tab

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} InStoreUnAvailable - Avialability of item for carry, takes values "Y" or "N".
			 */

				InStoreUnAvailable :"",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} InStoreAvailMsg - Message on the inStore tab when item is available for carry.
			 */

				InStoreAvailMsg : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} InStoreUnAvailMsg - Message on the inStore tab when item is unavailable to carry.
			 */

				InStoreUnAvailMsg : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} confirmedOrder - Flag to indicate if the order is confirmed order.
			 */

				confirmedOrder : "false",
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {boolean} newOrderLine - Flag to indicate if the orderline is new
			 */

				newOrderLine : false,

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} currentStoreDesc - Logged in user's store description.
			 */

				currentStoreDesc : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Object} InStrAvailabilityError - Error message shown when users tries change the delivery method to carry when item is unavaialble.
			 */

				InStrAvailabilityError : "N",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {String} selectedCarrierServiceCode - Carrier Service Code stamped on the order line.
			 */

				selectedCarrierServiceCode : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@property {Number} activeTabIndex - Index based on which the tab corresponding to the current delivery method is opened and made active.
			 */
				activeTabIndex : 0
				
			},
			

			/**
			 *@iscdoc viewinit
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@method initialize
			 *@description Initializes the Edit Delivery Method popup by calling getItemAvailabilityForStore api.
			 */
			initialize : function(){
				//this.ui.currentStoreDesc = iscI18n.translate('fulfillmentOptions.LABEL_at',{curStore: iscAppContext.getFromContext("storeDesc")});
				this.ui.currentStoreDesc = iscAppContext.getFromContext("storeDesc");

				var currentStoreAddress = iscAppContext.getFromContext('storeAddress').ShipNodePersonInfo;

	            this.ui.getItemAvailabilityForStoreInput = {
	 						  			Promise : {
	 				  						OrderHeaderKey : modalInput.inputData.OrderHeaderKey,
	 				  						PromiseLines : {
	 				  							PromiseLine : {
	 				  								    ItemID: modalInput.inputData.orderLine.ItemDetails.ItemID,
	 				            				        UnitOfMeasure : modalInput.inputData.orderLine.ItemDetails.UnitOfMeasure,
	 				            				        ProductClass : modalInput.inputData.orderLine.Item.ProductClass,
	 				            				        RequiredQty : modalInput.inputData.orderLine.OrderLineTranQuantity.OrderedQty,
	 				  									OrderLine : { OrderLineKey : modalInput.inputData.orderLine.OrderLineKey, 
	 				  													DeliveryMethod : modalInput.inputData.orderLine.DeliveryMethod}
	 				  											}
	 				  										}
	 				  									}
	 							  					};
	 						  					
	 				
	 			this.ui.getAlternateStoreAvailabilityInput = {
	 										AlternateStore:{ 
							 					   NodeSearch:{
	 					            				ShipToAddress: {
	 					            					Country: currentStoreAddress.Country,
	 					            					State: currentStoreAddress.State,
	 					            					City: currentStoreAddress.City,
	 					            					ZipCode: currentStoreAddress.ZipCode
	 					            								}
	 					            							},			
	 				  								OrderLines :{
	 				  									OrderLine:{RequiredQty : modalInput.inputData.orderLine.OrderLineTranQuantity.OrderedQty,
	 				  										Item:{
	 				  											ItemID:modalInput.inputData.orderLine.ItemDetails.ItemID,
	 				  											ProductClass : modalInput.inputData.orderLine.Item.ProductClass,
	 				  											UnitOfMeasure : modalInput.inputData.orderLine.ItemDetails.UnitOfMeasure
	 				  			 								 }
	 				  										   }
	 				  										}
	 				  							}};
	 			this.ui.getCarrierServiceOptionsForOrderingInput = {Order : {
	 				  								OrderHeaderKey : modalInput.inputData.OrderHeaderKey,
	 				  								OrderLines : {
	 				  									OrderLine : {
	 				  										    ItemID:modalInput.inputData.orderLine.ItemDetails.ItemID,
				  												ProductClass : modalInput.inputData.orderLine.Item.ProductClass,
				  												UnitOfMeasure : modalInput.inputData.orderLine.ItemDetails.UnitOfMeasure
	 				  											//OrderLineKey : modalInput.inputData.orderLine.OrderLineKey
	 				  												}
	 				  											}
				 				  							}};
	 			
	 			if((!iscCore.isVoid(modalInput.inputData.DraftOrderFlag)) && (modalInput.inputData.DraftOrderFlag === 'Y')){
	 				this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.OrderLineKey = modalInput.inputData.orderLine.OrderLineKey;
	 			}
	 			
	 			if(modalInput.inputData.DraftOrderFlag === 'N'){
	 				this.ui.confirmedOrder = "true";
	 			}
	 			
	 			if(!iscCore.isVoid(modalInput.inputData.newOrderLine)){
	 				if(modalInput.inputData.newOrderLine == true){
	 					this.ui.newOrderLine = true;
	 				}
	 				
	 			}
	 			
	            	if(!iscCore.isVoid(modalInput.inputData.orderLine.PersonInfoShipTo)){

	            		var addressTemp = angular.copy(modalInput.inputData.orderLine.PersonInfoShipTo);
						this.setAddress(addressTemp);
							            		
	            	}else if(!iscCore.isVoid(modalInput.inputData.orderPersonInfoShipTo)){

	            		var orderAddressTemp = angular.copy(modalInput.inputData.orderPersonInfoShipTo);
						this.setAddress(orderAddressTemp);          		

	            	}

				this.ui.tmpPersonInfoShipTo = angular.copy(this.ui.personInfoShipTo);
				this.ui.currentDelMethod = modalInput.inputData.orderLine.DeliveryMethod;
				if(this.ui.currentDelMethod == 'PICK'){
					this.ui.pickTab = "true";
					/*if(this.ui.confirmedOrder == "true"){
						this.ui.activeTabIndex = 1;
					}else{
						this.ui.activeTabIndex = 2;
					}*/
					this.ui.activeTabIndex = 2;
				}else if(this.ui.currentDelMethod == 'SHP'){
					this.ui.shipTab = "true";
					/*if(this.ui.confirmedOrder == "true"){
						this.ui.activeTabIndex = 0;
					}else{
						this.ui.activeTabIndex = 1;
					}*/
					this.ui.activeTabIndex = 1;
					this.ui.selectedCarrierServiceCode = modalInput.inputData.orderLine.CarrierServiceCode;
				}else if(this.ui.currentDelMethod == 'CARRY'){
					this.ui.InStoreTab = "true";
					this.ui.activeTabIndex = 0;
				}
				
				iscMashup.callMashup(this,'fulfillmentoptionsgetItemAvailabilityForStore',this.ui.getItemAvailabilityForStoreInput,{}).then(this.onSuccessgetItemAvailabilityForStore.bind(this),angular.noop);
				
				//console.log(this.ui.activeTabIndex + "-------------------------------------------------");
			},
			
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiShip
			 *@description Ship Tab select handler.
			 */
			uiShip : function () {
				//console.log("SHP");
				this.ui.shipTab = "true";
				this.ui.pickTab = "false";
				this.ui.InStoreTab = "false";
				this.ui.availabiltyErrorText = "";
				this.ui.errorText = "";
				this.ui.newDelMethod = "SHP";
				
				this.uiInitShip();
			},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiPickup
			 *@description Pickup Tab select handler.
			 */
			uiPickup : function () {
				//console.log("uiPickup");
				this.ui.shipTab = "false";
				this.ui.pickTab = "true";
				this.ui.InStoreTab = "false";
				this.model.storeList = {};
				//this.model.searchStoreList = {};
				this.ui.availabiltyErrorText = "";
				this.ui.newDelMethod = "PICK";
		
				this.uiInitPickup();				
			},
			
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiPickup
			 *@description InStore Tab select handler.
			 */
  		 
			uiInStore : function () {
				this.ui.shipTab = "false";
				this.ui.pickTab = "false";
				this.ui.InStoreTab = "true";
				this.ui.errorText = "";
				this.ui.availabiltyErrorText = "";
				//console.log("uiInStore");
				//this.ui.newDelMethod = "CARRY";
				
				this.uiInitInStore();
				
			},
			
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiInitInStore
			 *@description Initializes InStore tab on UI.
			 */
			uiInitInStore : function () {
				//console.log("uiInitInStore");
				
				var isOrgRoleNode = iscWizard.getWizardModel("isOrgRoleNode");
            	if(!iscCore.isVoid(isOrgRoleNode) && isOrgRoleNode == 'N')
            		this.ui.InStoreUnAvailable = 'Y'
            			
				if(this.ui.InStoreUnAvailable == 'Y'){
					if(this.ui.InStrAvailabilityError == 'Y'){
				this.ui.availabiltyErrorText = iscI18n.translate('fulfillmentOptions.ErrMsg');
					}else if(this.ui.InStrAvailabilityError == 'N'){
					this.ui.InStoreUnAvailMsg = iscI18n.translate('fulfillmentOptions.LABEL_NotAvailable_InStore',
            					{curStore: this.ui.currentStoreDesc});
            		} 
				}else if(this.ui.InStoreUnAvailable == 'N'){
					this.ui.InStoreAvailMsg = iscI18n.translate('fulfillmentOptions.LABEL_Available_InStore',
            					{curStore: this.ui.currentStoreDesc }); 
				}
				
				this.ui.newDelMethod = "CARRY";
			},




//*************************PICK UP TAB STARTS ******************//

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiInitPickup
			 *@description Initializes Pickup tab on UI.
			 */
			
			uiInitPickup : function(){
				//console.log("uiPickup");
				
				if(this.ui.pickupUnAvailable == 'Y'){
					this.ui.availabiltyErrorText = iscI18n.translate('fulfillmentOptions.ErrMsg');
					
				}else if(this.ui.pickupUnAvailable=='N'){
					
					this.ui.newDelMethod = "PICK";
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();
		             
			/**
		     * mashup call to fetch FulfillmentType configured
		    */
		    
		    var inputFulfillmentType = {Rules : { RuleSetFieldName : "WSC_STORE_STORE_SEARCH"}};
		    
		    var defaultRadiusInput = {Rules : { RuleSetFieldName : "WSC_STORE_DISTANCE_TO_CONSIDER"}};

			var maxRadiusInput = {Rules : { RuleSetFieldName : "WSC_MAX_STORE_DISTANCE_TO_CONSIDER"}};
			
			var distanceUOMInput = {};
			
		    var mashupArray = [];
			mashupArray.push(iscMashup.getMashupRefObj(this,'wscCommonGetFulfillmentTypeForStore',inputFulfillmentType));
			mashupArray.push(iscMashup.getMashupRefObj(this,'wscCommonGetDefaultRadiusValue',defaultRadiusInput));
			mashupArray.push(iscMashup.getMashupRefObj(this,'wscCommonGetMaxRadiusValue',maxRadiusInput));
			mashupArray.push(iscMashup.getMashupRefObj(this,'wscDistanceUOM',distanceUOMInput));

		    //iscMashup.callMashup(this,'wscCommonGetFulfillmentTypeForStore',inputFulfillmentType,{}).then(this.onSuccessGetFulfillmentType.bind(this),this.handleGetFulfillmentTypeError.bind(this));
			
			iscMashup.callMashups(this,mashupArray,{}).then(function(data){
  				//var output = iscMashup.getMashupOutput(data,'wscCommonGetFulfillmentTypeForStore');
  				
        		this.onSuccessGetFulfillmentType();
          	}.bind(this),angular.noop);
			
				}
			},


/* Near By Nodes view starts ****************/

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiNearbyView
			 *@description Under pickup tab, Nearby tab select handler, sets necessary ui attributes and fetches data to switch to nearby stores tab.
			 */
			
			uiNearbyView : function(){
				//console.log("uiNearbyView");
				this.ui.errorText = "";
				if(iscCore.isVoid(this.model.storeList)){
					this.ui.nearStoreDesc="";
					this.ui.nearStore="";
					this.ui.errorText = "";
				
				//watch for radius filter/slider
				
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();
				
				}else if(iscCore.isVoid(this.model.storeList.Page.Output.AlternateStores.NodeList) || this.model.storeList.Page.Output.AlternateStores.NodeList.TotalNumberOfRecords == 0 ){
					this.ui.nearStoreDesc="";
					this.ui.nearStore="";
					this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
				
				//watch for radius filter/slider
				
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();
				
				}else if(iscCore.isVoid(this.ui.nearStoreDesc)){			   		 
					this.ui.nearStoreDesc=this.model.storeList.Page.Output.AlternateStores.NodeList.Node[0].Description;
					this.ui.nearStore=this.model.storeList.Page.Output.AlternateStores.NodeList.Node[0];
					this.ui.errorText = "";
					
				//watch for radius filter/slider
				
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
					
				}else if (!(iscCore.isVoid(this.model.storeList.Page.Output.AlternateStores.NodeList))){
					
				//watch for radius filter/slider
				
				if(this.ui.nearWach)
	             this.ui.nearWach();
		             
	            if(this.ui.searchWach)
	             this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
					
				}
				this.ui.searchStore = "false";
				this.ui.nearbyView = "true"; 
				this.ui.searchView = "false";
				//this.ui.errorText = "";
			},
       
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiAlternateStoreGetNextRecords
			 *@description Callback handler of continuous scrolling directive , used to fetch next set of pagination data on nearby stores tab.
			 */
		uiAlternateStoreGetNextRecords: function(){
		  	this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.FulfillmentType = this.model.FulfillmentType.Rules.RuleSetValue;
        	this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.DistanceToConsider = this.ui.nearRadius;
        	this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.DistanceToConsiderUOM = this.ui.distanceUOM;

			if (this.ui.FetchNextRecords === true) {
	       		iscMashup.callPaginatedMashup(this,'storeSelectiongetAlternateStoreAvailability',this.ui.getAlternateStoreAvailabilityInput,"NEXT",{})
	       		.then(this.getStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this),angular.noop);
		       	this.ui.FetchNextRecords = false;
	       	}
	       	
       	},
		            
			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname getStoreAvailibility
			 *@description Traverses through the storeSelectiongetAlternateStoreAvailability mashup output and based on Availability info in mashup output, nearby stores tab is painted.
			 */

		getStoreAvailibility : function() {
			if(iscCore.isVoid(this.model.storeList.Page.Output.AlternateStores.NodeList)){
	       		this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
           		this.ui.noOfStoresFound = "";
		   }else{
			   	this.ui.errorText= "";
			   	if(iscCore.isVoid(this.ui.nearStoreDesc)){
					this.ui.nearStoreDesc=this.model.storeList.Page.Output.AlternateStores.NodeList.Node[0].Description;
					this.ui.nearStore=this.model.storeList.Page.Output.AlternateStores.NodeList.Node[0];
			  	 }
			  		 
			  	 this.ui.noOfStoresFound=iscI18n.translate('storeSearch.LABEL_Stores_found',
            				{noOfStores: this.model.storeList.Page.Output.AlternateStores.NodeList.Node.length });
            					
				this.model.storeList = iscItem.fetchAvailability(this.model.storeList);				
			}
			this.ui.FetchNextRecords = true;
			this.ui.nearApiExecComplete = "true";
			this.ui.oldNearRadius = "";
		},


			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname onNearRadiusChange
			 *@description Invoked on change of radius value in nearby stores tab, 
			 *fetches the alternate stores list based on the new input radius value provided by the user on popup window.
			 */
	  
		onNearRadiusChange : function (newValue, oldValue){
			if(!(iscCore.isVoid(this.ui.oldNearRadius))){
				oldValue = this.ui.oldNearRadius;
			}
			if(!(newValue == oldValue)){
				if(this.ui.nearApiExecComplete == "false"){
					this.ui.nearRadius = oldValue;
				}else if(this.ui.nearApiExecComplete == "true"){
					this.ui.oldNearRadius = oldValue;
		     		this.ui.errorText = "";
					this.ui.nearStoreDesc = "";
					this.ui.nearStore = "";
					this.model.storeList = {};
		     
					if(iscCore.isVoid(this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.ShipToAddress.Country)) {
						this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
					}else{
						
						
						this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.DistanceToConsider = newValue;
						this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.DistanceToConsiderUOM = this.ui.distanceUOM;;
						this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.FulfillmentType = this.model.FulfillmentType.Rules.RuleSetValue;
						
							iscMashup.callPaginatedMashup(this,'storeSelectiongetAlternateStoreAvailability',this.ui.getAlternateStoreAvailabilityInput,"START",{}).then(this.getStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
		       				this.ui.FetchNextRecords = false;
		       				this.ui.nearApiExecComplete = "false";
	       				
					}
				}
			}
							
		},
		
			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname onSuccessGetDefaultRadiusValue
			 *@description Success handler of mashup wscCommonGetDefaultRadiusValue, Fetches the stores list for the default radius.
			 */
		onSuccessGetDefaultRadiusValue : function() {
		
			if(this.ui.nearWach)
	           this.ui.nearWach();
	            
	        if(this.ui.searchWach)
	            this.ui.searchWach();
				
			//console.log("onSuccessGetDefaultRadiusValue" );
			if(iscCore.isVoid(this.ui.nearRadius)){				
				this.ui.nearRadius = this.model.defaultRadiusValue.Rules.RuleSetValue;;}
				
			if(iscCore.isVoid(this.ui.searchRadius)){				
				this.ui.searchRadius = this.model.defaultRadiusValue.Rules.RuleSetValue;;}
				
			
				
		    //console.log("this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.ShipToAddress.Country" 
		    //+ this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.ShipToAddress.Country);
			if(iscCore.isVoid(this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.ShipToAddress.Country)){
				this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
			}else{
				
				this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.FulfillmentType = this.model.FulfillmentType.Rules.RuleSetValue;
				this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.DistanceToConsider = this.ui.nearRadius;
				this.ui.getAlternateStoreAvailabilityInput.AlternateStore.NodeSearch.DistanceToConsiderUOM = this.ui.distanceUOM;
				
					iscMashup.callPaginatedMashup(this,'storeSelectiongetAlternateStoreAvailability',this.ui.getAlternateStoreAvailabilityInput,"START",{})
					.then(this.getStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
		       		this.ui.FetchNextRecords = false;
	       		
				
			}
				
			var that = this;
			this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
			that.onNearRadiusChange(newValue, oldValue);
			});
				
			this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
			that.onSearchRadiusChange(newValue, oldValue);
			});
				
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname onSuccessGetMaxRadiusValue
			 *@description Success handler of mashup wscCommonGetMaxRadiusValue, sets the radius slider max range value.
			 */
		onSuccessGetMaxRadiusValue : function() {
			//console.log("onSuccessGetMaxRadiusValue");
			this.ui.maxSearchRadius = this.model.maxRadiusValue.Rules.RuleSetValue;
			this.ui.maxNearRadius = this.model.maxRadiusValue.Rules.RuleSetValue;
			//console.log("this.ui.maxSearchRadius" + this.ui.maxSearchRadius );
		}, 

			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname handleGetDefaultRadiusValueError
			 *@description Error handler of mashup wscCommonGetDefaultRadiusValue.
			 */
		handleGetDefaultRadiusValueError : function() {
			if(this.ui.nearWach)
	            this.ui.nearWach();
		             
	       if(this.ui.searchWach)
	            this.ui.searchWach();
		
			//console.log("handleGetDefaultRadiusValueError" );
			
			this.ui.nearRadius = "25";
			this.ui.searchRadius = "25";
			
			//console.log("this.ui.maxNearRadius" + this.ui.maxNearRadius );
			this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
			var that = this;
			this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
			that.onNearRadiusChange(newValue, oldValue);
			});
				
			this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
			that.onSearchRadiusChange(newValue, oldValue);
			});
		},


			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname handleGetMaxRadiusValueError
			 *@description Error handler of mashup wscCommonGetMaxRadiusValue.
			 */
		handleGetMaxRadiusValueError : function() {
			//console.log("handleGetMaxRadiusValueError");
			this.ui.maxNearRadius = "50";
			this.ui.maxSearchRadius = "50";
			//console.log("this.ui.maxSearchRadius" + this.ui.maxSearchRadius );
		},

/* Near By Nodes view ends ****************/

/* Search Stores view starts *******************/
			
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiSearchView
			 *@description Under Pickup tab, Search Stores tab select handler,Sets necessary attributes and fetches data to switch to search stores tab.
			 */
			uiSearchView : function (){
				//console.log("uiSearchView");
				this.ui.errorText = "";
				if(iscCore.isVoid(this.model.searchStoreList)){
					this.ui.searchedStoreDesc="";
					this.ui.searchedStore="";
					this.ui.errorText = "";
					this.ui.searchStore = "true";
					this.ui.searchView = "false";
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();

				}else if(iscCore.isVoid(this.model.searchStoreList.Page.Output.AlternateStores.NodeList) || this.model.searchStoreList.Page.Output.AlternateStores.NodeList.TotalNumberOfRecords == 0){
					this.ui.searchedStoreDesc="";
					this.ui.searchedStore="";
					if(!(iscCore.isVoid(this.ui.noStoreFound))){
					this.ui.errorText ="";
					}else{
					this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');}
					this.ui.searchStore = "true";
					this.ui.searchView = "false";
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();

				}else if(iscCore.isVoid(this.ui.searchedStoreDesc)){
					this.ui.searchedStoreDesc=this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node[0].Description;
					this.ui.selectedStore=this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node[0];
					this.ui.errorText = "";
					this.ui.searchStore = "false";
					this.ui.searchView = "true";
					
					//watch for radius filter/slider
				
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
					
				}else if (!(iscCore.isVoid(this.model.searchStoreList.Page.Output.AlternateStores.NodeList))){
					this.ui.searchView = "true";
					this.ui.searchStore = "false";
					
				//watch for radius filter/slider
				
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
					
				}
				
				this.ui.nearbyView = "false";
			},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiSearchView
			 *@description OnClick handler of "Back to Search" button, gets the search screen.
			 */
		uiBacktoSearch : function () {
			//console.log("uiBacktoSearch");
			this.ui.searchStore = "true";
			this.ui.nearbyView = "false";
			this.ui.searchView = "false";
			this.ui.noStoreFound = "";	
			this.ui.searchedStoreDesc="";
			this.ui.searchedStore="";
			this.ui.errorText = "";

			if(this.ui.nearWach)
	           this.ui.nearWach();
		             
	        if(this.ui.searchWach)
	           this.ui.searchWach();
			},


			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiSearchStore
			 *@description OnClick handler of "Search" button, fetches the alternate stores list based on the input search criteria provided by the user on search screen.
			 */
		uiSearchStore : function (){
			//console.log("uiSearchStore");
			//console.log("ui.personInfo" +this.ui.personInfo);
			this.ui.searchButtonClick = "true";
			if(iscCore.isVoid(this.ui.personInfo.ZipCode)) {
				if(iscCore.isVoid(this.ui.personInfo.City)){
					this.ui.errorText = iscI18n.translate('storeSearch.Address_ErrMsg');
					this.model.searchStoreList = {};
				}else if(iscCore.isVoid(this.ui.personInfo.State)) {
					this.ui.errorText = iscI18n.translate('storeSearch.Address_ErrMsg');
					this.model.searchStoreList = {};
				}else{
					this.ui.errorText = "";
					this.ui.searchedStoreDesc = "";
					this.ui.searchedStore = "";
					//this.ui.searchRadius = this.ui.maxNearRadius;
					this.model.searchStoreList = {};
				//console.log("uiSearchStore in else");
		
				var mashupInput = {
					AlternateStore:{ 
						NodeSearch:{DistanceToConsider : this.ui.searchRadius,
								    DistanceToConsiderUOM : this.ui.distanceUOM,
									FulfillmentType : this.model.FulfillmentType.Rules.RuleSetValue,
				  			ShipToAddress:{
				  				Country:this.ui.personInfo.Country,
				  				City : this.ui.personInfo.City,
				  				State : this.ui.personInfo.State.RegionName,
				  				ZipCode:this.ui.personInfo.ZipCode
				   			}
				  					},
				  		OrderLines :{
				  				OrderLine:{ RequiredQty : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.RequiredQty,
				  						Item:{
				  							ItemID : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.ItemID,
				  							ProductClass : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.ProductClass,
				  							UnitOfMeasure : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.UnitOfMeasure
				  							 }
				  						   }
				  					}
				  			}
							};
				//console.log("mashupInput" +mashupInput);			
	
				
					iscMashup.callPaginatedMashup(this,'storeSearchgetAlternateStoreAvailability',mashupInput,"START",{})
					.then(this.getSearchStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
		       		this.ui.FetchNextRecords = false;
	       		
									
				this.ui.searchStore = "false";
				this.ui.nearbyView = "false";
				this.ui.searchView = "true";
				
				//watch for radius filter/slider
				
				if(this.ui.nearWach)
		         this.ui.nearWach();
		             
		        if(this.ui.searchWach)
		         this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
				}
									
			}else{
				this.ui.errorText = "";
				this.model.searchStoreList = {};
				//this.ui.searchRadius = this.ui.maxNearRadius;
				//console.log("uiSearchStore in else");

				var tmpState = "";
				if(!(iscCore.isVoid(this.ui.personInfo.State))) {
					tmpState = this.ui.personInfo.State.RegionName;
				}
		
				var mashupInput = {
					AlternateStore:{ 
						NodeSearch:{DistanceToConsider : this.ui.searchRadius,
							        DistanceToConsiderUOM : this.ui.distanceUOM,
									FulfillmentType : this.model.FulfillmentType.Rules.RuleSetValue,
				  			ShipToAddress:{
				  				Country:this.ui.personInfo.Country,
				  				City : this.ui.personInfo.City,
				  				State : tmpState,
				  				ZipCode:this.ui.personInfo.ZipCode
				   			}
				  					},
				  		OrderLines :{
				  				OrderLine:{RequiredQty : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.RequiredQty,
				  						Item:{
				  							ItemID : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.ItemID,
				  							ProductClass : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.ProductClass,
				  							UnitOfMeasure : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.UnitOfMeasure
				  							 }
				  						   }
				  					}
				  			}
							};
				//console.log("mashupInput" +mashupInput);			
	
				
					iscMashup.callPaginatedMashup(this,'storeSearchgetAlternateStoreAvailability',mashupInput,"START",{}).then(this.getSearchStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));				
		       		this.ui.FetchNextRecords = false;
	       		

				this.ui.searchStore = "false";
				this.ui.nearbyView = "false";
				this.ui.searchView = "true";
				
				//watch for radius filter/slider
				
				if(this.ui.nearWach)
	             this.ui.nearWach();
		             
	            if(this.ui.searchWach)
	             this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
				}
		},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiAlternateSearchStoreGetNextRecords
			 *@description Callback handler of continuous scrolling directive , used to fetch next set of pagination data on search stores tab.
			 */
		uiAlternateSearchStoreGetNextRecords: function(){
		  	//this.ui.selectedStoreDesc = "";
		  	//this.ui.selectedStore = "";
		  	//console.log("in uiAlternateSearchStoreGetNextRecords" );
			var tmpState = "";
			if(!(iscCore.isVoid(this.ui.personInfo.State))) {
				tmpState = this.ui.personInfo.State.RegionName;
			}

			var mashupInput = {
					AlternateStore:{ 
						NodeSearch:{DistanceToConsider : this.ui.searchRadius,
									DistanceToConsiderUOM : this.ui.distanceUOM,
									FulfillmentType : this.model.FulfillmentType.Rules.RuleSetValue,
				  			ShipToAddress:{
				  				Country:this.ui.personInfo.Country,
				  				City : this.ui.personInfo.City,
				  				State : tmpState,
				  				ZipCode:this.ui.personInfo.ZipCode
				   			}
				  					},
				  		OrderLines :{
				  				OrderLine:{RequiredQty : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.RequiredQty,
				  						Item:{
				  							ItemID : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.ItemID,
				  							ProductClass : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.ProductClass,
				  							UnitOfMeasure : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.UnitOfMeasure
				  							 }
				  						   }
				  					}
				  			}
							};
				//console.log("mashupInput" +mashupInput);			
			if (this.ui.FetchNextRecords === true) {
            	iscMashup.callPaginatedMashup(this,'storeSearchgetAlternateStoreAvailability',mashupInput,"NEXT",{}).then(this.getSearchStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
		       	this.ui.FetchNextRecords = false;
	       	}
            	
	       },

		            
			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname getSearchStoreAvailibility
			 *@description Traverses through the storeSearchgetAlternateStoreAvailability mashup output and based on Availability info in mashup output, search stores tab is painted.
			 */
		getSearchStoreAvailibility : function() {
			
			if((iscCore.isVoid(this.model.searchStoreList.Page.Output.AlternateStores.NodeList)) && this.ui.searchButtonClick == "true"){
       			this.ui.errorText = "";
       			this.ui.searchStore = "true";
				this.ui.nearbyView = "false";
				this.ui.searchView = "false";
       			this.ui.noStoreFound = iscI18n.translate('storeSearch.Store_ErrMsg');
       			this.ui.noOfStoresSearched = "";
		   }else if(iscCore.isVoid(this.model.searchStoreList.Page.Output.AlternateStores.NodeList)){
       			this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
       			this.ui.noOfStoresSearched = "";
       			this.ui.searchButtonClick = "false";
       			this.ui.noStoreFound = "";
		   }else{
			  if (this.model.searchStoreList.Page.Output.AlternateStores.NodeList.TotalNumberOfRecords == 0){
				   this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
			   } else{
				   this.ui.errorText = "";
			   }
			   	this.ui.noStoreFound = "";
			   	this.ui.searchButtonClick = "false";
		   		if(iscCore.isVoid(this.ui.searchedStoreDesc)){
				this.ui.searchedStoreDesc=this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node[0].Description;
				this.ui.searchedStore=this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node[0];
	   		}
			   			
			this.ui.noOfStoresSearched=iscI18n.translate('storeSearch.LABEL_Stores_found',
            	{noOfStores: this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node.length });
			   			
			//this.ui.noOfStoresSearched = this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node.length;
			this.model.searchStoreList = iscItem.fetchAvailability(this.model.searchStoreList);	
			}
			this.ui.FetchNextRecords = true;
			this.ui.searchApiExecComplete = "true";
			this.ui.oldSearchRadius = "";
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname onSearchRadiusChange
			 *@description Invoked on change of radius value in search stores tab, 
			 * fetches the alternate stores list based on the new input radius value provided by the user on popup window.
			 */
		onSearchRadiusChange : function (newValue, oldValue){
			if(!(iscCore.isVoid(this.ui.oldSearchRadius))){
				oldValue = this.ui.oldSearchRadius;
			}
			if(!(newValue == oldValue)){
				if(this.ui.searchApiExecComplete == "false"){
					this.ui.searchRadius = oldValue;
				}else if(this.ui.searchApiExecComplete == "true"){
					this.ui.oldSearchRadius = oldValue;
		     		this.ui.errorText = "";
					this.ui.searchedStoreDesc = "";
					this.ui.searchedStore = "";
					this.model.searchStoreList = {};
		     
					var tmpState = "";
					if(!(iscCore.isVoid(this.ui.personInfo.State))) {
						tmpState = this.ui.personInfo.State.RegionName;
					}
		     
					var mashupInput = {
					AlternateStore:{ 
						NodeSearch:{DistanceToConsider : newValue,
									DistanceToConsiderUOM : this.ui.distanceUOM,
									FulfillmentType : this.model.FulfillmentType.Rules.RuleSetValue,
				  			ShipToAddress:{
				  				Country:this.ui.personInfo.Country,
				  				City : this.ui.personInfo.City,
				  				State : tmpState,
				  				ZipCode:this.ui.personInfo.ZipCode
				   			}
				  					},
				  		OrderLines :{
				  				OrderLine:{RequiredQty : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.RequiredQty,
				  						Item:{
				  							ItemID : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.ItemID,
				  							ProductClass : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.ProductClass,
				  							UnitOfMeasure : this.ui.getAlternateStoreAvailabilityInput.AlternateStore.OrderLines.OrderLine.Item.UnitOfMeasure
				  							 }
				  						   }
				  					}
				  			}
							};
				//console.log("mashupInput" +mashupInput);			
	     		
				
					iscMashup.callPaginatedMashup(this,'storeSearchgetAlternateStoreAvailability',mashupInput,"START",{}).then(this.getSearchStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
					this.ui.searchApiExecComplete = "false";
		       		this.ui.FetchNextRecords = false;
	       		
								
				}
			}
							
		},


/** Search Stores view ends ********************/
       
			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname handleGetAlternateStoreError
			 *@description Executed on error , sets error message to be displayed inline.
			 */
		handleGetAlternateStoreError : function(){
			this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
	 		 *@methodname handleGetFulfillmentTypeError
			 *@description Error handler of mashup wscCommonGetFulfillmentTypeForStore.
			 */
				handleGetFulfillmentTypeError : function() {
			this.ui.AlternateStoreInput.AlternateStore.NodeSearch.FulfillmentType ="";
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
	 		 *@methodname onSuccessGetFulfillmentType
			 *@description Sucsess handler of mashup wscCommonGetFulfillmentTypeForStore, mashups to fetch radius values are invoked.
			 */
		onSuccessGetFulfillmentType : function() {
			
			this.onSuccessGetMaxRadiusValue();
			this.onSuccessDistanceUOM();
			this.onSuccessGetDefaultRadiusValue();
			
			/**start of mashup calls to get radius values **/
			
			/*var defaultRadiusInput = {Rules : { RuleSetFieldName : "WSC_STORE_DISTANCE_TO_CONSIDER"}};

			var maxRadiusInput = {Rules : { RuleSetFieldName : "WSC_MAX_STORE_DISTANCE_TO_CONSIDER"}};

			iscMashup.callMashup(this,'wscCommonGetDefaultRadiusValue',defaultRadiusInput,{}).then(this.onSuccessGetDefaultRadiusValue.bind(this),this.handleGetDefaultRadiusValueError.bind(this));
			iscMashup.callMashup(this,'wscCommonGetMaxRadiusValue',maxRadiusInput,{}).then(this.onSuccessGetMaxRadiusValue.bind(this),this.handleGetMaxRadiusValueError.bind(this));
	
*/			/** end of mashup calls to get radius values **/
		},	
		
		/**
		 *@iscdoc method
		 *@viewname store.views.common.fulfillment.fulfillmentoptions
		 *@methodname onSuccessDistanceUOM
		 *@description Success handler of mashup wscDistanceUOM, sets the radius slider distance UOM.
		 */
		onSuccessDistanceUOM : function() {
			this.ui.distanceUOM = this.model.distanceUOM.Rules.RuleSetValue;
			this.ui.distanceUOMDesc = this.model.distanceUOM.Rules.DistanceUOMDesc;
			//this.setDistanceUOMDescBasedOnValue(this.ui.searchRadius);
			
		},


//**********PICKUP TAB ENDS************//



//********************SHIP TAB STARTS *******************//
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
	 		 *@methodname uiInitShip
			 *@description Initializes Ship tab on UI.
			 */
  		 
			uiInitShip : function () {
			
				if(this.ui.shipUnAvailable == 'Y'){
					this.ui.availabiltyErrorText = iscI18n.translate('fulfillmentOptions.ErrMsg');
					
				}else if(this.ui.shipUnAvailable == 'N'){
					
					this.ui.newDelMethod = "SHP";
					if(this.ui.carrierUnAvailable == 'N'){
						this.ui.addShipAddress = "false";
						this.ui.editShipAddress = "false";
						this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.EarliestShipDate=this.ui.EarliestShipDate;

						var carrierServiceInput = this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo;
						if(!(iscCore.isVoid(carrierServiceInput))){
							if(!(iscCore.isVoid(carrierServiceInput.State))){
								if(!(iscCore.isVoid(carrierServiceInput.State.RegionName))){
					
								var tempState = carrierServiceInput.State.RegionName;
								this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.State = "";
								this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.State = tempState;
								}
							}
						}
						//console.log(this.ui.personInfoShipTo);
				      	/**
		             	* mashup call to fetch carrier service list
		             	*/
					
						iscMashup.callMashup(this,'fulfillmentoptionsgetCarrierServiceOptionsForOrdering',this.ui.getCarrierServiceOptionsForOrderingInput,{})
						.then(this.onSuccessCarrierServiceOptionsForOrdering.bind(this),angular.noop);				
					}else if(this.ui.carrierUnAvailable == 'Y'){
						this.ui.addShipAddress = "true";
						this.ui.editShipAddress = "false";
				}
				}
			},
		

  		 
			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
	 		 *@methodname onSuccessCarrierServiceOptionsForOrdering
			 *@description Success handler method of fulfillmentoptionsgetCarrierServiceOptionsForOrdering mashup.
			 */
			onSuccessCarrierServiceOptionsForOrdering : function(){
				//console.log(this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService[0].CarrierServiceDesc);
				
				if(iscCore.isVoid(this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList)){

				this.ui.carrierUnAvailable = "N";
				this.ui.editShipAddress = "false";
				this.ui.addShipAddress = "false";
				//this.ui.noCarriers = "";
				this.ui.noCarriers = "true";

				this.ui.carriersNotConfigured = iscI18n.translate('fulfillmentOptions.LABEL_CarriersNotConfigured',
					 {EShipDate:$filter('date')(this.ui.EarliestShipDate, 'fullDate')});
					 
				}else{
				var CarrierService = { CarrierServiceDesc : "None"};
        		this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService.splice(0, 0, CarrierService);
				this.ui.selectedCarrier =  this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService[0];
				this.ui.selectedCarrierDesc = this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService[0].CarrierServiceDesc;
				this.ui.noCarriers = "false";
				this.ui.carrierUnAvailable = "N";
				this.ui.editShipAddress = "false";
				this.ui.addShipAddress = "false";
				
				var carrierLen = this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService.length;
				if(!(iscCore.isVoid(carrierLen))){
					for(var j=0;j < this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService.length;j++)
                	{
						if(this.ui.selectedCarrierServiceCode == this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService[j].CarrierServiceCode){
							this.ui.selectedCarrierDesc = this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService[j].CarrierServiceDesc;
						}
                	}
				}
				/*var carrierLen = this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService.length;
				if(!(iscCore.isVoid(carrierLen))){
					for(var j=0;j < this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService.length;j++)
                	{
					var carrier = this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService[j];
					if(!(iscCore.isVoid(carrier.DeliveryEndDate))){
					this.model.CarrierServiceOptions.Order.OrderLines.OrderLine[0].CarrierServiceList.CarrierService[j].displayDeliveryEndDate =
					 iscI18n.translate('fulfillmentOptions.LABEL_DeliveryEndDate',
					 {DeliveryEndDate:$filter('date')(carrier.DeliveryEndDate, 'fullDate')});
					 }
					}
				}*/
				}
				
			},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
	 		 *@methodname uiEditShipTo
			 *@description OnClick handler of "Edit shipping address" link, necessary ui attributes are set to get the edit shipping form on popup.
			 */
			uiEditShipTo : function(){
				this.ui.carrierUnAvailable = "Y";
				this.ui.addShipAddress = "false";
				this.ui.editShipAddress = "true";
			},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
	 		 *@methodname uiAddShipTo
			 *@description OnClick handler of "ADD" button to add shipping address on ship tab.
			 */
			 
		uiAddShipTo : function () {
			if(this.ui.carrierUnAvailable == 'Y'){

				this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.EarliestShipDate=this.ui.EarliestShipDate;
				var that = this;
				
				if($scope.currentSelection && !$scope.holdAPIcall){
					that.ui.availabiltyErrorText = "";
					
					that.setAddress($scope.currentSelection);
					iscMashup.callMashup(that,'fulfillmentoptionsgetItemAvailabilityForStore',that.ui.getItemAvailabilityForStoreInput,{})
					.then(that.onSuccessgetItemAvailability.bind(that),angular.noop);

				
			   }else{
				    $scope.$broadcast('callVerifyAddress',{});
			   }
			}
		},

//******************SHIP TAB ENDS *********************//


			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
	 		 *@methodname onSuccessgetItemAvailabilityForStore
			 *@description Success handler of fulfillmentoptionsgetItemAvailabilityForStore mashup.
			 */
		onSuccessgetItemAvailabilityForStore : function(){
			//console.log("onSuccessgetItemAvailabilityForStore");
			if(iscCore.isVoid(this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities)){
				this.ui.availabiltyErrorText = iscI18n.translate('fulfillmentOptions.ErrMsg');
			}else {
				var availLen = this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability.length;
				if(iscCore.isVoid(availLen)){
					var unavail = this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability;
					if(unavail.DeliveryMethod == "SHP"){
						this.ui.pickupUnAvailable = 'Y';
						this.ui.InStoreUnAvailable = 'Y';
						this.ui.shipUnAvailable = unavail.HasAnyUnavailableQty;
						
						if(this.ui.shipUnAvailable == "N"){
							this.ui.EarliestShipDate = unavail.EarliestShipDate;
							if(unavail.IsAvailableToday == 'Y'){
								this.ui.displayEarliestShipDate = iscI18n.translate('globals.LABEL_ItemShpAvailableToday');
							}else{
								this.ui.displayEarliestShipDate = iscI18n.translate('fulfillmentOptions.LABEL_EarliestShipDate',
            					{EarliestShipDate: $filter('date')(this.ui.EarliestShipDate, 'fullDate') }); 				
            				}					
						}
						
					/** in input data if we donot get shipto address then get as input from user in ship tab **/				
					if(iscCore.isVoid(this.ui.getCarrierServiceOptionsForOrderingInput.Order.PersonInfoShipTo)) 
					{ 
					if(iscCore.isVoid(this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo))
						{
						this.ui.carrierUnAvailable = 'Y';
						this.ui.addShipAddress = "true";
						this.ui.editShipAddress = "false";
						}
					}
						
					}
				}else {
				
				if(this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability.length == 2){
					this.ui.shipUnAvailable = 'Y';
					}
				for(var i=0;i < this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability.length;i++)
                {
				var Unavailability = this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability[i];
					if(Unavailability.DeliveryMethod == "PICK"){
						this.ui.pickupUnAvailable = Unavailability.HasAnyUnavailableQty;
						
					}else if(Unavailability.DeliveryMethod == "SHP"){
						this.ui.shipUnAvailable = Unavailability.HasAnyUnavailableQty;
						
						if(this.ui.shipUnAvailable == "N"){
							this.ui.EarliestShipDate = Unavailability.EarliestShipDate;
							if(Unavailability.IsAvailableToday == 'Y'){
								this.ui.displayEarliestShipDate = iscI18n.translate('globals.LABEL_ItemShpAvailableToday');
							}else{
								this.ui.displayEarliestShipDate = iscI18n.translate('fulfillmentOptions.LABEL_EarliestShipDate',
            					{EarliestShipDate: $filter('date')(this.ui.EarliestShipDate, 'fullDate') }); 				
            				}					
							
						}
					/** in input data if we do not get shipto address then get as input from user in ship tab **/				
					if(iscCore.isVoid(this.ui.getCarrierServiceOptionsForOrderingInput.Order.PersonInfoShipTo)) 
					{ 
					if(iscCore.isVoid(this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo))
						{
						this.ui.carrierUnAvailable = 'Y';
						this.ui.addShipAddress = "true";
						this.ui.editShipAddress = "false";
						}
					}
					}else {
						this.ui.InStoreUnAvailable = Unavailability.HasAnyUnavailableQty;
						
					}
				}
			}
			
			}
					
			if(this.ui.currentDelMethod == 'PICK'){
				this.uiInitPickup();
			}
			else if(this.ui.currentDelMethod == 'SHP'){
				this.uiInitShip();
			}
			else if(this.ui.currentDelMethod == 'CARRY'){
				this.uiInitInStore();
			}
				
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
	 		 *@methodname onSuccessgetItemAvailability
			 *@description Executed on success of fulfillmentoptionsgetItemAvailabilityForStore mashup call when shipping address 
  		 	 * is added/edited on Ship tab.
			 */

		onSuccessgetItemAvailability : function(){
			//console.log("onSuccessgetItemAvailability");
			if(iscCore.isVoid(this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities)){
				this.ui.availabiltyErrorText = iscI18n.translate('fulfillmentOptions.ErrMsg');
			}else {
				var availLen = this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability.length;
				if(iscCore.isVoid(availLen)){
					var unavail = this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability;
					if(unavail.DeliveryMethod == "SHP"){
						this.ui.pickupUnAvailable = 'Y';
						this.ui.InStoreUnAvailable = 'Y';
						this.ui.shipUnAvailable = unavail.HasAnyUnavailableQty;
						
						if(this.ui.shipUnAvailable == "N"){
							this.ui.EarliestShipDate = unavail.EarliestShipDate;
							if(unavail.IsAvailableToday == 'Y'){
								this.ui.displayEarliestShipDate = iscI18n.translate('globals.LABEL_ItemShpAvailableToday');
							}else{
								this.ui.displayEarliestShipDate = iscI18n.translate('fulfillmentOptions.LABEL_EarliestShipDate',
            					{EarliestShipDate: $filter('date')(this.ui.EarliestShipDate, 'fullDate') }); 				
            				}					
						
						
						this.model.CarrierServiceOptions = {};
		      			/**
    	         			* mashup call to fetch carrier service list
	             		*/
						iscMashup.callMashup(this,'fulfillmentoptionsgetCarrierServiceOptionsForOrdering',this.ui.getCarrierServiceOptionsForOrderingInput,{})
						.then(this.onSuccessCarrierServiceOptionsForOrdering.bind(this),angular.noop);				
						}
					}
				}else {
				
				if(this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability.length == 2){
					this.ui.shipUnAvailable = 'Y';
					}
				for(var i=0;i < this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability.length;i++)
                {
				var Unavailability = this.model.fulfillmentOptionsItemAvailability.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability[i];
					if(Unavailability.DeliveryMethod == "PICK"){
						this.ui.pickupUnAvailable = Unavailability.HasAnyUnavailableQty;
						
					}else if(Unavailability.DeliveryMethod == "SHP"){
						this.ui.shipUnAvailable = Unavailability.HasAnyUnavailableQty;
						
						if(this.ui.shipUnAvailable == "N"){
							this.ui.EarliestShipDate = Unavailability.EarliestShipDate;
							if(Unavailability.IsAvailableToday == 'Y'){
								this.ui.displayEarliestShipDate = iscI18n.translate('globals.LABEL_ItemShpAvailableToday');
							}else{
								this.ui.displayEarliestShipDate = iscI18n.translate('fulfillmentOptions.LABEL_EarliestShipDate',
            					{EarliestShipDate: $filter('date')(this.ui.EarliestShipDate, 'fullDate') }); 				
            				}					
								
						
						this.model.CarrierServiceOptions = {};
		      			/**
    	         			* mashup call to fetch carrier service list
	             		*/
						iscMashup.callMashup(this,'fulfillmentoptionsgetCarrierServiceOptionsForOrdering',this.ui.getCarrierServiceOptionsForOrderingInput,{})
						.then(this.onSuccessCarrierServiceOptionsForOrdering.bind(this),angular.noop);
						}				
					}else {
						this.ui.InStoreUnAvailable = Unavailability.HasAnyUnavailableQty;
						
					}
				}
			}
			
			}
			
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname setAddress
			 *@description Shipping address is set to mashup and directive inputs.
			 */
			setAddress : function (addrss) {
				
				this.ui.personInfoShipTo = {};
				this.ui.personInfoShipTo.Country = addrss.Country;
	            this.ui.personInfoShipTo.City = addrss.City;
	            this.ui.personInfoShipTo.State = addrss.State;
	            this.ui.personInfoShipTo.ZipCode = addrss.ZipCode;
	            this.ui.personInfoShipTo.AddressLine1 = addrss.AddressLine1;
	            this.ui.personInfoShipTo.FirstName = addrss.FirstName;
	            this.ui.personInfoShipTo.LastName = addrss.LastName;
	            this.ui.personInfoShipTo.EMailID = addrss.EMailID;
	            this.ui.personInfoShipTo.DayPhone = addrss.DayPhone;

				this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo = {};
	            this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.Country = addrss.Country;
	            this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.City = addrss.City;
	            this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.State = addrss.State;
	            this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.ZipCode = addrss.ZipCode;
	            this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.AddressLine1 = addrss.AddressLine1;
	            this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.FirstName = addrss.FirstName;
	            this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.LastName = addrss.LastName;
	            this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.EMailID = addrss.EMailID;
	            this.ui.getCarrierServiceOptionsForOrderingInput.Order.OrderLines.OrderLine.PersonInfoShipTo.DayPhone = addrss.DayPhone;
							
				this.ui.getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine.ShipToAddress = {};
	            this.ui.getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine.ShipToAddress.Country = addrss.Country;
	            this.ui.getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine.ShipToAddress.City = addrss.City;
	            this.ui.getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine.ShipToAddress.State = addrss.State;
	            this.ui.getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine.ShipToAddress.ZipCode = addrss.ZipCode;
	            this.ui.getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine.ShipToAddress.AddressLine1 = addrss.AddressLine1;
	            this.ui.getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine.ShipToAddress.FirstName = addrss.FirstName;
	            this.ui.getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine.ShipToAddress.LastName = addrss.LastName;
	            this.ui.getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine.ShipToAddress.EMailID = addrss.EMailID;
	            this.ui.getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine.ShipToAddress.DayPhone = addrss.DayPhone;
			},
		

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiClose
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},
				
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.fulfillment.fulfillmentoptions
			 *@methodname uiSubmit
			 *@description OnClick handler of "OK" button, propagates the data back to invoking screen.
			 */
		uiSubmit : function () {
			//console.log("ok");
			// result data, propagated to invoking screen
			if(this.ui.newDelMethod == "SHP"){
				if(this.ui.shipUnAvailable == 'N'){
				var shipAddrss = this.ui.personInfoShipTo;
					if(!(iscCore.isVoid(shipAddrss))){
						if(!(iscCore.isVoid(shipAddrss.State))){
							if(!(iscCore.isVoid(shipAddrss.State.RegionName))){
								var tempState = shipAddrss.State.RegionName;
								this.ui.personInfoShipTo.State = "";
								this.ui.personInfoShipTo.State = tempState;
							}
						}
					}
				
				var carrierSelected = angular.copy(this.ui.selectedCarrier);
				if(!(iscCore.isVoid(carrierSelected))){
					if(carrierSelected.CarrierServiceDesc == "None"){
						carrierSelected = "";
					}
				}
				var resultdata = {};
				if(angular.equals(this.ui.personInfoShipTo,this.ui.tmpPersonInfoShipTo)){
				resultdata = { data : {
							currentDelMethod : this.ui.currentDelMethod,
							newDelMethod : this.ui.newDelMethod,
							selectedCarrier : carrierSelected,
							EarliestShipDate : this.ui.EarliestShipDate,
							personInfoShipTo : ""
								}
							};
				
				}else{
				resultdata = { data : {
							currentDelMethod : this.ui.currentDelMethod,
							newDelMethod : this.ui.newDelMethod,
							selectedCarrier : carrierSelected,
							EarliestShipDate : this.ui.EarliestShipDate,
							personInfoShipTo : this.ui.personInfoShipTo
								}
							};
				}
			//console.log("resultdata" + resultdata);				
			$uibModalInstance.close(resultdata);
			}
			}else if(this.ui.newDelMethod == "PICK"){
				if(this.ui.pickupUnAvailable=='N'){
				if(this.ui.searchView == 'true'){
					this.ui.selectedStore = this.ui.searchedStore;}
				else if(this.ui.nearbyView == 'true'){
					this.ui.selectedStore = this.ui.nearStore;
				}
				if(this.ui.selectedStore.Available == "false"){
					this.ui.errorText = iscI18n.translate('storeSearch.OutofStock_ErrMsg');
				}else{
					// result data, selected store is propagated to invoking screen
					var resultdata = { data : {
										currentDelMethod : this.ui.currentDelMethod,
										newDelMethod : this.ui.newDelMethod,
										selectedStore : this.ui.selectedStore										
									}
								};
					//console.log("resultdata" + resultdata);				
					$uibModalInstance.close(resultdata);
				}
				}		
			}else if(this.ui.newDelMethod == "CARRY"){
			
			if(this.ui.InStoreUnAvailable == 'N'){
				this.ui.InStrAvailabilityError ="N";
				var resultdata = { data : {
					currentDelMethod : this.ui.currentDelMethod,
					newDelMethod : this.ui.newDelMethod,
					InStoreAvailability : "Y"
											}
								};
			//console.log("resultdata" + resultdata);	
			$uibModalInstance.close(resultdata);			
				
			}else{
				this.ui.InStrAvailabilityError ="Y";
				this.ui.availabiltyErrorText = iscI18n.translate('fulfillmentOptions.ErrMsg');
			}
		  }
		}
  	});
		
		
		
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.common.gift.giftoptions
 *@package store.views.common.gift
 *@class giftoptions
 *@description Controller used for handling giftoptions popup 
 * 
 * USAGE : Invoking screen will have the below code snippet to integrate with gift options popup : 
 * 
 * 			uiGiftOptions : function(){
 *			var that = this;
 *	  		var resolveData = { // input data required by popup, to be passed from invoking screen
 *						modalInput: function ()
 *						   {
 *						  return {
 *						  			gift : {
 *				  					giftWrap : that.ui.giftWrap,// is item enabled for gift, data to be provided from invoking screen
 *				  					giftRecipient : that.ui.giftRecipient,// will be null while opening popup for the first time, data propagated from popup to invoking screen
 *									giftMessage : that.ui.giftMessage,	//will be null while opening popup for the first time, data propagated from popup to invoking screen
 *									giftWrapChecked : this.ui.giftWrapChecked, //checkbox value ,will be N while opening popup for first time ,data propagated from popup to invoking screen
 *									showRemoveGift : this.ui.showRemoveGift //if this attribute is set to Y, then a button to remove the gift options on line will be displayed  
 *							  			}		
 *				  				};
 *		  				}
 *	  				}
 *	  				
 *	  			//For gift options 
 *				iscModal.openModal('store.views.common.gift.giftoptions',resolveData,{})
 *					.then(function(callBackData){
 *       						that.ui.giftFlag =callBackData.data.giftFlag;
 *       						that.ui.giftRecipient = callBackData.data.giftRecipient;
 *       						that.ui.giftMessage = callBackData.data.giftMessage;
 *								that.ui.giftWrapChecked = callBackData.data.giftWrapChecked
 *  							},
 *  							angular.noop);		
 *
 *			//For gift removal
 *				iscModal.openModal('store.views.common.gift.giftoptions',resolveData,{})
 *					.then(function(callBackData){
 *       						that.ui.removeGift ="Y/N";
 *  							},
 *  							angular.noop);		
 * 
 *
 *	
 *			
 *			},			
 * 
 * 
 */


angular.module('store').controller('store.views.common.gift.giftoptions',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscModal','iscI18n',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscModal,iscI18n) {
		
		
		iscScreen.initializeModalScreen($scope,{


      /**
       *ModelList
       *Models that hold data
       * 
       */
  		model:{
  		  /**
         *@iscdoc model
         *@viewname store.views.common.gift.giftoptions
         *@name IsgiftWrap
         *@description Holds the output data of giftwrapgetRuleDetails mashup.
         */
         "IsgiftWrap":{}
  		},


  		/**
       *MashupRefs
       *array containing the list of mashups referred in this controller
       */
  		mashupRefs : [
  		
  				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.common.gift.giftoptions
  		   			*@mashupid WSC_getRuleDetails
		   			*@mashuprefid giftwrapgetRuleDetails
		   			*@modelname IsgiftWrap
  		   			*@description Fetches allow gift wrap rule value to check if gift wrapping is enabled for an item.
  		   			*/
  		  		
				
					mashupRefId: 'giftwrapgetRuleDetails',
					mashupId: 'WSC_getRuleDetails',
					modelName : 'IsgiftWrap'
														
				}
			],


			ui:{
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.gift.giftoptions
			 *@property {String} giftFlag - Attribute denoting if item is marked as gift or not, "Y" if marked as gift, "N" otherwise.
			 */
							
    			giftFlag : "Y",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.gift.giftoptions
			 *@property {String} giftWrap - Attribute denoting if item is gift wrap enabled or not, received from invoking screen,
			 * "Y" if item is gift wrap enabled, "N" otherwise.
			 */

    			giftWrap : "",
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.gift.giftoptions
			 *@property {String} giftWrapChecked - Gift wrap check box value, "Y" if checkbox is selected/checked, "N" otherwise.
			 */

    			giftWrapChecked : "N",
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.gift.giftoptions
			 *@property {String} FirstName - Gift recipient name, termed as FirstName for datatype validation.
			 */

    			FirstName : "",//gift recipient name, termed as FirstName for datatype validation
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.gift.giftoptions
			 *@property {String} giftMessage - Gift message entered by user.
			 */

    			giftMessage : "",
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.gift.giftoptions
			 *@property {String} giftWrapCheck - Attribute denoting if item is enabled for gift wrapping. value is derived from allow gift wrap rule value.
			 */

    			giftWrapCheck : "false",
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.gift.giftoptions
			 *@property {String} showRemoveGift - Attribute received from invoking screen to hide or show "remove Gift" button,
			 * if "Y" button will be displayed.
			 */

    			showRemoveGift : "N"
			},

			/**
			 *@iscdoc viewinit
			 *@viewname store.views.common.gift.giftoptions
			 *@method initialize
			 *@description Initializes the gift options modal by giftwrapgetRuleDetails mashup call, also by fetching values from modalInput.
			 */
			initialize : function(){
			
					if(iscCore.isVoid(modalInput.gift.giftWrap)) {
						this.ui.giftWrap ="Y";
					}else {
						this.ui.giftWrap = modalInput.gift.giftWrap;
					}
					this.ui.FirstName = modalInput.gift.giftRecipient;
					this.ui.giftMessage = modalInput.gift.giftMessage;
					
					if(iscCore.isVoid(modalInput.gift.giftWrapChecked)){
						this.ui.giftWrapChecked = "N";
					}else{
					this.ui.giftWrapChecked = modalInput.gift.giftWrapChecked;}	

					if(iscCore.isVoid(modalInput.gift.showRemoveGift)) {
						this.ui.showRemoveGift ="N";
					}else {
						this.ui.showRemoveGift = modalInput.gift.showRemoveGift;
					}
			
					var mashupInput = {Rules:{RuleSetFieldName : "WSC_STORE_ALLOW_GIFT_WRAP"}
										};
																	
					iscMashup.callMashup(this,'giftwrapgetRuleDetails',mashupInput,{}).then(this.onSuccessgiftwrapgetRuleDetails.bind(this),angular.noop);
								
				
			},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.gift.giftoptions
			 *@methodname uiClose
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.gift.giftoptions
			 *@methodname uiRemoveGift
			 *@description OnClick handler of "Remove gift" button, removeGift attribute
			 * with value "Y" is sent to invoking screen to remove the gift options on line.
			 */

			uiRemoveGift : function () {
			var resultdata = { data : {
								removeGift : "Y",
										}
							};
			$uibModalInstance.close(resultdata);

			/*iscModal.showConfirmationMessage(iscI18n.translate('giftOptions.Remove_ConfirmationMsg')).then(
                function(callBackAction){
                   if(callBackAction === 'YES'){
					var resultdata = { data : {
								removeGift : "Y",
												}
									};
					$uibModalInstance.close(resultdata);
                     }
                 },
                 function(callBackAction){
                     //      Do Nothing
                 });*/
	
			},
			


			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.gift.giftoptions
			 *@methodname uiSubmit
			 *@description OnClick handler of "OK" button, propagates the gift options/data back to invoking screen.
			 */
		uiSubmit : function () {

		/**data propagated to invoking screen,
		*giftFlag denotes that the item is gifted or not
		*giftWrapChecked check box value
		*giftRecipient input from user
		*giftMessage message from user
		**/
		
		var resultdata = { data : {
					giftFlag : this.ui.giftFlag,
       				giftRecipient : this.ui.FirstName,
       				giftMessage : this.ui.giftMessage,
       				giftWrapChecked : this.ui.giftWrapChecked
									}
						};
		//console.log("resultdata" + resultdata);				
		$uibModalInstance.close(resultdata);
		
		},
			
			/**
			 *@iscdoc method
			 *@viewname store.views.common.gift.giftoptions
			 *@methodname onSuccessgiftwrapgetRuleDetails
			 *@description Success handler of giftwrapgetRuleDetails mashup call, sets the giftWrapCheck attribute based on rule value.  
			 */

		onSuccessgiftwrapgetRuleDetails : function(){
			
			if(this.model.IsgiftWrap.Rules.RuleSetValue == "Y"){
				if(this.ui.giftWrap == "Y"){
			 			this.ui.giftWrapCheck = "true";
			 	}else{
			 			this.ui.giftWrapCheck = "false";
			 	}
		 	}
		}	

  	});
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.common.orderaddress.orderaddresspopup
 *@package store.views.common.orderaddress
 *@class orderaddresspopup
 *@description This controller is used for handling address capture at order header or line level.
 *@broadcasts 'callVerifyAddress'
 *@listens 'AddressVerified'
 *@params mode:{Add,Edit}, showDefaultshipto:{Y/N} ,showDefaultshipto:{Y/N} 
 */




angular.module('store').controller('store.views.common.orderaddress.orderaddresspopup',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission) {
		
		
		iscScreen.initializeModalScreen($scope,{
	
	     
	   /**
		 *@iscdoc uiattr
		 *@viewname store.views.common.orderaddress.orderaddresspopup
		 *@property {Boolean}  hideShipaddress - false Used to hide/show section containing defaulting of shipping and billing address.
		 */ 
		  
	     ui:{
		 
		 
	    	 hideShipaddress : false
		 },
		
		/**
  		 *@iscdoc uimethod
  		 *@methodname uiClose
		 *@viewname store.views.common.orderaddress.orderaddresspopup
  		 *@description This method closes the modal popup
  		 */
		 
		 uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},
		
		
		/**
  		 *@iscdoc uimethod
  		 *@methodname uiManageOnEnter
		 *@viewname store.views.common.orderaddress.orderaddresspopup
  		 *@description This method is called on pressing 'Enter' key
  		 */
		
		 uiManageOnEnter : function(){
		
		     $scope.uiOK();
		  },
		
		/**
  		 *@iscdoc uimethod
  		 *@methodname uiOK
		 *@viewname store.views.common.orderaddress.orderaddresspopup
  		 *@description This method is executed on click of "OK" button to propagate the data back to parent screen
  		 */
		 uiOK : function () {
		 
		            /*  var param = angular.copy(this.ui.personInfo);
					 if(param.State.RegionName){
					    param.State = param.State.RegionName;
					 }
				     var resultdata = { data : param}; 
					 $uibModalInstance.close(resultdata); */
					 
					 if($scope.currentSelection && !$scope.holdAPIcall ){
					    $uibModalInstance.close($scope.currentSelection);
					 }else{
					    $scope.$broadcast('callVerifyAddress',{});
					 }
		        
				
			    
			},
			

		/**
  		 *@iscdoc viewinit
  		 *@methodname initialize
		 *@viewname store.views.common.orderaddress.orderaddresspopup
  		 *@description This method initializes variables for the screen.
  		 */
			initialize : function(){
			
             
			     $scope.holdAPIcall = false;
				 this.ui.mode = modalInput.Mode;
				 this.ui.hideShipaddress = modalInput.hideShipaddress;
				 this.ui.context = modalInput.Context;
				 if(this.ui.mode == 'Edit'){
						 this.ui.personInfo = modalInput.PersonInfo; 
						
				 }if(!this.ui.context){
				   this.ui.context = 'showDefaultshipto';
				 }
				 
				  $scope.$on('AddressVerified',function(event,args){
				 
					   if (args){
					   
							  var param = angular.copy(args.data);	 
							  if(args.State == "SINGLE_ADDRESS"){
									 var resultdata = { data : param};
									 $scope.holdAPIcall = false;									 
									 $uibModalInstance.close(resultdata);
							  } else if (args.State == "MULTI_ADDRESS"){
								     $scope.currentSelection = { data : param};
									 $scope.holdAPIcall = false;
								 
							  }else if (args.State == "MODIFY_ADDRESS"){
								     $scope.currentSelection = { data : param};
									 $scope.holdAPIcall = true;
							  }
					   }
								 
					 });
	
			}
		
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodal
 *@viewname store.views.common.priceoverride.priceoverride
 *@package store.views.common.priceoverride
 *@class priceoverride
 *@description Controller used for handling priceoverride popup 
 * 
 * USAGE : Invoking screen will have the below code snippet to integrate with override price popup :
 *
 *
 * 	  	uiOverridePrice : function(){
 *	  		var that = this;
 *	  		var resolveData = {
 *						modalInput: function ()
 *						 {
 *						  return {
 *						  			price : {
 *				  					listPrice:that.ui.listPrice,
 *				  					unitPrice:that.ui.UnitPrice,
 *									Currency:"",
 *				  					overrideReason:that.ui.overrideReason
 *							  			}		
 *				  				};
 *		  				}
 *	  				}
 *	  				
 *	  		
 *				iscModal.openModal('store.views.common.priceoverride.priceoverride',resolveData,{})
 *					.then(function(callBackData){
 *      						that.ui.unitPrice =callBackData.data.newprice;
 *      						that.ui.overrideReason = callBackData.data.reason;
 *    			 			},
 * 							angular.noop);			
 *				},		
 *						
 *
 * 
 * 
 */


angular.module('store').controller('store.views.common.priceoverride.priceoverride',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n) {
		
		
		iscScreen.initializeModalScreen($scope,{


      /**
       *ModelList
       *Models that hold data
       * 
       */
  		model:{
  		  /**
         *@iscdoc model
         *@viewname store.views.common.priceoverride.priceoverride
         *@name reasonList
         *@description Holds the output data (commoncode/reason list) of priceoverridegetOverrideReasonList mashup.
         */
         "reasonList":{}
  		},


  		/**
       *MashupRefs
       *array containing the list of mashups referred in this controller
       */
  		mashupRefs : [
  		  		{
  		  		
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.common.priceoverride.priceoverride
  		   			*@mashupid priceoverride_getCommonCodeListForStore
		   			*@mashuprefid priceoverridegetOverrideReasonList
		   			*@modelname reasonList
  		   			*@description Fetches reason list for overriding price.
  		   			*/
  		  		
					mashupRefId: 'priceoverridegetOverrideReasonList',
					mashupId: 'priceoverride_getCommonCodeListForStore',
					modelName : 'reasonList'								
				}
			],


			ui:{
			
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@property {String} listPrice - listprice/Original price.
			 */
			
				listPrice : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@property {Number} tmplistPrice - listprice with number filter.
			 */
				
				tmplistPrice : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@property {String} UnitPrice - unitprice / new price.
			 */
				
				UnitPrice : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@property {Number} tmpUnitPrice - unitprice with number filter.
			 */
				
				tmpUnitPrice : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@property {String} DisplayUnitPrice - unitprice displayed with currency symbol.
			 */
				
				DisplayUnitPrice : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@property {String} selectedReason - override reason selected by default.
			 */
				
				selectedReason :"",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@property {String} Currency - Locale currency.
			 */
				
				Currency : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@property {String} ariaErrMsg - error message for accessibility.
			 */
				ariaErrMsg : ""			
				
			},
			

			/**
			 *@iscdoc viewinit
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@method initialize
			 *@description Initializes the price override modal by priceoverridegetOverrideReasonList mashup call.
			 */
			initialize : function(){
					this.ui.listPrice = modalInput.price.listPrice;
					this.ui.UnitPrice = modalInput.price.unitPrice;
					this.ui.Currency = modalInput.price.Currency;
					if(!(iscCore.isVoid(this.ui.UnitPrice))){
						this.ui.DisplayUnitPrice = $filter('iscCurrency')(angular.copy(this.ui.UnitPrice),this.ui.Currency);
					}
					iscMashup.callMashup(this,'priceoverridegetOverrideReasonList',{},{}).then(this.onsucesspriceoverridegetOverrideReasonList.bind(this),angular.noop);
								
			},
			

		
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@methodname uiClose
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@methodname uiSubmit
			 *@description OnClick handler of "Apply" button, propagates the data back to invoking screen.
			 */

			uiSubmit : function (priceOverrideForm) {
			if(priceOverrideForm && priceOverrideForm.$valid){
				this.ui.ariaErrMsg = "";
				if(iscCore.isVoid(this.ui.UnitPrice)) {
					
					priceOverrideForm.currencyField.$setValidity("required",false);
					this.ui.ariaErrMsg = iscI18n.translate('priceoverride.aria_ErrMsg');
					document.getElementById('displayCurrencyField').focus();
				}else {
					
					priceOverrideForm.currencyField.$setValidity("required",true);
					this.ui.ariaErrMsg = "";
					var resultdata = {};
						resultdata = {
							data : {
								newprice : this.ui.UnitPrice,
								reason : this.ui.selectedReason
									}
								};
					
					$uibModalInstance.close(resultdata);
				}
			}else{
				this.ui.ariaErrMsg = iscI18n.translate('priceoverride.aria_ErrMsg');
			}
			},
			
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@methodname uiOnEnterInputField
			 *@description OnEnter handler of UI input fields, invokes onClick handler of "Apply" button.
			 */
			
			uiOnEnterInputField : function (form) {
					this.uiSubmit(form);
				
			},
			
			/**
			 *@iscdoc method
			 *@viewname store.views.common.priceoverride.priceoverride
			 *@methodname onsucesspriceoverridegetCommonCodeList
			 *@description Callback handler for priceoverridegetOverrideReasonList mashup, by default the first value will
  		 	 * be selected in radio button list.
			 */

		onsucesspriceoverridegetOverrideReasonList : function(){
		  if(iscCore.isVoid(this.ui.selectedReason) && !iscCore.isVoid(this.model.reasonList.CommonCodeList)){
			  if(!iscCore.isVoid(this.model.reasonList.CommonCodeList.CommonCode[0]))
		       this.ui.selectedReason=this.model.reasonList.CommonCodeList.CommonCode[0].CodeShortDescription;
		   }
		}			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodal
 *@viewname store.views.common.product.product-details-share
 *@package store.views.common.product
 *@class product-details-share
 */
angular.module('store').controller('store.views.common.product.product-details-share', 
    ['$scope', '$uibModalInstance', 'modalInput', '$filter','iscScreen', 'iscMashup','iscDomUtility','$timeout'
	, function ($scope, $uibModalInstance, modalInput, $filter,iscScreen, iscMashup,iscDomUtility,$timeout) {
        iscScreen.initializeModalScreen($scope, {
            model: {
                customerDetails : {}
            },
            mashupRefs: [
                {
                    /**
                     *@description Used to get the customer details to fetch the the email address.
                    */
                    mashupRefId: 'getCustomerDetails',
                    mashupId: 'store.views.common.product.getCustomerDetails',
                    modelName: 'customerDetails'                                                                        
                                                                                            
                },
                
                {
                    /**
                     *@description Used to send the product details to the email address mentioned by the user.
                    */
                    mashupRefId: 'productdetails_sendEmail',
                    mashupId: 'store.views.common.product.sendProductDetailsInEmail'
                }
                
            ],
            ui: {
                /**
                 *@property {String} emailid - Email address to send the product details to.
                 */
                emailid: "",
                /**
                 *@property {Boolean} showEmailError - flag to display email error.
                 */
                showEmailError:false,
                /**
                 *@property {Boolean} emailSent - flag to display email sent message.
                 */
                emailSent:false,
				
                /**
                 *@property {Object} emailForm -  email form object.
                 */
                
				emailForm: {}
            },
            
            
            /**
			 *@method initialize
			 *@description Initializes the product details screen with getCompleteItemDetails,getCompleteItemList api calls.
			 */
            
            initialize: function () {
            	//this.ui.emailid = modalInput.CustomerDetails.EmailID;
    
                if(!iscCore.isVoid(modalInput.CustomerDetails.CustomerID)){
                    iscMashup.callMashup(this,"getCustomerDetails",{Customer:{CustomerID:modalInput.CustomerDetails.CustomerID}},{})
                        .then(this.handleInitApi.bind(this),angular.noop);
                }
	        	$timeout(function (){
					iscDomUtility.setFocus(document.getElementById("productdetails_emailId"));
				}, 0);
	        	
            },
            
                
                
            handleInitApi : function(controllerData){
                var customerDetails = iscMashup.getMashupOutput(controllerData,"getCustomerDetails");
                var customerID = customerDetails.Customer.CustomerID;
                
                if(customerDetails.Customer.CustomerContactList 
                   && customerDetails.Customer.CustomerContactList.CustomerContact[0] 
                   && customerDetails.Customer.CustomerContactList.CustomerContact[0].EmailID)
                {
                    this.ui.emailid = customerDetails.Customer.CustomerContactList.CustomerContact[0].EmailID;
                }
                
            },
            /**
  			 *@methodname uiSendEmail
  			 *@description This method which validates the email form and sends the mail.
  			 */	
              uiSendEmail:function(){
                    var that = this;
                    $timeout(function () {
                        that.ui.emailForm.$setDirty();
                        if(iscCore.isVoid(that.ui.emailid) || !that.ui.emailForm.$valid){
                            that.ui.showEmailError=true;
                            document.getElementById('productdetails_emailId').focus();

                        }else if(that.ui.emailForm.$valid){
                            var inputObj = {};
                            inputObj.ItemdDetails={};
                            inputObj.ItemdDetails.ItemID = modalInput.ItemDetails.ItemID;
                            inputObj.ItemdDetails.ItemKey = modalInput.ItemDetails.ItemKey;
                            inputObj.ItemdDetails.UnitOfMeasure = modalInput.ItemDetails.UnitOfMeasure;
                            inputObj.ItemdDetails.CustomerID = modalInput.CustomerDetails.CustomerID;
                            inputObj.ItemdDetails.ToEmailID = this.ui.emailid;

                            iscMashup.callMashup(that,"productdetails_sendEmail",inputObj,{}).then(that.emailCallBackHandler.bind(that),angular.noop);
                        }
                    }.bind(this),200);							
                },


                /**
                 *@methodname uiResetEmailFlags
                 *@description This method reset the email flags
                 */	


                uiResetEmailFlags : function(){
                    var emailInputText = document.getElementById("productdetails_emailId").value;
                    if(!iscCore.isVoid((emailInputText))){
                        this.ui.emailSent=false;
                        this.ui.showEmailError=false;
                    }
                  },


                  /**
                     *@methodname emailCallBackHandler
                     *@description This method is the call back handler of email service. It displays email sent message.
                     *@param {Object} data - Controller data if YCD_ProductDetails_Email service.
                     */	

                emailCallBackHandler : function(data){
                    var output = iscMashup.getMashupOutput(data,"productdetails_sendEmail");
                    if(output) {
                        this.ui.emailSent = true;
                    }
                },



                /**
                 *@methodname uiClose
                 *@description OnClick handler of "Close" button, closes the modal popup..
                 */	
                uiClose : function () {
                    $uibModalInstance.dismiss({});
                }
        });


}]);
			
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodal
 *@viewname store.views.common.product.product-details
 *@package store.views.common.product
 *@class product-details
 */
angular.module('store').controller('store.views.common.product.product-details',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscProduct','iscWizard','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscProduct,iscWizard,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{


      /**
       *ModelList
       *Models that hold data
       * 
       */
  		model:{
  			 /**
	           *@description This model contains return reason common code list.
	           */
         "itemDetails":{},
         "itemSpecDetails":{},
         "itemCompDetails":{},
         "orderline":{}
		
  		},


  		/**
       *MashupRefs
       *array containing the list of mashups referred in this controller
       */
  		mashupRefs : [
                {
                	/**
					*@description This mashup is used to item details.
					*/
                	mashupRefId: 'getCompleteItemDetails',
                	mashupId: 'product_getCompleteItemList'
                }, 
                {
                	/**
					*@description This mashup is used to get item specification details.
					*/
                	mashupRefId: 'getCompleteItemSpecsList',
                	mashupId: 'product_getCompleteItemSpecsList'
                }, 
                {
                	/**
					*@description This mashup is used to get item component details.
					*/
                	mashupRefId: 'getCompleteItemComponentList',
                	mashupId: 'product_getCompleteItemComponentList'
                }
			],


			ui:{
				/**
				*@property {Object}  selectedReason - contains selected override reason code and description
				*/
				selectedReason : "",
				carousel : {
  					myInterval : 0,
  					noWrapSlides : false,
  					data : []
  				},
  				openOverview:true,
  				openSpecs:false,
  				openComponents:false,
  				showComponents: false,
  				itemSpecsEmpty:false
			},
			

			  /**
	         * @scDoc Method
	         * @method initialize
	         * @description method to initialize the controller and loads the policy violation/override reason view.
	         */
			initialize : function(){
				
				this.model.orderline = modalInput.orderline;
				
    			iscMashup.callMashup(this,'getCompleteItemDetails',this.getCompleteItemListInput(),{}).then(this.initializeItemDetails.bind(this),angular.noop);
				
			},
			
			initializeItemDetails : function(response) {
				 var apiOutput = iscMashup.getMashupOutput(response,"getCompleteItemDetails");
				 
				 if(apiOutput.ItemList.Item){
					 this.model.itemDetails = iscProduct.getFirstItemChildElementFromItemList(apiOutput);
				 } else {
					 console.log("ERROR: Unable to fetch Item Details - ",apiOutput);
				 }
				 
				 console.log("Item Details - ",this.model.itemDetails);
				 
				 this.prepareProductCarouselData(this.model.itemDetails);
				 
				 if(iscProduct.isPhysicalKit(this.model.itemDetails) || iscProduct.isBundleParent(this.model.itemDetails)) {
					 this.ui.showComponents = true;
				 }
				
			},
			
			prepareProductCarouselData:function(itemDetails) {
				
				if(!iscCore.isVoid(itemDetails.Item) && !iscCore.isVoid(itemDetails.Item.AssetList) &&!iscCore.isVoid(itemDetails.Item.AssetList.Asset)) {
					
					var numOfAssests = $filter('number')(itemDetails.Item.AssetList.Asset.length);
					if(!isNaN(numOfAssests) && numOfAssests > 0) {
						this.ui.carousel.hasSlides = true;
						var dataToSlide = 0;
						for(var i=0;i<itemDetails.Item.AssetList.Asset.length;i++) {
							
							var asset = itemDetails.Item.AssetList.Asset[i];
							if(!iscCore.isVoid(asset)) {
								
								var imageUrl = iscProduct.getImageURLByAsset(asset);
								var imageLabel = asset.Label;
								
								this.ui.carousel.data[dataToSlide] = {};
								this.ui.carousel.data[dataToSlide].productImage = [];
								var product = [];
								product[0] = {"ImageURL":imageUrl,"ImageLabel":imageLabel};
								this.ui.carousel.data[dataToSlide].productImage = product;
								dataToSlide++;
							}
						}
					}
					
				}
				
				console.log("Product Carousel Data - ",this.ui.carousel);
				
			},
			
			uiGetExtendedDescription:function(extDesc) {
				
				if(!iscCore.isVoid()) {
					extDesc = extDesc.replaceAll(/\n/g, '<br />');
				}
				
				return extDesc;
			},
			
			uiOnTabClick:function(accordianLabel) {
				
				if("SPECS" === accordianLabel && iscCore.isVoid(this.model.itemSpecDetails)) {
	    			iscMashup.callMashup(this,'getCompleteItemSpecsList',this.getCompleteItemListInput(),{}).then(this.initializeItemSpecifications.bind(this),angular.noop);
				} else if("COMPONENTS" === accordianLabel && iscCore.isVoid(this.model.itemCompDetails)) {
					iscMashup.callMashup(this,'getCompleteItemComponentList',this.getCompleteItemListInput(),{}).then(this.initializeItemComponents.bind(this),angular.noop);
				}
				
			},
			
			initializeItemSpecifications:function(response) {
				
				var apiOutput = iscMashup.getMashupOutput(response,"getCompleteItemSpecsList");
				 
				 if(apiOutput.ItemList.Item){
					 this.model.itemSpecDetails = iscProduct.getFirstItemChildElementFromItemList(apiOutput);
				 } else {
					 console.log("ERROR: Unable to fetch Item Specs Details - ",apiOutput);
				 }
				 
				 if(iscCore.isVoid(this.model.itemSpecDetails.Item.ItemAttributeGroupTypeList.ItemAttributeGroupType.ItemAttributeGroupList.ItemAttributeGroup)) {
					 this.ui.itemSpecsEmpty = true;
				 }
				 
				 console.log("Item Specs Details - ",this.model.itemSpecDetails);
				
			},
			
			initializeItemComponents:function(response) {
				
				var apiOutput = iscMashup.getMashupOutput(response,"getCompleteItemComponentList");
				 
				 if(apiOutput.ItemList.Item){
					 this.model.itemCompDetails = iscProduct.getFirstItemChildElementFromItemList(apiOutput);
				 } else {
					 console.log("ERROR: Unable to fetch Component Specs Details - ",apiOutput);
				 }
				 
				 console.log("Item Component Details - ",this.model.itemCompDetails);
				
			},
			
			uiIsBlankImage:function(component) {
				return iscCore.isVoid(this.uiGetComponentImageUrl(component)) ? true : false;
			},
			
			uiGetComponentImageUrl:function(component) {
				
				var imageUrl = null;
				if(!iscCore.isVoid(component) && !iscCore.isVoid(component.Item) && !iscCore.isVoid(component.Item.PrimaryInformation)) {
					
					var imageLocation = component.Item.PrimaryInformation.ImageLocation;
					var imageId = component.Item.PrimaryInformation.ImageID;
					if(!iscCore.isVoid(imageId) && !iscCore.isVoid(imageLocation)) {
						imageUrl = imageLocation + "/" + imageId;
					}
				}
				
				return imageUrl;
			},
			
			uiGetAttributeName:function(itemAttribute) {
				return iscCore.isVoid(itemAttribute.Attribute.ShortDescription) ? itemAttribute.ItemAttributeName : itemAttribute.Attribute.ShortDescription;
			},
			
			uiGetAttributeValue:function(itemAttribute) {
				
				var attrValue = "-";
				
				if(!iscCore.isVoid(itemAttribute.AssignedValueList) && !iscCore.isVoid(itemAttribute.AssignedValueList.AssignedValue) &&  !iscCore.isVoid(itemAttribute.AssignedValueList.AssignedValue.length)) {
					
					attrValue = itemAttribute.AssignedValueList.AssignedValue[0].ShortDescription;
					if(!iscCore.isVoid(attrValue)) {
						if("Y" == attrValue) {
							attrValue = iscI18n.translate('globals.ACTION_Yes');
						} else if("N" == attrValue) {
							attrValue = iscI18n.translate('globals.ACTION_No');
						}
					} else {
						attrValue = "-";
					}
				}
               
				return attrValue;
                
			},
			
			getCompleteItemListInput:function() {
				
				var getCompleteItemListInput = {};
				getCompleteItemListInput.Item = {};
    			
    			if(!iscCore.isVoid(this.model.orderline) && !iscCore.isVoid(this.model.orderline.ItemDetails) && !iscCore.isVoid(this.model.orderline.ItemDetails.ItemID) && !iscCore.isVoid(this.model.orderline.ItemDetails.UnitOfMeasure)) {
    				getCompleteItemListInput.Item.ItemID = this.model.orderline.ItemDetails.ItemID;
    				getCompleteItemListInput.Item.UnitOfMeasure = this.model.orderline.ItemDetails.UnitOfMeasure;
    			} else {
    				console.log("ERROR: ItemID or UnitOfMeasure is null for orderline - ",this.model.orderline);
    			}
    			
    			return getCompleteItemListInput;
				
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({});
			},

			
			
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodal
 *@viewname store.views.common.shortage.record-shortage
 *@package store.views.common.shortage
 *@class record-shortage
 */
angular.module('store').controller('store.views.common.shortage.record-shortage',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{


      /**
       *ModelList
       *Models that hold data
       * 
       */
  		model:{
  			 /**
	           *@description This model contains return reason common code list.
	           */
         "shortageReasonList":{},
         "cancelReasonList":{},
         "shipmentLine":{}
		
  		},


  		/**
       *MashupRefs
       *array containing the list of mashups referred in this controller
       */
  		mashupRefs : [
  		        {
					
					/**
					*@description This mashup is used to get policy override reason list. 
					*/
					mashupRefId: 'getShortageReasonList',
					mashupId: 'recordShortage_getShortageReasonList',
					modelName : 'shortageReasonList'								
				},
				{
					
					/**
					*@description This mashup is used to get policy override reason list. 
					*/
					mashupRefId: 'getCancelReasonList',
					mashupId: 'recordShortage_getShortageReasonList',
					modelName : 'cancelReasonList'								
				}
			],


			ui:{
				/**
				*@property {Object}  selectedShortageReasonCode - contains selected shortage reason code and description
				*/
				selectedShortageReasonCode : "",
				processType: "BACKROOM_PICK",
				showCancelReason:false,
				cancelReason:"",
				markAllLines:false

			},
			
			  /**
	         * @scDoc Method
	         * @method initialize
	         * @description method to initialize the controller and loads the record shortage view.
	         */
			initialize : function(){
				
				var that = this;
				
				$scope.$watch('ui.selectedShortageReasonCode', function(newValue) {
					if(!iscCore.isVoid(newValue)) {
						that.onShortageReasonSelect(newValue);
					}
				});

				this.model.shipmentLine = modalInput.shipmentLine;
				var shortageReasonCodeType = modalInput.codeType;
				
				if(iscCore.isVoid(shortageReasonCodeType)) {
					shortageReasonCodeType = "YCD_PICK_SHORT_RESOL";
					this.ui.processType = "BACKROOM_PICK";
				} else if(shortageReasonCodeType.indexOf("PACK") > -1) {
					this.ui.processType = "PACK";
				} else if(shortageReasonCodeType.indexOf("YCD_SHORT_RESOLU") > -1) {
					this.ui.processType = "CUSTOMER_PICKUP";
				}
				
				var getShortageReasonListInput = {};
				getShortageReasonListInput.CommonCode = {};
				getShortageReasonListInput.CommonCode.CodeType = shortageReasonCodeType;
				
				iscMashup.callMashup(this,'getShortageReasonList',getShortageReasonListInput,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				
			},
			
			handleInitApiCalls : function(response) {
				if(iscCore.isVoid(this.ui.selectedShortageReasonCode)){
					this.ui.selectedShortageReasonCode=this.model.shortageReasonList.CommonCodeList.CommonCode[0].CodeValue;
				}
			},
			
			/**
			 * @description This method is invoked when user selects a Shortage Reason. 
			 * If Record Shortage Popup is launched during Customer Pickup flow,
			 * then Cancellation Reason dropdown will be displayed when Cancel shortage reason is selected.
			 *
			 */
			onShortageReasonSelect :function(selectedShortageReason) {
				
				if(this.ui.mode = "CUSTOMER_PICKUP" && selectedShortageReason === 'Cancel') {
					
					this.ui.showCancelReason = true;
					
					if(iscCore.isVoid(this.model.cancelReasonList)) {
						var getCancelReasonListInput = {};
						getCancelReasonListInput.CommonCode = {};
						getCancelReasonListInput.CommonCode.CodeType = "YCD_CANCEL_REASON";
						
						iscMashup.callMashup(this,'getCancelReasonList',getCancelReasonListInput,{}).then(function(data){
							
							if(iscCore.isVoid(this.ui.cancelReason)){
								this.ui.cancelReason=this.model.cancelReasonList.CommonCodeList.CommonCode[0];
							}
							
						}.bind(this),angular.noop);
					}
					
				} else {
					this.ui.showCancelReason = false;
				}
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({});
			},

			
			
			/**
			 *@description OnClick handler of "Apply" button, propagates the data back to invoking screen.
			 */
			uiSubmit : function () {

				var resultdata = {};
				resultdata = {
					data : {
						RecordShortage : {
							"ShortageReasonCode": this.ui.selectedShortageReasonCode,
						}
							}
						};
				if(this.ui.processType != "BACKROOM_PICK") {
					resultdata.data.RecordShortage.MarkAllLines = this.ui.markAllLines;
					if(this.ui.processType == "CUSTOMER_PICKUP" && this.ui.selectedShortageReasonCode === 'Cancel') {
						resultdata.data.RecordShortage.CancellationReason = this.ui.cancelReason.CodeValue;
					}
				}
				
				$uibModalInstance.close(resultdata);
				
				
			}
			
			
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


 /**
 *@iscdoc viewmodal
 *@viewname store.views.common.storesearch.storesearch
 *@package store.views.common.storesearch
 *@class storesearch
 *@description Controller used for handling storesearch popup 
 * 
 * USAGE : Invoking screen will have the below code snippet to integrate with alternate store search popup : 
 *
 *	uiStoreSearch : function(){
 *	  		var that = this;
 *																	  		
 *	  		var resolveData = { //sample input expected from invoking screen
 *		            			modalInput: function(){
 *	            					inputData : { 
 *	            							return {
 *	            							callingMode : CARTDETAILS/ADDITEMS, // to know the calling context/screen
 *	            							orderLine : orderlineModel, // input from cart details screen
 *	            							itemDetails : this.model.itemDetails, // input from add items screen
 *	            							RequiredQty : this.ui.defaultQty // input from add items screen
 *	            								};		
 *	            							}
 *	            								}
 *						   	}
 *	  				
 *				iscModal.openModal('store.views.common.storesearch.storesearch',resolveData,{})
 *							.then(function(callBackData){
 *     						that.ui.alternateStore =callBackData.data.selectedStore; //alternate store selected,data propagated to calling screen.
 *							},angular.noop);	  				
 *  		
 *				},		
 *
 * 
 * 
 * 
 */


angular.module('store').controller('store.views.common.storesearch.storesearch',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscAppContext','$filter','iscI18n','iscItem',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscAppContext,$filter,iscI18n,iscItem) {
		
		
		iscScreen.initializeModalScreen($scope,{


      /**
       *ModelList
       *Models that hold data
       * 
       */
  		model:{
  		  /**
         *@iscdoc model
         *@viewname store.views.common.storesearch.storesearch
         *@name storeList
         *@description Holds the output data of storeSelectiongetAlternateStoreAvailability mashup.
         */
         "storeList":{},

  		  /**
         *@iscdoc model
         *@viewname store.views.common.storesearch.storesearch
         *@name defaultRadiusValue
         *@description Holds the output data of wscCommonGetDefaultRadiusValue mashup.
         */
         "defaultRadiusValue":{},
         
  		  /**
         *@iscdoc model
         *@viewname store.views.common.storesearch.storesearch
         *@name maxRadiusValue
         *@description Holds the output data of wscCommonGetMaxRadiusValue mashup.
         */
         "maxRadiusValue":{},
         
         /**
          *@iscdoc model
          *@viewname store.views.common.storesearch.storesearch
          *@name distanceUOM
          *@description Holds the distance UOM.
          */
          "distanceUOM":{},
          
  		  /**
         *@iscdoc model
         *@viewname store.views.common.storesearch.storesearch
         *@name searchStoreList
         *@description Holds the output data of storeSearchgetAlternateStoreAvailability mashup.
         */
         "searchStoreList":{},
         
  		  /**
         *@iscdoc model
         *@viewname store.views.common.storesearch.storesearch
         *@name FulfillmentType
         *@description Holds the FulfillmentType configuration value.
         */
         "FulfillmentType":{}
  		},


  		/**
       *MashupRefs
       *array containing the list of mashups referred in this controller
       */
  		mashupRefs : [

  		  		{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.common.storesearch.storesearch
  		   			*@mashupid storeSelection_getAlternateStoreAvailability
		   			*@mashuprefid storeSelectiongetAlternateStoreAvailability
		   			*@modelname storeList
  		   			*@description Fetches stores list for nearby stores tab.
  		   			*/
  		  		
					mashupRefId: 'storeSelectiongetAlternateStoreAvailability',
					mashupId: 'storeSelection_getAlternateStoreAvailability',
					isPaginated : 'true',
					modelName : 'storeList',
	  	            append:true,
			        appendPath:"AlternateStores.NodeList.Node"
														
				},

  		  		{

		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.common.storesearch.storesearch
  		   			*@mashupid storeSelection_getAlternateStoreAvailability
		   			*@mashuprefid storeSearchgetAlternateStoreAvailability
		   			*@modelname storeList
  		   			*@description Fetches stores list for search stores tab, based on input search criteria entered by user.
  		   			*/
  		  		
					mashupRefId: 'storeSearchgetAlternateStoreAvailability',
					mashupId: 'storeSelection_getAlternateStoreAvailability',
					isPaginated : 'true',
					modelName : 'searchStoreList',
	  	            append:true,
			        appendPath:"AlternateStores.NodeList.Node"
														
				},

				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.common.storesearch.storesearch
  		   			*@mashupid WSC_getRuleDetails
		   			*@mashuprefid wscCommonGetDefaultRadiusValue
		   			*@modelname defaultRadiusValue
  		   			*@description Fetches configured default radius value.
  		   			*/

					mashupRefId: 'wscCommonGetDefaultRadiusValue',
					mashupId: 'WSC_getRuleDetails',
					modelName : 'defaultRadiusValue'
														
				},
				
				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.common.storesearch.storesearch
  		   			*@mashupid WSC_getRuleDetails
		   			*@mashuprefid wscCommonGetMaxRadiusValue
		   			*@modelname maxRadiusValue
  		   			*@description Fetches configured maximum radius value.
  		   			*/
				
					mashupRefId: 'wscCommonGetMaxRadiusValue',
					mashupId: 'WSC_getRuleDetails',
					modelName : 'maxRadiusValue'
														
				},
				
				{
			  		  /**
	  				   *@iscdoc mashup
	  		   			*@viewname store.views.common.storesearch.storesearch
	  		   			*@mashupid WSC_getDistanceUOM
			   			*@mashuprefid wscDistanceUOM
			   			*@modelname distanceUOM
	  		   			*@description Fetches distance UOM for store.
	  		   			*/
					
						mashupRefId: 'wscDistanceUOM',
						mashupId: 'WSC_getDistanceUOM',
						modelName : 'distanceUOM'
															
					},
												
				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.common.storesearch.storesearch
  		   			*@mashupid WSC_getRuleDetails
		   			*@mashuprefid wscCommonGetFulfillmentTypeForStore
		   			*@modelname FulfillmentType
  		   			*@description Fetches configured FulfillmentType/sourcing information.
  		   			*/
				
					mashupRefId: 'wscCommonGetFulfillmentTypeForStore',
					mashupId: 'WSC_getRuleDetails',
					modelName : 'FulfillmentType'
														
				}
			],


			ui:{

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Object} selectedStore - store/node selected on isc-store-list directive radio option.
			 */
							
				selectedStore : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Object} searchedStore - store/node selected on search stores tab.
			 */
				
				searchedStore : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Object} searchedStoreDesc - store/node name/description selected on search stores tab.
			 */

				searchedStoreDesc : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Object} nearStore - store/node selected on nearby stores tab.
			 */

				nearStore : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Object} nearStoreDesc - store/node name/description selected on nearby stores tab.
			 */

				nearStoreDesc : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Object} selectedStoreDesc - store/node name/description selected on isc-store-list directive radio option.
			 */

				selectedStoreDesc : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} Country - Country selected as part of address input for searching alternate stores.
			 */

				Country : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} State - State selected as part of address input for searching alternate stores.
			 */

				State : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} city - City entered as part of address input for searching alternate stores.
			 */

				city : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Number} ZipCode - ZipCode entered as part of address input for searching alternate stores.
			 */

				ZipCode : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} searchStore - If set to true, input form for capturing search criteria to search alternate stores will be shown.
			 */

				searchStore : "false",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} errorText - Error message displayed.
			 */

				errorText : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} nearbyView - If set to true, nearby stores tab will be active, used to switch between tabs.
			 */

				nearbyView : "true",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} searchView - If set to true, search storestab will be active, used to switch between tabs.
			 */

				searchView : "false",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} noOfStoresFound - Count of stores listed in nearby stores tab.
			 */

				noOfStoresFound : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} noOfStoresSearched - Count of stores listed in search stores tab.
			 */

				noOfStoresSearched : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} nearRadius - Radius value for which stores are listed in nearby stores tab currently.
			 */

				nearRadius : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} maxNearRadius - Maximum radius till which the slider can slide upto in nearby stores tab.
			 */

				maxNearRadius : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} oldNearRadius - Radius value in nearby stores tab before changing it to new value(used in watch expression).
			 */

				oldNearRadius : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Object} nearWach - Watch applied on radius in nearby stores tab.
			 */

				nearWach : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} searchRadius - Radius value for which stores are listed in search stores tab currently.
			 */

				searchRadius : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} maxSearchRadius - Maximum radius till which the slider can slide upto in search stores tab.
			 */

				maxSearchRadius : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} oldSearchRadius - Radius value in search stores tab before changing it to new value(used in watch expression).
			 */

				oldSearchRadius : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} distanceUOM - Distance UOM configured for store
			 */

			distanceUOM : "",
			
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} distanceUOMDesc - Distance UOM description configured for store
			 */

			distanceUOMDesc : "",

			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Object} searchWach - Watch applied on radius in search stores tab.
			 */
			 
				searchWach : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Boolean} nearApiExecComplete - Set to true on success of storeSelectiongetAlternateStoreAvailability mashup, used for requestedActionValidator attribute
			 * of continous scrolling directive.
			 */

				nearApiExecComplete : "true",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Boolean} searchApiExecComplete - Set to true on success of storeSearchgetAlternateStoreAvailability mashup, used for requestedActionValidator attribute
			 * of continous scrolling directive.
			 */

				searchApiExecComplete : "true",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Object} personInfo - Address object for person-info attribute of isc-Address-Filter directive, this object is used as input for searching stores.
			 */

				personInfo : {},
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Boolean} FetchNextRecords - Value used for requestedActionValidator attribute of continous scrolling directive,
			 * shows the readiness of the screen to fetch next set of paginated records.
			 */

				FetchNextRecords : false,
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} noStoreFound - "No Stores found" message displayed when there is no search results found.
			 */

				noStoreFound : "",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {String} searchButtonClick - Attribute used to retain the search screen if there is no search results found.
			 */

				searchButtonClick : "false",
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.common.storesearch.storesearch
			 *@property {Object} AlternateStoreInput - getAlternateStoreAvailability api input json object.
			 */

				AlternateStoreInput : {}				

			},
			
			/**
			 *@iscdoc viewinit
			 *@viewname store.views.common.storesearch.storesearch
			 *@method initialize
			 *@description Initializes the Alternate store selection popup by invoking the required mashup calls and reading the modal input data.
			 */
			initialize : function(){
			
				var currentStoreAddress = iscAppContext.getFromContext('storeAddress').ShipNodePersonInfo;
				
				if(modalInput.inputData.callingMode == 'ADDITEMS'){
	            	this.ui.AlternateStoreInput = {				
		            			AlternateStore:{
		            				NodeSearch:{
		            					ShipToAddress: {
		            						Country: currentStoreAddress.Country,
		            						State: currentStoreAddress.State,
		            						City: currentStoreAddress.City,
		            						ZipCode: currentStoreAddress.ZipCode
		            					}
		            				},
		            				OrderLines :{
		            					OrderLine:{
		            						RequiredQty: modalInput.inputData.RequiredQty,
		            						Item:{
		            							ItemID: modalInput.inputData.itemDetails.ItemID,
		            						    ProductClass : modalInput.inputData.itemDetails.PrimaryInformation.DefaultProductClass,
		            						    UnitOfMeasure : modalInput.inputData.itemDetails.UnitOfMeasure
		            						}
		            					}
		            				}
		            			}
		            			};
				
				
				} else if(modalInput.inputData.callingMode == 'CARTDETAILS'){
	            	this.ui.AlternateStoreInput = {
	            		AlternateStore:{
	            			NodeSearch:{
	            			ShipToAddress: {
	            				Country: currentStoreAddress.Country,
	            				State: currentStoreAddress.State,
	            				City: currentStoreAddress.City,
	            				ZipCode: currentStoreAddress.ZipCode
	            							}
	            						},
	            			OrderLines :{
	            				OrderLine:{
	            					RequiredQty : modalInput.inputData.orderLine.OrderLineTranQuantity.OrderedQty,
	            					Item:{
	            						ItemID : modalInput.inputData.orderLine.ItemDetails.ItemID,
	            						ProductClass : modalInput.inputData.orderLine.ItemDetails.ProductClass,
	            					    UnitOfMeasure : modalInput.inputData.orderLine.ItemDetails.UnitOfMeasure
	            						 }
	            						}
	            					   }
	            					}
	            				};
				}
			
			/**
		     * mashup call to fetch FulfillmentType configured
		    */
		   
		    var inputFulfillmentType = {Rules : { RuleSetFieldName : "WSC_STORE_STORE_SEARCH"}};

		    //iscMashup.callMashup(this,'wscCommonGetFulfillmentTypeForStore',inputFulfillmentType,{}).then(this.onSuccessGetFulfillmentType.bind(this),this.handleGetFulfillmentTypeError.bind(this));
			
		    var defaultRadiusInput = {Rules : { RuleSetFieldName : "WSC_STORE_DISTANCE_TO_CONSIDER"}};
			
			var maxRadiusInput = {Rules : { RuleSetFieldName : "WSC_MAX_STORE_DISTANCE_TO_CONSIDER"}};
			
			var distanceUOMInput = {};
			
		    var mashupArray = [];
			mashupArray.push(iscMashup.getMashupRefObj(this,'wscCommonGetFulfillmentTypeForStore',inputFulfillmentType));
			mashupArray.push(iscMashup.getMashupRefObj(this,'wscCommonGetDefaultRadiusValue',defaultRadiusInput));
			mashupArray.push(iscMashup.getMashupRefObj(this,'wscCommonGetMaxRadiusValue',maxRadiusInput));
			mashupArray.push(iscMashup.getMashupRefObj(this,'wscDistanceUOM',distanceUOMInput));
			
			iscMashup.callMashups(this,mashupArray,{}).then(function(data){
  				//var output = iscMashup.getMashupOutput(data,'wscCommonGetFulfillmentTypeForStore');
  				
        		this.onSuccessGetFulfillmentType();
          	}.bind(this),angular.noop);
			
			},

		
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname uiClose
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname uiSubmit
			 *@description OnClick handler of "OK" button, propagates the selected store data to invoking screen.
			 */
			uiSubmit : function () {
			//console.log("this.ui.selectedStore" + this.ui.selectedStore);
			
			if(this.ui.searchView == 'true'){
				this.ui.selectedStore = this.ui.searchedStore;}
			else if(this.ui.nearbyView == 'true'){
				this.ui.selectedStore = this.ui.nearStore;
			}
			if (this.ui.selectedStore.Available == "false"){
				this.ui.errorText = iscI18n.translate('storeSearch.OutofStock_ErrMsg');
			}else{
			// result data, selected store is propagated to invoking screen
			var resultdata = { data : {
								selectedStore : this.ui.selectedStore										
									}
								};
			//console.log("resultdata" + resultdata);				
			$uibModalInstance.close(resultdata);
			}
			},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname uiBacktoSearch
			 *@description OnClick handler of "Back to Search" button, gets the search screen.
			 */
		uiBacktoSearch : function () {
			//console.log("uiBacktoSearch");
			this.ui.searchStore = "true";
			this.ui.nearbyView = "false";
			this.ui.searchView = "false";
			this.ui.noStoreFound = "";
			this.ui.searchedStoreDesc="";
			this.ui.searchedStore="";
			this.ui.errorText = "";

			if(this.ui.nearWach)
		      this.ui.nearWach();
		           
		    if(this.ui.searchWach)
		      this.ui.searchWach();
		},


			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname uiNearbyView
			 *@description Nearby tab select handler, sets necessary ui attributes and fetches data to switch to nearby stores tab.
			 */
		uiNearbyView : function(){
			//console.log("uiNearbyView");
			this.ui.errorText = "";
			if(iscCore.isVoid(this.model.storeList)){
				this.ui.nearStoreDesc="";
				this.ui.nearStore="";
				this.ui.errorText = "";
				//remove watch for radius filter/slider
				
				if(this.ui.nearWach)
	             this.ui.nearWach();
		             
	            if(this.ui.searchWach)
	             this.ui.searchWach();
				
			}else if(iscCore.isVoid(this.model.storeList.Page.Output.AlternateStores.NodeList) || this.model.storeList.Page.Output.AlternateStores.NodeList.TotalNumberOfRecords == 0){
				this.ui.nearStoreDesc="";
				this.ui.nearStore="";
				this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
				//remove watch for radius filter/slider
			
				if(this.ui.nearWach)
	             this.ui.nearWach();
		             
	            if(this.ui.searchWach)
	             this.ui.searchWach();
				
			}else if(iscCore.isVoid(this.ui.nearStoreDesc)){			   		 
				this.ui.nearStoreDesc=this.model.storeList.Page.Output.AlternateStores.NodeList.Node[0].Description;
				this.ui.nearStore=this.model.storeList.Page.Output.AlternateStores.NodeList.Node[0];
				this.ui.errorText = "";
					
				//watch for radius filter/slider
				
				if(this.ui.nearWach)
		           this.ui.nearWach();
		             
		        if(this.ui.searchWach)
		           this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
					
			}else if (!(iscCore.isVoid(this.model.storeList.Page.Output.AlternateStores.NodeList))){
					
				//watch for radius filter/slider
				
				if(this.ui.nearWach)
		          this.ui.nearWach();
		             
		        if(this.ui.searchWach)
		          this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
					
				}
				this.ui.searchStore = "false";
				this.ui.nearbyView = "true"; 
				this.ui.searchView = "false";
			},
			
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname uiSearchView
			 *@description Search Stores tab select handler,Sets necessary attributes and fetches data to switch to search stores tab.
			 */
			uiSearchView : function (){
				//console.log("uiSearchView");
				this.ui.errorText = "";
				if(iscCore.isVoid(this.model.searchStoreList)){
					this.ui.searchedStoreDesc="";
					this.ui.searchedStore="";
					this.ui.errorText = "";
					this.ui.searchStore = "true";
					this.ui.searchView = "false";
					
					//remove watch for radius filter/slider
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();
					
				}else if(iscCore.isVoid(this.model.searchStoreList.Page.Output.AlternateStores.NodeList) || this.model.searchStoreList.Page.Output.AlternateStores.NodeList.TotalNumberOfRecords == 0 ){
					this.ui.searchedStoreDesc="";
					this.ui.searchedStore="";
					if(!(iscCore.isVoid(this.ui.noStoreFound))){
					this.ui.errorText ="";
					}else{
					this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');}
					this.ui.searchStore = "true";
					this.ui.searchView = "false";
					
					//remove watch for radius filter/slider
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();
					
				}else if(iscCore.isVoid(this.ui.searchedStoreDesc)){
					this.ui.searchedStoreDesc=this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node[0].Description;
					this.ui.selectedStore=this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node[0];
					this.ui.errorText = "";
					this.ui.searchStore = "false";
					this.ui.searchView = "true";
					
				//watch for radius filter/slider
				if(this.ui.nearWach)
	             this.ui.nearWach();
		             
	            if(this.ui.searchWach)
	             this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
					
				}else if (!(iscCore.isVoid(this.model.searchStoreList.Page.Output.AlternateStores.NodeList))){
					this.ui.searchView = "true";
					this.ui.searchStore = "false";
					
					//watch for radius filter/slider
				
					if(this.ui.nearWach)
		             this.ui.nearWach();
		             
		            if(this.ui.searchWach)
		             this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
					
				}
				
				this.ui.nearbyView = "false";
			},


/** Near By Nodes view starts ****************/

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname uiAlternateStoreGetNextRecords
			 *@description Callback handler of continuous scrolling directive , used to fetch next set of pagination data on nearby stores tab.
			 */
		uiAlternateStoreGetNextRecords: function(){
    		this.ui.AlternateStoreInput.AlternateStore.NodeSearch.DistanceToConsider = this.ui.nearRadius;
    		this.ui.AlternateStoreInput.AlternateStore.NodeSearch.DistanceToConsiderUOM = this.ui.distanceUOM;
    		this.ui.AlternateStoreInput.AlternateStore.NodeSearch.FulfillmentType = this.model.FulfillmentType.Rules.RuleSetValue;
    		//console.log("uiAlternateStoreGetNextRecords: ", this.ui.FetchNextRecords);
    		if (this.ui.FetchNextRecords === true) {
	       		iscMashup.callPaginatedMashup(this,'storeSelectiongetAlternateStoreAvailability',this.ui.AlternateStoreInput,"NEXT",{})
	       		.then(this.getStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
	       		this.ui.FetchNextRecords = false;
	       	}
       },
		            
			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname getStoreAvailibility
			 *@description Traverses through the storeSelectiongetAlternateStoreAvailability mashup output and based on Availability info in mashup output, nearby stores tab is painted.
			 */
		getStoreAvailibility : function() {
			if(iscCore.isVoid(this.model.storeList.Page.Output.AlternateStores.NodeList) || iscCore.isVoid(this.model.storeList.Page.Output.AlternateStores.NodeList.Node)){
           		this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
           		this.ui.noOfStoresFound = "";
		   }else{
			   	this.ui.errorText= "";
			   	if(iscCore.isVoid(this.ui.nearStoreDesc)){
					this.ui.nearStoreDesc=this.model.storeList.Page.Output.AlternateStores.NodeList.Node[0].Description;
					this.ui.nearStore=this.model.storeList.Page.Output.AlternateStores.NodeList.Node[0];
			  	}
			  		 
			  	this.ui.noOfStoresFound=iscI18n.translate('storeSearch.LABEL_Stores_found',
            		{noOfStores: this.model.storeList.Page.Output.AlternateStores.NodeList.Node.length});
            					
				this.model.storeList = iscItem.fetchAvailability(this.model.storeList);
				
			}
			this.ui.FetchNextRecords = true;
			this.ui.nearApiExecComplete = "true";
			this.ui.oldNearRadius = "";
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname onNearRadiusChange
			 *@description Invoked on change of radius value in nearby stores tab, 
			 *fetches the alternate stores list based on the new input radius value provided by the user on popup window.
			 */
		onNearRadiusChange : function (newValue, oldValue){
			if(!(iscCore.isVoid(this.ui.oldNearRadius))){
					oldValue = this.ui.oldNearRadius;
			}
			if(!(newValue == oldValue)){
				//this.setDistanceUOMDescBasedOnValue(newValue);
				if(this.ui.nearApiExecComplete == "false"){
					this.ui.nearRadius = oldValue;
				}else if(this.ui.nearApiExecComplete == "true"){
					this.ui.oldNearRadius = oldValue;
		     		this.ui.errorText = "";
					this.ui.nearStoreDesc = "";
					this.ui.nearStore = "";
					this.model.storeList = {};
		     
					if(iscCore.isVoid(this.ui.AlternateStoreInput.AlternateStore.NodeSearch.ShipToAddress.Country == null)){
						this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
					}else{
						
						
						this.ui.AlternateStoreInput.AlternateStore.NodeSearch.DistanceToConsider = newValue;
						this.ui.AlternateStoreInput.AlternateStore.NodeSearch.DistanceToConsiderUOM = this.ui.distanceUOM;
    					
							this.ui.AlternateStoreInput.AlternateStore.NodeSearch.FulfillmentType = this.model.FulfillmentType.Rules.RuleSetValue;
														
							iscMashup.callPaginatedMashup(this,'storeSelectiongetAlternateStoreAvailability',this.ui.AlternateStoreInput,"START",{}).then(this.getStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
		       				this.ui.FetchNextRecords = false;
		       				this.ui.nearApiExecComplete = "false";
	       				
							
					}
				}
			}
							
		},

/** Near By Nodes view ends ****************/



/** Search Stores view starts *******************/

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname uiSearchStore
			 *@description OnClick handler of "Search" button, fetches the alternate stores list based on the input search criteria provided by the user on search screen.
			 */
		uiSearchStore : function (){
			//console.log("uiSearchStore");
			//console.log("ui.personInfo" +this.ui.personInfo);
			this.ui.searchButtonClick = "true";
			if(iscCore.isVoid(this.ui.personInfo.ZipCode)) {
				if(iscCore.isVoid(this.ui.personInfo.City)){
					this.ui.errorText = iscI18n.translate('storeSearch.Address_ErrMsg');
					this.model.searchStoreList = {};
				}else if(iscCore.isVoid(this.ui.personInfo.State)) {
					this.ui.errorText = iscI18n.translate('storeSearch.Address_ErrMsg');
					this.model.searchStoreList = {};
				}else{
					this.ui.errorText = "";
					this.ui.searchedStoreDesc = "";
					this.ui.searchedStore = "";
					//this.ui.searchRadius = this.ui.maxNearRadius;
					this.model.searchStoreList = {};
				//console.log("uiSearchStore in else");
		
				var mashupInput = {
					AlternateStore:{ 
						NodeSearch:{DistanceToConsider : this.ui.searchRadius,
									DistanceToConsiderUOM : this.ui.distanceUOM,
									FulfillmentType : this.model.FulfillmentType.Rules.RuleSetValue,
				  			ShipToAddress:{
				  				Country:this.ui.personInfo.Country,
				  				City : this.ui.personInfo.City,
				  				State : this.ui.personInfo.State.RegionName,
				  				ZipCode:this.ui.personInfo.ZipCode
				   			}
				  					},
				  		OrderLines :{
				  				OrderLine:{ RequiredQty : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.RequiredQty,
				  						Item:{
				  							ItemID : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.ItemID,
				  							ProductClass : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.ProductClass,
				  							UnitOfMeasure : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.UnitOfMeasure
				  							 }
				  						   }
				  					}
				  			}
							};
				//console.log("mashupInput" +mashupInput);			
				
					iscMashup.callPaginatedMashup(this,'storeSearchgetAlternateStoreAvailability',mashupInput,"START",{}).then(this.getSearchStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
		       		this.ui.FetchNextRecords = false;
	       					
	       							
				this.ui.searchStore = "false";
				this.ui.nearbyView = "false";
				this.ui.searchView = "true";
				
				//watch for radius filter/slider
				
				if(this.ui.nearWach)
	             this.ui.nearWach();
		             
	            if(this.ui.searchWach)
	             this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
				
				}
									
			}else{
					var tmpState = "";
					if(!(iscCore.isVoid(this.ui.personInfo.State))) {
					tmpState = this.ui.personInfo.State.RegionName;
					}
					this.ui.errorText = "";
					this.model.searchStoreList = {};
					//this.ui.searchRadius = this.ui.maxNearRadius;
				//console.log("uiSearchStore in else");
		
				var mashupInput = {
					AlternateStore:{ 
						NodeSearch:{DistanceToConsider : this.ui.searchRadius,
									DistanceToConsiderUOM : this.ui.distanceUOM,
									FulfillmentType : this.model.FulfillmentType.Rules.RuleSetValue,
				  			ShipToAddress:{
				  				Country:this.ui.personInfo.Country,
				  				City : this.ui.personInfo.City,
				  				State : tmpState,
				  				ZipCode:this.ui.personInfo.ZipCode
				   			}
				  					},
				  		OrderLines :{
				  				OrderLine:{RequiredQty : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.RequiredQty,
				  						Item:{
				  							ItemID : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.ItemID,
				  							ProductClass : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.ProductClass,
				  							UnitOfMeasure : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.UnitOfMeasure
				  							 }
				  						   }
				  					}
				  			}
							};
				//console.log("mashupInput" +mashupInput);			

				
					iscMashup.callPaginatedMashup(this,'storeSearchgetAlternateStoreAvailability',mashupInput,"START",{}).then(this.getSearchStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
		       		this.ui.FetchNextRecords = false;
	       		
									
				this.ui.searchStore = "false";
				this.ui.nearbyView = "false";
				this.ui.searchView = "true";

				//watch for radius filter/slider
				
				if(this.ui.nearWach)
	             this.ui.nearWach();
		             
	            if(this.ui.searchWach)
	             this.ui.searchWach();
				
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
				
				}
							
		},

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname uiFetchNextRecords
			 *@description Returns boolean to requestedActionValidator parameter of continous scrolling directive, if this returns true, 
			 * then screen is ready to paint the next set of pagination records.    
			 */
		uiFetchNextRecords: function(){
			//console.log("uiFetchNextRecords: ", this.ui.FetchNextRecords);
			return this.ui.FetchNextRecords;
		},
		

			/**
			 *@iscdoc uimethod
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname uiAlternateSearchStoreGetNextRecords
			 *@description Callback handler of continuous scrolling directive , used to fetch next set of pagination data on search stores tab.  
			 */
		uiAlternateSearchStoreGetNextRecords: function(){

			var tmpState = "";
			if(!(iscCore.isVoid(this.ui.personInfo.State))) {
				tmpState = this.ui.personInfo.State.RegionName;
			}

			var mashupInput = {
					AlternateStore:{ 
						NodeSearch:{DistanceToConsider : this.ui.searchRadius,
									DistanceToConsiderUOM : this.ui.distanceUOM,
									FulfillmentType : this.model.FulfillmentType.Rules.RuleSetValue,
				  			ShipToAddress:{
				  				Country:this.ui.personInfo.Country,
				  				City : this.ui.personInfo.City,
				  				State : tmpState,
				  				ZipCode:this.ui.personInfo.ZipCode
				   			}
				  					},
				  		OrderLines :{
				  				OrderLine:{RequiredQty : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.RequiredQty,
				  						Item:{
				  							ItemID : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.ItemID,
				  							ProductClass : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.ProductClass,
				  							UnitOfMeasure : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.UnitOfMeasure
				  							 }
				  						   }
				  					}
				  			}
							};
				if (this.ui.FetchNextRecords === true) {
	           		iscMashup.callPaginatedMashup(this,'storeSearchgetAlternateStoreAvailability',mashupInput,"NEXT",{})
	           		.then(this.getSearchStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
		       		this.ui.FetchNextRecords = false;
	       		}
	           		
	       },

			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname getSearchStoreAvailibility
			 *@description Traverses through the storeSearchgetAlternateStoreAvailability mashup output and based on Availability info in mashup output, search stores tab is painted.
			 */
		getSearchStoreAvailibility : function() {
			if((iscCore.isVoid(this.model.searchStoreList.Page.Output.AlternateStores.NodeList) || iscCore.isVoid(this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node)) && this.ui.searchButtonClick == "true"){
       			this.ui.errorText = "";
       			this.ui.searchStore = "true";
				this.ui.nearbyView = "false";
				this.ui.searchView = "false";
       			this.ui.noStoreFound = iscI18n.translate('storeSearch.Store_ErrMsg');
       			this.ui.noOfStoresSearched = "";
		   }else if(iscCore.isVoid(this.model.searchStoreList.Page.Output.AlternateStores.NodeList) || iscCore.isVoid(this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node)){
       			this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
       			this.ui.noOfStoresSearched = "";
       			this.ui.searchButtonClick = "false";
       			this.ui.noStoreFound = "";
		   }else{
			   if (this.model.searchStoreList.Page.Output.AlternateStores.NodeList.TotalNumberOfRecords == 0){
				   this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
			   } else{
				   this.ui.errorText = "";
			   }
			   	this.ui.noStoreFound = "";
			   	this.ui.searchButtonClick = "false";
			   	if(iscCore.isVoid(this.ui.searchedStoreDesc)){
					this.ui.searchedStoreDesc=this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node[0].Description;
					this.ui.searchedStore=this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node[0];
			   	}
			   			
			  	this.ui.noOfStoresSearched=iscI18n.translate('storeSearch.LABEL_Stores_found',
            			{noOfStores: this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node.length });
			   			
			   	//this.ui.noOfStoresSearched = this.model.searchStoreList.Page.Output.AlternateStores.NodeList.Node.length;
			   	this.model.searchStoreList = iscItem.fetchAvailability(this.model.searchStoreList);
			   			
				
			}
			this.ui.searchApiExecComplete = "true";
			this.ui.oldSearchRadius = "";
			this.ui.FetchNextRecords = true;
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname onSearchRadiusChange
			 *@description Invoked on change of radius value in search stores tab, 
			 * fetches the alternate stores list based on the new input radius value provided by the user on popup window.
			 */
		onSearchRadiusChange : function (newValue, oldValue){
			if(!(iscCore.isVoid(this.ui.oldSearchRadius))){
					oldValue = this.ui.oldSearchRadius;
			}
			
			if(!(newValue == oldValue)){
				
				//this.setDistanceUOMDescBasedOnValue(newValue);
				
				if(this.ui.searchApiExecComplete == "false"){
					this.ui.searchRadius = oldValue;
				}else if(this.ui.searchApiExecComplete == "true"){
					this.ui.oldSearchRadius = oldValue;
		     		this.ui.errorText = "";
					this.ui.searchedStoreDesc = "";
					this.ui.searchedStore = "";
					this.model.searchStoreList = {};
		     
					var tmpState = "";
					if(!(iscCore.isVoid(this.ui.personInfo.State))) {
						tmpState = this.ui.personInfo.State.RegionName;
					}

		     
					var mashupInput = {
					AlternateStore:{ 
						NodeSearch:{DistanceToConsider : newValue,
									DistanceToConsiderUOM : this.ui.distanceUOM,
									FulfillmentType : this.model.FulfillmentType.Rules.RuleSetValue,
				  			ShipToAddress:{
				  				Country:this.ui.personInfo.Country,
				  				City : this.ui.personInfo.City,
				  				State : tmpState,
				  				ZipCode:this.ui.personInfo.ZipCode
				   			}
				  					},
				  		OrderLines :{
				  				OrderLine:{RequiredQty : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.RequiredQty,
				  						Item:{
				  							ItemID : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.ItemID,
				  							ProductClass : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.ProductClass,
				  							UnitOfMeasure : this.ui.AlternateStoreInput.AlternateStore.OrderLines.OrderLine.Item.UnitOfMeasure
				  							 }
				  						   }
				  					}
				  			}
							};
				//console.log("mashupInput" +mashupInput);			
				
					iscMashup.callPaginatedMashup(this,'storeSearchgetAlternateStoreAvailability',mashupInput,"START",{}).then(this.getSearchStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
		       		this.ui.FetchNextRecords = false;
		       		this.ui.searchApiExecComplete = "false";
	       		
								
				}
			}
							
		},
		
	

/** Search Stores view ends ********************/

       

			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname handleGetAlternateStoreError
			 *@description Executed on error , sets error message to be displayed inline.
			 */
		handleGetAlternateStoreError : function(){
			this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname onSuccessGetDefaultRadiusValue
			 *@description Success handler of mashup wscCommonGetDefaultRadiusValue, Fetches the stores list for the default radius.
			 */
		onSuccessGetDefaultRadiusValue : function() {
		
	       if(this.ui.nearWach)
	         this.ui.nearWach();
		             
	       if(this.ui.searchWach)
		     this.ui.searchWach();
				
			//console.log("onSuccessGetDefaultRadiusValue" );
			
			this.ui.nearRadius = this.model.defaultRadiusValue.Rules.RuleSetValue;
			this.ui.searchRadius = this.model.defaultRadiusValue.Rules.RuleSetValue;
			//console.log("this.ui.maxNearRadius" + this.ui.maxNearRadius );


		      /**
             *  mashup call to fetch alternates stores
             */
             //console.log("this.ui.AlternateStoreInput.AlternateStore.NodeSearch.ShipToAddress.Country" + this.ui.AlternateStoreInput.AlternateStore.NodeSearch.ShipToAddress.Country);
		             
		     
			if(iscCore.isVoid(this.ui.AlternateStoreInput.AlternateStore.NodeSearch.ShipToAddress.Country)) {
					this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
			}else
				{
				
				this.ui.AlternateStoreInput.AlternateStore.NodeSearch.FulfillmentType = this.model.FulfillmentType.Rules.RuleSetValue;
				this.ui.AlternateStoreInput.AlternateStore.NodeSearch.DistanceToConsider = this.ui.nearRadius;
				this.ui.AlternateStoreInput.AlternateStore.NodeSearch.DistanceToConsiderUOM = this.ui.distanceUOM,
				
					iscMashup.callPaginatedMashup(this,'storeSelectiongetAlternateStoreAvailability',this.ui.AlternateStoreInput,"START",{}).then(this.getStoreAvailibility.bind(this),this.handleGetAlternateStoreError.bind(this));
		       		this.ui.FetchNextRecords = false;
	      	 	
				
			}

			var that = this;
			this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
				that.onNearRadiusChange(newValue, oldValue);
			});
				
			this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
				that.onSearchRadiusChange(newValue, oldValue);
			});
				
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname onSuccessGetMaxRadiusValue
			 *@description Success handler of mashup wscCommonGetMaxRadiusValue, sets the radius slider max range value.
			 */
		onSuccessGetMaxRadiusValue : function() {
			//console.log("onSuccessGetMaxRadiusValue");
			this.ui.maxNearRadius = this.model.maxRadiusValue.Rules.RuleSetValue;
			this.ui.maxSearchRadius = this.model.maxRadiusValue.Rules.RuleSetValue;
			//console.log("this.ui.maxSearchRadius" + this.ui.maxSearchRadius );
		},
		
		/**
		 *@iscdoc method
		 *@viewname store.views.common.storesearch.storesearch
		 *@methodname onSuccessDistanceUOM
		 *@description Success handler of mashup wscDistanceUOM, sets the radius slider distance UOM.
		 */
		onSuccessDistanceUOM : function() {
			this.ui.distanceUOM = this.model.distanceUOM.Rules.RuleSetValue;
			this.ui.distanceUOMDesc = this.model.distanceUOM.Rules.DistanceUOMDesc;
			//this.setDistanceUOMDescBasedOnValue(this.ui.searchRadius);
			
		},
		
		/*setDistanceUOMDescBasedOnValue: function(value){
			var distanceUOMDescBundleKey = 'storeSearch.'+this.ui.distanceUOM;
			if(value == 1){
				
			}else{
				distanceUOMDescBundleKey = distanceUOMDescBundleKey + '_plural';
			}
			
			this.ui.distanceUOMDesc = iscI18n.translate(distanceUOMDescBundleKey);
		},*/
		/**
		 *@iscdoc method
		 *@viewname store.views.common.storesearch.storesearch
		 *@methodname handleGetMaxRadiusValueError
		 *@description Error handler of mashup wscCommonGetMaxRadiusValue.
		 */
		handleDistanceUOMError : function() {
			this.ui.distanceUOM = 'MILE';
			this.ui.distanceUOMDesc = 'Mile';
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname handleGetDefaultRadiusValueError
			 *@description Error handler of mashup wscCommonGetDefaultRadiusValue.
			 */
		handleGetDefaultRadiusValueError : function() {
		
			if(this.ui.nearWach)
		     this.ui.nearWach();
		             
		    if(this.ui.searchWach)
		      this.ui.searchWach();
		
			//console.log("handleGetDefaultRadiusValueError" );
			
			this.ui.nearRadius = "25";
			this.ui.searchRadius = "25";
			
			//console.log("this.ui.maxNearRadius" + this.ui.maxNearRadius );
			this.ui.errorText = iscI18n.translate('storeSearch.Store_ErrMsg');
			var that = this;
			this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
			that.onNearRadiusChange(newValue, oldValue);
			});
				
			this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
			that.onSearchRadiusChange(newValue, oldValue);
			});
				
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname handleGetMaxRadiusValueError
			 *@description Error handler of mashup wscCommonGetMaxRadiusValue.
			 */
		handleGetMaxRadiusValueError : function() {
			//console.log("handleGetMaxRadiusValueError");
			this.ui.maxNearRadius = "50";
			this.ui.maxSearchRadius = "50";
			//console.log("this.ui.maxSearchRadius" + this.ui.maxSearchRadius );
		},
		
			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname handleGetFulfillmentTypeError
			 *@description Error handler of mashup wscCommonGetFulfillmentTypeForStore.
			 */
		handleGetFulfillmentTypeError : function() {
			this.ui.AlternateStoreInput.AlternateStore.NodeSearch.FulfillmentType ="";
		},

			/**
			 *@iscdoc method
			 *@viewname store.views.common.storesearch.storesearch
			 *@methodname onSuccessGetFulfillmentType
			 *@description Sucsess handler of mashup wscCommonGetFulfillmentTypeForStore, mashups to fetch radius values are invoked.
			 */
		onSuccessGetFulfillmentType : function() {
			
			this.onSuccessGetMaxRadiusValue();
			this.onSuccessDistanceUOM();
			this.onSuccessGetDefaultRadiusValue();
			/**start of mashup calls to get radius values **/
			
			/*var defaultRadiusInput = {Rules : { RuleSetFieldName : "WSC_STORE_DISTANCE_TO_CONSIDER"}};
			
			var maxRadiusInput = {Rules : { RuleSetFieldName : "WSC_MAX_STORE_DISTANCE_TO_CONSIDER"}};
			
			var distanceUOMInput = {};

			iscMashup.callMashup(this,'wscCommonGetDefaultRadiusValue',defaultRadiusInput,{}).then(this.onSuccessGetDefaultRadiusValue.bind(this),this.handleGetDefaultRadiusValueError.bind(this));
			iscMashup.callMashup(this,'wscCommonGetMaxRadiusValue',maxRadiusInput,{}).then(this.onSuccessGetMaxRadiusValue.bind(this),this.handleGetMaxRadiusValueError.bind(this));
			iscMashup.callMashup(this,'wscDistanceUOM',distanceUOMInput,{}).then(this.onSuccessDistanceUOM.bind(this),this.handleDistanceUOMError.bind(this));
			 */
			/** end of mashup calls to get radius values **/
		}				

  	});
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
 /**
 *@iscdoc viewinfo
 *@viewname store.views.customer.cust-details.global-customer-details
 *@package store.views.customer.cust-details
 *@class global-customer-details
 *@description Shows the customer details along with sales order list when searched from global search
 *
 */
angular.module('store').controller('store.views.customer.cust-details.global-customer-details',
  ['$animate','$timeout','$document','$scope','$rootScope','$filter','iscScreen','iscWizard','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscState','iscOrder','iscRule',
	function($animate,$timeout,$document,$scope,$rootScope,$filter,iscScreen,iscWizard,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscState,iscOrder,iscRule) {
	  
		  var escapeBinderFn = function(event){
			  if(event.which === 27 && !event.defaultPrevented) {
		           this.ui.showCustomerPreview = false;
		           $document.off("keydown",escapeBinderFn);
		           $scope.$apply();
		         }
	  	 };
  	 
		$scope.$on("$destroy", function () {
		       $document.off("keydown",escapeBinderFn);
			});
  	
		
		iscScreen.initializeScreen($scope,{
            model:{
                /**
                 *@description Stores customer details.
                 */
                "customerDetails":{},
                /**
                 *@description Stores order history of the customer
                 */
                "orderList":{},
                /**
                 *@description Stores the input of getOrderList API for that customer, this is used to apply filters
                 */
                "getOrderListInput":{Order:{}}
            },
            mashupRefs:[{
                /**
                *@description Calls getOrderList API to fetch maximum 20 orders of the current customer sorted by descending createts
                */
                    mashupRefId: 'getOrderList',
                    mashupId: 'return_getCustomerOrders'

                },
                {
                    /**
                    *@description Calls getCompleteOrderLineList API to get item images of first two lines of the order to be displayed 
                    *when the order is selected
                    */
                        mashupRefId: 'getItemThumbnails',
                        mashupId: 'store.views.common.getItemThumbnails'

                    }],
            ui:{
                /**
                 *@property {String} pageSize - Default number of order records to be shown while loading next records.
                 */
                 pageSize: 5,
                 /**
                  *@property {String}  recordShownCount - Total number of order records displayed in the screen
                  */
                  recordShownCount:10,
                /**
                 *@property {Boolean}  customerPreviewTemplate -Template to show customer details in mobile
                 */
                customerPreviewTemplate:'store/views/return/customer-details/customer-preview.tpl.html',
                /**
                 *@property {Boolean}  showCustomerPreview - True in mobile, false otherwise
                 */
                showCustomerPreview:false,
                /**
                 *@property {Boolean}  showFilter - True in mobile, false otherwise
                 */
                //showFilter:'N',
                /**
                 *@property {Boolean}  getFilterFromContext - This flag is set as true when the user is coming by clicking back 
                 *and a filter was set in this screen previously
                 */
                getFilterFromContext:false
            },
            /**
             *@description sets the customer details model and gets order history
             */
            initialize: function(){
            	var inputData = iscStateParams.params.input;
            	this.handleGetCustomerDetailsOutput(inputData,false);
                  /* $scope.$on('uiSearchClose',function(event,args){
					 	if (args){
							  $scope.ui.hideSearch = 'N';
					    }  
							   
					 });*/
            },
            
            /**
             *@description shows the customer preview on click of customer link
             */
            uiShowCustomerPreview:function() {
            	if(!this.ui.showCustomerPreview) {
            		this.ui.showCustomerPreview = true;
            	} else if(this.ui.showCustomerPreview) {
            		this.ui.showCustomerPreview = false;
            		$document.off("keydown",escapeBinderFn);
            	}
    			
             },
             
             /**
              * @description Validates if User has permission for modifying the order viz Order Capture permission and accordingly hides/shoes the View Products button for the order
              * @param order - Order details model
              * @returns {Boolean} - If true view products button is hidden as user doesn't have permission for Order Capture/modifying the order
              */
             uiToggleViewProductsButton :function(order) {
             	
             	if(!iscCore.isVoid(order) && "Y" == order.DraftOrderFlag && !iscResourcePermission.hasPermission("WSC000031")) {
             		return true;
             	} else {
             		return false;
             	}
             	
             },
             
	        /**
	         *@description Callback handler function of continuous scroll as user scrolls order list
	         */
    		uiGetOrderListNext: function(){
    		this.ui.recordShownCount+=this.ui.pageSize;
        },
        
	       /**
	        *@description Determines if mashup call is in progress as user scrolls order list. 
	        *@return {Boolean} -True if mashup call is not in progress, false otherwise. Since this is client only pagination, it will always return true.
	        */
        uiNextPageActionValidator: function(){
        	return true;
        },
        
        	/**
	        *@description updates the customerDetails model and calls getOrderList mashup
	        */
        handleGetCustomerDetailsOutput: function(output){
        	 this.model.customerDetails =  output; 
  			 //this.ui.headerCustomerId = this.model.customerDetails.Customer.CustomerID;
        	 this.ui.headerCustomerId = iscI18n.translate('address.LABEL_Display_name',
        			 {firstname:this.model.customerDetails.Customer.CustomerContactList.CustomerContact[0].FirstName, 
        		 lastname:this.model.customerDetails.Customer.CustomerContactList.CustomerContact[0].LastName});
  			 this.getCustomerOrders();
            },
            
            /**
 	        *@description Forms the input and calls getOrderList mashup. If there is a filter in context, it is also applied
 	        */
            getCustomerOrders: function(){
            	 this.model.getOrderListInput ={Order:{BillToID:this.model.customerDetails.Customer.CustomerID}};
            	 
            	 var orderListInput =  this.model.getOrderListInput;
        		 //if coming from back, use the saved filter. otherwise reset the order list filter
        		 if(iscStateParams.options && iscStateParams.options.backButtonClicked){
        			 var orderListFilter = iscAppContext.getFromContext("orderListFilter");
        			 if(!iscCore.isVoid(orderListFilter) && orderListFilter.input){
        				 orderListInput = orderListFilter.input;
        				 this.ui.getFilterFromContext = true;
        			 }
        		 }else{
        			 iscAppContext.removeFromContext("orderListFilter");
        		 }
        		 
            	 iscMashup.callMashup(this,'getOrderList',orderListInput,{}).then(function(data){
                		var output = iscMashup.getMashupOutput(data,'getOrderList');
                		this.updateOrderListModel(output);
                	}.bind(this),angular.noop);
            },
            
            /**
  	        *@description Updates the orderList with the output of getOrderList mashup
  	        */
            updateOrderListModel: function(orderListOutput){
            	 this.model.orderList = orderListOutput;
            },
           
            
            /**
   	        *@description onclick handler of View Order Details button, opens order summary if confirmed order otherwise opens view cart page after updating
   	        *the draft order
   	        */   
	       uiViewOrderDetails: function(order){
	    	  iscOrder.viewOrderFromList(order,true);
	       },
       		
	       /**
	        *@description Close button onclick handler. It takes the user to home page
	        */
	       uiCancel : function(){
	    	   iscState.goToState('/home',{},{});
		   },
	   
		   /**
	        *@description Calls getOrderList after applying the order filter criteria
	        */
	         uiApplyFilterOnOrderList: function(getOrderListInputWithFilter){
	        	 iscMashup.callMashup(this,'getOrderList',getOrderListInputWithFilter,{}).then(function(data){
             		var output = iscMashup.getMashupOutput(data,'getOrderList');
             		var numOfOrders =  $filter('number')(output.OrderList.TotalNumberOfRecords);
                  	if(numOfOrders > 0) {
                  		output = iscOrder.stampDisplayStatusOnOrderList(output);
                  	} 
             		this.updateOrderListModel(output);
             	}.bind(this),angular.noop);
	         },
	         
         /**
	        *@description Calls getItemThumbnails mashup to show item images when the order is selected
	        */  
	       uiSelectOrder : function(order){
	    	   
	    	   if(iscRule.isRuleEnabled('ShowItemImage') && iscCore.isVoid(order.ItemThumbnails)){
	    		   var getItemThumbnailsInput = {OrderLine:{OrderHeaderKey:order.OrderHeaderKey}}
	    		   iscMashup.callMashup(this,'getItemThumbnails',getItemThumbnailsInput,{}).then(function(data){
               		var output = iscMashup.getMashupOutput(data,'getItemThumbnails');
               		order.ItemThumbnails = output;
               		this.ui.selectedOrderHeaderKey = order.OrderHeaderKey;
               	}.bind(this),angular.noop);
	    	   }else{
	    		   this.ui.selectedOrderHeaderKey = order.OrderHeaderKey;
	    	   }
	       },
	       
	       /**
	        *@description Sets the styling for order status
	        */
	       uiGetCssClassByOrderStatus:function(order) {
	        	 return iscOrder.getCssClassByOrderStatus(order.MaxOrderStatus);
	         },
	         
	         /**
		        *@description Sets the localized status of the order
		        */
	         uiSetDisplayStatus:function(order){
	        	 order.DisplayStatus =  iscOrder.getDisplayStatus(order);
	         }
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
 /**
 *@iscdoc viewinfo
 *@viewname store.views.customer.cust-list.global-customer-list
 *@package store.views.customer.customer-list
 *@class customer-list
 *@description Displays the customer list when searched from global search
 *
 */
angular.module('store').controller('store.views.customer.cust-list.global-customer-list',
  ['$scope','$rootScope','iscScreen','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscState',
	function($scope,$rootScope,iscScreen,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscState) {
		
	  iscScreen.initializeScreen($scope,{
           pageModel:{},
			model:{
                /**
                 *@description Stores customer list
                 */
                "customerList":{}
            },
            mashupRefs:[{
                /**
                 *@description Mashup used to list customers in a paginated way
                 */
                    mashupRefId: 'getCustomerListPaginated',
                    mashupId: 'returnLookup_getCustomerList',
                    isPaginated: true,
					pageSize : iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					appendPath : 'CustomerList.Customer',
					modelName:"customerList"
                     

                 }],
            ui:{
                /**
                *@iscdoc uiattr
                *@viewname store.views.customer.cust-list.global-customer-list
                *@property {String}  pageSize -Default number of order records to be shown while loading next records.
                */
                 pageSize: Number(iscAppContext.getFromContext("masterDataPageSize")),
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.customer.cust-list.global-customer-list
                 *@property {String}  recordShownCount - Total number of order records displayed in the screen
                 */
                 recordShownCount: Number(iscAppContext.getFromContext("masterDataPageSize")),
                /**
                *@iscdoc uiattr
                *@viewname store.views.customer.cust-list.global-customer-list
                *@property {String}   apiPageSize - Number of records to be fetched by getOrderList API in one call.
                */
                apiPageSize:  Number(iscAppContext.getFromContext("listApiPageSize")),
                /**
                *@iscdoc uiattr
                *@viewname store.views.customer.cust-list.global-customer-list
                *@property {String}  noOfSearchResults - Number of search results
                */
                noOfSearchResults: 0,
                /**
                *@iscdoc uiattr
                *@viewname store.views.customer.cust-list.global-customer-list
                *@property {Boolean}  searchInProgress - True if mashup call is still in progress, false otherwise.
                */
                searchInProgress: false,
                
                /**
                 * description {Boolean} hasViewCustomerProfilePermission - True if logged in user has permission for viewing customer profile, false otherwise
                 */
                hasViewCustomerProfilePermission:iscResourcePermission.hasPermission("WSC000047"),
                
                /**
                 * @description {String} screenContext - contains the context name in which this screen launched. Possible values - GLOBAL_SEARCH, APPOINTMENT. based on this value
                 * View Profile or View Order action is shown on click of customer panel.
                 */
                screenContext:'GLOBAL_SEARCH'
            },
            
            /**
             *@iscdoc viewinit
             *@viewname store.views.customer.cust-list.global-customer-list
             *@descriptionsets sets the customer list model using the output sent by the return lookup header
             */
            initialize: function(){
                  //this.ui.pageSize = iscAppContext.getFromContext("defaultPageSize");
                  //var pageInput = iscWizard.getWizardPageInput();
                  var inputData = iscStateParams.params.input;
                  var callApi = iscStateParams.params.callApi;
                  var context = iscStateParams.params.context;
                  if(callApi) {
                	  this.getCustomerListByInput(inputData);
                  } else {
                	  this.handleGetCustomerListOutput(inputData,false);
                  }
                  
                  if(!iscCore.isVoid(context)) {
                	  this.ui.screenContext = context == 'APPOINTMENT' ? 'APPOINTMENT' : 'GLOBAL_SEARCH';
                  }
                  /*$scope.$on('uiSearchClose',function(event,args){
				 	if (args){
						  $scope.ui.hideSearch = 'N';
				    }  
						   
				  });*/
                 
            },
            
            
            getCustomerListByInput:function(inputData) {
            	
            	var that = this;
            	var paginationDataObj ={scPageSize:iscAppContext.getFromContext("listApiPageSize"),
			    		scPageNumber:1,
			    		scPaginationStrategy:'NEXTPAGE'};

	        	  iscMashup.callPaginatedMashup(this,"getCustomerListPaginated",inputData,"START",{}).then(function(data){
	        		  var output = iscMashup.getMashupOutput(data,'getCustomerListPaginated');
	        		  that.handleGetCustomerListOutput(output,false)
	          	}.bind(this),angular.noop);
            	
            },
            
         /**
         *@iscdoc uimethod
         *@viewname store.views.customer.cust-list.global-customer-list
         *@methodname uiOpenCustomerDetails
         *@description onclick handler of View Order Details button, opens customer details screen
         *param {Object} customer - customer details
         */
         uiOpenCustomerDetails:function(customer){
            if(!iscCore.isVoid(customer)){
            	var customerInput = {};
            	customerInput.Customer = customer;
            	var pageInput = {input:customerInput,callAPI:false};
                //iscWizard.gotoCustomPage('customerDetails',pageInput,{});
            	iscState.goToState('customer-details',{input:customerInput},{});
            }
            else{
                   iscModal.showErrorMessage(iscI18n.translate('return.MSG_CustomerNotFound'));
            }
        },
        
        /**
         * @description This method is used to launch customer profile wizard
         */
        uiOpenCustomerProfile:function(customer) {
        	iscState.goToState('customerprofilewizard',{action:'customerdetails',input:{Customer:customer}},{});
        },
        
        /**
         *@iscdoc uimethod
         *@viewname store.views.customer.cust-list.global-customer-list
         *@methodname uigetNextCustomerRecords
         *@description Callback handler function of continuous scroll as user scrolls customer list.
         */
        uigetNextCustomerRecords: function(){
        	var custListModel = this.model.customerList.Page.Output.CustomerList;
        	var numRecordsInModel = custListModel.Customer.length;
        	console.log("numRecordsInModel="+numRecordsInModel);
        	if(numRecordsInModel - this.ui.recordShownCount >= this.ui.pageSize ){
                this.ui.recordShownCount+=this.ui.pageSize;
                console.log("Using existing model - doing client side pagination");
              }else{
            	  if(this.model.customerList.Page.IsLastPage != 'Y'){
            		  var data = custListModel.SearchText;
            		  var getCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:{DayPhone:data}}}};
            		 /* getCustomerListPaginatedInput.Page.PageNumber = +this.model.customerList.Page.PageNumber + 1;
            		  getCustomerListPaginatedInput.Page.PreviousPage = {};
            		  getCustomerListPaginatedInput.Page.PreviousPage.PageNumber = this.model.customerList.Page.PageNumber;
            		  getCustomerListPaginatedInput.Page.PreviousPage.Customer = {};
            		  getCustomerListPaginatedInput.Page.PreviousPage.Customer.CustomerKey = custListModel.Customer[numRecordsInModel-1].CustomerKey;*/
            		  
  				  console.log("calling API with input="+getCustomerListInput);
  				  this.ui.searchInProgress = true;
  				     iscMashup.callPaginatedMashup(this,'getCustomerListPaginated',getCustomerListInput,"NEXT",{}).then(function(data){
	            		/*var output = iscMashup.getMashupOutput(data,'getCustomerListPaginated');
	            		this.handleGetCustomerListOutput(output,true);*/
  				    	this.ui.searchInProgress = false;
  				    	this.uigetNextCustomerRecords();
	            	}.bind(this),angular.noop);
            	  }else{
            		  this.ui.recordShownCount = numRecordsInModel;
            		  console.log("not calling API but painting numItemsInModel="+numRecordsInModel+" items");
            	  }
            	 
              }
        },
        
       /**
        *@iscdoc uimethod
        *@viewname store.views.customer.cust-list.global-customer-list
        *@methodname uiNextPageActionValidator
        *@description Determines if mashup call is in progress as user scrolls customer list.
        *@return {Boolean} - True if mashup call is not in progress, false otherwise. 
        */
        uiNextPageActionValidator: function(){
            if(!this.ui.searchInProgress){
                // mashup call not in progress. call next page handler
                return true;
            }
            else if(this.ui.searchInProgress){
                //mashup call in progress 
                return false;
            }
        },
        
        /**
         *@iscdoc uimethod
         *@viewname store.views.customer.cust-list.global-customer-list
         *@methodname handleGetCustomerListOutput
         *@description Updates the customer list with the output of getCustomerListPaginated mashup
         */
            handleGetCustomerListOutput: function(output,onNext){
            	this.ui.searchInProgress = false;
     			 if(onNext){
     				//append the next page results with the total results
     				var recordList = output.Page.Output.CustomerList.Customer;
     				for(var i = 0;i < recordList.length; i++){
                           this.model.customerList.Page.Output.CustomerList.Customer.push(recordList[i]);
                   }
     				this.model.customerList.Page.PageNumber = output.Page.PageNumber;
     				this.model.customerList.Page.IsFirstPage = output.Page.IsFirstPage;
     				this.model.customerList.Page.IsLastPage = output.Page.IsLastPage;
     				this.uigetNextCustomerRecords();
     			 }else{
     				this.model.customerList =  output; 
     				var numOfRec = Number(this.model.customerList.Page.Output.CustomerList.TotalNumberOfRecords);
     				if(numOfRec > 0) {
     					this.ui.selectedCustomerKey = output.Page.Output.CustomerList.Customer[0].CustomerKey;
     				}
         			 //this.ui.headerCustomerId = output.Page.Output.CustomerList.SearchText;
     				this.ui.headerProductId = iscI18n.translate('customer.LABEL_Customer_Search_Result_Blind_Search',{count:this.model.customerList.Page.Output.CustomerList.TotalNumberOfRecords});
     				
     				//following code is to set model for a paginated mashup call
     				this.pageModel.getCustomerListPaginated={};
     				this.pageModel.getCustomerListPaginated["0"] = {};	
     				this.pageModel.getCustomerListPaginated[output.Page.PageNumber] = output.Page.LastRecord;
     				this.pageModel.getCustomerListPaginated.currentPageNumber = output.Page.PageNumber;
     				this.pageModel.getCustomerListPaginated.IsLastPage = output.Page.IsLastPage;
     				this.pageModel.getCustomerListPaginated.IsFirstPage = output.Page.IsFirstPage;
     				this.pageModel.getCustomerListPaginated.IsValidPage = output.Page.IsValidPage;
     			 }
            	 
            },
             
            /**
             *@iscdoc uimethod
             *@viewname store.views.customer.cust-list.global-customer-list
             *@methodname uiCancel
             *@description Cancel/Close button onclick handler for screen. Takes the user to home page.
             */
            uiCancel : function(){
            	iscState.goToState('/home',{},{});
            }
            
        });
	}
]);

/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
* (C) Copyright IBM Corp. 2017, 2018 All Rights Reserved.
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has beendeposited with the U.S. Copyright Office. 
******************************************************************************/
/**
 *@iscdoc viewinfo
 *@viewname store.views.customer.customer-profile.customer-profile-details
 *@package store.views.customer.customer-profile
 *@class customer-profile-details
 *@description Displays the customer details, recommendations for customer based on customer's purchase history and recently viewed products.
 *
 */
angular.module('store').controller('store.views.customer.customer-profile.customer-profile-details', ['$scope', '$rootScope', 'iscWizard', 'iscState', 'iscMashup', 'iscResourcePermission','iscAppContext','iscStateParams', '$timeout','iscModal','iscMedia','iscRule','iscCustomer','iscDateFilter','amSubtractFilter','iscRecommendations',
	function ($scope, $rootScope, iscWizard, iscState, iscMashup, iscResourcePermission,iscAppContext,iscStateParams, $timeout,iscModal,iscMedia,iscRule,iscCustomer,iscDateFilter,amSubtractFilter,iscRecommendations) {
		iscWizard.initializeWizardPage($scope, {
			model: {
                /**
				 *@description This model contains the customer details from getCompleteCustomerDetails api output.
				 */
                customerDetails:{},
                /**
				 *@description This model contains the customer's order history details from getOrderList api output.
				 */
				orderHistoryDetails:{},
                /**
				 *@description This model contains the recommended products for customer.
				 */
                itemsRecommended:{},
                /**
				 *@description This model contains the recently viewed products from customer.
				 */
                itemsViewed:{},
                /**
				 *@description This model contains the wishlist products for customer.
				 */
                itemsWishlist:{},
                /**
				 *@description This model contains the draft order for the customer.
				 */
                customerDraftOrder:{},
                /**
				 *@description This model contains the getWorkOrderList Output which gives the Count of appointments the customer has.
				 */
                appointmentListCount:{},
                /**
				 *@description This model contains the wishlist products for customer.
				 */
                wishlist:{},
                /**
                 * @description: This model contains product keywords searched by customer in online channel
                 */
                itemKeywordSearchList:{},
                /**
                 * @description: This model contains list of customer's cart in online channel
                 */
                openCartList:{},
                
                openStoreCartList : {}
                
            },
			mashupRefs: [
                
                {
                	   /**
                     *@description This mashup is used to get order history count for customer by calling getOrderList API for the configured date range.
                     */
                	
					mashupRefId: "getOrderHistoryListCount",
					mashupId: "store.views.customer.customer-profile.getOrderListCount",
                    modelName:"orderHistoryDetails"
				},
                
                {
					/**
	                 *@description This mashup is used to get customer last 10 purchased products by calling getOrderList API for the customer.
	                 */
                    mashupRefId: "getCustomerLast10PurchasedItems",
                    mashupId : "store.views.customer.customer-profile.getLastPurchasedItems",
                },
                
                {
                  	/**
                     *@description This mashup is used to get recommended products for customer.
                     */
					mashupRefId: "getRecommededItems",
					mashupId: "store.views.customer.customer-profile.getRecommendedItemList",
					modelName: "itemsRecommended"
				},
                
                {
					/**
	                 *@description This mashup is used to get recently viewed products for customer.
	                 */
					mashupRefId: "getLastViewedItems",
					mashupId: "store.views.customer.customer-profile.getLastViewedItemList",
					modelName: "itemsViewed"
				},
               
                {
					 /**
	                 *@description This mashup is used to get recently viewed products for customer.
	                 */
                    mashupRefId: "getCustomerDraftOrder",
					mashupId: "store.views.customer.customer-profile.getCustomerDraftOrder"
                },
                
                {
                	   /**
                     *@description This mashup is used to get the count of appointments the customer has.
                     */
                    mashupRefId: 'getAppointmentCount',
                    mashupId: 'store.views.customer.customer-profile.getAppointmentCount',
                    modelName:'appointmentListCount'
				},
				 
				{
					/**
	                 *@description This mashup is used to get customer's wishlist in online channel .
	                 */
					mashupRefId: "getWishListItems",
					mashupId: "store.views.customer.customer-profile.getWishListItems",
					modelName: "wishlist"
				},
				
				{
					 /**
	                 *@description This mashup is used to get customer's cart in online channel .
	                 */
					mashupRefId: "getOnlineCartListForCustomer",
					mashupId: "store.views.customer.customer-profile.getOnlineCartListForCustomer",
					modelName: "openCartList"
				},
				
				{
					/**
	                 *@description This mashup is used to get product keywords searched by customer
	                 */ 
					mashupRefId: "getItemKeywordSearchList",
					mashupId: "store.views.customer.customer-profile.getItemKeywordSearchListForCustomer",
					modelName:"itemKeywordSearchList"
				},
				{   /**
	                 *@description This mashup is used to get product keywords searched by customer
	                 */
					mashupRefId: "getPaginatedWishListItems",
					mashupId: "store.views.customer.customer-profile.getWishListProductDetails",
					
				},
				
				{
					/**
	                 *@description This mashup is used to get product keywords searched by customer
	                 */
					mashupRefId: "getPaginatedOpenCartListItems",
					mashupId: "store.views.customer.customer-profile.getPaginatedOpenCartListItems",
						
				},
				
				{
					/**
	                 *@description This mashup is used to create order
	                 */
					mashupRefId: 'createOrder',
		            	mashupId: 'store.views.customer.customer-profile.createOrder',
		            	modelName : 'orderDetails'
				},
				{
					/**
	                 *@description This mashup is used to modify the order
	                 */
		            	mashupRefId: 'modifyFulfillmentOptions',
		            	mashupId: 'store.views.customer.customer-profile.modifyFulfillmentOptions',
		            	modelName : 'orderDetails'
			    
				},
				{
					/**
	                 *@description This mashup is used to create the order when online cart item is added to store cart
	                 */
					mashupRefId: 'onlinecart_createOrder',
		            	mashupId: 'store.views.customer.customer-profile.pullCartCreateOrder',
		            	modelName : 'orderDetails'
				},
				{
					/**
	                 *@description This mashup is used to change the order when online cart item is added to the existing store cart
	                 */
		            	mashupRefId: 'onlinecart_modifyFulfillmentOptions',
		            	mashupId: 'store.views.customer.customer-profile.pullCartModifyFulfillmentOptions',
		            	modelName : 'orderDetails'
			    
				}
				
  		    ],
			ui: {
                /**
				 *@property {Boolean} showInfo - flag to indicate whether to show or hide customer details.
				 */
                showInfo:true,
                /**
				 *@property {Boolean} loadingRecommendations - flag to indicate whether to recommendations are being loaded.
				 */
                loadingRecommendations:false,
                /**
				 *@property {Boolean} loadingLastViewed - flag to indicate whether to recently viewed products are being loaded.
				 */
                loadingLastViewed:false,
                /**
				 *@property {Boolean} loadingWishlist - flag to indicate whether to wishlist products are being loaded.
				 */
                loadingWishlist:false,
                /**
				 *@property {Boolean} loadingOpenCarts - flag to indicate whether to cart list is loaded.
				 */
                loadingOpenCarts:false,
                /**
				 *@property {Boolean} lastViewedItemsLoaded - flag to indicate whether recently viewed products are loaded.
				 */
                lastViewedItemsLoaded:false,
                /**
				 *@property {Boolean} recommendedItemsLoaded - flag to indicate whether recommendations are loaded.
				 */
                recommendedItemsLoaded:false,
                
                /**
				 *@property {Boolean} wishlistItemsLoaded - flag to indicate whether wishlist is loaded.
				 */
                wishlistItemsLoaded:false,
                /**
				 *@property {Boolean} openCartListLoaded - flag to indicate whether cartList is loaded.
				 */
                openCartListLoaded:false,
                /**
				 *@property {Number} activeTabIndex - index to indicate which tab should be select on default loading of the screen.
				 */
			    activeTabIndex: -1,
			    
			    bottompanelIndex : -1,
			    /**
				 *@property {Boolean} itemSearchKeywordsLoaded - flag to indicate whether product search keywords are loaded.
				 */
                itemSearchKeywordsLoaded:false,
                /**
				 *@property {Boolean} itemSearchKeywordsNotAvailable - flag to indicate whether product search keywords are not available.
				 */
                itemSearchKeywordsNotAvailable:false,
                /**
				 *@property {Boolean} loadingItemSearchKeywords - flag to indicate whether product search keywords is being loaded.
				 */
                loadingItemSearchKeywords: false,
                /**
				 *@property {Boolean} hasPermissionForLastViewed - flag to indicate whether user has permission for seeing Last Viewed Products.
				 */
                hasPermissionForLastViewed:iscResourcePermission.hasPermission('WSC000049'),
                /**
				 *@property {Boolean} hasPermissionForLastViewed - flag to indicate whether user has permission for seeing product search keywords.
				 */
                hasPermissionForToViewKeywordsSearched:iscResourcePermission.hasPermission('WSC000076'),
                
                minicartparam:{'carticon':'app-glyphicons app-icon-shoppingCart_30','cartbtnlabel':'addItems.ACTION_Checkout','wizardmodelname':'customerDraftOrder'},
                
                noOfProductsToshow:5,
                /**
				 *@property {Number} noOfRecommendedItemsToshow - page size of the recommendations tab 
				 */
                noOfRecommendedItemsToshow:6,
                /**
				 *@property {Number} noOfLastViewedItemsToshow - page size of the Interested products tab 
				 */
                noOfLastViewedItemsToshow:6,
                /**
				 *@property {Number} noOfWishListItemsToshow - page size of the WishList tab 
				 */
                noOfWishListItemsToshow:6,
                /**
				 *@property {Number} noOfCartItemsToshow - page size of the OpenCarts tab 
				 */
                noOfCartItemsToshow:6,
                
                noOfTabsToshowInMobile:3,
                
                /**
				 *@property {String} DisplayType - parameter to indicate the view used in customer profile screen. valid values are CAROUSEL and LIST
				 */
                DisplayType:"CAROUSEL"
                
			},

            /**
			 * @description Method to initialize of the screen.
			 */
			initialize: function () {
				var customerDetails = iscWizard.getWizardPageInput().customerDetails;
				
				if(!iscCore.isVoid(customerDetails) && !iscCore.isVoid(customerDetails.Customer)) {
					this.model.customerDetails = {Customer:iscCustomer.getDisplayAddressForCustomer(customerDetails.Customer)};
				}
                
                this.updateDefaultSelectedTab();
                this.setDisplayTypeForProductListCarousel();
                
                var orderInput = {
                    Order:{
                        BillToID:this.model.customerDetails.Customer.CustomerID
                    }
                }
                
                var workOrderInput ={WorkOrder:{
                        Order:{
                            BillToID:this.model.customerDetails.Customer.CustomerID
                        }
                    }
                }
                
                var mashupArray = [];
                
                mashupArray.push(iscMashup.getMashupRefObj(this,'getCustomerDraftOrder',orderInput));
                mashupArray.push(iscMashup.getMashupRefObj(this,'getAppointmentCount',workOrderInput));
                
				iscMashup.callMashups(this,mashupArray,{})
                    .then(function(controllerData){
                        var output = iscMashup.getMashupOutput(controllerData,"getCustomerDraftOrder");
                        if(!iscCore.isVoid(output.OrderList.Order)){
                            this.model.customerDraftOrder.Order = output.OrderList.Order[0];
                        }
                        else{
                            this.model.customerDraftOrder.Order = {
                                OrderLines : {
                                    TotalNumberOfRecords : "0"
                                }
                            }
                        }
                        
                    }.bind(this),angular.noop);
				
				
			},
			
			 /**
			 * @description Method to set the ui property DisplayType based on resource permissions
			 */
			setDisplayTypeForProductListCarousel : function(){
				
			  var topPanelTabs = [
                    {
                        tab:"Recommendations",
                        resourceId:"WSC000048"
                    },
                    {
                        tab:"LastViewed",
                        resourceId:"WSC000049"
                    },
                    {
                      	tab:"LastViewed",
                         resourceId:"WSC000076"
                    }
                ];
				
				var bottomPanelTabs = [
                    {
                        tab:"Wishlist",
                        resourceId:"WSC000077"
                    },
                    {
                        tab:"OpenCarts",
                        resourceId:"WSC000078"
                    }
                ];
				
				var noOfTopPanelTabs = 0;
				for(var i=0; i< topPanelTabs.length;i++){
                    if(iscResourcePermission.hasPermission(topPanelTabs[i].resourceId)){
                    	  noOfTopPanelTabs++;
                        break;
                    }
                }
				
				var noOfBottomPanelTabs = 0;
				for(var i=0; i< bottomPanelTabs.length;i++){
                    if(iscResourcePermission.hasPermission(bottomPanelTabs[i].resourceId)){
                    	noOfBottomPanelTabs++;
                        break;
                    }
                }
				
				if(noOfTopPanelTabs > 0 && noOfBottomPanelTabs > 0){
					this.ui.DisplayType = 'CAROUSEL';
				}else{
					this.ui.DisplayType = 'LIST';
				}
				if(noOfTopPanelTabs == '0' && noOfBottomPanelTabs !='0'){
					this.ui.activeTabIndex = 2;
				}
				
				this.ui.bottompanelIndex = 0;
			},
			
            /**
			 * @description Method to update default selected tab.
			 */
            updateDefaultSelectedTab : function(){
                var customerProfileDefaultTabToShow = iscRule.getRuleSetValue('customerProfileDefaultTabToShow');
                customerProfileDefaultTabToShow = iscCore.isVoid(customerProfileDefaultTabToShow)?0:customerProfileDefaultTabToShow;
                
                var defaultTabSelected = parseInt(customerProfileDefaultTabToShow);
                
                var tabs = [
                    {
                        tab:"Recommendations",
                        resourceId:"WSC000048"
                    },
                    {
                        tab:"LastViewed",
                        resourceId:"WSC000049|WSC000076"
                    }
                ];
                
                if(!iscResourcePermission.hasPermissionToOneOfTheResources(tabs[defaultTabSelected].resourceId)){
                    //defaultTabSelected = 0;
                    for(var i=0; i< tabs.length;i++){
                        if(iscResourcePermission.hasPermissionToOneOfTheResources(tabs[i].resourceId)){
                            defaultTabSelected = i;
                            break;
                        }
                    }
                }
                this.ui.activeTabIndex = defaultTabSelected;
               // this.ui.activeTabIndex = 1;
            },
            /**
			 * @description UI Method to fetch last viewed products for customer.
			 */
            uiGetLastViewedItemList:function(){
            	
              	var pageSize = 3;
              	if (iscMedia.isMediaEnabled("lte-768")) {
              		pageSize = this.ui.noOfLastViewedItemsToshow;
     		    }else if(!iscMedia.isMediaEnabled("lte-768") && (this.ui.DisplayType === 'LIST')){
     		    	   pageSize = 8;
     		    	   this.ui.noOfLastViewedItemsToshow = 8; 
     		    }
              	
                if(iscResourcePermission.hasPermission('WSC000049')){
                    if(!this.ui.lastViewedItemsLoaded){
                        this.ui.loadingLastViewed = true;
                        var lastViewedInput = {
                            LastViewed:{
                            	   pageSize:pageSize,
                                Customer:{
                                    CustomerKey:this.model.customerDetails.Customer.CustomerKey,
                                    CustomerID:this.model.customerDetails.Customer.CustomerID
                                }
                            }
                        }
                        iscMashup.callMashup(this,"getLastViewedItems",lastViewedInput,{showMask:false})
                            .then(function(controllerData){
                                this.ui.loadingLastViewed = false;
                                this.ui.lastViewedItemsLoaded = true;
                            }.bind(this),function(){
                                this.ui.loadingLastViewed = false;
                                this.ui.lastViewedItemsLoaded = true;
                                this.ui.lastViewedItemsNotAvailable = true;
                            }.bind(this));
                    }
                }
                
                if(this.ui.hasPermissionForToViewKeywordsSearched) {
                	this.getItemKeywordSearchList();
                }
            },
            
            /**
			 * @description Method to fetch the paginated list of interested products
			 */
            uiGetPaginatedLastViewedItems : function (paginationObj){
      	      this.uiGetNextRecordsForCustomerProfileTabs(paginationObj,this.model.itemsViewed,'handleGetPaginatedLastViewedItems','LastViewed');
            },
          
            /**
			 * @description Callback handler for pagination in interested products view
			 */
            handleGetPaginatedLastViewedItems : function(initindex,displayType,data){
             	
             	var apiOutput = iscMashup.getMashupOutput(data,"getPaginatedWishListItems");
             	var itemList = [];
             	var itemList = apiOutput.ItemList.Item;
             	var itemsViewed = [];
             	//this.ui.loadingWishlist = false;
             	this.ui.loadingLastViewed = false;
             	itemsViewed = this.model.itemsViewed.ItemList.Item;
             	for(var i = 0; i < itemList.length; i++){
             		itemsViewed[initindex] = itemList[i];
               	initindex++;
             }
             if(displayType == 'LIST'){
             	 this.ui.noOfLastViewedItemsToshow = this.ui.noOfLastViewedItemsToshow + itemList.length;
             }
             },    
             
            /**
             * @description This method is used to fetch item keywords searched by customer.
             */
            getItemKeywordSearchList:function() {
            	
            		if(!this.ui.itemSearchKeywordsLoaded) {
            			
            			this.ui.loadingItemSearchKeywords = true;
            			var getItemKeywordSearchListInput = {
            					SearchTerm:{
            						Customer:{
            							CustomerKey:this.model.customerDetails.Customer.CustomerKey,
            							CustomerID:this.model.customerDetails.Customer.CustomerID
            						}
            					}
            			};
            			
            			console.log("getItemKeywordSearchList is - ",getItemKeywordSearchListInput);
	    	            	iscMashup.callMashup(this,"getItemKeywordSearchList",getItemKeywordSearchListInput,{showMask:false})
	    	            	.then(function(controllerData){
	    	            		this.ui.loadingItemSearchKeywords = false;
	    	            		this.ui.itemSearchKeywordsLoaded = true;
	    	            		this.model.itemKeywordSearchList = iscMashup.getMashupOutput(controllerData,"getItemKeywordSearchList");
	    	            		console.log("itemKeywordSearchList - ",this.model.itemKeywordSearchList);
	    	            	}.bind(this),function(){
	    	            		console.log("Error while getting search term list");
	    	            		this.ui.itemSearchKeywordsLoaded = true;
	    	            		this.ui.loadingItemSearchKeywords = false;
	    	            		this.ui.itemSearchKeywordsNotAvailable = true;
	    	                 }.bind(this));
            			
            		}
            	
            },
            
            /**
             * @description This method is used to find products based on keywords
             * 
             * @param {String} itemKeyword - contains item keyword value clicked
             */
            uiSearchProductsByKeyword:function(itemKeyword) {
    				iscState.goToState('ordercapture',{action:'SCAN',input:itemKeyword, flowName:"CLIENTELING",customerInfo:this.model.customerDetails},{});
            },
            
            
        /**
		 * @description UI Method to fetch product recommendations for customer.
		 */
        uiGetRecommendedItemList : function(){
         
          	var pageSize = 3;
          	if (iscMedia.isMediaEnabled("lte-768")) {
          		pageSize = this.ui.noOfRecommendedItemsToshow;
 		    }else if(!iscMedia.isMediaEnabled("lte-768") && (this.ui.DisplayType === 'LIST')){
 		    	   pageSize = 8;
 		    	   this.ui.noOfRecommendedItemsToshow = 8; 
 		    }
          	
        	 if(iscResourcePermission.hasPermission('WSC000048')){
                 if(!this.ui.recommendedItemsLoaded){
                     this.ui.loadingRecommendations = true;
                     var mashupArray = [];
                     var last10OrderLines = {
                         OrderLine:{
                             Order:{
                                 BillToID:this.model.customerDetails.Customer.CustomerID
                             }
                         }
                     }

                     mashupArray.push(iscMashup.getMashupRefObj(this,'getCustomerLast10PurchasedItems',last10OrderLines));
                     iscMashup.callMashups(this,mashupArray,{showMask:false})
                         .then(function(controllerData){
                             var orderLineList = iscMashup.getMashupOutput(controllerData,"getCustomerLast10PurchasedItems");
                             var recommendationsInput = iscRecommendations.getRecommendationsInputFromOrderLineList(orderLineList,10);
                             recommendationsInput.Recommendations.pageSize = pageSize;
                             this.getRecommendedItems(recommendationsInput);
                         }.bind(this),angular.noop);
                 }
             }
        },
        
        /**
		 * @description Method to fetch the paginated list of recommended products
		 */
        
        uiGetPaginatedRecommendedItemList : function (paginationObj){
        	    this.uiGetNextRecordsForCustomerProfileTabs(paginationObj,this.model.itemsRecommended,'handleGetPaginatedRecommendedItems','RecommendedItems');
        },
        
        /**
		 * @description Callback handler for pagination in recommendations view
		 */
        
	     handleGetPaginatedRecommendedItems : function(initindex,displayType,data){
         	
         	var apiOutput = iscMashup.getMashupOutput(data,"getPaginatedWishListItems");
         	var itemList = [];
         	var itemList = apiOutput.ItemList.Item;
         	var itemsRecommended = [];
         	//this.ui.loadingWishlist = false;
         	this.ui.loadingRecommendations = false;
         	itemsRecommended = this.model.itemsRecommended.ItemList.Item;
         	for(var i = 0; i < itemList.length; i++){
         		itemsRecommended[initindex] = itemList[i];
           	initindex++;
         }
         if(displayType == 'LIST'){
         	 this.ui.noOfRecommendedItemsToshow = this.ui.noOfRecommendedItemsToshow + itemList.length;
         }
         },    

        
        uiGetNextRecordsForCustomerProfileTabs : function(paginationObj,dataModel,callBackHandler,tab){
        	
          	var itemList = [];
         	itemList = dataModel.ItemList.Item;
         	len = dataModel.ItemList.TotalItemList;
         	var pageSize = 3;
         	
         	var pageNoToShow = null;
         	
	        	if(paginationObj.Page.displayType =='CAROUSEL'){
		        	if(!iscCore.isVoid(paginationObj.Page.newValue) && !iscCore.isVoid(paginationObj.Page.oldValue)){
		             	 pageNoToShow = (paginationObj.Page.newValue) + 1;
		             	 pageSize = 3;
	        	    }
		        	  if(tab =='OpenCarts'){
		        	     	pageSize = pageSize -1 ;
		         	}
	        	}
	        	else if(paginationObj.Page.displayType =='LIST'){
	        		  pageSize = 5;
	        	    if(!iscMedia.isMediaEnabled("lte-768") && (this.ui.DisplayType === 'LIST')){
	   		    	   pageSize = 8;
	   		    }
	        	   /* if(tab =='OpenCarts'){
	        	     	pageSize = pageSize -1 ;
	         	}*/
	        		if(!iscCore.isVoid(paginationObj.Page.noOfProductsShown)){
	        			if(paginationObj.Page.noOfProductsShown < len){
	        				 pageNoToShow = (paginationObj.Page.noOfProductsShown/pageSize) + 1;
	        			}
	        		}
	        	}
	        	
        	   
        	    var initindex = (pageNoToShow * pageSize) - (pageSize) ;
         	var endindex = (pageNoToShow * pageSize) - 1 ;
         	
         	 if((len-1) < endindex){
             	endindex = len - 1;
             }
         	 
         	 var apiInput = {};
         	 
         	if(!iscCore.isVoid(pageNoToShow) && iscCore.isVoid(itemList[initindex].PrimaryInformation)){
         		
         		 /* prepare the input for getCompleteItemList api to fetch the details */
                 
         		  apiInput.Item = {};
         		  apiInput.Item.ComplexQuery={};
         		  apiInput.Item.ComplexQuery.Or={};
         		  apiInput.Item.ComplexQuery.Or.Exp=[];
         		  if(tab == 'OpenCarts'){
         			 apiInput.Item.OCartItemList = {};
         			 apiInput.Item.OCartItemList.ItemList = {};
           		     apiInput.Item.OCartItemList.ItemList.Item = [];
   			      }
         		var j = 0;
         		for(var i=initindex; i <= endindex ; i++){
         		
  		        apiInput.Item.ComplexQuery.Or.Exp[j]={};
  		        apiInput.Item.ComplexQuery.Or.Exp[j].Name= 'ItemID';
  		        apiInput.Item.ComplexQuery.Or.Exp[j].Value= itemList[i].ItemID;
  			   
         		
  			    if(tab == 'OpenCarts'){
  			     	apiInput.Item.OCartItemList.ItemList.Item[j]={}; 
  			     	apiInput.Item.OCartItemList.ItemList.Item[j] = angular.copy(itemList[i]);
  			    }
  			    
  			    j++;
         		} 
         		
         	apiInput.Item.pageSize = j;
            
           if(tab == 'RecommendedItems'){
        	      this.ui.loadingRecommendations = true; 
           }else if(tab == 'Wishlist'){
        	      this.ui.loadingWishlist = true; 
           }else if(tab == 'LastViewed'){
        	   this.ui.loadingLastViewed = true; 
           }else if(tab == 'OpenCarts'){
        	   this.ui.loadingOpenCarts = true; 
           }
           
        	  if(tab !='OpenCarts'){
           	   iscMashup.callMashup(this,"getPaginatedWishListItems",apiInput,{}).then(this[callBackHandler].bind(this,initindex,paginationObj.Page.displayType),angular.noop);
        	  }else{
        		  /* prepare the input*/
        		  iscMashup.callMashup(this,"getPaginatedOpenCartListItems",apiInput,{}).then(this[callBackHandler].bind(this,initindex,paginationObj.Page.displayType),angular.noop);
        		  
        	  }

         	}
         
        	    
        },
        
        /**
		 * @description Method to fetch customer's wishlist
		 */
        
        uiGetWishListItems: function(){
            	
         	var pageSize = 3;
          	if (iscMedia.isMediaEnabled("lte-768")) {
          		pageSize = this.ui.noOfWishListItemsToshow;
 		    }else if(!iscMedia.isMediaEnabled("lte-768") && (this.ui.DisplayType === 'LIST')){
 		    	   pageSize = 6;
 		    	   this.ui.noOfWishListItemsToshow = 6; 
 		    }
        	
        	 if(iscResourcePermission.hasPermission('WSC000077')){
                 if(!this.ui.wishlistItemsLoaded){
                     this.ui.loadingWishlist = true;
                     
                        var wishlistInput = {
                    		  WishList:{
                    			  pageSize:pageSize,
                                 Customer:{
                                     CustomerKey:this.model.customerDetails.Customer.CustomerKey,
                                     CustomerID:this.model.customerDetails.Customer.CustomerID
                                 }
                             }
                         }
                     
                         iscMashup.callMashup(this,"getWishListItems",wishlistInput,{showMask:false})
                             .then(function(controllerData){
                                 this.ui.loadingWishlist = false;
                                 this.ui.wishlistItemsLoaded = true;
                             }.bind(this),function(){
                                 this.ui.loadingWishlist = false;
                                 this.ui.wishlistItemsLoaded = true;
                                 this.ui.wishlistNotAvailable = true;
                             }.bind(this));
                 }
             }
        	
        },
        
        /**
		 * @description Method to fetch customer's online cart
		 */
        
        uiGetOnlineCartListForCustomer : function(){
        	
        	       var pageSize = 2;
        	    
		        	if (iscMedia.isMediaEnabled("lte-768")) {
		        		pageSize = this.ui.noOfCartItemsToshow;
			    }else if(!iscMedia.isMediaEnabled("lte-768") && (this.ui.DisplayType === 'LIST')){
			    	   pageSize = 6;
			    	   this.ui.noOfCartItemsToshow = 6; 
		   		}
            	
	        	  if(!this.ui.openCartListLoaded){
	        		  this.ui.loadingOpenCarts = true;
	        	  }
        	  
    	        var openCartlistInput = {
        		  CartList:{
        			  pageSize:pageSize,
                     Customer:{
                         CustomerKey:this.model.customerDetails.Customer.CustomerKey,
                         CustomerID:this.model.customerDetails.Customer.CustomerID
                     }
                 }
             }
        	 
    	        iscMashup.callMashup(this,"getOnlineCartListForCustomer",openCartlistInput,{showMask:false})
                .then(function(controllerData){
                	    //this.model.openCartList = angular.copy(this.model.itemsRecommended)
                    this.model.openCartList.CartList.Cart[0].ItemList.TotalItemList= this.model.openCartList.CartList.Cart[0].ItemList.TotalNumberOfRecords;
                    this.ui.loadingOpenCarts = false;
                    this.ui.openCartListLoaded = true;
                    
                    /*Read the pageSize and set the cartlist o/p*/
                    this.model.openStoreCartList = angular.copy(this.model.openCartList);
                    var storeItemList = this.model.openCartList.CartList.Cart[0].StoreItemList.Item;
                    for(var i=0; i< storeItemList.length ;i++){
                    	this.model.openStoreCartList.CartList.Cart[0].ItemList.Item[i] = 	this.model.openStoreCartList.CartList.Cart[0].StoreItemList.Item[i];
                    }
                    delete this.model.openStoreCartList.CartList.Cart[0].StoreItemList;
                   /* */
                    
                    
                }.bind(this),function(){
                    this.ui.loadingOpenCarts = false;
                    this.ui.openCartListLoaded = true;
                    this.ui.openCartsNotAvailable = true;
                }.bind(this));
    	        
        },
        
        /**
		 * @description Method to fetch customer's cart list items on pagination
		 */
        
	      uiGetPaginatedCartListItems : function (paginationObj){
		       this.uiGetNextRecordsForCustomerProfileTabs(paginationObj,this.model.openCartList.CartList.Cart[0],'handleGetPaginatedOpenCartItems','OpenCarts');
	      },
	      
	      
	        /**
			 * @description Callback handler for  cart list items pagination calls
			 */
	      
	      handleGetPaginatedOpenCartItems:function(initindex,displayType,data){
	    	  
	    	 	var apiOutput = iscMashup.getMashupOutput(data,"getPaginatedOpenCartListItems");
	    	 	var itemList = apiOutput.ItemList.Item;
	    	 	
	    	 	var storeCartList = this.model.openCartList.CartList.Cart[0].ItemList.Item;
	    	 	
	    	     for(var i=0; i < itemList.length; i++){
	    	    	    var item = itemList[i];
	    	    	    if(item.ItemID == storeCartList[initindex].ItemID && item.UnitOfMeasure == storeCartList[initindex].UnitOfMeasure){
	    	    	     	storeCartList[initindex] = angular.copy(item);
	    	    	     	initindex++;
	    	    	    }
	    	    	 
	    	     }
	    	    
	    	   	this.ui.loadingOpenCarts = false;
	        	
	        if(displayType == 'LIST'){
	        	 this.ui.noOfCartItemsToshow = this.ui.noOfCartItemsToshow + itemList.length;
	        }
	        
	      },
          
	        /**
			 * @description Handler for Add All to StoreCart button
			 */
	      
        uiHandleAddAllToStoreCart : function(){
          
        	   if(iscCore.isVoid(this.model.customerDraftOrder.Order.OrderHeaderKey)){
          		/*create order and update the customerDraftOrder model */
          		var createOrderInput = this.prepareAddToStoreCartInput();
          		
          		/* create NotifyCart Status service input */
          		createOrderInput.Order.notifyCartStatusInput = this.prepareNotifyCartStatusInput('All',{}); 
          		iscMashup.callMashup(this,"onlinecart_createOrder",createOrderInput,{}).then(function(data){
					var orderModel = iscMashup.getMashupOutput(data,"onlinecart_createOrder");
					this.model.customerDraftOrder = orderModel;
	              	}.bind(this),angular.noop);
          		
          	}else{
          		/* modify the existing draft order */
          		var modifyFulfillmentOptionsInput = this.prepareAddToStoreCartInput();
          		modifyFulfillmentOptionsInput.Order.notifyCartStatusInput = this.prepareNotifyCartStatusInput('All',{});
          		iscMashup.callMashup(this,"onlinecart_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(function(data){
					var orderModel = iscMashup.getMashupOutput(data,"onlinecart_modifyFulfillmentOptions");
					this.model.customerDraftOrder = orderModel;
					this.ui.openCartListLoaded= false;
					this.model.openCartList={};
					this.uiGetOnlineCartListForCustomer();
	              	}.bind(this),angular.noop);
          	}
        
        },
        
        /**
		 * @description method which prepares the input for NotifyCartStatus service 
		 */
        
        prepareNotifyCartStatusInput : function(pullType,matchingOnlineCartItem){
        	
        	var notifyCartStatusInput = {};
     	   notifyCartStatusInput.CartStatus = {};
     	   notifyCartStatusInput.CartStatus.ItemList = {};
     	   notifyCartStatusInput.CartStatus.ItemList.Item = [];
     	  notifyCartStatusInput.CartStatus.CartId = this.model.openStoreCartList.CartList.Cart[0].CartID;
	        	if(pullType=='oneItem'){
		         	   notifyCartStatusInput.CartStatus.ItemList.Item[0] = {};  
		         	   notifyCartStatusInput.CartStatus.ItemList.Item[0] = matchingOnlineCartItem;  
		         	   notifyCartStatusInput.CartStatus.ItemList.TotalNumberOfRecords ="1";  

	        	}else if(pullType=='All'){
	         	   notifyCartStatusInput.CartStatus.ItemList.Item =this.model.openStoreCartList.CartList.Cart[0].ItemList.Item;  
	        	       notifyCartStatusInput.CartStatus.ItemList.TotalNumberOfRecords =this.model.openStoreCartList.CartList.Cart[0].ItemList.Item.length;  
		
	        	}
        	   
        	 
        	   return notifyCartStatusInput;
        		   
        },
        
        /**
		 * @description Method which prepares the input for createOrder/modifyFulfillmentOptions when Add All To Store Cart button is clicked
		 */
        
        prepareAddToStoreCartInput : function(){
        	
          	var addToCartInput = {};
         	addToCartInput.Order = {};
         	
         	if(iscCore.isVoid(this.model.customerDraftOrder.Order.OrderHeaderKey)){
         		addToCartInput.Order.EntryType = iscAppContext.getFromContext('storeEntryType');
    		        addToCartInput.Order.DocumentType = iscAppContext.getFromContext('salesOrderDocType');
	            if(!iscCore.isVoid(this.model.customerDetails)){
	            	this.addCustomerInfoToCreateOrderInput(addToCartInput);
	            }	
         	}else{
         		addToCartInput.Order.OrderHeaderKey =this.model.customerDraftOrder.Order.OrderHeaderKey;
         	}
            
         	addToCartInput.Order.OrderLines={};
         	addToCartInput.Order.OrderLines.OrderLine = [];
         	var itemList = this.model.openCartList.CartList.Cart[0].ItemList.Item;
         	
         	for(var i=0; i < itemList.length; i++){
         		var item = itemList[i];
         		addToCartInput.Order.OrderLines.OrderLine[i] = {
    					Item: {
    						ItemID: item.ItemID,
    						UnitOfMeasure: item.UnitOfMeasure,
    						ProductClass: item.ProductClass
    					},
    					
    			};
         		addToCartInput.Order.OrderLines.OrderLine[i].OrderLineTranQuantity = {};
         		if(iscCore.isVoid(item.OrderedQuantity)){
         			
         			addToCartInput.Order.OrderLines.OrderLine[i].OrderLineTranQuantity.OrderedQty = 1;
         		}else{
         			addToCartInput.Order.OrderLines.OrderLine[i].OrderLineTranQuantity.OrderedQty = item.OrderedQuantity;
         		}
         		
         		this.stampDeliveryMethodOnOLineForStore(addToCartInput.Order.OrderLines.OrderLine[i],item);
         	}
         	
			return addToCartInput;
        	
        },
        
        /**
		 * @description Method which prepares the input for createOrder/modifyFulfillmentOptions when Add All To Store Cart button is clicked
		 */
        
        stampDeliveryMethodOnOLineForStore : function(oLine,itemDetailsFromOnlineCart){
        
        	var delMethod = itemDetailsFromOnlineCart.CartDeiveryMethod;
        	if(!iscCore.isVoid(delMethod)){
        		
        		if(delMethod == 'CARRY'){
            		oLine.DeliveryMethod = 'CARRY';
            	}else if(delMethod == 'PICK'){
            		
                if(iscCore.isVoid(itemDetailsFromOnlineCart.ShipNode)){
                	 oLine.DeliveryMethod = 'CARRY';
            		}else{
            			oLine.DeliveryMethod='PICK';
            			oLine.ShipNode = itemDetailsFromOnlineCart.ShipNode;
            		}
            	}
            	else if(delMethod == 'SHP'){
            		oLine.DeliveryMethod='SHP';
            	}
        		
        	}else{
        		oLine.DeliveryMethod='CARRY';
        	}
        
        },
        
        /**
		 * @description Method which stamps the customer info on createOrder input.
		 */
        
        addCustomerInfoToCreateOrderInput : function(addToCartInput){
         	
	   	    var customerInfo = this.model.customerDetails;
	        var customerModel = customerInfo;
	        addToCartInput.Order.BillToID = customerInfo.Customer.CustomerID; 
	        if(!iscCore.isVoid(customerInfo.Customer.DisplayCustomerAddress)){
	         addToCartInput.Order.PersonInfoShipTo={};
	         addToCartInput.Order.PersonInfoShipTo = angular.copy(customerInfo.Customer.DisplayCustomerAddress);
	             addToCartInput.Order.PersonInfoBillTo={};
	             addToCartInput.Order.PersonInfoBillTo = angular.copy(customerInfo.Customer.DisplayCustomerAddress);
	        }
	
	        if(customerModel.Customer.CustomerType === '02' || (customerModel.Customer.CustomerContactList &&  customerModel.Customer.CustomerContactList.CustomerContact && customerModel.Customer.CustomerContactList.CustomerContact.length === 1)){
	        addToCartInput.Order.CustomerContactID = customerModel.Customer.CustomerContactList.CustomerContact[0].CustomerContactID;
	        addToCartInput.Order.CustomerFirstName = customerModel.Customer.CustomerContactList.CustomerContact[0].FirstName;
	        addToCartInput.Order.CustomerLastName = customerModel.Customer.CustomerContactList.CustomerContact[0].LastName;
	        addToCartInput.Order.CustomerEMailID = customerModel.Customer.CustomerContactList.CustomerContact[0].EmailID;
	
	        if(!iscCore.isVoid(customerInfo.addressSelected)){
	            addToCartInput.Order.CustomerZipCode = customerInfo.addressSelected.PersonInfo.ZipCode;
	           }
	        }
	        
	        return addToCartInput;
        },
   
        /**
		 * @description UI Method which handles wish list pagination.
		 */
        
        uiGetPaginatedWishLisItems : function (paginationObj){
    	      this.uiGetNextRecordsForCustomerProfileTabs(paginationObj,this.model.wishlist,'handleGetPaginatedWishListItems','Wishlist');
        },
    
        /**
		 * @description Callback handler for wish list pagination.
		 */
        
        handleGetPaginatedWishListItems : function(initindex,displayType,data){
        	
        	var apiOutput = iscMashup.getMashupOutput(data,"getPaginatedWishListItems");
        	var itemList = [];
        	var itemList = apiOutput.ItemList.Item;
        	var wishlisItems = [];
        	this.ui.loadingWishlist = false;
        	wishlisItems = this.model.wishlist.ItemList.Item;
        	for(var i = 0; i < itemList.length; i++){
        		wishlisItems[initindex] = itemList[i];
          	initindex++;
        }
        if(displayType == 'LIST'){
        	 this.ui.noOfWishListItemsToshow = this.ui.noOfWishListItemsToshow + itemList.length;
        }
        },
            
            /**
			 * @description Method to invoke mashup for getting the recommendations.
			 * @param {Object} recommendationsInput - Input to fetch recommendations from service.
			 */
            getRecommendedItems: function(recommendationsInput){
                
                iscMashup.callMashup(this,"getRecommededItems",recommendationsInput,{showMask:false})
                    .then(function(controllerData){
                        this.ui.loadingRecommendations = false;
                        this.ui.recommendedItemsLoaded = true;
                    
                    }.bind(this),function(){
                        this.ui.loadingRecommendations = false;
                        this.ui.recommendedItemsLoaded = true;
                        this.ui.recommendationsNotAvailable = true;
                    }.bind(this));
            },
            /**
			 * @description UI Method to product details popup.
			 * @param {Object} itemDetailsInput - Input to show product details popup.
			 */
            uiShowProductDetails : function(itemDetailsInput){
                console.log(itemDetailsInput);
                var customerID = this.model.customerDetails.Customer.CustomerID;
                var emailID = "";
                if(this.model.customerDetails.Customer.CustomerContactList 
                   && this.model.customerDetails.Customer.CustomerContactList.CustomerContact[0] 
                   && this.model.customerDetails.Customer.CustomerContactList.CustomerContact[0].EmailID)
                {
                    emailID = this.model.customerDetails.Customer.CustomerContactList.CustomerContact[0].EmailID;
                }
                var that = this;
                var resolveData = {
                    modalInput : function(){
                        return {
                            ItemDetails:{
                                ItemID:itemDetailsInput.Item.ItemID,
                                UnitOfMeasure:itemDetailsInput.Item.UnitOfMeasure
                            },
                            CustomerInfo:that.model.customerDetails,
                            OrderInfo:that.model.customerDraftOrder,
                            CustomerDetails:{
                                CustomerID:customerID,
                                EmailID:emailID
                            }
                        }
                    }
                }
                var carouselContext = null;
                if(!iscCore.isVoid(itemDetailsInput.Item.CarouselContext)){
                 	carouselContext=itemDetailsInput.Item.CarouselContext;
                }
                
                // modal options for custom modal config
                var modalOptions = {};
                iscModal.openModal("store.views.customer.customer-profile.product-details",resolveData,modalOptions)
                    .then(function (callBackData){
                    	if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
    						that.uihandleAddTocart.call(that,callBackData.data,carouselContext);
    					}
                    },angular.noop);
                
                
            },
            
            /**
	    		 * @description ui method which handles Add to cart scenarios.
	    		 */
            
            uihandleAddTocart:function(itemDetails,carouselContext){
            	    
            	    if(!iscCore.isVoid(carouselContext) && carouselContext=='OpenCarts'){
            	    	 var matchingOnlineCartItem = this.getMatchingOnlineCartItemDetails(itemDetails,this.model.openStoreCartList.CartList.Cart[0].ItemList);
            	    }
            	    var mashupTocall = null;
            	    
              	if(iscCore.isVoid(this.model.customerDraftOrder.Order.OrderHeaderKey)){
              		/*create order and update the customerDraftOrder model */
              		var createOrderInput = this.prepareCreateOrderInput(itemDetails,carouselContext,matchingOnlineCartItem);
              		createOrderInput.Order.notifyCartStatusInput = this.prepareNotifyCartStatusInput('oneItem',matchingOnlineCartItem); 
              		 if(!iscCore.isVoid(carouselContext) && carouselContext=='OpenCarts'){
              			mashupTocall = 'onlinecart_createOrder';
              		 }else{
              			mashupTocall = 'createOrder';
              		 }
              		iscMashup.callMashup(this,mashupTocall,createOrderInput,{}).then(function(data){
	    					var orderModel = iscMashup.getMashupOutput(data,mashupTocall);
	    					this.model.customerDraftOrder = orderModel;
	    					
	    					if(!iscCore.isVoid(carouselContext) && carouselContext=='OpenCarts'){
		    					this.ui.openCartListLoaded= false;
		    					this.model.openCartList={};
		    					this.uiGetOnlineCartListForCustomer();
	    					}
    	              	}.bind(this),angular.noop);
              		
              	}else{
              		/* modify the existing draft order */
              		var modifyFulfillmentOptionsInput = this.prepareModifyFulfillmentOptionsInput(itemDetails,carouselContext,matchingOnlineCartItem);
              		if(!iscCore.isVoid(carouselContext) && carouselContext=='OpenCarts'){
              			modifyFulfillmentOptionsInput.Order.notifyCartStatusInput = this.prepareNotifyCartStatusInput('oneItem',matchingOnlineCartItem);
              			mashupTocall = 'onlinecart_modifyFulfillmentOptions';
              		 }else{
              			mashupTocall = 'modifyFulfillmentOptions';
              		 }
              		iscMashup.callMashup(this,mashupTocall,modifyFulfillmentOptionsInput,{}).then(function(data){
    					var orderModel = iscMashup.getMashupOutput(data,mashupTocall);
    					this.model.customerDraftOrder = orderModel;
    					
    					if(!iscCore.isVoid(carouselContext) && carouselContext=='OpenCarts'){
	    					this.ui.openCartListLoaded= false;
	    					this.model.openCartList={};
	    					this.uiGetOnlineCartListForCustomer();
    					}
    					
    	              	}.bind(this),angular.noop); 
              	}
            },
            
            /**
	    		 * @description method which determines the matching line from the cart with the selected item in the UI
	    		 */
            
            getMatchingOnlineCartItemDetails : function(itemDetails,itemList){
            	  //this.model.openStoreCartList.CartList.Cart[0].ItemList
	            	var ItemArray = itemList.Item;
	            	var matchingOnlineCartItem = null;
	            	for(var i=0; i< ItemArray.length; i++){
	            	 var item = ItemArray[i];
	            	 if((itemDetails.itemDetails.Item.ItemID == item.ItemID) && (itemDetails.itemDetails.Item.OrganizationCode == item.OrganizationCode) && (itemDetails.itemDetails.Item.UnitOfMeasure == item.UnitOfMeasure)){
	            		 matchingOnlineCartItem = angular.copy(item);
	            		 break;
	             }
	            	}
	            	return matchingOnlineCartItem;
            },
            
            prepareModifyFulfillmentOptionsInput:function(itemDetails,carouselContext,matchingOnlineCartItem){
            	    var addToCartInput = {};
             	addToCartInput.Order = {};
             	addToCartInput.Order.OrderHeaderKey =this.model.customerDraftOrder.Order.OrderHeaderKey;
             	
             	addToCartInput.Order.OrderLines={};
				addToCartInput.Order.OrderLines.OrderLine = [{
						Item: {
							ItemID: itemDetails.itemDetails.Item.ItemID,
							UnitOfMeasure: itemDetails.itemDetails.Item.UnitOfMeasure,
							ProductClass: itemDetails.itemDetails.Item.PrimaryInformation.DefaultProductClass
						},
						OrderLineTranQuantity:{
							OrderedQty : 1
						}
				}];
				
				 if(!iscCore.isVoid(carouselContext) && carouselContext=='OpenCarts'){
					 if(!iscCore.isVoid(matchingOnlineCartItem.OrderedQuantity)){
						 addToCartInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
						 addToCartInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.OrderedQty= matchingOnlineCartItem.OrderedQuantity
					 
					 }
				    this.stampDeliveryMethodOnOLineForStore(addToCartInput.Order.OrderLines.OrderLine[0],matchingOnlineCartItem);
				 }else{
					this.stampDeliveryMethodOnTheOrderLine(addToCartInput,itemDetails.availabilityInfo);
				 }
				 //this.stampDeliveryMethodOnTheOrderLine(addToCartInput,itemDetails.availabilityInfo);
				return addToCartInput;
				
            },
            
            prepareCreateOrderInput:function(itemDetails,carouselContext,matchingOnlineCartItem){
	              	var addToCartInput = {};
	             	addToCartInput.Order = {};
	            	
					addToCartInput.Order.EntryType = iscAppContext.getFromContext('storeEntryType');
            		    addToCartInput.Order.DocumentType = iscAppContext.getFromContext('salesOrderDocType');
                    if(!iscCore.isVoid(this.model.customerDetails)){
                        var customerInfo = this.model.customerDetails;
                        var customerModel = customerInfo;
                        addToCartInput.Order.BillToID = customerInfo.Customer.CustomerID; 
                        if(!iscCore.isVoid(customerInfo.Customer.DisplayCustomerAddress)){
                         addToCartInput.Order.PersonInfoShipTo={};
                         addToCartInput.Order.PersonInfoShipTo = angular.copy(customerInfo.Customer.DisplayCustomerAddress);
                             addToCartInput.Order.PersonInfoBillTo={};
                             addToCartInput.Order.PersonInfoBillTo = angular.copy(customerInfo.Customer.DisplayCustomerAddress);
                        }

                        if(customerModel.Customer.CustomerType === '02' || (customerModel.Customer.CustomerContactList &&  customerModel.Customer.CustomerContactList.CustomerContact && customerModel.Customer.CustomerContactList.CustomerContact.length === 1)){
                        addToCartInput.Order.CustomerContactID = customerModel.Customer.CustomerContactList.CustomerContact[0].CustomerContactID;
                        addToCartInput.Order.CustomerFirstName = customerModel.Customer.CustomerContactList.CustomerContact[0].FirstName;
                        addToCartInput.Order.CustomerLastName = customerModel.Customer.CustomerContactList.CustomerContact[0].LastName;
                        addToCartInput.Order.CustomerEMailID = customerModel.Customer.CustomerContactList.CustomerContact[0].EmailID;

                        if(!iscCore.isVoid(customerInfo.addressSelected)){
                            addToCartInput.Order.CustomerZipCode = customerInfo.addressSelected.PersonInfo.ZipCode;
                           }
                        }
                    }
                    
                 	addToCartInput.Order.OrderLines={};
					addToCartInput.Order.OrderLines.OrderLine = [{
							Item: {
								ItemID: itemDetails.itemDetails.Item.ItemID,
								UnitOfMeasure: itemDetails.itemDetails.Item.UnitOfMeasure,
								ProductClass: itemDetails.itemDetails.Item.PrimaryInformation.DefaultProductClass
							},
							OrderLineTranQuantity:{
								OrderedQty : 1
							}
					}];
					
					 if(!iscCore.isVoid(carouselContext) && carouselContext=='OpenCarts'){
						 if(!iscCore.isVoid(matchingOnlineCartItem.OrderedQuantity)){
							 addToCartInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
							 addToCartInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.OrderedQty= matchingOnlineCartItem.OrderedQuantity
						 }
						this.stampDeliveryMethodOnOLineForStore(addToCartInput.Order.OrderLines.OrderLine[0],matchingOnlineCartItem);
					 }else{
						this.stampDeliveryMethodOnTheOrderLine(addToCartInput,itemDetails.availabilityInfo);
					 }
					return addToCartInput;
					
            },
            
            
            stampDeliveryMethodOnTheOrderLine:function(addToCartInput,availabilityInfo){
            	  if(availabilityInfo.availability.itemCarryAvailable && availabilityInfo.availability.itemAvailableQty > 0){
            		  /* stamp carry as the del method on the orderline */
            		  addToCartInput.Order.OrderLines.OrderLine[0].DeliveryMethod = 'CARRY';
            	  }else if(availabilityInfo.availability.itemShpAvailable){
            		  /* stamp Ship as the del method on the orderline */
            		  addToCartInput.Order.OrderLines.OrderLine[0].DeliveryMethod = 'SHP';
            		  addToCartInput.Order.OrderLines.OrderLine[0].EarliestShipDate = availabilityInfo.availability.itemShpAvailableDate;
      			  addToCartInput.Order.OrderLines.OrderLine[0].ReqShipDate = availabilityInfo.availability.itemShpAvailableDate;
            	  }
            },
            
            /**
			 * @description UI Method to navigate to customer's order history page .
			 */
			uiGotoHistoryPage : function(){
                var customerProfileDetails = {};
                customerProfileDetails.customerDetails = iscWizard.getWizardPageInput().customerDetails;
                iscWizard.gotoCustomPage('orderhistory', customerProfileDetails, {});
            },
            /**
			 * @description UI Method to close the customer profile wizard.
			 */
			uiCloseWizard: function () {
				iscWizard.closeWizard();
			},
			
			
			uiopenAppointmentList:function(){
			
				iscState.goToState("appointmentlist", {input:{"customerDetails": this.model.customerDetails}}, {});
			},
			
            
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.customer.customer-profile.customer-profile-details
			 *@methodname uiAddNotes
			 *@description Opens a modal window to add notes to the customer profile. On successful addition of a note, the current note count is shown on the customer profile screen.
			 */
			uiAddNotes: function() {
				var that = this;
				var customerModel = {Customer:{CustomerKey:this.model.customerDetails.Customer.CustomerKey}};   
				var commentsModalInput = {
						modalInput: function(){
							return customerModel;
						}
				};
				
				iscModal.openModal('store.views.customer.notes.customernotes',commentsModalInput,{}).then(function(callBackData){
					that.model.customerDetails.Customer.NoteList.TotalNumberOfRecords = callBackData.NoteList.TotalNumberOfRecords;
				},angular.noop);
			},
            
            uiCheckout:function(){
                console.log("Checking out order from customer profile");
                iscState.goToState('ordercapture',{action:"QUICKCHECKOUT",orderModel:this.model.customerDraftOrder,customerInfo:this.model.customerDetails},{});
            }
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.customer.customer-profile.customer-profile-finish
 *@package store.views.customer.customer-profile
 *@class customer-profile-finish
 *@description Finishes the Customer profile wizard.
 *
 */
angular.module('store').controller('store.views.customer.customer-profile.customer-profile-finish',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscState',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams,iscState) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  		},
  		/**
         * @description Method to initialize of the screen.
         */
        initialize : function(){

          if(iscWizard.getWizardAction()==="CLOSE"){
            //iscState.goToPreviousState();
            iscState.goToState('/home',{},{});
          }

        }
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.customer.customer-profile.customer-profile-init
 *@package store.views.customer.customer-profile
 *@class customer-profile-init
 *@description Initializes the Customer profile wizard.
 *
 */

angular.module('store').controller('store.views.customer.customer-profile.customer-profile-init', ['$scope', '$rootScope', 'iscWizard', 'iscMashup', 'iscResourcePermission', 'iscStateParams',"iscDateFilter", "amSubtractFilter","iscRule", 
    function ($scope, $rootScope, iscWizard, iscMashup, iscResourcePermission, iscStateParams, iscDateFilter, amSubtractFilter,iscRule) {
        iscWizard.initializeWizardPage($scope, {
            model: {
                
            }, 
            mashupRefs: [
                /**
                 *@description This mashup is used to get customer details by calling getCustomerDetials API.
                 */
                {
                    mashupRefId: "getCustomerDetails",
					mashupId: "store.views.customer.customer-profile.getCustomerDetails"
                }
  		    ],

            ui: {

            },
            /**
			 * @description Method to initialize of the screen.
			 */
            initialize: function () {
                
                
                var customerInput = iscStateParams.params.input;
                var customerInput = {
                    Customer:{
                        CustomerKey:customerInput.Customer.CustomerKey,
                        CustomerID:customerInput.Customer.CustomerID,
                        OrganizationCode:customerInput.Customer.OrganizationCode
                    }
                    
                };
                var mashupArray = [];
                
                mashupArray.push(iscMashup.getMashupRefObj(this,'getCustomerDetails',customerInput));
				iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
            },
            /**
			 * @description Method called as a callback handler for init mashup calls.
			 * @param {Object} controllerData - Output of the mashup.
			 */
            handleInitApiCalls : function(controllerData){
                var customerProfileDetails = {};
                customerProfileDetails.customerDetails = iscMashup.getMashupOutput(controllerData,"getCustomerDetails");
                iscWizard.startCustomWizard('customerdetails', customerProfileDetails, {});
            },
            
            
        });
	}
]);
/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
* (C) Copyright IBM Corp. 2017 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has beendeposited with the U.S. Copyright Office. 
******************************************************************************/
/**
 *@iscdoc viewinfo
 *@viewname store.views.customer.customer-profile.customer-profile-order-history
 *@package store.views.customer.customer-profile
 *@class customer-profile-order-history
 *@description Displays the orders placed by the customer along with the images of recommended products and purchased products for every order.
 *
 */
angular.module('store').controller('store.views.customer.customer-profile.customer-profile-order-history', ['$scope', '$rootScope', 'iscWizard', 'iscMashup', 'iscResourcePermission', 'iscStateParams', 'iscDateFilter', 'amSubtractFilter','iscRule','iscOrder','iscAppContext','iscI18n','iscRecommendations','iscModal','iscState',
	function ($scope, $rootScope, iscWizard, iscMashup, iscResourcePermission, iscStateParams, iscDateFilter, amSubtractFilter,iscRule,iscOrder,iscAppContext,iscI18n,iscRecommendations,iscModal,iscState) {
		iscWizard.initializeWizardPage($scope, {
			model: {
				/**
				 *@iscdoc model
				 *@viewname store.views.customer.customer-profile.customer-profile-order-history
				 *@name customerDetails
				 *@description Stores the customer details passed as input by the customer profile wizard .
				 */
                customerDetails:{},
				/**
				 *@iscdoc model
				 *@viewname store.views.customer.customer-profile.customer-profile-order-history
				 *@name orderHistoryDetails
				 *@description Stores the customer order details passed as input by the customer profile wizard .
				 */
				orderHistoryDetails:{},
				/**
				 *@iscdoc model
				 *@viewname store.views.customer.customer-profile.customer-profile-order-history
				 *@name orderListForHistory
				 *@description Stores the output of the 'getOrderHistoryListByFilterCriteria' API call. This data is used to paint the Order History page.
				 */
				orderListForHistory:{},
                customerDraftOrder:{}
            },
			mashupRefs: [
				{
				  /**
				   *@iscdoc mashup
				   *@viewname store.views.customer.customer-profile.customer-profile-order-history
				   *@mashupid store.views.customer.customer-profile.getOrderHistoryListByFilterCriteria
				   *@mashuprefid getOrderHistoryListByFilterCriteria
				   *@modelname orderListForHistory
				   *@description Gets the orders associated with the customer based on the filter criteria provided by the user.
				   */
					mashupRefId: "getOrderHistoryListByFilterCriteria",
					mashupId: "store.views.customer.customer-profile.getOrderHistoryListByFilterCriteria",
					isPaginated: true,
					pageSize : iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					appendPath : 'OrderList.Order',
					modelName: 'orderListForHistory'
				},
				{
				  /**
				   *@iscdoc mashup
				   *@viewname store.views.customer.customer-profile.customer-profile-order-history
				   *@mashupid store.views.customer.customer-profile.getRecommendedItemList
				   *@mashuprefid getRecommededItems
				   *@description Gets the recommended products for the order selected.
				   */
					mashupRefId: "getRecommededItems",
					mashupId: "store.views.customer.customer-profile.getRecommendedItemList"
				},
                {
                    mashupRefId: "getCustomerDraftOrder",
					mashupId: "store.views.customer.customer-profile.getCustomerDraftOrder"
                }
  		    ],
			ui: {
				pageInput: "",
                showInfo:true,
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {Integer} orderListHistoryShownCount - Count of how many orders to display on the page. Defautls to 5
				*/
				orderListHistoryShownCount: 5,
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {Boolean} filterNotApplied - Flag to denote if the user has applied any filter on the page. Set to false by default and changes to true when user applies filter. When filter is applied, 'Last XX days' is not shown on the page
				*/
				filterNotApplied: true,
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {Integer} recommendationItemsImagesToShowCount - Count of how many recommended items to display on the page. Defautls to 3
				*/
				recommendationItemsImagesToShowCount: 3,
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {Integer} purchasedItemsImagesToShowCount - Count of how many purchased items to display on the page. Defautls to 3
				*/
				purchasedItemsImagesToShowCount: 3,
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {Integer} orderHistoryConfiguredAge - Number of days of order history to show and is configured as a rule in SBC application
				*/
				orderHistoryConfiguredAge: 0,
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {Boolean} showRecommendationImagesPanel - Flag to denote if the panel containing recommended products' images should be shown or not
				*/
				showRecommendationImagesPanel: true,
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {Boolean} showPurchasedProductsImagesPanel - Flag to denote if the panel containing purchased products' images should be shown or not
				*/
				showPurchasedProductsImagesPanel: false,
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {String} selectedOrderHeaderKey - Holds the OrderHeaderKey attribute of the order selected by the user on the screen
				*/
				selectedOrderHeaderKey: "",
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {String} recommendationPanelResourceId - Holds the resourceId permission to check if the user has permission to see the recommendation panel
				*/
				recommendationPanelResourceId: "WSC000048",
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {Boolean} showProductImages - Flag to hold if the show product image rule is configured or not
				*/
				showProductImages: "",
			   /**
				*@iscdoc uiattr
				*@viewname store.views.customer.customer-profile.customer-profile-order-history
				*@property {Boolean} hasRecommendationPanelPermission - Flag to hold if recommendation panel permission is present or not
				*/
				hasRecommendationPanelPermission: ""
			},
			
		   /**
			*@iscdoc viewinit
			*@viewname store.views.customer.customer-profile.customer-profile-order-history
			*@description Loads the Order History page by fetching the orders associated with the customer. Number of days to consider for Order History is read from SBC rule and mashupRefId 'getOrderHistoryListByFilterCriteria' is used to get the order history details
			*/
			initialize: function () {
				this.ui.pageInput = JSON.stringify(iscWizard.getWizardPageInput());
                this.model.customerDetails = iscWizard.getWizardPageInput().customerDetails;
                this.model.orderHistoryDetails = iscWizard.getWizardPageInput().orderHistoryDetails;
				this.ui.orderHistoryConfiguredAge = iscRule.getRuleSetValue('customerProfileOrderHistoryAge');
				if(iscRule.isRuleEnabled('ShowItemImage')) {
					this.ui.showProductImages = true;
				} else {
					this.ui.showProductImages = false;
				}
				
				this.ui.hasRecommendationPanelPermission = iscResourcePermission.hasPermission(this.ui.recommendationPanelResourceId);
				
				var orderHistoryRuleInput = iscRule.getRuleSetValue('customerProfileOrderHistoryAge');
				/*var orderHistoryInput = {
                    Order:{
                        BillToID:this.model.customerDetails.Customer.CustomerID,
						OrderDateQryType:"BETWEEN",
						FromOrderDate: iscDateFilter.getDBFromDate(amSubtractFilter(new Date(),orderHistoryRuleInput,'days')),
						ToOrderDate: iscDateFilter.getDBToDate(amSubtractFilter(new Date(),0,'days'))
                    }
                };*/
				var orderHistoryInput = {
                    Order:{
                        BillToID:this.model.customerDetails.Customer.CustomerID
                    }
                };
                iscMashup.callPaginatedMashup(this,'getOrderHistoryListByFilterCriteria',orderHistoryInput,'START',{}).then(this.handlePaginatedMashupOutput.bind(this),angular.noop);
                
                
                var orderInput = {
                    Order:{
                        BillToID:this.model.customerDetails.Customer.CustomerID
                    }
                }
                var mashupArray = [];
                
                mashupArray.push(iscMashup.getMashupRefObj(this,'getCustomerDraftOrder',orderInput));
				iscMashup.callMashups(this,mashupArray,{})
                    .then(function(controllerData){
                        var output = iscMashup.getMashupOutput(controllerData,"getCustomerDraftOrder");
                        if(!iscCore.isVoid(output.OrderList.Order)){
                            this.model.customerDraftOrder.Order = output.OrderList.Order[0];
                        }
                        else{
                            this.model.customerDraftOrder.Order = {
                                OrderLines : {
                                    TotalNumberOfRecords : "0"
                                }
                            }
                        }
                        
                    }.bind(this),angular.noop);
			},
			
		   /**
			*@iscdoc method
			*@viewname store.views.customer.customer-profile.customer-profile-order-history
			*@methodname handlePaginatedMashupOutput
			*@description Callback handler for 'getOrderHistoryListByFilterCriteria' init API mashup call
			*@param {Object} data - Output data of 'getOrderHistoryListByFilterCriteria' mashup call
			*/
			handlePaginatedMashupOutput : function(data) {
				if (data != null && data.MashupRefs.MashupRef[0]["mashupRefId"] === "getOrderHistoryListByFilterCriteria") {
					this.model.orderListForHistory = data.MashupRefs.MashupRef[0]["Output"]["Page"]["Output"];
					for(var i = 0;i < this.model.orderListForHistory.OrderList.Order.length; i++) {
						var currentOrder = this.model.orderListForHistory.OrderList.Order[i];
						currentOrder.purchasedItemsImagesToShow = angular.copy(currentOrder.OrderLines);
						if(currentOrder.purchasedItemsImagesToShow.TotalNumberOfRecords > this.ui.purchasedItemsImagesToShowCount) {
							currentOrder.purchasedItemsImagesToShow.MoreRecords = currentOrder.purchasedItemsImagesToShow.TotalNumberOfRecords - this.ui.purchasedItemsImagesToShowCount;
							currentOrder.purchasedItemsImagesToShow.OrderLine.splice(this.ui.purchasedItemsImagesToShowCount);
						} else {
							currentOrder.purchasedItemsImagesToShow.MoreRecords = 0;
						}
						
						/*if(currentOrder.EntryType) {
							var spaceReplacedEntryType = currentOrder.EntryType.split(' ').join('_');
							if(iscI18n.hasKey('customerprofile.LABEL_Order_Type_'+spaceReplacedEntryType)) {
								currentOrder.orderChannelDisplay = iscI18n.translate('customerprofile.LABEL_Order_Type_'+spaceReplacedEntryType);
							} else {
								currentOrder.orderChannelDisplay = currentOrder.EntryType;
							}
						}*/
					}
				}
			},
			
		   /**
			*@description Closes the Order History page when 'Close' button is clicked.
			*/
			uiCloseWizard: function () {
				iscWizard.closeWizard();
			},
			
		   /**
			*@description Opens the Order summary screen when 'View Details' button of an order is clicked.
			*@param {Object} order - Order details model.
			*/	
			uiViewOrderDetails : function(order) {
				if(!order.DraftOrderFlag) order.DraftOrderFlag = "N";
				iscOrder.viewOrderFromList(order,true);
			},
            
		   /**
			*@description Shows next set of orders when the order panel is scrolled.
			* In Order History screen, we will fetch a fixed number of records (20). If actually there are more records we set refineResults flag to 'Y' to display 
			* a message will be shown at the end, to refine the search criteria.
			*/
			uiGetOrderListNext: function(){
				
				if(this.ui.orderListHistoryShownCount == this.model.orderListForHistory.OrderList.Order.length) {
					this.ui.refineResults = 'Y';
				} else if(this.ui.orderListHistoryShownCount <= this.model.orderListForHistory.OrderList.Order.length){
				  this.ui.orderListHistoryShownCount+=5;
				}
			},
			
		   /**
			*@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
			*/
			uiOrderListScrollActionValidator : function(){
				return true;
			},
			
		   /**
			*@description Reloads the Order History page based upon the filter criteria chosen by the user.
			*@param {Object} orderHistoryListSearchCriteria - Filter criteria chosen by the user which include Order Status, Order Date and Order Channel.
			*@param {Object} productPicturesSelectionCriteria - Filter criteria on whether recommended products or purchased products are to be shown.
			*/
			uiApplyFilterOnOrderHistoryList: function(orderHistoryListSearchCriteria,productPicturesSelectionCriteria) {
				this.model.orderListForHistory = {};
				this.ui.filterNotApplied = false;
				orderHistoryListSearchCriteria.Order.BillToID = this.model.customerDetails.Customer.CustomerID;
				iscMashup.callPaginatedMashup(this,'getOrderHistoryListByFilterCriteria',orderHistoryListSearchCriteria,'START',{}).then(this.handlePaginatedMashupOutput.bind(this),angular.noop);
				
				this.ui.showRecommendationImagesPanel = false;
				this.ui.showPurchasedProductsImagesPanel = false;
				this.ui.selectedOrderHeaderKey = "";
				
				for(var i=0; i<productPicturesSelectionCriteria.length; i++) {
					if(productPicturesSelectionCriteria[i] == "product_pictures_recommendations")
						this.ui.showRecommendationImagesPanel = true;
					if(productPicturesSelectionCriteria[i] == "product_pictures_purchased")
						this.ui.showPurchasedProductsImagesPanel = true;
				}
			},
			
			/**
			*@description Calls the 'getRecommededItems' mashup and loads the recommended products for each order.
			*@param {Object} order - Details pertaining to the order for which recommended products are to be fetched
			*/
			uiLoadRecommendations: function(order){
				order.loadingRecommendations = true;
				var recommendationsInput = iscRecommendations.getRecommendationsInputForOrder(order,10);
				
				iscMashup.callMashup(this,"getRecommededItems",recommendationsInput,{showMask:false})
                    .then(function(controllerData){
                        order.loadingRecommendations = false;
                        order.recommendedItems = iscMashup.getMashupOutput(controllerData,"getRecommededItems");
						order.recommendedItemsToShow = angular.copy(order.recommendedItems.ItemList);
						if(order.recommendedItemsToShow.TotalNumberOfRecords > this.ui.recommendationItemsImagesToShowCount) {
							order.recommendedItemsToShow.MoreRecords = order.recommendedItemsToShow.TotalNumberOfRecords - this.ui.recommendationItemsImagesToShowCount;
							order.recommendedItemsToShow.Item.splice(this.ui.recommendationItemsImagesToShowCount);
						} else {
							order.recommendedItemsToShow.MoreRecords = 0;
						}
                    
                    }.bind(this),function(){
                        order.loadingRecommendations = false;
                        order.recommendationsNotAvailable = true;
                    }.bind(this));
            },
			
		   /**
			*@description Opens the Product Details pop-up when a recommended product or purchased product image is clicked.
			*@param {Object} itemDetailsInput - Details pertaining to the product image which is clicked
			*/
			uiOpenProductDetail: function(itemDetailsInput) {
				var itemID = "";
				var itemUOM = "";
				if(itemDetailsInput.ItemDetails) {
					itemID = itemDetailsInput.ItemDetails.ItemID;
					itemUOM = itemDetailsInput.ItemDetails.UnitOfMeasure;
					
				} else {
					itemID = itemDetailsInput.ItemID;
					itemUOM = itemDetailsInput.UnitOfMeasure;
				}
				
				var popupInput = {};
				popupInput.ItemDetails = {};
				popupInput.ItemDetails.ItemID = itemID;
				popupInput.ItemDetails.UnitOfMeasure = itemUOM;
				popupInput.CustomerDetails = {};
				popupInput.CustomerDetails.CustomerID = this.model.customerDetails.Customer.CustomerID;
				popupInput.CustomerDetails.EmailID = this.model.customerDetails.Customer.CustomerContactList.CustomerContact[0].EmailID;
				popupInput.CustomerInfo = this.model.customerDetails;
                popupInput.OrderInfo = this.model.customerDraftOrder;
                
                var resolveData = {
                    modalInput : function(){
						return popupInput;
                    }
                };
                
                var modalOptions = {};
                iscModal.openModal('store.views.customer.customer-profile.product-details',resolveData,modalOptions).then(function(data){},angular.noop);
			},
			
		   /**
			*@description Checks if the user has permission to view the recommended products
			*@param {Object} order - model data of the order which is clicked and selected on the Order History page
			*/
			uishowRecommendationImagesPanel : function(order) {
				if(this.ui.hasRecommendationPanelPermission && (this.ui.showRecommendationImagesPanel || order.OrderHeaderKey == this.ui.selectedOrderHeaderKey)) {
					return true;
				} else {
					return false;
				}
			},
			
		   /**
			*@description Finds out the order status
			*@param {Object} order - model data of the order
			*/
			uiSetDisplayStatus:function(order){
				order.DisplayStatus = iscOrder.getDisplayStatus(order);
			},
			
		   /**
			*@description Adds CSS class based on the order status
			*@param {String} orderStatus - status of the order
			*/
			uiGetCssClassByOrderStatus:function(orderStatus) {
				return iscOrder.getCssClassByOrderStatus(orderStatus);
			},
            
            uiCheckout:function(){
                console.log("Checking out order from customer profile");
                iscState.goToState('ordercapture',{action:"QUICKCHECKOUT",orderModel:this.model.customerDraftOrder,customerInfo:this.model.customerDetails},{});
            }
            
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
 /**
 *@iscdoc viewinfo
 *@viewname store.views.customer.customer-profile.customer-profile-search
 *@package store.views.customer.customer-profile
 *@class customer-profile-search
 *@description Displays the customer list for selection.
 *
 */
angular.module('store').controller('store.views.customer.customer-profile.customer-profile-search',
  ['$scope','$rootScope','iscScreen','iscWizard','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscReturn',
	function($scope,$rootScope,iscScreen,iscWizard,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscReturn) {
		
		iscWizard.initializeWizardPage($scope,{
           pageModel:{},
			model:{
                /**
                 *@iscdoc model
                 *@viewname store.views.customer.customer-profile.customer-profile-search
                 *@name customerList
                 *@description Stores customer list
                 */
                "customerList":{}
            },
            mashupRefs:[{
                /**
                 *@iscdoc mashup
                 *@viewname store.views.customer.customer-profile.customer-profile-search
                 *@mashupid returnLookup_getCustomerList
                 *@mashuprefid getCustomerListPaginated
                 *@description Mashup used to list customers in a paginated way
                 */
                    mashupRefId: 'getCustomerListPaginated',
                    mashupId: 'returnLookup_getCustomerList',
                    isPaginated: true,
					pageSize : iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					appendPath : 'CustomerList.Customer',
					modelName:"customerList"
                     

                 }],
            ui:{
                /**
                *@iscdoc uiattr
                *@viewname store.views.customer.customer-profile.customer-profile-search
                *@property {String}  pageSize -Default number of order records to be shown while loading next records.
                */
                 pageSize: Number(iscAppContext.getFromContext("masterDataPageSize")),
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.customer.customer-profile.customer-profile-search
                 *@property {String}  recordShownCount - Total number of order records displayed in the screen
                 */
                 recordShownCount: Number(iscAppContext.getFromContext("masterDataPageSize")),
                /**
                *@iscdoc uiattr
                *@viewname store.views.customer.customer-profile.customer-profile-search
                *@property {String}   apiPageSize - Number of records to be fetched by getOrderList API in one call.
                */
                apiPageSize:  Number(iscAppContext.getFromContext("listApiPageSize")),
                /**
                *@iscdoc uiattr
                *@viewname store.views.customer.customer-profile.customer-profile-search
                *@property {String}  noOfSearchResults - Number of search results
                */
                noOfSearchResults: 0,
                /**
                *@iscdoc uiattr
                *@viewname store.views.customer.customer-profile.customer-profile-search
                *@property {Boolean}  searchInProgress - True if mashup call is still in progress, false otherwise.
                */
                searchInProgress: false,
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.customer.customer-profile.customer-profile-search
                 *@property {String}  hideSearch - Flag to hide or show the return lookup in the page
                 */
                hideSearch:'N',
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.customer.customer-profile.customer-profile-search
                 *@property {String}  isListPage - Flag to display Customer Search Result count as the header. If false, then it is
                 *assumed to be a details page and Customer ID is displayed
                 */
                isListPage:true
            },
            
            /**
             *@iscdoc viewinit
             *@viewname store.views.customer.customer-profile.customer-profile-search
             *@descriptionsets sets the customer list model using the output sent by the return lookup header
             */
            initialize: function(){
                  //this.ui.pageSize = iscAppContext.getFromContext("defaultPageSize");
                  var pageInput = iscWizard.getWizardPageInput();
                  var inputData = pageInput.input;
                  var callAPI = pageInput.callAPI;
                  
                  if(callAPI){
                	  
                  }else{
                	  this.handleGetCustomerListOutput(inputData,false);
                  }
                  iscReturn.setMiniCartParam(this);
                  $scope.$on('uiSearchClose',function(event,args){
				 	if (args){
						  $scope.ui.hideSearch = 'N';
				    }  
						   
				  });
                 
            },
            
         /**
         *@iscdoc uimethod
         *@viewname store.views.customer.customer-profile.customer-profile-search
         *@methodname uiOpenCustomerDetails
         *@description onclick handler of View Order Details button, opens customer details page
         *param {Object} customer - customer details
         */
         uiOpenCustomerDetails:function(customer){
            if(!iscCore.isVoid(customer)){
            	var customerInput = {};
            	customerInput.Customer = customer;
            	var pageInput = {input:customerInput,callAPI:false};
                iscWizard.gotoCustomPage('customerDetails',pageInput,{});
            }
            else{
                   iscModal.showErrorMessage(iscI18n.translate('return.MSG_CustomerNotFound'));
            }
        },
        
        /**
         *@iscdoc uimethod
         *@viewname store.views.customer.customer-profile.customer-profile-search
         *@methodname uigetNextCustomerRecords
         *@description Callback handler function of continuous scroll as user scrolls customer list.
         */
        uigetNextCustomerRecords: function(){
        	var custListModel = this.model.customerList.Page.Output.CustomerList;
        	var numRecordsInModel = custListModel.Customer.length;
        	
        	if(numRecordsInModel - this.ui.recordShownCount >= this.ui.pageSize ){
                this.ui.recordShownCount+=this.ui.pageSize;
              }else{
            	  if(this.model.customerList.Page.IsLastPage != 'Y'){
            		  var data = custListModel.SearchText;
            		  var getCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:{DayPhone:data}}}};
            		 
  				      this.ui.searchInProgress = true;
  				      iscMashup.callPaginatedMashup(this,'getCustomerListPaginated',getCustomerListInput,"NEXT",{}).then(function(data){
                          this.ui.searchInProgress = false;
  				          this.uigetNextCustomerRecords();
	            	  }.bind(this));
            	  }else{
            		  this.ui.recordShownCount = numRecordsInModel;
            	  }
            	 
              }
        },
        
       /**
        *@iscdoc uimethod
        *@viewname store.views.customer.customer-profile.customer-profile-search
        *@methodname uiNextPageActionValidator
        *@description Determines if mashup call is in progress as user scrolls customer list.
        *@return {Boolean} - True if mashup call is not in progress, false otherwise. 
        */
        uiNextPageActionValidator: function(){
            if(!this.ui.searchInProgress){
                // mashup call not in progress. call next page handler
                return true;
            }
            else if(this.ui.searchInProgress){
                //mashup call in progress 
                return false;
            }
        },
        
        /**
         *@iscdoc uimethod
         *@viewname store.views.customer.customer-profile.customer-profile-search
         *@methodname handleGetCustomerListOutput
         *@description Updates the customer list with the output of getCustomerListPaginated mashup
         */
            handleGetCustomerListOutput: function(output,onNext){
            	this.ui.searchInProgress = false;
     			 if(onNext){
     				//append the next page results with the total results
     				var recordList = output.Page.Output.CustomerList.Customer;
     				for(var i = 0;i < recordList.length; i++){
                           this.model.customerList.Page.Output.CustomerList.Customer.push(recordList[i]);
                   }
     				this.model.customerList.Page.PageNumber = output.Page.PageNumber;
     				this.model.customerList.Page.IsFirstPage = output.Page.IsFirstPage;
     				this.model.customerList.Page.IsLastPage = output.Page.IsLastPage;
     				this.uigetNextCustomerRecords();
     			 }else{
     				this.model.customerList =  output; 
         			 //this.ui.headerCustomerId = output.Page.Output.CustomerList.SearchText;
     				this.ui.headerProductId = iscI18n.translate('returnHeader.LABEL_Customer_Search_Result',{count:this.model.customerList.Page.Output.CustomerList.TotalNumberOfRecords});
     				
     				//following code is to set model for a paginated mashup call
     				this.pageModel.getCustomerListPaginated={};
     				this.pageModel.getCustomerListPaginated["0"] = {};	
     				this.pageModel.getCustomerListPaginated[output.Page.PageNumber] = output.Page.LastRecord;
     				this.pageModel.getCustomerListPaginated.currentPageNumber = output.Page.PageNumber;
     				this.pageModel.getCustomerListPaginated.IsLastPage = output.Page.IsLastPage;
     				this.pageModel.getCustomerListPaginated.IsFirstPage = output.Page.IsFirstPage;
     				this.pageModel.getCustomerListPaginated.IsValidPage = output.Page.IsValidPage;
     			 }
            	 
            },
            
            /**
             *@iscdoc uimethod
             *@viewname store.views.customer.customer-profile.customer-profile-search
             *@methodname uiHandleSearchResult
	  		  *@description This method opens up a new page depending on what is searched in the return lookup.
	  		  *@param {Object} returnData - Search results
	  		  */
            uiHandleSearchResult : function(returnData) {
            	var pageInput = {input:returnData.NextPage.model,callAPI:returnData.NextPage.callAPI};
    			iscWizard.gotoCustomPage(returnData.NextPage.action,pageInput,{});
    		},
    		
            /**
             *@iscdoc uimethod
             *@viewname store.views.customer.customer-profile.customer-profile-search
             *@methodname uiHandleReviewReturn
             *@description Onclick handler function for review returns button. Opens up Returns List page
             */
            uiHandleReviewReturn:function(){
                iscWizard.gotoCustomPage('returnsList',{input:this.model.returnOrder.Order.OrderHeaderKey},{});
             },
             
            /**
             *@iscdoc uimethod
             *@viewname store.views.customer.customer-profile.customer-profile-search
             *@methodname uiCancel
             *@description Cancel button onclick handler for wizard. Shows confirmation message if return order is already created.
             */
            uiCancel : function(){
                iscWizard.closeWizard();
            },
            
            
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodal
 *@viewname store.views.customer.customer-profile.product-details
 *@package store.views.customer.customer-profile
 *@class product-details
 */
angular.module('store').controller('store.views.customer.customer-profile.product-details', ['$scope', '$rootScope', '$uibModalInstance', 'iscScreen', 'iscProduct', 'modalInput', '$filter', 'iscMashup', 'iscResourcePermission', 'iscI18n', 'iscModal', 'iscMedia','iscDomUtility','$timeout','iscState','iscItem'
	, function ($scope, $rootScope, $uibModalInstance, iscScreen, iscProduct, modalInput, $filter, iscMashup, iscResourcePermission, iscI18n, iscModal,iscMedia,iscDomUtility,$timeout,iscState,iscItem) {
        iscScreen.initializeModalScreen($scope, {
            model: {
            	/**
		           *@iscdoc model
		  		   *@viewname store.views.customer.customer-profile.product-details
		           *@name itemDetails
		           *@description This model contains the getCompleteItemDetails api output.
		           */
                "itemDetails":{},
                /**
		           *@iscdoc model
		  		   *@viewname store.views.customer.customer-profile.product-details
		           *@name relatedItemsModel
		           *@description This model contains the getCompleteItemList api output.
		           */
                "relatedItemsModel":{}
            },
            mashupRefs: [
                {
                	/**
					*@description This mashup is used to item details.
					*/
                	mashupRefId: 'getCompleteItemDetails',
                	mashupId: 'store.views.customer.customer-profile.getProductDetails'
                },
                {
                    /**
                     *@description Used to send the order receipt to the email address mentioned by the user.
                    */
                    mashupRefId: 'productdetails_sendEmail',
                    mashupId: 'store.views.customer.customer-profile.sendProductDetailsInEmail',
                },
                
                
                {
                	/**
					*@description This mashup is used to get related items.
					*/
                	mashupRefId: 'getCompleteRelatedItemList',
                	mashupId: 'product_getRelatedItemList'	
                },
                {
                    mashupRefId:'getItemAvailabilityForStore',
                    mashupId: "store.views.customer.customer-profile.getItemAvailabilityForStore"
                }
                
            ],

            ui: {
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.customer.customer-profile.product-details
                 *@property {String} emailid - Email address to send the product details to.
                 */
                emailid: "",
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.customer.customer-profile.product-details
                 *@property {Boolean} showEmailError - flag to display email error.
                 */
                showEmailError:false,
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.customer.customer-profile.product-details
                 *@property {Boolean} emailSent - flag to display email sent message.
                 */
                emailSent:false,
				
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.customer.customer-profile.product-details
                 *@property {Object} emailForm -  email form object.
                 */
                
				emailForm: {},
				
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.customer.customer-profile.product-details
                 *@property {Boolean} openRelatedItems - flag to display Related products.
                 */
				
				openRelatedItems :false,
				
				showItemDescriptionLink : false,
				
				itemsShownCount : 0,
				
				noOfMoreItemsCount :0,
				
				relatedItemsCount:0,
                
                availabilityInfo : {},
                availabilityInfoLoading : true,
                itemId : "",
                itemUom:"",
                active:0,
                showShopNowButton : false,
                isIosDevice:false,
               
                 /**
                 *@iscdoc uiattr
                 *@viewname store.views.customer.customer-profile.product-details
                 *@property {Object} emailForm -  flag to check if there are more than images for the item.
                 */
                hasMoreImages: false
                
            },

            /**
			 *@iscdoc viewinit
			 *@viewname store.views.customer.customer-profile.product-details
			 *@method initialize
			 *@description Initializes the product details screen with getCompleteItemDetails,getCompleteItemList api calls.
			 */
            
            initialize: function () {
            	
            	if(iscMedia.isMediaEnabled('gt-480')){
                	this.ui.openRelatedItems = true;
                }
            	
                this.ui.emailid = modalInput.CustomerDetails.EmailID;
                
                this.ui.itemId = modalInput.ItemDetails.ItemID;
                this.ui.itemUom = modalInput.ItemDetails.UnitOfMeasure;
            
            if(navigator.userAgent.match(/iPhone|iPad|iPod/i)){
    	        	  this.ui.isIosDevice = true;
    	        }
        		var mashupArray = [];
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteItemDetails',this.getCompleteItemDetailsInput()));
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteRelatedItemList',this.getCompleteItemDetailsInput()));
	        	iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
	        	
	        	$timeout(function (){
					iscDomUtility.setFocus(document.getElementById("productdetails_emailId"));
				}, 0);
	        	
            },

            /**
			 *@iscdoc method
			 *@viewname  store.views.customer.customer-profile.product-details
			 *@methodname handleInitApiCalls
			 *@description callback handler for init api calls getCompleteItemDetails and getCompleteItemList.
			 *@param {Object} data - Controller data of init api calls.
			 */	
            
            handleInitApiCalls : function (data){

	  			var mashupRef = data.MashupRefs.MashupRef;
            	if(mashupRef !== null && mashupRef !== undefined){
            		var len = mashupRef.length;
            		for(var i = 0; i < len; i++){
            			var mashupRefObj = mashupRef[i];
            			if(mashupRefObj.mashupRefId === 'getCompleteItemDetails'){
    			  			this.initializeItemDetails(data);
            			}
            			else if(mashupRefObj.mashupRefId === 'getCompleteRelatedItemList'){
            				this.initializeRelatedItems(data);
							}
            			}
            		}
                
                
                
                
                    $timeout(function(){
                        
                        var mashupArray = [];
                        mashupArray.push(iscMashup.getMashupRefObj(this,'getItemAvailabilityForStore',this.getItemAvailabilityInput()));
                        iscMashup.callMashups(this,mashupArray,{showMask:false})
                            .then(function(controllerData){
                                var apiOutput = iscMashup.getMashupOutput(controllerData,'getItemAvailabilityForStore');
                                var promiseLine = apiOutput.Promise.PromiseLines.PromiseLine[0];
                                if(!iscCore.isVoid(promiseLine.Availabilities)){
                                    this.ui.availabilityInfoLoading = false;
                                    this.ui.availabilityInfo = iscItem.handleItemAvailability(promiseLine.Availabilities, {}, this.model.itemDetails.Item.PrimaryInformation.IsShippingAllowed, this.model.itemDetails.Item.PrimaryInformation.IsPickupAllowed);
                                    this.EnableAddToCartButton(this.ui.availabilityInfo);
                                }
                            }.bind(this),angular.noop);
                                    
                    }.bind(this),0);
	  		      },

	  		
	  		    EnableAddToCartButton:function(availabilityInfo){
	  		    	
	  		    	if(!iscCore.isVoid(this.model.itemDetails.Item.PrimaryInformation.IsModelItem) && (this.model.itemDetails.Item.PrimaryInformation.IsModelItem =='Y')){
	  		    		this.ui.showShopNowButton = true;
	  		    	}else if(!this.ui.availabilityInfo.availability.itemCarryAvailable && !this.ui.availabilityInfo.availability.itemShpAvailable && this.ui.availabilityInfo.availability.itemPickAvailable){
	  		    		this.ui.showShopNowButton = true;
	  		    	}
	  		    } ,
	  		      
  		    /**
  			 *@iscdoc method
  			 *@viewname  store.views.customer.customer-profile.product-details
  			 *@methodname initializeItemDetails
  			 *@description This method handles the getCompleteItemDetails api output
  			 *@param {Object} controllerData - Controller data of getCompleteItemDetails api call.
  			 */	
	  		      
            initializeItemDetails: function(controllerData){
                var output = iscMashup.getMashupOutput(controllerData,"getCompleteItemDetails");  
                this.model.itemDetails.Item=output.ItemList.Item[0];
	            	if(!iscCore.isVoid(this.model.itemDetails.Item.PrimaryInformation.IsModelItem) && (this.model.itemDetails.Item.PrimaryInformation.IsModelItem =='Y')){
	  		    		this.ui.showShopNowButton = true;
	  		    	}
                this.model.itemDetails.Item.Currency=output.ItemList.Currency;
                this.setItemImage(this.model.itemDetails);
                
            },
            
			
            /**
  			 *@iscdoc method
  			 *@viewname  store.views.customer.customer-profile.product-details
  			 *@methodname getCompleteItemListInput
  			 *@description This method prepares the input for getCompleteItemList api.
  			 */	
            
           getCompleteItemListInput:function() {
				
				var getCompleteItemListInput = {};
				getCompleteItemListInput.Item = {};
    			
    			if(!iscCore.isVoid(this.model.itemDetails) && !iscCore.isVoid(this.model.itemDetails.Item.ItemID) && !iscCore.isVoid(this.model.itemDetails.Item.UnitOfMeasure)) {
    				getCompleteItemListInput.Item.ItemID = this.model.itemDetails.Item.ItemID;
    				getCompleteItemListInput.Item.UnitOfMeasure = this.model.itemDetails.Item.UnitOfMeasure;
    			} else {
    				console.log("ERROR: ItemID or UnitOfMeasure is null for item - ",this.model.itemDetails);
    			}
    			
    			return getCompleteItemListInput;
				
			},
			
			/**
  			 *@iscdoc method
  			 *@viewname  store.views.customer.customer-profile.product-details
  			 *@methodname initializeRelatedItems
  			 *@description This method handles the getCompleteItemList api output
  			 *@param {Object} controllerData - Controller data of getCompleteItemList api call.
  			 */	
			
			initializeRelatedItems : function(response){
				
				var apiOutput = iscMashup.getMashupOutput(response,"getCompleteRelatedItemList");
				if(apiOutput.ItemList){
					this.model.relatedItemsModel = apiOutput;
					
					if(!(this.model.relatedItemsModel.ItemList.TotalNumberOfRecords =='0')){
						if(iscMedia.isMediaEnabled('gt-480') || iscMedia.isMediaEnabled('lte-480')){
							this.ui.relatedItemsCount = parseInt(this.model.relatedItemsModel.ItemList.TotalNumberOfRecords,10);
							if(this.ui.relatedItemsCount >= 2){
								this.ui.itemsShownCount = 2;
								if(this.ui.relatedItemsCount > 2){
									this.ui.noOfMoreItemsCount = this.ui.relatedItemsCount - this.ui.itemsShownCount ;
								    if(this.ui.noOfMoreItemsCount >= 5){
								    	this.ui.noOfMoreItemsCount = 5;
								    }
								}
							}else{
								this.ui.itemsShownCount = 1;
								this.ui.noOfMoreItemsCount = 0;
							}
		                } 					
					}	
                    else{
                        this.ui.openRelatedItems = false;
                    }
					
				}
				
			},
		   
			
			uiLoadMoreItems : function(){
				    if(this.ui.relatedItemsCount > 0 && this.ui.itemsShownCount === 0){
				    	this.ui.itemsShownCount = 2;
				    }else{
				    	this.ui.itemsShownCount = this.ui.itemsShownCount + this.ui.noOfMoreItemsCount;
				    }
				    if(this.ui.relatedItemsCount > 2){
						this.ui.noOfMoreItemsCount = this.ui.relatedItemsCount - this.ui.itemsShownCount ;
					    if(this.ui.noOfMoreItemsCount >= 5){
					    	this.ui.noOfMoreItemsCount = 5;
					    }
					}
				    
				   /* if(this.ui.itemsShownCount < this.ui.relatedItemsCount){
	                   this.ui.itemsShownCount = this.ui.itemsShownCount + this.ui.noOfMoreItemsCount;
				    }*/
			},
			
			/**
  			 *@iscdoc method
  			 *@viewname  store.views.customer.customer-profile.product-details
  			 *@methodname uiGetExtendedDescription
  			 *@description This method formats the ExtendedDescription of the product for new line character.
  			 *@param {String} extDesc - ExtendedDescription of the product.
  			 */	
           uiGetExtendedDescription:function(extDesc) {
				
				if(!iscCore.isVoid()) {
					extDesc = extDesc.replaceAll(/\n/g, '<br />');
				}
				
				return extDesc;
			},
			
			
			/**
  			 *@iscdoc method
  			 *@viewname  store.views.customer.customer-profile.product-details
  			 *@methodname uiSendEmail
  			 *@description This method which validates the email form and sends the mail.
  			 *@param {String} extDesc - ExtendedDescription of the product.
  			 */	
          uiSendEmail:function(){
                var that = this;
                $timeout(function () {
                    that.ui.emailForm.$setDirty();
                    if(iscCore.isVoid(that.ui.emailid) || !that.ui.emailForm.$valid){
                        that.ui.showEmailError=true;
                        document.getElementById('productdetails_emailId').focus();

                    }else if(that.ui.emailForm.$valid){
                        var inputObj = {};
                        inputObj.ItemdDetails={};
                        inputObj.ItemdDetails.ItemID = this.model.itemDetails.Item.ItemID;
                        inputObj.ItemdDetails.ItemKey = this.model.itemDetails.Item.ItemKey;
                        inputObj.ItemdDetails.UnitOfMeasure = this.model.itemDetails.Item.UnitOfMeasure;
                        inputObj.ItemdDetails.CustomerID = modalInput.CustomerDetails.CustomerID;
                        inputObj.ItemdDetails.ToEmailID = this.ui.emailid;
                        
                        iscMashup.callMashup(that,"productdetails_sendEmail",inputObj,{}).then(that.emailCallBackHandler.bind(that),angular.noop);
                    }
                }.bind(this),200);							
            },

           
            /**
  			 *@iscdoc method
  			 *@viewname  store.views.customer.customer-profile.product-details
  			 *@methodname uiResetEmailFlags
  			 *@description This method reset the email flags
  			 */	
            
           
            uiResetEmailFlags : function(){
                var emailInputText = document.getElementById("productdetails_emailId").value;
                if(!iscCore.isVoid((emailInputText))){
                    this.ui.emailSent=false;
                    this.ui.showEmailError=false;
                }
              },

          
              /**
    			 *@iscdoc method
    			 *@viewname  store.views.customer.customer-profile.product-details
    			 *@methodname emailCallBackHandler
    			 *@description This method is the call back handler of email service. It displays email sent message.
    			 *@param {Object} data - Controller data if YCD_ProductDetails_Email service.
    			 */	
              
            emailCallBackHandler : function(data){
                var output = iscMashup.getMashupOutput(data,"productdetails_sendEmail");
                if(output) {
                    this.ui.emailSent = true;
                }
            },
						
            
           
            /**
			 *@iscdoc method
			 *@viewname  store.views.customer.customer-profile.product-details
			 *@methodname uiClose
			 *@description OnClick handler of "Close" button, closes the modal popup..
			 */	
			uiClose : function () {
				$uibModalInstance.dismiss({});
			},
			
			/**
			 *@iscdoc method
			 *@viewname  store.views.customer.customer-profile.product-details
			 *@methodname uiShopNow
			 *@description Opens the 'Find Products' screen for the product.
			 */
			uiShopNow:function(){
				$uibModalInstance.dismiss({});
				iscState.goToState('ordercapture',{action:"SCAN",input:modalInput.ItemDetails.ItemID,customerInfo:modalInput.CustomerInfo,orderInfo:modalInput.OrderInfo},{});
			},

			
			uiHandleAddToCart:function(){
				var resultdata = {
				data : {
						itemDetails : this.model.itemDetails,
						availabilityInfo : this.ui.availabilityInfo
					   }
				};
				$uibModalInstance.close(resultdata);
			},
			
			/**
  			 *@iscdoc method
  			 *@viewname  store.views.customer.customer-profile.product-details
  			 *@methodname getCompleteItemDetailsInput
  			 *@description This method prepares the input for getCompleteItemDetailsInput api.
  			 */	
			
            getCompleteItemDetailsInput:function() {
				
				var getCompleteItemDetailsInput = {};
				getCompleteItemDetailsInput.Item = {};
    			getCompleteItemDetailsInput.Item.ItemID = this.ui.itemId;
                getCompleteItemDetailsInput.Item.UnitOfMeasure = this.ui.itemUom;
    			return getCompleteItemDetailsInput;
				
			},
            
            getItemAvailabilityInput : function(){
                var itemAvailabilityInput = {
                    Promise : {
                        PromiseLines:{
                            PromiseLine:{
                                ItemID : this.ui.itemId,
                                UnitOfMeasure : this.ui.itemUom
                            }
                        }
                    }
                    
                }
                return itemAvailabilityInput;
            },
            uiOpenItemDetails:function(item){
            
                this.ui.itemId = item.ItemID;
                this.ui.itemUom = item.UnitOfMeasure;
                this.ui.itemsShownCount = 0;
				this.ui.noOfMoreItemsCount = 0;
				this.ui.relatedItemsCount=0;
                
                var mashupArray = [];
                mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteItemDetails',this.getCompleteItemDetailsInput()));
                mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteRelatedItemList',this.getCompleteItemDetailsInput()));
                iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);

            },

           setItemImage: function(itemModel) {
                var assetList = null;
                var imageUrl = "";
                var length = 0;
               // var hasMoreImages = false;
               assetList = itemModel.Item.AssetList.Asset;
               if(!iscCore.isVoid(assetList)){
                
                length = assetList.length;
                for (var index = 0;index < length;index = index + 1) {
                    var assetElem = null;
                    var assetType = null;
                    if (!(iscCore.isVoid(assetList))) {
                        assetElem = assetList[index];
                        assetType = assetElem.Type;
                        if (assetType === "ITEM_IMAGE_1") {
                            imageUrl = assetElem.ContentLocation;
                            this.ui.hasMoreImages= false;
                            //_scBaseUtils.setModel(this, "itemImageModel", assetElem, null);
                        } else if (assetType === "ITEM_IMAGE_LRG_1") {
                            //_scWidgetUtils.showWidget(this, "itemImgMoreDtls", false, null);
                            this.ui.hasMoreImages = true;
                        }
                    }
                }

               }
                
                if (!this.ui.hasMoreImages) {
                    //_scWidgetUtils.hideWidget(this, "itemImgMoreDtls", false);
                } else {
                    this.handleMoreImages(itemModel);
                }
            },
            
            
            handleMoreImages: function(itemModel) {
                var assetList = null;
                assetList = this.getAssetList(itemModel, this);
                length = assetList.length;
                if (length > 0) {
                    for (var index = 0;index < length;index = index + 1) {
                        var asset = assetList[index];
                        var encodedContentLocation = encodeURI(asset.ItemImage.ContentLocation);
                        var encodedContentID = encodeURIComponent(asset.ItemImage.ContentID);
                        var imageSource = encodedContentLocation+ "/" + encodedContentID;
                        var dynamicUid = "itemThumbnail" + index;

                        //_wscProductUtils.generateThumb(this, dynamicUid, imageSource, "repeatingScreenContainer", _scBaseUtils.getAttributeValue("ItemImage.Label", false, asset));
                    }
                }
            },
            getAssetList: function(itemModel, screen) {
                var AssetList_large = [];
                var assetList = null;
                var assetModel = {};
                var assetList = itemModel.Item.AssetList.Asset;
                var length = assetList.length;

                for (var index = 0;index < length;index = index + 1) {
                    var asset = null;
                    asset = assetList[index];
                    if (!(iscCore.isVoid(asset))) {
                        if (asset.Type === "ITEM_IMAGE_LRG_1") {
                            var assetM = {};
                            assetM.ItemImage = asset;
                            var encodedContentLocation = encodeURI(asset.ContentLocation);
                            var encodedContentID = encodeURIComponent(asset.ContentID);
                            var imageSource = encodedContentLocation+ "/" + encodedContentID;
                            assetM.ItemImage.ImageSource = imageSource;
                            AssetList_large.push(assetM);
                        }
                    }
                }
                
                assetModel = {
                    Item:{
                        AssetList:{
                            Asset : AssetList_large
                        }
                    }
                };
                
                this.model.moreImages = assetModel;
                return AssetList_large;
            }
        });


}]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.customer.notes.customernotes
 *@package store.views.customer.notes
 *@class customernotes
 *@description Controller used for handling notes popup for a customer
 *  
 */


angular.module('store').controller('store.views.customer.notes.customernotes',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscModal','iscI18n',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscModal,iscI18n) {
		
	iscScreen.initializeModalScreen($scope,{
	
		model:{
			   /**
				*@iscdoc model
				*@viewname store.views.customer.notes.customernotes
				*@name customerNotesList
				*@description Holds the output data of getParticipantNoteList API. This is used to list the customer notes in the modal window
				*/
				"customerNotesList":{}
	  		},

	  		mashupRefs : [
	  		
	  				{
			  		  /**
	  				   *@iscdoc mashup
	  		   			*@viewname store.views.customer.notes.customernotes
	  		   			*@mashupid store.views.customer.notes.getParticipantNoteList
			   			*@mashuprefid getParticipantNoteList
			   			*@modelname customerNotesList
	  		   			*@description Fetches notes for a customer
	  		   			*/
	  		  		
						mashupRefId: 'getParticipantNoteList',
						mashupId: 'store.views.customer.notes.getParticipantNoteList',
						modelName : 'customerNotesList'								
					},
					
					{
						/**
		  				   *@iscdoc mashup
		  		   			*@viewname store.views.order.comments.comments
		  		   			*@mashupid store.views.customer.notes.manageCustomer
				   			*@mashuprefid manageCustomer
		  		   			*@description Adds a note for a customer
		  		   			*/
						
						mashupRefId: 'manageCustomer',
						mashupId: 'store.views.customer.notes.manageCustomer'
						
					}
					
				],
				
				
				ui:{
					
				},
				
				/**
				 *@iscdoc viewinit
				 *@viewname store.views.customer.notes.customernotes
				 *@method initialize
				 *@description Initializes the customer notes modal window by calling the getParticipantNoteList mashup.
				 */
				initialize : function(){
					var getCustomerNoteListInput = {};
					getCustomerNoteListInput.Note = {};
					getCustomerNoteListInput.Note.TableKey = modalInput.Customer.CustomerKey;
					iscMashup.callMashup(this,'getParticipantNoteList',getCustomerNoteListInput,{});
				},
				
				/**
				 *@iscdoc uimethod
				 *@viewname store.views.customer.notes.customernotes
				 *@methodname uiClose
				 *@description Handles the scenario when 'Close' button is clicked on the modal. The total notes count passed by the modal is used by the parent screen to display the notes count.
				 */
				uiClose : function () {
					$uibModalInstance.close(this.model.customerNotesList);
				},
				
				/**
				 *@iscdoc uimethod
				 *@viewname store.views.customer.notes.customernotes
				 *@methodname uiPostComment
				 *@description Handles the scenario when 'Add' button is clicked on the modal window. Calls 'manageCustomer' API to add note and 'getParticipantNoteList' API to refresh the notes list.
				 */
				uiPostNote : function(noteAPIInput){
					var manageCustomerInput = {};
					manageCustomerInput.Customer = {};
					manageCustomerInput.Customer.CustomerKey = modalInput.Customer.CustomerKey;
					manageCustomerInput.Customer.NoteList = noteAPIInput ;
					var mashupArray = [];
					mashupArray.push(iscMashup.getMashupRefObj(this,'manageCustomer',manageCustomerInput));
					mashupArray.push(iscMashup.getMashupRefObj(this,'getParticipantNoteList',{"Note":{"TableKey": modalInput.Customer.CustomerKey}}));
					iscMashup.callMashups(this,mashupArray,{}).then(this.handleManageCustomerSuccess.bind(this),this.handleManageCustomerError.bind(this));
				},
				
				
				/**
				 *@iscdoc method
				 *@viewname store.views.customer.notes.customernotes
				 *@methodname handleManageCustomerSuccess
				 *@description Success callback handler of manageCustomer API call. Broadcasts 'clearNoteFields' event so that the modal window inputs are cleared.
				 */
				
				handleManageCustomerSuccess : function(data){
					$scope.$broadcast('clearNoteFields');
				},
				
				
				/**
				 *@iscdoc method
				 *@viewname store.views.customer.notes.customernotes
				 *@methodname handleManageCustomerError
				 *@description Error callback handler of manageCustomer API call. Shows an error dialog with the error text returned by the API.
				 */
				
				handleManageCustomerError: function(response) {
					var errorMsg = response.Errors.Error[0].ErrorDescription;
		  			var errorCode = response.Errors.Error[0].ErrorCode;
		  			if(iscI18n.hasKey("apierror."+errorCode)){
		  				errorMsg = iscI18n.translate("apierror."+errorCode);
		  				iscModal.showErrorMessage(errorMsg,null,null);				
		  			}
		  			else{
		  				iscModal.showErrorMessage(errorMsg,null,null);
		  			}
					$uibModalInstance.dismiss(response);
				} 		  
		}
	
	);
	
	}
]);

	
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.common.customer-pickup-portlet-mini", [
	"$scope", "iscScreen", "iscMashup",
	function($scope, iscScreen, iscMashup) {
		iscScreen.initializeScreen($scope, {
			model: {
				"shipmentCountOutput": {}
			},
			mashupRefs: [{
				mashupRefId: 'getReadyForPickupShipmentCount',
				mashupId: 'store.views.home.common.getReadyForPickupShipmentCount',
				modelName: 'shipmentCountOutput'
			}],
			
			ui: {
				isMashupCallInProgress: true,
				displayCount: 0
			},
			
			initialize: function() {
				iscMashup.callMashup(this, 'getReadyForPickupShipmentCount', {
					"Shipment": {}
				}, {showMask: false}).then(this.handleInitAPIs.bind(this), angular.noop);
			},
			
			handleInitAPIs: function(response) {
				if (!iscCore.isVoid(this.model.shipmentCountOutput) && !iscCore.isVoid(this.model.shipmentCountOutput.Shipments) && !iscCore.isVoid(this.model.shipmentCountOutput.Shipments.TotalNumberOfRecords)) {
					this.ui.displayCount = Number(this.model.shipmentCountOutput.Shipments.TotalNumberOfRecords);
				}
				this.ui.isMashupCallInProgress = false;
			}
			
		});	
	}
]);
/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/



angular.module("store").controller("store.views.home.common.customer-pickup-portlet", [
	"$scope", "iscScreen", "iscMashup", "iscResourcePermission","$filter", "iscModal", "iscI18n", "iscState", "$timeout", "iscDomUtility", "iscShipment", "iscPortletShipment", "iscShipmentStatus", 
	function($scope, iscScreen, iscMashup, iscResourcePermission, $filter, iscModal, iscI18n, iscState, $timeout, iscDomUtility, iscShipment, iscPortletShipment, iscShipmentStatus) {
		iscScreen.initializeScreen($scope, {  
			model: {
				/**
				 * @description contains output model for initial mashup call
				 */
				"shipmentCountOutput":{},
				
				/**
				 * @description contains shipment count
				 */
				"pickupShipmentCount":{"totalShipmentCount":0}
				
			},
			mashupRefs: [
			             
				/**
				 * @description This mashup is used to get a count of Shipments which are Ready for Customer Pickup.
				 */
				{
					mashupRefId: 'getReadyForPickupShipmentCount',
					mashupId: 'store.views.home.common.getReadyForPickupShipmentCount',
					modelName:'shipmentCountOutput'
				},
				
				/**
				 * @description This mashup is used to get a count of Shipments for advanced search.
				 */
				{
					mashupRefId: 'getShipmentCountForPortletAdvSearch',
					mashupId: 'store.views.common.outboundShipment.getShipmentCountForPortletAdvSearch'
				
				}
				 
			],
			
			ui : {				
				/**
				 * @property {Boolean} showAdvanceSearch - when True, advanced search option is shown
				 */
				showAdvanceSearch:false,
				
				/**
				 * @property {Object} search - Model to bind Advanced search criteria attributes
				 */
				search: {},
				
				/**
				 * @property {Boolean} isPickupRecipient - contains search entity, Customer or Pickup Recipient for advanced search
				 */
				isPickupRecipient: false,
				
				/**
				 * @property {String} pickupPage - contains pack wizard id
				 */
				pickupPage: 'customer-pickup',

				/**
				 * @property {Object} searchCriteria - Model to hold Advanced search criteria api call
				 */
				searchCriteria: {}
			},
			        
			/**
		     * @description This method initialize the controller and invokes mashup to get count for ready for customer pickup shipments.
		     */
			initialize: function() {
				
				var getShipListInput = {"Shipment":{}};
				iscMashup.callMashup(this,'getReadyForPickupShipmentCount',getShipListInput,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				
			},
			
			/**
		     * @description This method gets the initial api response and then calculates total shipment count.
			 * @param {Object} response - response of init api calls
		     */
			handleInitApiCalls: function(response) {
				if(!iscCore.isVoid(this.model.shipmentCountOutput) && !iscCore.isVoid(this.model.shipmentCountOutput.Shipments) && !iscCore.isVoid(this.model.shipmentCountOutput.Shipments.TotalNumberOfRecords)) {
					this.model.pickupShipmentCount.totalShipmentCount = $filter('number')(this.model.shipmentCountOutput.Shipments.TotalNumberOfRecords);
				}
			},
			
			/**
		     * @description This method opens the advanced search options for shipments.
		     */
			uiOpenAdvanceSearch: function() {
				this.ui.showAdvanceSearch = true;
				iscDomUtility.setFocus(document.getElementById('customerPickup_customer_firstName'));
			},

			/**
		     * @description This method closes the advanced search options for shipments and show basic search options.
		     */
			uiAdvanceClose: function() {
				this.ui.showAdvanceSearch = false;
				$timeout(function (){
					document.getElementById('advanceSearchLink').focus();
				}, 500);
			},
						
			/**
		     * @description This method opens the list of all applicable shpiments for customer pickup.
		     */
			uiOpenTotalShipmentList: function() {
				iscState.goToState("customerpickorderlist", {input:{"FilterOptions": "All"}}, {});
			},

			/**
		     * @description This method gets the control of barcode translation and handles the result according to translation output.
			 * @param {Object} translationOutput - response of translation api calls
		     */
			uiHandleBarcodeOrSearchOutput: function(translationOutput){
				iscPortletShipment.handleShipmentOrderBarcodeTranslation(translationOutput, this.ui.pickupPage);
			},

			/**
		     * @description This method prepares input for advanced search and then fires mashup call.
		     */
			uiAdvanceSearch: function(){
				if(!iscCore.isVoid(this.ui.search)) {
					var searchCriteria = angular.copy(this.ui.search);
					if(searchCriteria.EMailID)
						searchCriteria.EMailIDQryType="FLIKE";
					var shipmentListInput = {};
					if(this.ui.isPickupRecipient){
						shipmentListInput = {"Shipment":{"ShipmentLines":{"ShipmentLine":{"OrderLine":{"PersonInfoMarkFor":searchCriteria}}}}};
					}else{
						shipmentListInput = {"Shipment":{"BillToAddress":searchCriteria}};
					}
					//iscState.goToState("shipmentSearchList", {input:shipmentListInput}, {});
					this.ui.searchCriteria = shipmentListInput;
					iscMashup.callMashup(this,'getShipmentCountForPortletAdvSearch',this.ui.searchCriteria,{}).then(this.handleAdvSearchApiCall.bind(this),angular.noop);
				}else{
					iscModal.showErrorMessage(iscI18n.translate('outboundShipments.MSG_AdvanceSearchBlankCriteria'));
				}
			},
			
			/**
		     * @description This method gets the control of advanced search and handles the result according to search output.
			 * @param {Object} response - response of init api calls
		     */
			handleAdvSearchApiCall: function(response){
				var output = iscMashup.getMashupOutput(response,"getShipmentCountForPortletAdvSearch");
				if(output && output.Shipments){
					output.Shipments.TotalNumberOfRecords = !(output.Shipments.Shipment && output.Shipments.Shipment.length) ? 0 : output.Shipments.Shipment.length;
					iscPortletShipment.handlePortletAdvancedSearch(output, this.ui.pickupPage, this.ui.searchCriteria, angular.copy(iscShipmentStatus.getShipmentStatusCodeList("Pickup")));
				}else{
					iscModal.showErrorMessage(iscI18n.translate('outboundShipments.MSG_ShipmentNotFound'));
				}
				
			}

		});
	}
]);

/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/



angular.module("store").controller("store.views.home.common.moretasks-portlet", [
	"$scope", "iscScreen", "iscPortletPvdr", "iscAppContext", "$interval",
	function($scope, iscScreen, iscPortletPvdr, iscAppContext, $interval) {
		iscScreen.initializeScreen($scope, {  
			model: {},
			mashupRefs: [],
			ui: {
				miniPortletsArray: [],
				currentSelectedPortlet: null,
				isPortletExpanded: false,//need this with currentSelectedPortlet in $interval for animation to work.
				selectedMiniPortletIndex: -1,
				currentSelectedPortletTheme: ""
			},
			_intervalInstance: null,
			
			deriveThemeNameFromControllerName: function(controllerName) {
				var themeName = controllerName;
				themeName = themeName.substring(themeName.lastIndexOf(".") + 1);
				if (themeName.indexOf("-portlet") != -1) {
					themeName = themeName.substring(0, themeName.indexOf("-portlet")) + "-theme";
				}
				return themeName;
			},
			
			initialize: function() {
				this.initializeMiniPortletsArray();
				$scope.$on("$beforeStateChange", function(e, data) {
					// If state I am changing to is /home or /manager-dashboard, do not persist - because we are changing personas.
					if (data != null && data.state !== "/home" && data.state !== "/manager-dashboard") {
						iscAppContext.addToContext("HOME_PAGE_MINIPORTLET_INDEX_PERSONA_SCOPE", this.ui.selectedMiniPortletIndex);
					} else {
						iscAppContext.addToContext("HOME_PAGE_MINIPORTLET_INDEX_PERSONA_SCOPE", -1);
					}
				}.bind(this));
				$scope.$on("$destroy", function() {
					if (this._intervalInstance != null) {
						$interval.cancel(this._intervalInstance);
					}
				}.bind(this));
				var selectedMiniPortletIndex = iscAppContext.getFromContext("HOME_PAGE_MINIPORTLET_INDEX_PERSONA_SCOPE");
				if (!iscCore.isVoid(selectedMiniPortletIndex) && selectedMiniPortletIndex != -1) {
					this.uiHandleMiniPortletClick(this.ui.miniPortletsArray[selectedMiniPortletIndex], selectedMiniPortletIndex);
				}
			},
			
			initializeMiniPortletsArray: function() {
				this.ui.miniPortletsArray = [];
				var portletConfig = iscPortletPvdr.getConfigForMoreTasksPortlet();
				this.ui.miniPortletsArray = angular.copy(portletConfig.childPortletsArray);
				for (var i = 0; i < this.ui.miniPortletsArray.length; i++) {
					this.ui.miniPortletsArray[i]["personaConfig"] = JSON.parse(this.ui.miniPortletsArray[i]["personaConfig"]);
				}
			},
			
			uiHandleMiniPortletClick: function(aMiniPortlet, index) {
				this.ui.selectedMiniPortletIndex = index;
				iscAppContext.addToContext("HOME_PAGE_MINIPORTLET_INDEX_PERSONA_SCOPE", this.ui.selectedMiniPortletIndex);
				this.ui.currentSelectedPortlet = aMiniPortlet;
				this.ui.isPortletExpanded = true;
				this.ui.currentSelectedPortletTheme = this.deriveThemeNameFromControllerName(this.ui.currentSelectedPortlet["controller"]);
			},
			
			uiHandleBackToMoreTasks: function() {
				this.ui.isPortletExpanded = false;
				this.ui.selectedMiniPortletIndex = -1;
				iscAppContext.addToContext("HOME_PAGE_MINIPORTLET_INDEX_PERSONA_SCOPE", this.ui.selectedMiniPortletIndex);
				this.initializeMiniPortletsArray();
				// To allow animation to work, destroy after transition is complete ie 1sec.
				this._intervalInstance = $interval((function() {
					this.ui.currentSelectedPortlet = null;
				}).bind(this), 1000, 1);
			}

		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.common.mytasks-portlet-mini", [
	"$scope", "iscScreen", "iscMashup", "iscResourcePermission",
	function($scope, iscScreen, iscMashup, iscResourcePermission) {
		iscScreen.initializeScreen($scope, {
			model: {
				"shipmentCountOutput": {},
				"batchCountOutput": {}
			},
			mashupRefs: [{
				mashupRefId: 'getShipmentListCountForMyTasks',
				mashupId: 'store.views.home.common.getShipmentListCountForMyTasks',
				modelName: 'shipmentCountOutput'
			}, {
				mashupRefId: 'getBatchListCountForMyTasks',
				mashupId: 'store.views.home.common.getBatchListCountForMyTasks',
				modelName: 'batchCountOutput'
			}],
			
			ui: {
				isMashupCallInProgress: true,
				hasPermissionForBatchPicking: iscResourcePermission.hasPermission("WSC000053"),
				shipmentCount: 0,
				batchCount: 0,
				displayCount: 0
			},
			
			initialize: function() {
				var mashupArray = [];
				mashupArray.push(iscMashup.getMashupRefObj(this, 'getShipmentListCountForMyTasks', {}));
				if (this.ui.hasPermissionForBatchPicking){
					mashupArray.push(iscMashup.getMashupRefObj(this, 'getBatchListCountForMyTasks', {}));
				}
				iscMashup.callMashups(this, mashupArray, {showMask: false}).then(this.handleInitAPIs.bind(this), angular.noop);
			},
			
			handleInitAPIs: function() {
				var shipmentCountModel = this.model.shipmentCountOutput;
				var batchCountModel = this.model.batchCountOutput;
	        	 
				if (!iscCore.isVoid(shipmentCountModel) && !iscCore.isVoid(shipmentCountModel.Shipments) && !iscCore.isVoid(shipmentCountModel.Shipments.TotalNumberOfRecords)) {
					this.ui.shipmentCount = Number(shipmentCountModel.Shipments.TotalNumberOfRecords);
				}
	        	if (!iscCore.isVoid(batchCountModel) && !iscCore.isVoid(batchCountModel.StoreBatchList) && !iscCore.isVoid(batchCountModel.StoreBatchList.TotalNumberOfRecords)) {
	        		this.ui.batchCount = Number(batchCountModel.StoreBatchList.TotalNumberOfRecords);
	        	} 
	        	this.ui.displayCount = this.ui.shipmentCount + this.ui.batchCount;
	        	this.ui.isMashupCallInProgress = false;
			}
		});	
	}
]);
/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/



angular.module("store").controller("store.views.home.common.mytasks-portlet", [
	"$scope", "iscScreen", "iscMashup", "iscResourcePermission","$filter", "iscModal", "iscI18n", "iscState", "$timeout", "iscDomUtility", "iscShipment",
	function($scope, iscScreen, iscMashup, iscResourcePermission, $filter, iscModal, iscI18n, iscState, $timeout, iscDomUtility, iscShipment) {
		iscScreen.initializeScreen($scope, {  
			model: {
				/**
				 * @description contains output model for getShipmentListCountForMyTasks mashup call
				 */
				"shipmentCountOutput":{},
				
				/**
				 * @description contains output model for getBatchListCountForMyTasks mashup call
				 */
				"batchCountOutput":{},
				
				/**
				 * @description contains count of tasks
				 */
				"myTaskCount":{"shipmentCount":0,"totalTaskCount":0,"batchCount":0}
			},
			mashupRefs: [
			             
				/**
				 * @description This mashup is used to get a count of Shipments for current users.
				 */
				{
					mashupRefId: 'getShipmentListCountForMyTasks',
					mashupId: 'store.views.home.common.getShipmentListCountForMyTasks',
					modelName:'shipmentCountOutput'
				},
				
				/**
				 * @description This mashup is used to get a count of batches for current user.
				 */
				{
					mashupRefId: 'getBatchListCountForMyTasks',
					mashupId: 'store.views.home.common.getBatchListCountForMyTasks',
					modelName:'batchCountOutput'
				}
				 
			],
			
			ui : {				
				/**
				 * @property {Boolean} hasPermissionForBatchPicking - True if user has permission for batch picking orders
				 */
				hasPermissionForBatchPicking:iscResourcePermission.hasPermission("WSC000053"),
			},
			        
			/**
		     * @description This method initialize the controller and invokes mashup to get count for tasks.
		     */ 
			initialize: function() {

				var mashupArray = [];
				mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentListCountForMyTasks',{}));
				 
				 if(this.ui.hasPermissionForBatchPicking){
					mashupArray.push(iscMashup.getMashupRefObj(this,'getBatchListCountForMyTasks',{}));
				 }
				
				if(mashupArray.length > 0) {
					iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				}
				
			},
			
			/**
		     * @description This method gets the initial api response and then calculates total task count.
			 * @param {Object} response - response of init api calls
		     */
			handleInitApiCalls: function(response) {
				var shipmentCountModel = this.model.shipmentCountOutput;
				var batchCountModel = this.model.batchCountOutput;
	        	var totalTaskCount = Number(0);
	        	 
				if(!iscCore.isVoid(shipmentCountModel) && !iscCore.isVoid(shipmentCountModel.Shipments) && !iscCore.isVoid(shipmentCountModel.Shipments.TotalNumberOfRecords)) {
					this.model.myTaskCount.shipmentCount = $filter('number')(shipmentCountModel.Shipments.TotalNumberOfRecords);
					totalTaskCount += Number($filter('number')(shipmentCountModel.Shipments.TotalNumberOfRecords));
				}
	        	 
	        	if(!iscCore.isVoid(batchCountModel) && !iscCore.isVoid(batchCountModel.StoreBatchList) && !iscCore.isVoid(batchCountModel.StoreBatchList.TotalNumberOfRecords)) {
	        		this.model.myTaskCount.batchCount = $filter('number')(batchCountModel.StoreBatchList.TotalNumberOfRecords);
					totalTaskCount += Number($filter('number')(batchCountModel.StoreBatchList.TotalNumberOfRecords));
	        	} 
	        	this.model.myTaskCount.totalTaskCount = totalTaskCount;
			},
			
			/**
		     * @description This method opens the my task list screen.
		     */
			uiOpenMyTaskList: function(taskType) {
				iscState.goToState("mytaskslist", {}, {});
			}

		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
 *@package store.views.home.manager-dashboard
 *@class manager-dashboard-bopus-portlet
 *@description This portlet contains the BOPUS chart. It contains the SLA and order status charts.
 */

angular.module("store").controller("store.views.home.manager-dashboard.manager-dashboard-bopus-portlet", [
	"$scope", "iscScreen", "iscState", "iscModal", "iscI18n", "iscMashup", "iscResourcePermission", "iscDialChartD3Pvdr", "iscManagerDashboardService", "iscDialChartD3Service", "$interval",
	function($scope, iscScreen, iscState, iscModal, iscI18n, iscMashup, iscResourcePermission, iscDialChartD3Pvdr, iscManagerDashboardService, iscDialChartD3Service, $interval) {
		iscScreen.initializeScreen($scope, {
			model: {
				/**
                 *@iscdoc model
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@name bopus_sla_shipmentCountForGivenStatuses
                 *@description Stores the bopus_sla_getShipmentCountForGivenStatuses mashup output.
                 */
				"bopus_sla_shipmentCountForGivenStatuses": {},
				/**
                 *@iscdoc model
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@name bopus_orderstatus_shipmentCountForGivenStatuses
                 *@description Stores the bopus_orderstatus_getShipmentCountForGivenStatuses mashup output.
                 */
				"bopus_orderstatus_shipmentCountForGivenStatuses": {}
			},
			mashupRefs: [{
				/**
				 *@iscdoc mashup
				 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
				 *@mashupid bopus_sla_getShipmentCountForGivenStatuses
				 *@mashuprefid bopus_sla_getShipmentCountForGivenStatuses
				 *@modelname bopus_sla_shipmentCountForGivenStatuses
				 *@description Mashup used to get the number of shipments under each SLA category in config json for BOPUS fulfillment method.
				 */
  				mashupRefId: "bopus_sla_getShipmentCountForGivenStatuses",
  				mashupId: "bopus_sla_getShipmentCountForGivenStatuses",
				modelName: "bopus_sla_shipmentCountForGivenStatuses"
  			}, {
				/**
				 *@iscdoc mashup
				 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
				 *@mashupid bopus_sla_getShipmentCountForGivenStatuses
				 *@mashuprefid bopus_sla_getShipmentCountForGivenStatuses
				 *@modelname bopus_sla_shipmentCountForGivenStatuses
				 *@description Mashup used to get the number of shipments under each order status category in config json for BOPUS fulfillment method.
				 */
				mashupRefId: "bopus_orderstatus_getShipmentCountForGivenStatuses",
  				mashupId: "bopus_orderstatus_getShipmentCountForGivenStatuses",
				modelName: "bopus_orderstatus_shipmentCountForGivenStatuses"
			}],      
			ui: {
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@property {Boolean} hasBOPUSPermission - Flag to determine if the current logged in user has permission for BOPUS capability.
                 */
				"hasBOPUSPermission": iscResourcePermission.hasPermission("WSC000038"),
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@property {Boolean} hasSFSPermission - Flag to determine if the current logged in user has permission for SFS capability.
                 */
				"hasSFSPermission": iscResourcePermission.hasPermission("WSC000039"),
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@property {String} currentView - The view or chart to display to user. If user has permission for BOPUS and SFS, then only SLA charts are displayed on each of the portlets. In case user has permission for only one of the two, then SLA and order status charts are displayed side by side only for the portlet for which user has permission.
                 */
				"currentView": (iscResourcePermission.hasPermission("WSC000038") && iscResourcePermission.hasPermission("WSC000039")) ? "sla" : "slaNorderstatus",//"sla", "orderstatus", "slaNorderstatus"
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@property {Boolean} isMashupCallInProgress - Flag to track if a mashup call is in progress.
                 */
				"isMashupCallInProgress": false,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@property {Boolean} isCommonCodeSLAConfigValidFor_bopus - Flag is set to true if the SLA configuration for enterprize matches the SLA config in manager dashboard config json for BOPUS. If validation returns false, the BOPUS charts on SFS portlet can not be displayed and appropriate message is displayed.
                 */
				"isCommonCodeSLAConfigValidFor_bopus": true,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@property {String} iconLabel - Configuration for the SLA chart. Label to display below the total count in the chart.
                 */
				"iconLabel": iscI18n.translate("managerDashboard.LABEL_OrdersBySLA"),
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@property {Boolean} hideLink - Flag used to determine if the link to display order status or SLA should be shown or not. It is by default hidden when data is loading.
                 */
				"hideLink": true,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@property {Object} bopus_data - Json data that contains details for SLA and order status charts.
                 */
				"bopus_data": {
					"sla": [],
					"orderstatus": []
				},
				// only used in single permission scenario. Else value is "".
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@property {String} toggleClassValue_sla - CSS class to apply on the container for SLA charts. It can change based on user permissions.
                 */
				"toggleClassValue_sla": "",//"toggle-visibility-clazz"
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
                 *@property {String} toggleClassValue_orderstatus - CSS class to apply on the container for order status charts. It can change based on user permissions.
                 */
				"toggleClassValue_orderstatus": (iscResourcePermission.hasPermission("WSC000038") && iscResourcePermission.hasPermission("WSC000039")) ? "" : "toggle-visibility-clazz"//"toggle-visibility-clazz"
			},
			/**
			 *@iscdoc viewinit
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
			 *@method initialize
			 *@description Initializes the bopus portlet screen by associating the handlers for event_mgrDashboardPortletRefresh and event_mgrDashboardCommonCodeDataAvailable events published by manager dashboard. Event handlers for click or selection of chart region, legend (event_chartRegionSelection) and center region (event_chartCenterRegionSelection) are also added.
			 */
			initialize: function() {
				var mgrDashboardConfig = iscDialChartD3Pvdr.getManagerDashboardConfig();
				var bopusConfig = mgrDashboardConfig["pickupInStore"];
				
				this._slaConfig = bopusConfig["sla"];
				this._orderStatusConfig = bopusConfig["shipmentStatus"];
				if (iscManagerDashboardService.bopus_getActiveChart() != null) {
					this.ui.currentView = iscManagerDashboardService.bopus_getActiveChart();
				}
				
				$scope.$on("event_mgrDashboardPortletRefresh", function(event, args) {
					this.callRequiredMashup();
				}.bind(this));
				
				$scope.$on("event_chartRegionSelection", function(event, args) {
					this.validateAndGotoRequestedState(args);
				}.bind(this));
				
				$scope.$on("event_chartCenterRegionSelection", function(event, args) {
					this.validateAndGotoRequestedState(args);
				}.bind(this));
				
				if (iscManagerDashboardService.getCommonCodeListData() == null) {
					$scope.$on("event_mgrDashboardCommonCodeDataAvailable", function(event, args) {
						this.ui.hideLink = false;
						this.callRequiredMashup();
					}.bind(this));
				} else {
					this.ui.hideLink = false;
					this.callRequiredMashup();
				}
				this._hiddenPortletActiveHack();
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
			 *@method callRequiredMashup
			 *@description Method invokes the mashups required for SLA or order status or both based on user permissions.
			 */
			callRequiredMashup: function() {
				this.ui.isCommonCodeSLAConfigValidFor_bopus = iscManagerDashboardService.validateCommonCodeListDataForFulfillmentMethod("bopus");
				var mashupArray = [];
				if (this.ui.currentView === "slaNorderstatus") {
					mashupArray = [
						(iscMashup.getMashupRefObj(this, "bopus_sla_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._slaConfig, this._orderStatusConfig, "bopus", "sla"))),
						(iscMashup.getMashupRefObj(this, "bopus_orderstatus_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._slaConfig, this._orderStatusConfig, "bopus", "orderstatus")))
					];
				} else if (this.ui.currentView === "orderstatus") {
					mashupArray = [
						(iscMashup.getMashupRefObj(this, "bopus_orderstatus_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._slaConfig, this._orderStatusConfig, "bopus", this.ui.currentView)))
					];
				} else {
					mashupArray = [
						(iscMashup.getMashupRefObj(this, "bopus_sla_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._slaConfig, this._orderStatusConfig, "bopus", this.ui.currentView)))
					];
				}
				if (!this.ui.isCommonCodeSLAConfigValidFor_bopus) {
					// sla entry will be 1st.
					if (this.ui.currentView === "slaNorderstatus" || this.ui.currentView === "sla") {
						mashupArray.splice(0, 1);
					}
				}
				if (mashupArray.length > 0) {
					this.ui.isMashupCallInProgress = true;
					iscMashup.callMashups(this, mashupArray, {showMask: false}).then(this.handleMashupOutput.bind(this),angular.noop);
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
			 *@method uiSwitchView
			 *@description Method updates the currently selected view and the chart based on when the user clicks on SLA or order status link at the bottom of the portlet and calls the appropriate mashups.
			 *@param {String} currentView - The view currently selected view by the user.
			 */
			uiSwitchView: function(currentView) {
				if (currentView === "orderstatus") {
					this.ui.toggleClassValue_orderstatus = "";
					// Not having permission to both is not a valid use case. Not having permission to any one resource is expected.
					if (!(iscResourcePermission.hasPermission("WSC000038") && iscResourcePermission.hasPermission("WSC000039"))) {
						this.ui.toggleClassValue_sla = "toggle-visibility-clazz";
					} else {
						this.ui.toggleClassValue_sla = "";
					}
				} else {
					this.ui.toggleClassValue_sla = "";
					// Not having permission to both is not a valid use case. Not having permission to any one resource is expected.
					if (!(iscResourcePermission.hasPermission("WSC000038") && iscResourcePermission.hasPermission("WSC000039"))) {
						this.ui.toggleClassValue_orderstatus = "toggle-visibility-clazz";
					} else {
						this.ui.toggleClassValue_orderstatus = "";
					}
				}
				if (this.ui.currentView !== "slaNorderstatus") {
					this.ui.currentView = currentView;
				}
				iscManagerDashboardService.bopus_setActiveChart(this.ui.currentView);
				this.callRequiredMashup();
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
			 *@method validateAndGotoRequestedState
			 *@description Method called when the user clicks on center region or a region or legend on the chart.
			 *@param {Object} args - Json containing information about the selected area and the id of the chart.
			 */
			validateAndGotoRequestedState: function(args) {
				if (args["id"] === "bopusChart_orderStatus" || args["id"] === "bopusChart_sla") {
					var selectedStatus = args.name;
					var currentView = this.ui.currentView;
					if (currentView === "slaNorderstatus") {
						currentView = (args["id"] === "bopusChart_orderStatus") ? "orderstatus" : "sla";
					}
					if (selectedStatus == null) {
						selectedStatus = iscManagerDashboardService.getFirstDisplayStatusInArray("bopus", currentView);
					}
					iscState.goToState("shipmentList", {
						"fulfillmentMethod": "bopus",
						"view": currentView,
						"selectedStatus": selectedStatus
					}, {});
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
			 *@method handleMashupOutput
			 *@description Method handles the mashup output and delegates UI updation to correct method.
			 */
			handleMashupOutput: function() {
				if (this.ui.currentView === "slaNorderstatus") {
					this.handleMashupOutput_sla();
					this.handleMashupOutput_orderstatus();
				} else if (this.ui.currentView === "orderstatus") {
					this.handleMashupOutput_orderstatus();
				} else {
					if (this.ui.currentView == null) {
						this.ui.currentView = "sla";
						iscManagerDashboardService.bopus_setActiveChart(this.ui.currentView);
						console.warn("currentView came null in manager-dashboard-bopus-portlet, defaulting to sla.");
					}
					this.handleMashupOutput_sla();
				}
				this.ui.isMashupCallInProgress = false;
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
			 *@method handleMashupOutput_orderstatus
			 *@description Method publishes the event: event_createChart to update the order status chart.
			 */
			handleMashupOutput_orderstatus: function() {
				var bopus_data = iscManagerDashboardService.getDataFromModel(null, this.model.bopus_orderstatus_shipmentCountForGivenStatuses, "bopus", "orderstatus");
				$interval(function() {
					$scope.$broadcast("event_createChart", {
						"id": "bopusChart_orderStatus",
						"data": bopus_data["orderstatus"]
					});
				}.bind(this), 10, 1);
				this.ui.bopus_data["orderstatus"] = bopus_data["orderstatus"];
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-bopus-portlet
			 *@method handleMashupOutput_sla
			 *@description Method publishes the event: event_createChart to update the SLA chart.
			 */
			handleMashupOutput_sla: function() {
				var bopus_data = iscManagerDashboardService.getDataFromModel(this.model.bopus_sla_shipmentCountForGivenStatuses, null, "bopus", "sla");
				$interval(function() {
					$scope.$broadcast("event_createChart", {
						"id": "bopusChart_sla",
						"data": bopus_data["sla"]
					});
				}.bind(this), 10, 1);
				this.ui.bopus_data["sla"] = bopus_data["sla"];
			},
			_hiddenPortletActiveHack: function() {
				// TODO: Below is a hack to re-render the chart by again passing data when the portlet is hidden. This is a temp solution to the issue when portlet height is 0 in mobile.
				try {
					$scope.$watch("$parent.$parent.$parent.$parent.active", function (newValue, oldValue) {
						if (newValue && newValue != oldValue) {
							if (this.ui.currentView === "slaNorderstatus") {// This if should not be called.
								this.handleMashupOutput_sla();
								this.handleMashupOutput_orderstatus();
							} else if (this.ui.currentView === "orderstatus") {
								this.handleMashupOutput_orderstatus();
							} else {
								if (this.ui.currentView == null) {
									console.warn("Special watch expression: currentView came null in manager-dashboard-bopus-portlet, defaulting to sla.");
								}
								this.handleMashupOutput_sla();
							}
							console.log("manager-dashboard-bopus-portlet.controller: again re-rendering chart as portlet became visible.");
						}
					}.bind(this));
				} catch (errorObj) {
					console.warn("manager-dashboard-bopus-portlet.controller: issue while adding listener to try and track the active portlet.", errorObj);
				}
			}
		});	
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
 *@package store.views.home.manager-dashboard
 *@class manager-dashboard-sfs-portlet
 *@description This portlet contains the SFS chart. It contains the SLA and order status charts.
 */

angular.module("store").controller("store.views.home.manager-dashboard.manager-dashboard-sfs-portlet", [
	"$scope", "iscScreen", "iscState", "iscModal", "iscI18n", "iscMashup", "iscResourcePermission", "iscDialChartD3Pvdr", "iscManagerDashboardService", "iscDialChartD3Service", "$interval",
	function($scope, iscScreen, iscState, iscModal, iscI18n, iscMashup, iscResourcePermission, iscDialChartD3Pvdr, iscManagerDashboardService, iscDialChartD3Service, $interval) {
		iscScreen.initializeScreen($scope, {
			model: {
				/**
                 *@iscdoc model
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@name sfs_sla_shipmentCountForGivenStatuses
                 *@description Stores the sfs_sla_getShipmentCountForGivenStatuses mashup output.
                 */
				"sfs_sla_shipmentCountForGivenStatuses": {},
				/**
                 *@iscdoc model
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@name sfs_orderstatus_shipmentCountForGivenStatuses
                 *@description Stores the sfs_orderstatus_getShipmentCountForGivenStatuses mashup output.
                 */
				"sfs_orderstatus_shipmentCountForGivenStatuses": {}
			},
			mashupRefs: [{
				/**
				 *@iscdoc mashup
				 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
				 *@mashupid sfs_sla_getShipmentCountForGivenStatuses
				 *@mashuprefid sfs_sla_getShipmentCountForGivenStatuses
				 *@modelname sfs_sla_shipmentCountForGivenStatuses
				 *@description Mashup used to get the number of shipments under each SLA category in config json for SFS fulfillment method.
				 */
  				mashupRefId: "sfs_sla_getShipmentCountForGivenStatuses",
  				mashupId: "sfs_sla_getShipmentCountForGivenStatuses",
				modelName: "sfs_sla_shipmentCountForGivenStatuses"
  			}, {
				/**
				 *@iscdoc mashup
				 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
				 *@mashupid sfs_orderstatus_getShipmentCountForGivenStatuses
				 *@mashuprefid sfs_orderstatus_getShipmentCountForGivenStatuses
				 *@modelname sfs_orderstatus_shipmentCountForGivenStatuses
				 *@description Mashup used to get the number of shipments under each order status category in config json for SFS fulfillment method.
				 */
				mashupRefId: "sfs_orderstatus_getShipmentCountForGivenStatuses",
  				mashupId: "sfs_orderstatus_getShipmentCountForGivenStatuses",
				modelName: "sfs_orderstatus_shipmentCountForGivenStatuses"
			}],      
			ui: {
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@property {Boolean} hasBOPUSPermission - Flag to determine if the current logged in user has permission for BOPUS capability.
                 */
				"hasBOPUSPermission": iscResourcePermission.hasPermission("WSC000038"),
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@property {Boolean} hasSFSPermission - Flag to determine if the current logged in user has permission for SFS capability.
                 */
				"hasSFSPermission": iscResourcePermission.hasPermission("WSC000039"),
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@property {String} currentView - The view or chart to display to user. If user has permission for BOPUS and SFS, then only SLA charts are displayed on each of the portlets. In case user has permission for only one of the two, then SLA and order status charts are displayed side by side only for the portlet for which user has permission.
                 */
				"currentView": (iscResourcePermission.hasPermission("WSC000038") && iscResourcePermission.hasPermission("WSC000039")) ? "sla" : "slaNorderstatus",//"sla", "orderstatus", "slaNorderstatus"
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@property {Boolean} isMashupCallInProgress - Flag to track if a mashup call is in progress.
                 */
				"isMashupCallInProgress": false,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@property {Boolean} isCommonCodeSLAConfigValidFor_sfs - Flag is set to true if the SLA configuration for enterprize matches the SLA config in manager dashboard config json for SFS. If validation returns false, the SLA charts on SFS portlet can not be displayed and appropriate message is displayed.
                 */
				"isCommonCodeSLAConfigValidFor_sfs": true,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@property {String} iconLabel - Configuration for the SLA chart. Label to display below the total count in the chart.
                 */
				"iconLabel": iscI18n.translate("managerDashboard.LABEL_OrdersBySLA"),
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@property {Boolean} hideLink - Flag used to determine if the link to display order status or SLA should be shown or not. It is by default hidden when data is loading.
                 */
				"hideLink": true,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@property {Object} sfs_data - Json data that contains details for SLA and order status charts.
                 */
				"sfs_data": {
					"sla": {},
					"orderstatus": {}
				},
				// only used in single permission scenario. Else value is "".
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@property {String} toggleClassValue_sla - CSS class to apply on the container for SLA charts. It can change based on user permissions.
                 */
				"toggleClassValue_sla": "",//"toggle-visibility-clazz"
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
                 *@property {String} toggleClassValue_orderstatus - CSS class to apply on the container for order status charts. It can change based on user permissions.
                 */
				"toggleClassValue_orderstatus": (iscResourcePermission.hasPermission("WSC000038") && iscResourcePermission.hasPermission("WSC000039")) ? "" : "toggle-visibility-clazz"//"toggle-visibility-clazz"
			},
			/**
			 *@iscdoc viewinit
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
			 *@method initialize
			 *@description Initializes the sfs portlet screen by associating the handlers for event_mgrDashboardPortletRefresh and event_mgrDashboardCommonCodeDataAvailable events published by manager dashboard. Event handlers for click or selection of chart region, legend (event_chartRegionSelection) and center region (event_chartCenterRegionSelection) are also added.
			 */
			initialize: function() {
				var mgrDashboardConfig = iscDialChartD3Pvdr.getManagerDashboardConfig();
				var sfsConfig = mgrDashboardConfig["shipFromStore"];
				
				this._slaConfig = sfsConfig["sla"];
				this._orderStatusConfig = sfsConfig["shipmentStatus"];
				if (iscManagerDashboardService.sfs_getActiveChart() != null) {
					this.ui.currentView = iscManagerDashboardService.sfs_getActiveChart();
				}
				
				$scope.$on("event_mgrDashboardPortletRefresh", function(event, args) {
					this.callRequiredMashup();
				}.bind(this));
				
				$scope.$on("event_chartRegionSelection", function(event, args) {
					this.validateAndGotoRequestedState(args);
				}.bind(this));
				
				$scope.$on("event_chartCenterRegionSelection", function(event, args) {
					this.validateAndGotoRequestedState(args);
				}.bind(this));
				
				if (iscManagerDashboardService.getCommonCodeListData() == null) {
					$scope.$on("event_mgrDashboardCommonCodeDataAvailable", function(event, args) {
						this.ui.hideLink = false;
						this.callRequiredMashup();
					}.bind(this));
				} else {
					this.ui.hideLink = false;
					this.callRequiredMashup();
				}
				this._hiddenPortletActiveHack();
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
			 *@method callRequiredMashup
			 *@description Method invokes the mashups required for SLA or order status or both based on user permissions.
			 */
			callRequiredMashup: function() {
				this.ui.isCommonCodeSLAConfigValidFor_sfs = iscManagerDashboardService.validateCommonCodeListDataForFulfillmentMethod("sfs");
				var mashupArray = [];
				if (this.ui.currentView === "slaNorderstatus") {
					mashupArray = [
						(iscMashup.getMashupRefObj(this, "sfs_sla_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._slaConfig, this._orderStatusConfig, "sfs", "sla"))),
						(iscMashup.getMashupRefObj(this, "sfs_orderstatus_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._slaConfig, this._orderStatusConfig, "sfs", "orderstatus")))
					];
				} else if (this.ui.currentView === "orderstatus") {
					mashupArray = [
						(iscMashup.getMashupRefObj(this, "sfs_orderstatus_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._slaConfig, this._orderStatusConfig, "sfs", this.ui.currentView)))
					];
				} else {
					mashupArray = [
						(iscMashup.getMashupRefObj(this, "sfs_sla_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._slaConfig, this._orderStatusConfig, "sfs", this.ui.currentView)))
					];
				}
				if (!this.ui.isCommonCodeSLAConfigValidFor_sfs) {
					// sla entry will be 1st.
					if (this.ui.currentView === "slaNorderstatus" || this.ui.currentView === "sla") {
						mashupArray.splice(0, 1);
					}
				}
				if (mashupArray.length > 0) {
					this.ui.isMashupCallInProgress = true;
					iscMashup.callMashups(this, mashupArray, {showMask: false}).then(this.handleMashupOutput.bind(this),angular.noop);
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
			 *@method uiSwitchView
			 *@description Method updates the currently selected view and the chart based on when the user clicks on SLA or order status link at the bottom of the portlet and calls the appropriate mashups.
			 *@param {String} currentView - The view currently selected view by the user.
			 */
			uiSwitchView: function(currentView) {
				if (currentView === "orderstatus") {
					this.ui.toggleClassValue_orderstatus = "";
					// Not having permission to both is not a valid use case. Not having permission to any one resource is expected.
					if (!(iscResourcePermission.hasPermission("WSC000038") && iscResourcePermission.hasPermission("WSC000039"))) {
						this.ui.toggleClassValue_sla = "toggle-visibility-clazz";
					} else {
						this.ui.toggleClassValue_sla = "";
					}
				} else {
					this.ui.toggleClassValue_sla = "";
					// Not having permission to both is not a valid use case. Not having permission to any one resource is expected.
					if (!(iscResourcePermission.hasPermission("WSC000038") && iscResourcePermission.hasPermission("WSC000039"))) {
						this.ui.toggleClassValue_orderstatus = "toggle-visibility-clazz";
					} else {
						this.ui.toggleClassValue_orderstatus = "";
					}
				}
				if (this.ui.currentView !== "slaNorderstatus") {
					this.ui.currentView = currentView;
				}
				iscManagerDashboardService.sfs_setActiveChart(this.ui.currentView);
				this.callRequiredMashup();
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
			 *@method validateAndGotoRequestedState
			 *@description Method called when the user clicks on center region or a region or legend on the chart.
			 *@param {Object} args - Json containing information about the selected area and the id of the chart.
			 */
			validateAndGotoRequestedState: function(args) {
				if (args["id"] === "sfsChart_orderStatus" || args["id"] === "sfsChart_sla") {
					var selectedStatus = args.name;
					var currentView = this.ui.currentView;
					if (currentView === "slaNorderstatus") {
						currentView = (args["id"] === "sfsChart_orderStatus") ? "orderstatus" : "sla";
					}
					if (selectedStatus == null) {
						selectedStatus = iscManagerDashboardService.getFirstDisplayStatusInArray("sfs", currentView);
					}
					iscState.goToState("shipmentList", {
						"fulfillmentMethod": "sfs",
						"view": currentView,
						"selectedStatus": selectedStatus
					}, {});
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
			 *@method handleMashupOutput
			 *@description Method handles the mashup output and delegates UI updation to correct method.
			 */
			handleMashupOutput: function() {
				if (this.ui.currentView === "slaNorderstatus") {
					this.handleMashupOutput_sla();
					this.handleMashupOutput_orderstatus();
				} else if (this.ui.currentView === "orderstatus") {
					this.handleMashupOutput_orderstatus();
				} else {
					if (this.ui.currentView == null) {
						this.ui.currentView = "sla";
						iscManagerDashboardService.sfs_setActiveChart(this.ui.currentView);
						console.warn("currentView came null in manager-dashboard-sfs-portlet, defaulting to sla.");
					}
					this.handleMashupOutput_sla();
				}
				this.ui.isMashupCallInProgress = false;
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
			 *@method handleMashupOutput_orderstatus
			 *@description Method publishes the event: event_createChart to update the order status chart.
			 */
			handleMashupOutput_orderstatus: function() {
				var sfs_data = iscManagerDashboardService.getDataFromModel(null, this.model.sfs_orderstatus_shipmentCountForGivenStatuses, "sfs", "orderstatus");
				$interval(function() {
					$scope.$broadcast("event_createChart", {
						"id": "sfsChart_orderStatus",
						"data": sfs_data["orderstatus"]
					});
				}.bind(this), 10, 1);
				this.ui.sfs_data["orderstatus"] = sfs_data["orderstatus"];
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard-sfs-portlet
			 *@method handleMashupOutput_sla
			 *@description Method publishes the event: event_createChart to update the SLA chart.
			 */
			handleMashupOutput_sla: function() {
				var sfs_data = iscManagerDashboardService.getDataFromModel(this.model.sfs_sla_shipmentCountForGivenStatuses, null, "sfs", "sla");
				$interval(function() {
					$scope.$broadcast("event_createChart", {
						"id": "sfsChart_sla",
						"data": sfs_data["sla"]
					});
				}.bind(this), 10, 1);
				this.ui.sfs_data["sla"] = sfs_data["sla"];
			},
			_hiddenPortletActiveHack: function() {
				// TODO: Below is a hack to re-render the chart by again passing data when the portlet is hidden. This is a temp solution to the issue when portlet height is 0 in mobile.
				try {
					$scope.$watch("$parent.$parent.$parent.$parent.active", function (newValue, oldValue) {
						if (newValue && newValue != oldValue) {
							if (this.ui.currentView === "slaNorderstatus") {// This if should not be called.
								this.handleMashupOutput_sla();
								this.handleMashupOutput_orderstatus();
							} else if (this.ui.currentView === "orderstatus") {
								this.handleMashupOutput_orderstatus();
							} else {
								if (this.ui.currentView == null) {
									console.warn("Special watch expression: currentView came null in manager-dashboard-sfs-portlet, defaulting to sla.");
								}
								this.handleMashupOutput_sla();
							}
							console.log("manager-dashboard-sfs-portlet.controller: again re-rendering chart as portlet became visible.");
						}
					}.bind(this));
				} catch (errorObj) {
					console.warn("manager-dashboard-sfs-portlet.controller: issue while adding listener to try and track the active portlet.", errorObj);
				}
			}
		});	
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.home.manager-dashboard.manager-dashboard
 *@package store.views.home.manager-dashboard
 *@class manager-dashboard-sfs-portlet
 *@description This is the home page for manager dashboard. It contains a BOPUS and SFS portlet as well as a top portlet that displays a sum of all the orders across BOPUS and SFS.
 */

angular.module("store").controller("store.views.home.manager-dashboard.manager-dashboard", [
	"$scope", "$rootScope", "iscScreen", "iscState", "iscAppInfo", "iscPersona", "iscDialChartD3Pvdr", "iscHttpRequest", "iscResourcePermission", "iscMashup", "iscManagerDashboardService", "iscDialChartD3Service", "$interval",
	function($scope, $rootScope, iscScreen, iscState, iscAppInfo, iscPersona, iscDialChartD3Pvdr, iscHttpRequest, iscResourcePermission, iscMashup, iscManagerDashboardService, iscDialChartD3Service, $interval) {
		iscScreen.initializeScreen($scope, {
			model: {
				/**
                 *@iscdoc model
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@name commonCodeListData_combined
                 *@description Stores the mgrdb_getCommonCodeListForSLA mashup output.
                 */
				"commonCodeListData_combined": {},
				/**
                 *@iscdoc model
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@name dashboardPollingIntervalRuleDetails
                 *@description Stores the mgrdb_getDashboardPollingIntervalRuleDetails mashup output.
                 */
				"dashboardPollingIntervalRuleDetails": {},
				/**
                 *@iscdoc model
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@name bopus_sla_shipmentCountForGivenStatuses
                 *@description Stores the bopus_sla_getShipmentCountForGivenStatuses mashup output.
                 */
				"bopus_sla_shipmentCountForGivenStatuses": {},
				/**
                 *@iscdoc model
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@name bopus_orderstatus_shipmentCountForGivenStatuses
                 *@description Stores the bopus_orderstatus_getShipmentCountForGivenStatuses mashup output.
                 */
				"bopus_orderstatus_shipmentCountForGivenStatuses": {},
				/**
                 *@iscdoc model
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@name sfs_sla_shipmentCountForGivenStatuses
                 *@description Stores the sfs_sla_getShipmentCountForGivenStatuses mashup output.
                 */
				"sfs_sla_shipmentCountForGivenStatuses": {},
				/**
                 *@iscdoc model
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@name sfs_orderstatus_shipmentCountForGivenStatuses
                 *@description Stores the sfs_orderstatus_getShipmentCountForGivenStatuses mashup output.
                 */
				"sfs_orderstatus_shipmentCountForGivenStatuses": {}
			},
			mashupRefs: [{
				/**
                 *@iscdoc mashup
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@mashupid mgrdb_getCommonCodeListForSLA
                 *@mashuprefid mgrdb_getCommonCodeListForSLA
                 *@modelname commonCodeListData_combined
                 *@description Mashup used to get the common codes corresponding to each SLA category.
                 */
				mashupRefId: "mgrdb_getCommonCodeListForSLA",
  				mashupId: "mgrdb_getCommonCodeListForSLA",
				modelName: "commonCodeListData_combined"
			}, {
				/**
                 *@iscdoc mashup
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@mashupid mgrdb_getDashboardPollingIntervalRuleDetails
                 *@mashuprefid mgrdb_getDashboardPollingIntervalRuleDetails
                 *@modelname dashboardPollingIntervalRuleDetails
                 *@description Mashup used to get information about the polling interval which is used to update the manager dashboard charts.
                 */
				mashupRefId: "mgrdb_getDashboardPollingIntervalRuleDetails",
				mashupId: "mgrdb_getDashboardPollingIntervalRuleDetails",
				modelName: "dashboardPollingIntervalRuleDetails"
			}, {
				/**
                 *@iscdoc mashup
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@mashupid bopus_sla_getShipmentCountForGivenStatuses
                 *@mashuprefid bopus_sla_getShipmentCountForGivenStatuses
                 *@modelname bopus_sla_shipmentCountForGivenStatuses
                 *@description Mashup used to get the number of shipments under each SLA category in config json for BOPUS fulfillment method.
                 */
				mashupRefId: "bopus_sla_getShipmentCountForGivenStatuses",
  				mashupId: "bopus_sla_getShipmentCountForGivenStatuses",
				modelName: "bopus_sla_shipmentCountForGivenStatuses"
  			}, {
				/**
                 *@iscdoc mashup
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@mashupid bopus_orderstatus_getShipmentCountForGivenStatuses
                 *@mashuprefid bopus_orderstatus_getShipmentCountForGivenStatuses
                 *@modelname bopus_orderstatus_shipmentCountForGivenStatuses
                 *@description Mashup used to get the number of shipments under each order status category in config json for BOPUS fulfillment method.
                 */
				mashupRefId: "bopus_orderstatus_getShipmentCountForGivenStatuses",
  				mashupId: "bopus_orderstatus_getShipmentCountForGivenStatuses",
				modelName: "bopus_orderstatus_shipmentCountForGivenStatuses"
			}, {
				/**
                 *@iscdoc mashup
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@mashupid sfs_sla_getShipmentCountForGivenStatuses
                 *@mashuprefid sfs_sla_getShipmentCountForGivenStatuses
                 *@modelname sfs_sla_shipmentCountForGivenStatuses
                 *@description Mashup used to get the number of shipments under each SLA category in config json for SFS fulfillment method.
                 */
				mashupRefId: "sfs_sla_getShipmentCountForGivenStatuses",
  				mashupId: "sfs_sla_getShipmentCountForGivenStatuses",
				modelName: "sfs_sla_shipmentCountForGivenStatuses"
  			}, {
				/**
                 *@iscdoc mashup
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@mashupid sfs_orderstatus_getShipmentCountForGivenStatuses
                 *@mashuprefid sfs_orderstatus_getShipmentCountForGivenStatuses
                 *@modelname sfs_orderstatus_shipmentCountForGivenStatuses
                 *@description Mashup used to get the number of shipments under each order status category in config json for SFS fulfillment method.
                 */
				mashupRefId: "sfs_orderstatus_getShipmentCountForGivenStatuses",
  				mashupId: "sfs_orderstatus_getShipmentCountForGivenStatuses",
				modelName: "sfs_orderstatus_shipmentCountForGivenStatuses"
			}],
			ui: {
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Boolean} hasOrderCapturePermission - Flag to determine if the current logged in user has permission for Order Capture or other angular tasks. This applies only to fixed user interface portlets.
                 */
				hasOrderCapturePermission: (iscResourcePermission.hasPermission("WSC000031") || iscResourcePermission.hasPermission("WSC000033") || iscResourcePermission.hasPermission("WSC000047") || iscResourcePermission.hasPermission("WSC000041")),
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Boolean} hasBOPUSPermission - Flag to determine if the current logged in user has permission for BOPUS capability. The BOPUS portlet is shown if user has permission.
                 */
				hasBOPUSPermission: iscResourcePermission.hasPermission("WSC000038"),
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Boolean} hasSFSPermission - Flag to determine if the current logged in user has permission for SFS capability. The SFS portlet is shown if user has permission.
                 */
				hasSFSPermission: iscResourcePermission.hasPermission("WSC000039"),
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Boolean} isCommonCodeSLAConfigValidFor_bopus - Flag is set to true if the SLA configuration for enterprize matches the SLA config in manager dashboard config json for BOPUS. If validation returns false, the SLA charts on BOPUS portlet can not be displayed and appropriate message is displayed.
                 */
				isCommonCodeSLAConfigValidFor_bopus: true,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Boolean} isCommonCodeSLAConfigValidFor_sfs - Flag is set to true if the SLA configuration for enterprize matches the SLA config in manager dashboard config json for SFS. If validation returns false, the SLA charts on SFS portlet can not be displayed and appropriate message is displayed.
                 */
				isCommonCodeSLAConfigValidFor_sfs: true,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Boolean} hideLink - Flag used to determine if the link to display order status or SLA should be shown in the top portlet.
                 */
				hideLink: true,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {String} slaAreaClazz - CSS class set to show or hide the content for SLA on the top portlet.
                 */
				slaAreaClazz: "visibility-clazz-invisible",
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {String} orderstatusAreaClazz - CSS class set to show or hide the content for order status on the top portlet.
                 */
				orderstatusAreaClazz: "visibility-clazz-visible",
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Array} availableActions - Array of json objects containing the configuration used to render the menu options to navigate away from manager dashboard.
                 */
				availableActions: [{
					"id": "orderFulfillmentView",
					"name": "managerDashboard.TOOLTIP_OrderFulfillment"
				}, {
					"id": "customerServiceView",
					"name": "managerDashboard.TOOLTIP_CustomerService"
				}],
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Array} counts - Json object containing the counts of various statuses that are displayed in the top portlet.
                 */
				counts: {
					"sfs_sla": [],
					"sfs_orderstatus": [],
					"bopus_sla": [],
					"bopus_orderstatus": [],
					"total_sla": [],
					"total_orderstatus": [],
					"total_orderstatus_totalOrders": 0
				},
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Array} legendJsonConfigArray_orderstatus - Array of the json objects containing the label, css, icons and count for various statuses in the top portlet for order status.
                 */
				legendJsonConfigArray_orderstatus: [],
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Array} legendJsonConfigArray_sla - Array of the json objects containing the label, css, icons and count for various statuses in the top portlet for SLA.
                 */
				legendJsonConfigArray_sla: [],
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Boolean} isMashupCallInProgress - Flag to track if a mashup call is in progress.
                 */
				isMashupCallInProgress: false,
				// New for usePersonaBasedHomepageFlag start.
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.home.manager-dashboard.manager-dashboard
                 *@property {Boolean} usePersonaBasedHomepage - Flag to determine the backward compatibility of the bottom/footer panel that contains the switch icon.
                 */
				usePersonaBasedHomepage: false
				// New for usePersonaBasedHomepageFlag end.
			},
			/**
			 *@iscdoc viewinit
			 *@viewname store.views.home.manager-dashboard.manager-dashboard
			 *@method initialize
			 *@description Initializes the manager dashboard screen by invoking the mashups to get common codes list for SLA and polling interval details.
			 */
			initialize: function() {
				// New for usePersonaBasedHomepageFlag start.
				if (iscPersona.getUsePersonaBasedHomepageFlagValue() === true) {
					this.ui.usePersonaBasedHomepage = true;
				}
				// New for usePersonaBasedHomepageFlag end.
				var commonCodeListData = iscManagerDashboardService.getCommonCodeListData();
				$scope.$on("$destroy", function() {
					if ($scope._intervalInstance != null) {
						$interval.cancel($scope._intervalInstance);
					}
				});
				if (commonCodeListData == null) {
					var mashupArray = [
						(iscMashup.getMashupRefObj(this, "mgrdb_getCommonCodeListForSLA", {})),
						(iscMashup.getMashupRefObj(this, "mgrdb_getDashboardPollingIntervalRuleDetails", {}))
					];
					iscMashup.callMashups(this, mashupArray, {showMask: true}).then(this.handleMashupOutput.bind(this),angular.noop);
				} else {
					this.setupIntervalAndInitializeData();
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard
			 *@method handleMashupOutput
			 *@description This method is called when the common codes list for SLA and polling interval details are available. Method broadcasts the event event_mgrDashboardCommonCodeDataAvailable. The portlets subscribe to this event and then start their initialization process.
			 */
			handleMashupOutput: function() {
				iscManagerDashboardService.setCommonCodeListData(this.model.commonCodeListData_combined);
				$scope.$broadcast("event_mgrDashboardCommonCodeDataAvailable", {});
				this.setupIntervalAndInitializeData();
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard
			 *@method setupIntervalAndInitializeData
			 *@description This method sets up the polling interval to update the charts and portlets on the home page based on the configured value in SBC. The event event_mgrDashboardPortletRefresh is broadcast so that the portlets can invoke their repsective mashups to update the charts.
			 */
			setupIntervalAndInitializeData: function() {
				var mgrDashboardConfig = iscDialChartD3Pvdr.getManagerDashboardConfig();
				if (this.model.dashboardPollingIntervalRuleDetails.Rules != null && this.model.dashboardPollingIntervalRuleDetails.Rules.RuleSetFieldName === "WSC_DASHBOARD_POLLING_INTERVAL" && this.model.dashboardPollingIntervalRuleDetails.Rules.RuleSetValue != null && this.model.dashboardPollingIntervalRuleDetails.Rules.RuleSetValue != "") {
					iscDialChartD3Pvdr.updateManagerDashboardConfigWithRefreshInterval(this.model.dashboardPollingIntervalRuleDetails.Rules.RuleSetValue);
				} else if (mgrDashboardConfig["refreshInterval"] == null) {
					// default to 300sec.
					console.warn("manager-dashboard.controller - WSC_DASHBOARD_POLLING_INTERVAL was not configured... Defaulting to 300sec");
					iscDialChartD3Pvdr.updateManagerDashboardConfigWithRefreshInterval(300000);
				}
				mgrDashboardConfig = iscDialChartD3Pvdr.getManagerDashboardConfig();
				this._mgrDashboardBopusConfig = mgrDashboardConfig["pickupInStore"];
				this._mgrDashboardSfsConfig = mgrDashboardConfig["shipFromStore"];
				
				$scope._intervalInstance = $interval(function() {
					$scope.$broadcast("event_mgrDashboardPortletRefresh", null);
					this.callCombinedMashupsForShipmentCount();
				}.bind(this), (+mgrDashboardConfig.refreshInterval));
				this.callCombinedMashupsForShipmentCount();
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard
			 *@method callCombinedMashupsForShipmentCount
			 *@description This method calls the required mashups to populate the count for various categories on the top portlet if the user has permissions for BOPUS and SFS portlets.
			 */
			callCombinedMashupsForShipmentCount: function() {
				if (this.ui.hasBOPUSPermission && this.ui.hasSFSPermission) {
					this.ui.isCommonCodeSLAConfigValidFor_bopus = iscManagerDashboardService.validateCommonCodeListDataForFulfillmentMethod("bopus");
					this.ui.isCommonCodeSLAConfigValidFor_sfs = iscManagerDashboardService.validateCommonCodeListDataForFulfillmentMethod("sfs");
					var mashupArray = [];
						
					if (this.ui.isCommonCodeSLAConfigValidFor_bopus && this.ui.isCommonCodeSLAConfigValidFor_sfs) {
						mashupArray = [
							(iscMashup.getMashupRefObj(this, "bopus_sla_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._mgrDashboardBopusConfig["sla"], this._mgrDashboardBopusConfig["shipmentStatus"], "bopus", "sla"))),
							(iscMashup.getMashupRefObj(this, "bopus_orderstatus_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._mgrDashboardBopusConfig["sla"], this._mgrDashboardBopusConfig["shipmentStatus"], "bopus", "orderstatus"))),
							(iscMashup.getMashupRefObj(this, "sfs_sla_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._mgrDashboardSfsConfig["sla"], this._mgrDashboardSfsConfig["shipmentStatus"], "sfs", "sla"))),
							(iscMashup.getMashupRefObj(this, "sfs_orderstatus_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._mgrDashboardSfsConfig["sla"], this._mgrDashboardSfsConfig["shipmentStatus"], "sfs", "orderstatus")))
						];
					} else {
						mashupArray = [
							(iscMashup.getMashupRefObj(this, "bopus_orderstatus_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._mgrDashboardBopusConfig["sla"], this._mgrDashboardBopusConfig["shipmentStatus"], "bopus", "orderstatus"))),
							(iscMashup.getMashupRefObj(this, "sfs_orderstatus_getShipmentCountForGivenStatuses", iscManagerDashboardService.getInputJson(this._mgrDashboardSfsConfig["sla"], this._mgrDashboardSfsConfig["shipmentStatus"], "sfs", "orderstatus")))
						];
					}
					this.ui.hideLink = true;
					this.ui.isMashupCallInProgress = true;
					iscMashup.callMashups(this, mashupArray, {showMask: false}).then(this.handleCombinedMashupsForShipmentCountOutput.bind(this),angular.noop);
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard
			 *@method handleCombinedMashupsForShipmentCountOutput
			 *@description This method is called when mashup calls to get the count of shipments is complete and updates the correct UI model with the data.
			 */
			handleCombinedMashupsForShipmentCountOutput: function() {
				this._bopus_data = iscManagerDashboardService.getDataFromModel(this.model.bopus_sla_shipmentCountForGivenStatuses, this.model.bopus_orderstatus_shipmentCountForGivenStatuses, "bopus", null);
				this.ui.counts.bopus_sla = this._bopus_data.sla;
				this.ui.counts.bopus_orderstatus = this._bopus_data.orderstatus;
				
				this._sfs_data = iscManagerDashboardService.getDataFromModel(this.model.sfs_sla_shipmentCountForGivenStatuses, this.model.sfs_orderstatus_shipmentCountForGivenStatuses, "sfs", null);
				this.ui.counts.sfs_sla = this._sfs_data.sla;
				this.ui.counts.sfs_orderstatus = this._sfs_data.orderstatus;
				
				this.ui.hideLink = false;
				this.ui.isMashupCallInProgress = false;
				this.updateTotals();
				// Assumption is that sfs and bopus have same categories. Since it is interchangable, we are passing bopus.
				this.ui.legendJsonConfigArray_orderstatus = iscDialChartD3Service.getLegendJsonConfigArray("bopus", "orderstatus", this.ui.counts.total_orderstatus);
				if (this.ui.isCommonCodeSLAConfigValidFor_bopus && this.ui.isCommonCodeSLAConfigValidFor_sfs) {
					this.ui.legendJsonConfigArray_sla = iscDialChartD3Service.getLegendJsonConfigArray("bopus", "sla", this.ui.counts.total_sla);
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard
			 *@method updateTotals
			 *@description This method calculates the totals for orders and correctly displays them under the required categories.
			 */
			updateTotals: function() {
				this.ui.counts.total_orderstatus_totalOrders = 0;
				if (this.ui.isCommonCodeSLAConfigValidFor_bopus && this.ui.isCommonCodeSLAConfigValidFor_sfs) {
					// Assume sfs and bopus sla have same categories. Else, total is useless.
					for (var i = 0; i < this.ui.counts.bopus_sla.length; i++) {
						this.ui.counts.total_sla[i] = this.ui.counts.bopus_sla[i] + this.ui.counts.sfs_sla[i];
					}
				}
				// Assume sfs and bopus orderstatus have same categories. Else, total is useless.
				for (var i = 0; i < this.ui.counts.bopus_orderstatus.length; i++) {
					this.ui.counts.total_orderstatus[i] = this.ui.counts.bopus_orderstatus[i] + this.ui.counts.sfs_orderstatus[i];
					this.ui.counts.total_orderstatus_totalOrders = this.ui.counts.total_orderstatus_totalOrders + this.ui.counts.total_orderstatus[i];
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard
			 *@method uiToggleTopPortletClass
			 *@description Method is used to set the correct css on the top portlet SLA and order status areas to render one visible when the width of screen is less.
			 */
			uiToggleTopPortletClass: function(viewToShow) {
				if (viewToShow == "orderstatus") {
					this.ui.slaAreaClazz = "visibility-clazz-invisible";
					this.ui.orderstatusAreaClazz = "visibility-clazz-visible";
				} else {
					this.ui.slaAreaClazz = "visibility-clazz-visible";
					this.ui.orderstatusAreaClazz = "visibility-clazz-invisible";
				}
			},
			// TODO: Direct copy of code in store-home.controller. Should we write this as service?
			uiGoToBackRoomPickup: function() {
				window.onbeforeunload = null;
				$rootScope.activeCalls++;
				var appDeviceMode = iscAppInfo.getAppDeviceMode();
				var redirectURL = "";
				if (appDeviceMode === "mobile") {
					redirectURL = iscAppInfo.getApplicationContext() + "/store/mobile/container/home.do";
				} else {
					redirectURL = iscAppInfo.getApplicationContext() + "/store/container/home.do";
				}
				window.location.href = iscHttpRequest.addAdditionalParamsInURL(redirectURL, "GET");
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.home.manager-dashboard.manager-dashboard
			 *@method uiPerformAction
			 *@description Method is invoked when user selects the option to go to Order Fulfillment View or Customer Service View on the UI.
			 *@param {Object} anAction - The json object corresponding to the option currently selected by the user. The id attribute is used to either take the user to Order Fulfillment flow or Customer Service.
			 */
			uiPerformAction: function(anAction) {
				if (anAction.id === "orderFulfillmentView") {
					this.uiGoToBackRoomPickup();
				} else {
					iscState.goToState("/home", {}, {});
				}
			}
		});	
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.order-fulfillment.pack-portlet-mini", [
	"$scope", "iscScreen", "iscMashup",
	function($scope, iscScreen, iscMashup) {
		iscScreen.initializeScreen($scope, {
			model: {},
			mashupRefs: [{
				mashupRefId: 'getPackInProgressShipmentCount',
				mashupId: 'store.views.home.order-fulfillment.getPackInProgressShipmentCount'
			}, {
				mashupRefId: 'getReadyForPackShipmentCount',
				mashupId: 'store.views.home.order-fulfillment.getReadyForPackShipmentCount'
			}],
			
			ui: {
				isMashupCallInProgress: true,
				inProgressShipmentCount: 0,
				readyForPackShipmentCount: 0,
				displayCount: 0
			},
			
			initialize: function() {
				var mashupArray = [];
				var getShipListInput = {"Shipment": {}};
				mashupArray.push(iscMashup.getMashupRefObj(this, 'getPackInProgressShipmentCount', getShipListInput));
				mashupArray.push(iscMashup.getMashupRefObj(this, 'getReadyForPackShipmentCount', getShipListInput));
				iscMashup.callMashups(this, mashupArray, {showMask: false}).then(this.handleInitAPIs.bind(this), angular.noop);
			},
			
			handleInitAPIs: function(response) {
				var inProgressShipmentListCount = iscMashup.getMashupOutput(response, "getPackInProgressShipmentCount");
	        	var readyForPackShipmentCount = iscMashup.getMashupOutput(response, "getReadyForPackShipmentCount");
	        	 
				if (!iscCore.isVoid(inProgressShipmentListCount) && !iscCore.isVoid(inProgressShipmentListCount.Shipments) && !iscCore.isVoid(inProgressShipmentListCount.Shipments.TotalNumberOfRecords)) {
					this.ui.inProgressShipmentCount = Number(inProgressShipmentListCount.Shipments.TotalNumberOfRecords);
				}
	        	if (!iscCore.isVoid(readyForPackShipmentCount) && !iscCore.isVoid(readyForPackShipmentCount.Shipments) && !iscCore.isVoid(readyForPackShipmentCount.Shipments.TotalNumberOfRecords)) {
	        		this.ui.readyForPackShipmentCount = Number(readyForPackShipmentCount.Shipments.TotalNumberOfRecords);
	        	}
	        	this.ui.displayCount = this.ui.inProgressShipmentCount + this.ui.readyForPackShipmentCount;
	        	this.ui.isMashupCallInProgress = false;
			}
		});	
	}
]);
/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/



angular.module("store").controller("store.views.home.order-fulfillment.pack-portlet", [
	"$scope", "iscScreen", "iscMashup", "iscResourcePermission","$filter", "iscModal", "iscI18n","iscState", "$timeout", "iscDomUtility", "iscShipment", "iscPortletShipment", "iscShipmentStatus", 
	function($scope, iscScreen, iscMashup, iscResourcePermission, $filter, iscModal, iscI18n,iscState, $timeout, iscDomUtility, iscShipment, iscPortletShipment, iscShipmentStatus) {
		iscScreen.initializeScreen($scope, {  
			model: {
				/**
				 * @description contains shipment count
				 */
				"packShipmentCount":{"inprogressShipmentCount":0,"totalShipmentCount":0,"notStartedShipmentCount":0},
				
				/**
				 * @description binds the product scan input field with this model
				 */
				"productScanInput":{},
				
				/**
				 * @description contains Rule output for item packing
				 */
				"itemPackRule" : {Rules : {RuleSetValue : 'N'}}, 
				
			},
			mashupRefs: [
			             
				/**
				 * @description This mashup is used to get a count of Shipments which are Pack in progress.
				 */
				{
					mashupRefId: 'getPackInProgressShipmentCount',
					mashupId: 'store.views.home.order-fulfillment.getPackInProgressShipmentCount'
				
				},
				
				/**
				 * @description This mashup is used to get a count of Shipments which are Ready for Packing.
				 */
				{
					mashupRefId: 'getReadyForPackShipmentCount',
					mashupId: 'store.views.home.order-fulfillment.getReadyForPackShipmentCount'
				
				},
				
				/**
				 * @description This mashup is used to scan product before Packing.
				 */
                {
                    mashupRefId:'translateBarCodeForShipmentPack',
                    mashupId:'store.views.home.order-fulfillment.getShipmentForPackingByItemId'
                },

				
				/**
				 * @description This mashup is used to get Rules for Packing with product.
				 */
                {
                    mashupRefId:'getRuleForItemPack',
                    mashupId:'store.views.home.order-fulfillment.getRuleForItemPack',
                    modelName:'itemPackRule'
                },
				
				/**
				 * @description This mashup is used to get a count of Shipments when advanced search is performed.
				 */
				{
					mashupRefId: 'getShipmentCountForPortletAdvSearch',
					mashupId: 'store.views.common.outboundShipment.getShipmentCountForPortletAdvSearch'
				
				}
				 
			],
			
			ui : {				
				/**
				 * @property {Boolean} showAdvanceSearch - when True, advanced search option is shown
				 */
				showAdvanceSearch:false,
				
				/**
				 * @property {Object} search - Model to bind Advanced search criteria attributes
				 */
				search: {},
				
				/**
				 * @property {String} packListPage - contains Packing list screen id
				 */
				packListPage: 'packorderlist',
				
				/**
				 * @property {String} packPage - contains pack wizard id
				 */
				packPage: 'containerpack',
				
				/**
				 * @property {Object} searchCriteria - Model to hold Advanced search criteria api call
				 */
				searchCriteria: {}
			},
			        
			/**
		     * @description This method initialize the controller and invokes mashup to get count for ready for packing and packing in progress shipments.
		     */
			initialize: function() {
				
				 var mashupArray = [];
				 var getShipListInput = {"Shipment":{}};
				 
				 mashupArray.push(iscMashup.getMashupRefObj(this,'getPackInProgressShipmentCount',getShipListInput));
				 mashupArray.push(iscMashup.getMashupRefObj(this,'getReadyForPackShipmentCount',getShipListInput));
				 mashupArray.push(iscMashup.getMashupRefObj(this,'getRuleForItemPack',{}));
		         
				 if(mashupArray.length > 0) {
					 iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				 }
				
			},
			
			/**
		     * @description This method gets the initial api response and then calculates total shipment count.
			 * @param {Object} response - response of init api calls
		     */
			handleInitApiCalls: function(response) {
				
				var inProgressShipmentListCount = iscMashup.getMashupOutput(response,"getPackInProgressShipmentCount");
	        	var readyForPackShipmentCount = iscMashup.getMashupOutput(response,"getReadyForPackShipmentCount");
				var totalShipmentCount = Number(0);
	        	 
				if(!iscCore.isVoid(inProgressShipmentListCount) && !iscCore.isVoid(inProgressShipmentListCount.Shipments) && !iscCore.isVoid(inProgressShipmentListCount.Shipments.TotalNumberOfRecords)) {
					this.model.packShipmentCount.inprogressShipmentCount = $filter('number')(inProgressShipmentListCount.Shipments.TotalNumberOfRecords);
					totalShipmentCount += Number($filter('number')(inProgressShipmentListCount.Shipments.TotalNumberOfRecords));
				}
	        	 
	        	if(!iscCore.isVoid(readyForPackShipmentCount) && !iscCore.isVoid(readyForPackShipmentCount.Shipments) && !iscCore.isVoid(readyForPackShipmentCount.Shipments.TotalNumberOfRecords)) {
	        		this.model.packShipmentCount.notStartedShipmentCount = $filter('number')(readyForPackShipmentCount.Shipments.TotalNumberOfRecords);
					totalShipmentCount += Number($filter('number')(readyForPackShipmentCount.Shipments.TotalNumberOfRecords));
	        	} 
	        	this.model.packShipmentCount.totalShipmentCount = totalShipmentCount;

	        	//console.log("this.packShipmentCount : ",this.model.packShipmentCount);	        	 
				
			},
			
			/**
		     * @description This method opens the advanced search options for shipments.
		     */
			uiOpenAdvanceSearch: function() {
				this.ui.showAdvanceSearch = true;
				if(this.model.itemPackRule.Rules.RuleSetValue === 'N')
					iscDomUtility.setFocus(document.getElementById('packAssignedTo'));
				else
					iscDomUtility.setFocus(document.getElementById('pack_shipment_orderNumber'));
			},

			/**
		     * @description This method closes the advanced search options for shipments and show basic search options.
		     */
			uiAdvanceClose: function() {
				this.ui.showAdvanceSearch = false;
				$timeout(function (){
					document.getElementById('advanceSearchLink').focus();
				}, 500);
			},
						
			/**
		     * @description This method opens the list of all applicable shpiments for packing.
		     */
			uiOpenTotalShipmentList: function() {
				iscState.goToState(this.ui.packListPage, {input:{"FilterOptions": "All"}}, {});
			},

			/**
		     * @description This method opens the list of shpiments in packing in progress status.
		     */
			uiOpenInprogressShipmentList: function(){
				iscState.goToState(this.ui.packListPage, {input:{"FilterOptions": "InProgress"}}, {});
			},

			/**
		     * @description This method opens the list of shpiments for which packing has not started.
		     */
			uiOpenNotStartedShipmentList: function(){
				iscState.goToState(this.ui.packListPage, {input:{"FilterOptions": "NotStarted"}}, {});
			},

			/**
		     * @description This method performs the barcode translation for prodcut scan and finds eligieble shipment for packing.
			 * @param {String} seachType - search or scan
		     */
			uiScanProductBarCodeData: function(seachType) {
				if (!iscCore.isVoid(this.model.productScanInput.value)) {
                    var translateBarCodeApiInput = {
                        "BarCode": {
                            "BarCodeData": this.model.productScanInput.value
                        }
                    };
                    iscMashup.callMashup(this, "translateBarCodeForShipmentPack", translateBarCodeApiInput, {})
                        .then(this.processProductBarCodeTranslation.bind(this),angular.noop);
                    this.model.productScanInput.value = "";
                } else {
                    iscModal.showErrorMessage(iscI18n.translate('packportlet.MSG_InvalidBarCodeData'));
                }
			},

			/**
		     * @description This method gets the api response for product scan and then processes it based on output.
			 * @param {Object} response - response of product scan api calls
		     */
			processProductBarCodeTranslation: function(response) {
				var apiOutput = iscMashup.getMashupOutput(response,"translateBarCodeForShipmentPack");
                if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.BarCode.ErrorCode)) {
                    iscModal.showErrorMessage("apierror."+apiOutput.BarCode.ErrorCode);
                }
                else{
                    iscState.goToState("containerpack",{
                        input: {
                            "Shipment": apiOutput.BarCode.Shipment
                        }
                    },{});
                }
			},

			processProductBarCodeSearch: function(response) {
			},
			
			/**
		     * @description This method gets the control of barcode translation and handles the result according to translation output.
			 * @param {Object} translationOutput - response of translation api calls
		     */
			uiHandleBarcodeOrSearchOutput: function(translationOutput){
				iscPortletShipment.handleShipmentOrderBarcodeTranslation(translationOutput, this.ui.packPage);
			},

			/**
		     * @description This method prepares input for advanced search and then fires mashup call.
		     */
			uiAdvanceSearch: function(){
				if (!iscCore.isVoid(this.ui.search)) {
					this.ui.searchCriteria = this.ui.search;
					iscMashup.callMashup(this,'getShipmentCountForPortletAdvSearch',this.ui.searchCriteria,{}).then(this.handleAdvSearchApiCall.bind(this),angular.noop);
				} else {
					iscModal.showErrorMessage(iscI18n.translate('outboundShipments.MSG_AdvanceSearchBlankCriteria'));
				}
			},
			
			/**
		     * @description This method gets the control of advanced search and handles the result according to search output.
			 * @param {Object} response - response of init api calls
		     */
			handleAdvSearchApiCall: function(response){
				var output = iscMashup.getMashupOutput(response,"getShipmentCountForPortletAdvSearch");
				if(output && output.Shipments){
					output.Shipments.TotalNumberOfRecords = !(output.Shipments.Shipment && output.Shipments.Shipment.length) ? 0 : output.Shipments.Shipment.length;
					iscPortletShipment.handlePortletAdvancedSearch(output, this.ui.packPage, this.ui.searchCriteria, angular.copy(iscShipmentStatus.getShipmentStatusCodeList("Pack")));
				}else{
					iscModal.showErrorMessage(iscI18n.translate('outboundShipments.MSG_ShipmentNotFound'));
				}
				
			}

		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.order-fulfillment.pick-portlet-mini", [
	"$scope", "iscScreen", "iscMashup", "iscResourcePermission", "iscShipment",
	function($scope, iscScreen, iscMashup, iscResourcePermission, iscShipment) {
		iscScreen.initializeScreen($scope, {
			model: {},
			mashupRefs: [{
				mashupRefId: 'getPickInProgressShipmentCount',
				mashupId: 'store.views.home.order-fulfillment.getPickInProgressShipmentCount'
			}, {
				mashupRefId: 'getReadyForPickShipmentCount',
				mashupId: 'store.views.home.order-fulfillment.getReadyForPickShipmentCount'
			}],
			
			ui: {
				isMashupCallInProgress: true,
				hasPermissionForSFSOrders: iscResourcePermission.hasPermission("WSC000058"),
				hasPermissionForBOPISOrders: iscResourcePermission.hasPermission("WSC000057"),
				inProgressShipmentCount: 0,
				notStartedShipmentCount: 0,
				displayCount: 0
			},
			
			initialize: function() {
				var mashupArray = [];
				mashupArray.push(iscMashup.getMashupRefObj(this, 'getPickInProgressShipmentCount', this.getShipmentCountInput(['1100.70.06.20'])));
				mashupArray.push(iscMashup.getMashupRefObj(this, 'getReadyForPickShipmentCount', this.getShipmentCountInput(['1100.70.06.10'])));
				iscMashup.callMashups(this, mashupArray, {showMask: false}).then(this.handleInitAPIs.bind(this), angular.noop);
			},
			
			getShipmentCountInput: function(statusArray){
				var getShipListInput = {"Shipment": {}};
				var delMethod = "";
				var documentTypes = null;
				
				if (this.ui.hasPermissionForSFSOrders && !this.ui.hasPermissionForBOPISOrders) {
					delMethod = 'SHP';
				} else if (!this.ui.hasPermissionForSFSOrders && this.ui.hasPermissionForBOPISOrders) {
					delMethod = 'PICK';
					documentTypes = ['0001'];
				}
				return iscShipment.prepareShipmentListApiInput(getShipListInput, statusArray, documentTypes, delMethod);
			},
			
			handleInitAPIs: function(response) {
				var inProgressShipmentListCount = iscMashup.getMashupOutput(response, "getPickInProgressShipmentCount");
				var readyForPickShipmentCount = iscMashup.getMashupOutput(response, "getReadyForPickShipmentCount");
				
				if (!iscCore.isVoid(inProgressShipmentListCount) && !iscCore.isVoid(inProgressShipmentListCount.Shipments) && !iscCore.isVoid(inProgressShipmentListCount.Shipments.TotalNumberOfRecords)) {
					this.ui.inProgressShipmentCount = Number(inProgressShipmentListCount.Shipments.TotalNumberOfRecords);
				}
	        	if (!iscCore.isVoid(readyForPickShipmentCount) && !iscCore.isVoid(readyForPickShipmentCount.Shipments) && !iscCore.isVoid(readyForPickShipmentCount.Shipments.TotalNumberOfRecords)) {
	        		this.ui.notStartedShipmentCount = Number(readyForPickShipmentCount.Shipments.TotalNumberOfRecords);
	        	}
	        	this.ui.displayCount = this.ui.inProgressShipmentCount + this.ui.notStartedShipmentCount;
	        	this.ui.isMashupCallInProgress = false;
			}
		});
	}
]);
/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/



angular.module("store").controller("store.views.home.order-fulfillment.pick-portlet", [
	"$scope", "iscScreen", "iscMashup", "iscResourcePermission","$filter", "iscModal", "iscI18n", "iscState", "$timeout", "iscDomUtility", "iscShipment", "iscPortletShipment", "iscShipmentStatus", 
	function($scope, iscScreen, iscMashup, iscResourcePermission, $filter, iscModal, iscI18n, iscState, $timeout, iscDomUtility, iscShipment, iscPortletShipment, iscShipmentStatus) {
		iscScreen.initializeScreen($scope, {  
			model: {
				/**
				 * @description contains shipment count
				 */
				"pickShipmentCount":{"inprogressShipmentCount":0,"totalShipmentCount":0,"notStartedShipmentCount":0}
				
			},
			mashupRefs: [
			             
				/**
				 * @description This mashup is used to get a count of Shipments which are Backroom Pick in progress.
				 */
				{
					mashupRefId: 'getPickInProgressShipmentCount',
					mashupId: 'store.views.home.order-fulfillment.getPickInProgressShipmentCount'
				
				},
				
				/**
				 * @description This mashup is used to get a count of Shipments which are Ready for Backroom Pick.
				 */
				{
					mashupRefId: 'getReadyForPickShipmentCount',
					mashupId: 'store.views.home.order-fulfillment.getReadyForPickShipmentCount'
				
				},
				
				/**
				 * @description This mashup is used to get a count of Shipments for advanced search.
				 */
				{
					mashupRefId: 'getShipmentCountForPortletAdvSearch',
					mashupId: 'store.views.common.outboundShipment.getShipmentCountForPortletAdvSearch'
				
				}
				 
			],
			
			ui : {				
				/**
				 * @property {Boolean} hasPermissionForSFSOrders - True if user has permission for picking SFS orders
				 */
				hasPermissionForSFSOrders:iscResourcePermission.hasPermission("WSC000058"),
				
				/**
				 * @property {Boolean} hasPermissionForBOPISOrders - True if user has permission for picking BOPIS orders
				 */
				hasPermissionForBOPISOrders:iscResourcePermission.hasPermission("WSC000057"),
				
				/**
				 * @property {Boolean} hasPermissionForBatchPick - True if user has permission for batch picking orders
				 */
				hasPermissionForBatchPick:iscResourcePermission.hasPermission("WSC000053"),
				
				/**
				 * @property {Boolean} showAdvanceSearch - when True, advanced search option is shown
				 */
				showAdvanceSearch:false,
				
				/**
				 * @property {Object} search - Model to bind Advanced search criteria attributes
				 */
				search: {},
				
				/**
				 * @property {String} pickListPage - contains Picking list screen id
				 */
				pickListPage: 'pickorderlist',
				
				/**
				 * @property {String} pickPage - contains backroom pick wizard id
				 */
				pickPage: 'backroomPickWizard',
				
				/**
				 * @property {Object} searchCriteria - Model to hold Advanced search criteria api call
				 */
				searchCriteria: {}
			},
			
			/**
		     * @description This method initialize the controller and invokes mashup to get count for ready for picking and picking in progress shipments.
		     */        
			initialize: function() {
				
				var mashupArray = [];
							 
				mashupArray.push(iscMashup.getMashupRefObj(this,'getPickInProgressShipmentCount',this.getShipmentCountInput(['1100.70.06.20'])));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getReadyForPickShipmentCount',this.getShipmentCountInput(['1100.70.06.10'])));
		         
				if(mashupArray.length > 0) {
					iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				}
				
			},

			/**
		     * @description This method prepares the input to getShipmentList api call.
			 * @param {Object} statusArray - List of valid status
		     */
			getShipmentCountInput: function(statusArray){
				var getShipListInput = {"Shipment":{}};
				var delMethod="";
				var documentTypes = null;
				 
				if(this.ui.hasPermissionForSFSOrders && !this.ui.hasPermissionForBOPISOrders){
					delMethod = 'SHP';
				}else if(!this.ui.hasPermissionForSFSOrders && this.ui.hasPermissionForBOPISOrders){
					delMethod = 'PICK';
					documentTypes = ['0001'];
				}

				return iscShipment.prepareShipmentListApiInput(getShipListInput,statusArray,documentTypes,delMethod);
			},
			
			/**
		     * @description This method gets the initial api response and then calculates total shipment count.
			 * @param {Object} response - response of init api calls
		     */
			handleInitApiCalls: function(response) {
				
				var inProgressShipmentListCount = iscMashup.getMashupOutput(response,"getPickInProgressShipmentCount");
	        	var readyForPickShipmentCount = iscMashup.getMashupOutput(response,"getReadyForPickShipmentCount");
				var totalShipmentCount = Number(0);
	        	 
				if(!iscCore.isVoid(inProgressShipmentListCount) && !iscCore.isVoid(inProgressShipmentListCount.Shipments) && !iscCore.isVoid(inProgressShipmentListCount.Shipments.TotalNumberOfRecords)) {
					this.model.pickShipmentCount.inprogressShipmentCount = $filter('number')(inProgressShipmentListCount.Shipments.TotalNumberOfRecords);
					totalShipmentCount += Number($filter('number')(inProgressShipmentListCount.Shipments.TotalNumberOfRecords));
				}
	        	 
	        	if(!iscCore.isVoid(readyForPickShipmentCount) && !iscCore.isVoid(readyForPickShipmentCount.Shipments) && !iscCore.isVoid(readyForPickShipmentCount.Shipments.TotalNumberOfRecords)) {
	        		this.model.pickShipmentCount.notStartedShipmentCount = $filter('number')(readyForPickShipmentCount.Shipments.TotalNumberOfRecords);
					totalShipmentCount += Number($filter('number')(readyForPickShipmentCount.Shipments.TotalNumberOfRecords));
	        	} 
	        	this.model.pickShipmentCount.totalShipmentCount = totalShipmentCount;

	        },
			
			/**
		     * @description This method opens the advanced search options for shipments.
		     */
			uiOpenAdvanceSearch: function() {
				this.ui.showAdvanceSearch = true;
				iscDomUtility.setFocus(document.getElementById('pickAssignedTo'));
			},

			/**
		     * @description This method closes the advanced search options for shipments and show basic search options.
		     */
			uiAdvanceClose: function() {
				this.ui.showAdvanceSearch = false;
				$timeout(function (){
					document.getElementById('advanceSearchLink').focus();
				}, 500);
			},
						
			/**
		     * @description This method opens the advanced search options for shipments and shows basic search options.
		     */
			uiOpenBatchList: function() {
				iscState.goToState('batchpick', {action: 'batchList', input: {}}, {});
			},

			/**
		     * @description This method opens the list of all applicable shpiments for backroom picking.
		     */
			uiOpenTotalShipmentList: function() {
				iscState.goToState(this.ui.pickListPage, {input:{"FilterOptions": "All"}}, {});
			},

			/**
		     * @description This method opens the list of shpiments in backroom picking in progress status.
		     */
			uiOpenInprogressShipmentList: function(){
				iscState.goToState(this.ui.pickListPage, {input:{"FilterOptions": "InProgress"}}, {});
			},

			/**
		     * @description This method opens the list of shpiments for which backroom picking has not started.
		     */
			uiOpenNotStartedShipmentList: function(){
				iscState.goToState(this.ui.pickListPage, {input:{"FilterOptions": "NotStarted"}}, {});
			},
			
			/**
		     * @description This method gets the control of barcode translation and handles the result according to translation output.
			 * @param {Object} translationOutput - response of translation api calls
		     */
			uiHandleBarcodeOrSearchOutput: function(translationOutput){
				iscPortletShipment.handleShipmentOrderBarcodeTranslation(translationOutput, this.ui.pickPage);
			},

			/**
		     * @description This method prepares input for advanced search and then fires mashup call.
		     */
			uiAdvanceSearch: function(){
				if (!iscCore.isVoid(this.ui.search.assignedTo)) {
					this.ui.searchCriteria = {"Shipment":{"AssignedToUserId":this.ui.search.assignedTo}};
					iscMashup.callMashup(this,'getShipmentCountForPortletAdvSearch',this.ui.searchCriteria,{}).then(this.handleAdvSearchApiCall.bind(this),angular.noop);
				} else {
					iscModal.showErrorMessage(iscI18n.translate('outboundShipments.MSG_AdvanceSearchBlankCriteria'));
				}
			},
			
			/**
		     * @description This method gets the control of advanced search and handles the result according to search output.
			 * @param {Object} response - response of init api calls
		     */
			handleAdvSearchApiCall: function(response){
				var output = iscMashup.getMashupOutput(response,"getShipmentCountForPortletAdvSearch");
				if(output && output.Shipments){
					output.Shipments.TotalNumberOfRecords = !(output.Shipments.Shipment && output.Shipments.Shipment.length) ? 0 : output.Shipments.Shipment.length;
					iscPortletShipment.handlePortletAdvancedSearch(output, this.ui.pickPage, this.ui.searchCriteria, angular.copy(iscShipmentStatus.getShipmentStatusCodeList("Pick")));
				}else{
					iscModal.showErrorMessage(iscI18n.translate('outboundShipments.MSG_ShipmentNotFound'));
				}
				
			}

		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module("store").controller("store.views.home.order-fulfillment.ship-portlet-mini", [
	"$scope", "iscScreen", "iscMashup",
	function($scope, iscScreen, iscMashup) {
		iscScreen.initializeScreen($scope, {
			model: {
				"packagesModel": {}
			},
			mashupRefs: [{
				mashupRefId: 'getPackagesCount',
				mashupId: 'store.views.home.order-fulfillment.getPackagesCount',
				modelName: 'packagesModel'
			}],
			
			ui: {
				isMashupCallInProgress: true,
				displayCount: 0
			},
			
			initialize: function() {
				iscMashup.callMashup(this, 'getPackagesCount', {
					"Container": {
						"Shipment": {}
					}
				}, {showMask: false}).then(this.handleInitAPIs.bind(this), angular.noop);
			},
			
			handleInitAPIs: function() {
				var oPackagesModel = this.model.packagesModel;
				if (!iscCore.isVoid(oPackagesModel) && !iscCore.isVoid(oPackagesModel.Containers) && !iscCore.isVoid(oPackagesModel.Containers.TotalNumberOfRecords)) {
					this.ui.displayCount = parseInt(oPackagesModel.Containers.TotalContainers, 10);
				}
				this.ui.isMashupCallInProgress = false;
			}
		});	
	}
]);
/******************************************************************************* 
* IBM Confidential 
* OCO Source Materials 
* IBM Sterling Order Management Store (5725-D10) 
* (C) Copyright IBM Corp. 2016 All Rights Reserved. 
* The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office. 
******************************************************************************/



angular.module("store").controller("store.views.home.order-fulfillment.ship-portlet", [
	"$scope", "iscScreen", "iscMashup", "iscResourcePermission","$filter", "iscModal", "iscI18n","iscState", "$timeout", "iscDomUtility", "iscShipment",
	function($scope, iscScreen, iscMashup, iscResourcePermission, $filter, iscModal, iscI18n,iscState, $timeout, iscDomUtility, iscShipment) {
		iscScreen.initializeScreen($scope, {  
			
			model: {
				/**
				 * @description contains Model for output for getPackagesCount mashup call
				 */
				"packagesModel":{},
			},
			
			mashupRefs: [
			             
				/**
				 * @description This mashup is used to get a count of packages.
				 */
				{
					mashupRefId: 'getPackagesCount',
					mashupId: 'store.views.home.order-fulfillment.getPackagesCount',
					modelName: 'packagesModel'
				
				}
				 
			],
			
			ui : {
				/**
				 * @property {Number} totalPackages - contains total packages count
				 */
				"totalPackages": 0
			},
			        
			/**
		     * @description This method initialize the controller and invokes mashup to get count for total packages.
		     */
			initialize: function() {
				var getContainerListInput = {"Container":{}};
				getContainerListInput.Container.Shipment={};
				iscMashup.callMashup(this,'getPackagesCount',getContainerListInput,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				
			},
			
			/**
		     * @description This method gets the initial api response and then sets total packages count.
			 * @param {Object} response - response of init api calls
		     */
			handleInitApiCalls: function(response) {
				var oPackagesModel = this.model.packagesModel;
				if(!iscCore.isVoid(oPackagesModel) && !iscCore.isVoid(oPackagesModel.Containers) && !iscCore.isVoid(oPackagesModel.Containers.TotalNumberOfRecords)) {
					this.ui.totalPackages = parseInt(oPackagesModel.Containers.TotalContainers, 10);
					
				}	        	 
				
			},
			
			/**
		     * @description This method opens the list of all packages for shipping.
		     */
			uiOpenTotalPackagesList: function() {
				iscState.goToState("shipmentConfirmList", {"searchCriteria": {}, "titleKey": "ALL"}, {});
			}
			
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewinfo
 *@viewname store.views.order.add-cart.add-items
 *@package store.views.order.add-cart
 *@class add-items
 *@description Displays the searched product details along with product availability and
 *fulfillment details.
 *
 */
	angular.module('store').controller('store.views.order.add-cart.add-items',
	  ['$animate','$scope','$rootScope','iscScreen','iscWizard','iscState','$location','$sce','$filter','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscOrder',
		function($animate,$scope,$rootScope,iscScreen,iscWizard,iscState,$location,$sce,$filter,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscOrder) {
			iscWizard.initializeWizardPage($scope,{
					model:{
					/**
					 *@iscdoc model
					 *@viewname store.views.order.add-cart.add-items
					 *@name getCompleteItemList
					 *@description Stores the getCompleteItemDetails api data from the mashup output.
					 */
						"getCompleteItemList":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.order.add-cart.add-items
						 *@name itemDetails
						 *@description Stores the item details from getCompleteItemDetails mashup output, used in html files.
						 */
						"itemDetails":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.order.add-cart.add-items
						 *@name orderDetails
						 *@description Stores the order details from mashup output.
						 */
						"orderDetails":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.order.add-cart.add-items
						 *@name orderLineList
						 *@description Stores the order line information from mashup output,used in minicart.
						 */
						"orderLineList":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.order.add-cart.add-items
						 *@name getItemAvailabilityForStore
						 *@description Stores the item availability data from mashup output.
						 */
						"getItemAvailabilityForStore":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.order.add-cart.add-items
						 *@name changeVariationInput
						 *@description stores the orderline element having variant item.
						 */
						"changeVariationInput":null,
						
						"openBlankPage":false,
                        
                        customerDetails : {}
					},
					mashupRefs:[
					            {
							        /**
									   *@iscdoc mashup
									   *@viewname store.views.order.add-cart.add-items
									   *@mashupid additems_getCompleteItemList
									   *@mashuprefid getCompleteItemList
									   *@modelname getCompleteItemList
									   *@description Gets the item details.
									   */
					            	mashupRefId: 'getCompleteItemList',
					            	mashupId: 'additems_getCompleteItemList',
					            	modelName : 'getCompleteItemList'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.order.add-cart.add-items
								   *@mashupid addItems_getRelatedItems
								   *@mashuprefid getRelatedItems
								   *@modelname relatedItemDetails
								   *@description Gets the item details of associated items.
								   */
					            	mashupRefId: 'getRelatedItems',
					            	mashupId: 'addItems_getRelatedItems',
					            	modelName : 'relatedItemDetails'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.order.add-cart.add-items
								   *@mashupid addItems_createOrder
								   *@mashuprefid createOrder
								   *@modelname orderDetails
								   *@description Creates the order with input
								   */
					            	mashupRefId: 'createOrder',
					            	mashupId: 'addItems_createOrder',
					            	modelName : 'orderDetails'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.order.add-cart.add-items
								   *@mashupid addItems_modifyFulfillmentOptions
								   *@mashuprefid modifyFulfillmentOptions
								   *@modelname orderDetails
								   *@description Updates the order with input
								   */
					            	mashupRefId: 'modifyFulfillmentOptions',
					            	mashupId: 'addItems_modifyFulfillmentOptions',
					            	modelName : 'orderDetails'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.order.add-cart.add-items
								   *@mashupid addItems_ovp_createOrder
								   *@mashuprefid createOrderWithOvp
								   *@modelname orderDetails
								   *@description Create order using override price resource permission.
								   */
					            	mashupRefId: 'createOrderWithOvp',
					            	mashupId: 'addItems_ovp_createOrder',
					            	modelName : 'orderDetails'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.order.add-cart.add-items
								   *@mashupid addItems_ovp_modifyFulfillmentOptions
								   *@mashuprefid modifyFulfillmentOptionsWithOvp
								   *@modelname orderDetails
								   *@description Update order using override price resource permission.
								   */
					            	mashupRefId: 'modifyFulfillmentOptionsWithOvp',
					            	mashupId: 'addItems_ovp_modifyFulfillmentOptions',
					            	modelName : 'orderDetails'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.order.add-cart.add-items
								   *@mashupid addItems_getItemAvailabilityForStore
								   *@mashuprefid getItemAvailabilityForStore
								   *@modelname getItemAvailabilityForStore
								   *@description Get item availability for supported delivery methods.
								   */
					            	mashupRefId: 'getItemAvailabilityForStore',
					            	mashupId: 'addItems_getItemAvailabilityForStore',
					            	modelName : 'getItemAvailabilityForStore'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.order.add-cart.add-items
								   *@mashupid addItems_getCompleteOrderDetails
								   *@mashuprefid getCompleteOrderDetails
								   *@modelname orderDetails
								   *@description Get Order information.
								   */
					            	mashupRefId: 'getCompleteOrderDetails',
					            	mashupId: 'addItems_getCompleteOrderDetails',
					            	modelName : 'orderDetails'
					            },
					            {
					            	 /**
									   *@iscdoc mashup
									   *@viewname store.views.order.add-cart.add-items
									   *@mashupid addItems_getRealTimeItemAvailabilityForStore
									   *@mashuprefid getRealTimeItemAvailabilityForStore
									   *@description Get Order information.
									   */
						            	mashupRefId: 'getRealTimeItemAvailabilityForStore',
						            	mashupId: 'addItems_getRealTimeItemAvailability'
					            },
								{
					            	 /**
									   *@iscdoc mashup
									   *@viewname store.views.order.add-cart.add-items
									   *@mashupid changeVariation_changeOrderPendingChanges
									   *@mashuprefid changeOrderPendingChanges
									   *@description Save pending changes against order.
									   */
						            	mashupRefId: 'changeOrderPendingChanges',
						            	mashupId: 'changeVariation_changeOrderPendingChanges'
					            }
		            ],
		            ui:{
	            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Boolean}  showItemDetails - True if Item details needs to be shown, false otherwise
						 */
		            	showItemDetails: false,
		            	
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Boolean}  showCheckOutButton - True if CheckOut button needs to be shown, false otherwise
						 */
		            	showCheckOutButton: true,
		            	
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Boolean}  noProductsFound - True if there are no search/scan results, false otherwise
						 */
		            	noProductsFound: false,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Boolean}  showItemDesc - True if item description needs to be shown, false otherwise
						 */
		            	showItemDesc: true,
	            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Boolean}  showRelatedItems - True if related items are to be shown, false otherwise
						 */
		            	showRelatedItems:false,
	            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Integer}  defaultQty - Default product quantity to add to cart.
						 */
		            	defaultQty: 1,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Integer}  orderTotalQty - Total number of products present in the order.
						 */
		            	orderTotalQty: 0,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {String}  deliveryMethod - Delivery method selected in the view.
						 */
		            	deliveryMethod:'',
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {String}  searchInput - Search/scan field input,blank by default.
						 */
		            	searchInput:'',
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {String}  variantItemId - Variant item id used to paint variation item,blank by default.
						 */
		            	variantItemId:'',
					/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {String}  variantItemSelected - Indicates if variations are changed for a model item.
						 */	
						variantItemSelected: false,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Boolean}  isScreenDirty - True if any action is performed in view,false otherwise
						 */
		            	isScreenDirty: false,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Boolean}  focusScanField - True if focus is to be set on scan field,false otherwise
						 */
		            	focusScanField: false,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Boolean}  gift.giftOptionsAvailable - True if gift options available icon is to be shown in view,false otherwise
						 */
		            	gift:{
		            		giftOptionsAvailable: true
		            	},
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Object}  priceOverride - Object returned by the override price pop-up on overriding the price.
						 */
		            	priceOverride:{
		            		isPriceOverriden:false,
		            		priceOverrideReason:''
		            	},
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Object}  selectedShipNode - Object used to store details on store selection from store search popup.
						 */
		            	selectedShipNode:{
		            		shipNode:'',
		            		shipNodeDesc:''
		            	},
					/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Object}  showUpdateCart - Attribute used to show update cart button instead of add cart.
						 */
						showUpdateCart: false,
					/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Object}  hideItemSearch - Attribute used to show product search text field in view.
						 */
						showItemSearch: true,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Object}  availability - Object used to set item availability details used to display in view.
						 */
		            	availability:{
		            		//shp ui attributes
		            		itemShpAvailableDate : '',
			            	itemShpAvailableText : '',
			            	itemShpAvailable : false,
			            	itemShpAvailableToday : false,

			            	//pick ui attributes
			            	itemPickAvailable : false,
			            	itemPickAvailableText : '',
			            	itemPickAvailableDate : '',

			            	//carry ui attributes.
			            	itemCarryAvailable : false,
			            	itemCarryAvailableDate : ''
		            	},
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.add-cart.add-items
						 *@property {Number} activeTabIndex - Index based on which one of the tabs is opened and made active.
						 */
						activeTabIndex : 0,
                        showProductShare : true
		            },
					/**
				  		 *@iscdoc viewinit
						 *@viewname store.views.order.add-cart.add-items
				  		 *@description Handler for change variation during order modification.
				  		 */
					handleChangeVariation: function(input){
						this.model.changeVariationInput = input;
						//set default qty to fetch availability against this quantity.
						this.ui.defaultQty = input.OrderLine.OrderLineTranQuantity.OrderedQty;						
						this.ui.deliveryMethod = this.model.changeVariationInput.OrderLine.DeliveryMethod;
						if(!iscCore.isVoid(input.OrderLine.LinePriceInfo.IsPriceLocked) && input.OrderLine.LinePriceInfo.IsPriceLocked === "Y"){
							this.ui.priceOverride.isPriceOverriden = true;
						}
					},
		            /**
				  		 *@iscdoc viewinit
						 *@viewname store.views.order.add-cart.add-items
				  		 *@description Gets the scanned item details, gets order details if order is already created.
				  		 */
		            initialize: function(){
		            	var pageInput = iscWizard.getWizardPageInput();
		            	var inputData = pageInput.input;
		            	if(!iscCore.isVoid(pageInput.openBlankPage)){
		            		this.ui.openBlankPage = pageInput.openBlankPage;	
		            	}
		            	
                        this.model.customerDetails = iscWizard.getWizardModel("customerModel");
                        
		            	var searchContext = pageInput.searchContext;
		            	var orderDetails = iscWizard.getWizardModel("orderModel");
						if(!iscCore.isVoid(orderDetails) && orderDetails.Order.DraftOrderFlag === "N"){
							this.ui.showUpdateCart = true;
						}
		            	if(!iscCore.isVoid(searchContext) && (searchContext==='scanInStore' || searchContext==='changeVariation')){
		            		$rootScope.$showBackButtonForStates = false;
		            		this.ui.showCheckOutButton = false;
							if(searchContext==='changeVariation'){
								this.ui.showItemSearch = false;
								inputData = pageInput.input.OrderLine.ItemDetails.ItemID;
								this.handleChangeVariation(pageInput.input);
								// this.model.changeVariationInput = pageInput.input;
								// //set default qty to fetch availability against this quantity.
								// this.ui.defaultQty = pageInput.input.OrderLine.OrderLineTranQuantity.OrderedQty;
								// if(!iscCore.isVoid(pageInput.input.OrderLine.LinePriceInfo.IsPriceLocked) && pageInput.input.OrderLine.LinePriceInfo.IsPriceLocked === "Y"){
								// 	this.ui.priceOverride.isPriceOverriden = true;
								// }
							}
		            	}
		            	this.ui.focusScanField = false;
		            	if(!iscCore.isVoid(orderDetails) && !iscCore.isVoid(orderDetails.Order.OrderHeaderKey)){

		            		if(iscCore.isVoid(inputData)){
			            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
			            	}
			            	else{
			            		var getCompleteItemDetailsApiInput = this.getCompleteItemDetailsApiInput(inputData,true);
			            		// setting default page size to be used to call searchproduct if
			            		// getCompleteItemDetails does not return any result.
			            		getCompleteItemDetailsApiInput.Item.DefaultPageSize = iscAppContext.getFromContext("defaultPageSize");

			            		var getOrderDetailsInput = {
			            				Order:{
			            					OrderHeaderKey: orderDetails.Order.OrderHeaderKey
			            				}
			            			};

			            		var mashupArray = [];
					        	mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteItemList',getCompleteItemDetailsApiInput));
		            			mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteOrderDetails', getOrderDetailsInput));
		            			iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);

		            	}

		            }else{
	            		this.getCompleteItemDetails(inputData);
	            	}

		            },

		            /**
					 *@iscdoc method
					 *@viewname store.views.order.add-cart.add-items
					 *@methodname handleInitApiCalls
					 *@description callback handler for init api calls getCompleteOrderDetails and getCompleteItemList.
					 *@param {Object} data - Controller data of init api calls.
					 */
			  		  handleInitApiCalls : function (data){

			  			var mashupRef = data.MashupRefs.MashupRef;
		            	if(mashupRef !== null && mashupRef !== undefined){
		            		var len = mashupRef.length;
		            		for(var i = 0; i < len; i++){
		            			var mashupRefObj = mashupRef[i];
		            			if(mashupRefObj.mashupRefId === 'getCompleteItemList'){
		    			  			this.handleGetCompleteItemDetails(data);
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getCompleteOrderDetails'){
		            				orderDetails = this.model.orderDetails;
	  		            			iscWizard.setWizardModel("orderModel",this.model.orderDetails);
	            					this.ui.orderTotalQty = orderDetails.Order.OrderLines.TotalNumberOfRecords;
									if(!iscCore.isVoid(orderDetails) && orderDetails.Order.DraftOrderFlag === "N"){
										this.ui.showUpdateCart = true;
										this.ui.showCheckOutButton = false;
										this.ui.availability.itemCarryAvailable = false;
									}
		            			}
		            		}
			  		      }

			  		  },

		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiCancel
				  		 *@description Cancel button onclick handler for wizard.Shows confirmation message,if yes then closes the wizard.
				  		 */
		            uiCancel : function(){
		            	
		            	if(!this.ui.showCheckOutButton){
		            		iscWizard.gotoPreviousPage(true);
		            	}
		            	else{
		            		
		            		var confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
			            	if(this.ui.orderTotalQty < 1){
			            		confirmationMsg = iscI18n.translate('addItems.WarningMessage_Cancel');
			            	}
			            	iscModal.showConfirmationMessage(confirmationMsg).then(
								function(callBackAction){
			            			//
									if(callBackAction === 'YES'){
										iscWizard.closeWizard();
									}
			       				},
			  					function(callBackAction){
			            			//		Do Nothing

			       				});
		            	}
		            	
		            },

		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiOpenProductSearch
				  		 *@description Onclick handler function for search icon in scan field.Opens dirty popup if screen is dirty
				  		 * and based on action selected opens search product wizard page or stays in the same screen.
						 *@param {String} searchTxt - Input to search for matching products.
				  		 */
		            uiOpenProductSearch: function(searchTxt){
		            	var that = this;
		            	var openProductSearch = true;
		            	if(this.ui.isScreenDirty){
		            		iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
		            			if(iscCore.isBooleanTrue(action)){
		            				// action is yes. check search text and if valid, open search page.
		            				if(!iscCore.isVoid(searchTxt)){
					            		var pageInput = {
						            			input: searchTxt
						            	};
					            		if(this.ui.showUpdateCart === true || (!this.ui.showCheckOutButton)){
					            			iscWizard.gotoCustomPage('productSearch',pageInput,{wizardPageCssClass:"fullscreen-modal"});
					            		}else{
					            			iscWizard.gotoCustomPage('productSearch',pageInput,{});	
					            		}
						            	
					            	}
					            	else{
					            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
					            	}
		            			}
		            			else{
		            				// action is no. so clear search text.
		            				that.model.searchInput = '';
		            			}
		            		});
		            	}
		            	else{
		            		if(!iscCore.isVoid(searchTxt)){
			            		var pageInput = {
				            			input: searchTxt
				            	};
			            		if(this.ui.showUpdateCart === true){
			            			iscWizard.gotoCustomPage('productSearch',pageInput,{wizardPageCssClass:"fullscreen-modal"});
			            		}else{
			            			iscWizard.gotoCustomPage('productSearch',pageInput,{});	
			            		}
			            	}
			            	else{
			            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
			            	}
		            	}
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiHandleCheckout
				  		 *@description Onclick handler function for checkout button in view.Opens cart details page if products are added to cart.
				  		 */
		            uiHandleCheckout:function(){
		            	if(this.ui.isScreenDirty){
		            		iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
		            			if(iscCore.isBooleanTrue(action)){
		            				
		            				iscWizard.gotoCustomPage('cartDetails',{},{});
		            			}
		            		});
		            	}
		            	else{
		            		iscWizard.gotoCustomPage('cartDetails',{},{});
		            	}
			        },
			        	/**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiGetItemDetails
				  		 *@description Gets the product details using the unique identifier passed as argument.
				  		 *@param {String} itemId - Unique identifier of the item.
				  		 */
		            uiGetItemDetails: function(itemId){
		            	if(!iscCore.isVoid(itemId)){
			            	this.getCompleteItemDetails(itemId);
		            	}
		            	else{
						       iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
					      }
                  	this.model.searchInput = '';
		            },
		            
		            
		           /* uiOpenItemDetails: function(itemId) {
						var that = this;
						if (iscCore.isVoid(itemId)) {
							iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
						} else if (this.ui.isScreenDirty) {
							iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action) {
								if (iscCore.isBooleanTrue(action)) {
									iscWizard.gotoCustomPage('addItems', {input: itemId}, {removeCurrent: true,wizardPageCssClass:"fullscreen-modal"});
								} else {
									// action is no. so clear search text.
									that.model.searchInput = '';
								}
							});
						} else {
							iscWizard.gotoCustomPage('addItems', {input: itemId}, {removeCurrent: true,wizardPageCssClass:"fullscreen-modal"});
						}
					},*/
					
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiOpenItemDetails
				  		 *@description Onclick handler of scan icon in scan field.Opens find products screen with product details.
				  		 *@param {String} itemId - Unique identifier of the item.
				  		 */
		            uiOpenItemDetails: function(itemId){
		            	var that = this;
						this.ui.variantItemSelected = false;
		            	if(iscCore.isVoid(itemId)){
		                     iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
		                }
		                else if(this.ui.isScreenDirty){
		            			iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
		            			if(iscCore.isBooleanTrue(action)){
		            				//iscWizard.gotoCustomPage('addItems',{input: itemId},{});
		            				if(that.ui.showUpdateCart === true || (!that.ui.showCheckOutButton)){
		            					var screenInput = iscWizard.getWizardPageInput();
		            					var pageInput = {
						            			input: itemId
		            					        
						            	};
		            					if(!iscCore.isVoid(screenInput) && !iscCore.isVoid(screenInput.searchContext)){
		            						pageInput.searchContext=screenInput.searchContext;
		            					}
				            			iscWizard.gotoCustomPage('addItems',pageInput,{removeCurrent: true,wizardPageCssClass:"fullscreen-modal"});
				            		}else{
				            			iscWizard.gotoCustomPage('addItems',{input: itemId},{});
				            		}
		            			}
		            			else{
		            				// action is no. so clear search text.
		            				that.model.searchInput = '';
		            			}
		            		});
		            	}
		            	else if(this.ui.showUpdateCart === true || (!this.ui.showCheckOutButton)){
		            		var screenInput = iscWizard.getWizardPageInput();
        					var pageInput = {
			            			input: itemId
        					        
			            	};
		            		if(!iscCore.isVoid(screenInput) && !iscCore.isVoid(screenInput.searchContext)){
        						pageInput.searchContext=screenInput.searchContext;
        					}
		            		iscWizard.gotoCustomPage('addItems',pageInput,{removeCurrent: true,wizardPageCssClass:"fullscreen-modal"});
						}else{
							iscWizard.gotoCustomPage('addItems',{input: itemId},{});
						}
		            		
		            	//}
		            },
						/**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiShowVariantItemDetails
				  		 *@description Calls mashup to get the variant item details and updates the view with mashup output.
				  		 *@param {String} itemId - Unique identifier of the item.
				  		 */
						uiShowVariantItemDetails: function(itemId){
							// get variant item details.
							this.ui.variantItemSelected = true;
							this.getCompleteItemDetails(itemId);
						},
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiIncreaseQty
				  		 *@description Increases the default quantity of the product, updates the item availability information using the updated quantity.
				  		 *@param {String} itemId - Unique identifier of the item.
				  		 */
		            uiIncreaseQty: function(){
		            	this.ui.isScreenDirty = true;
		            	this.ui.defaultQty++;
		            	this.callGetItemAvailabilityForStoreApi(this.ui.defaultQty);
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiDecreaseQty
				  		 *@description Decreases the default quantity of product, updates the product availability information using the updated quantity.
				  		 *@param {String} itemId - Unique identifier of the item.
				  		 */
		            uiDecreaseQty: function(){
		            	if(this.ui.defaultQty !== 1){
		            		this.ui.isScreenDirty = true;
		            		this.ui.defaultQty--;
		            		this.callGetItemAvailabilityForStoreApi(this.ui.defaultQty);
		            	}
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiShowItemDesc
				  		 *@description Onclick handler function for Details tab.Shows product description.
				  		 */
		            uiShowItemDesc: function(){
						this.ui.showItemDesc = true;
		            	this.ui.activeTabIndex = 0;
		            	this.ui.showRelatedItems = false;
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiShowRelatedItems
				  		 *@description Onclick handler function for Related Products tab.Shows the product associations.
				  		 */
		            uiShowRelatedItems: function(){
                  // call api if associations are not loaded in ui already.
	                  if(iscCore.isVoid(this.model.relatedItemDetails)){
	                    this.showRelatedItems();
	                  }
	                  else{
						this.ui.showItemDesc = false;
						this.ui.activeTabIndex = 1;
	  		            this.ui.showRelatedItems = true;
	                  }
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiHandleAddToCart
				  		 *@description Onclick handler for addToCart button in view. Adds the product to cart
				  		 *by calling mashup to create order if order is not created, updates the order if order
				  		 *is created.
				  		 */
		            uiHandleAddToCart: function(){
		            	this.ui.focusScanField = false;
		            	var addToCartInput = this.getAddToCartInput();
		            	if(addToCartInput !== -1){
		            		this.saveItemToCart(addToCartInput);
		            	}
		            },
					/**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiHandleUpdateCart
				  		 *@description Onclick handler for update cart button in view. updates the product to cart
				  		 *by calling change order with pending changes.
				  		 */
					uiHandleUpdateCart: function(){
						this.ui.focusScanField = false;
						var updateCartInput = this.getAddToCartInput();
						if(updateCartInput !== -1){
							this.updateCart(updateCartInput);
						}
					},
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiHandlePriceOverride
				  		 *@description Onclick handler function of edit icon.Opens price override popup by passing necessary input. Sets the json
				  		 * object with data returned by the popup.
				  		 */
		            uiHandlePriceOverride: function(){
		        		// open override price popup and process the data returned from popup.
		            	var that = this;
		            	var ovpInput = {};
		            	ovpInput.price = {};
		            	ovpInput.price.listPrice = this.model.itemDetails.ComputedPrice.ListPrice;
		            	ovpInput.price.unitPrice = this.model.itemDetails.ComputedPrice.UnitPrice;
		            	ovpInput.price.Currency = this.model.getCompleteItemList.ItemList.Currency;
		            	var priceOverrideInput = {
		            			modalInput: function(){
		            				return ovpInput;
		            			}
		            	};
		            	iscModal.openModal('store.views.common.priceoverride.priceoverride',priceOverrideInput,{})
							.then(function(callBackData){
		            			if(!iscCore.isVoid(callBackData) && !iscCore.isVoid(callBackData.data)){
		            				this.model.itemDetails.ComputedPrice.UnitPrice = callBackData.data.newprice;
					            	this.ui.priceOverride.priceOverrideReason = callBackData.data.reason;
					            	this.ui.priceOverride.isPriceOverriden = true;
					            	this.ui.isScreenDirty = true;
		            			}
		       				}.bind(this),
		  					angular.noop);
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiSetDeliveryMethod
				  		 *@description Sets delivery method for the product details shown in the view.
				  		 *@param {String} delMethod - Delivery method selected in the view.
				  		 */
		            uiSetDeliveryMethod: function(delMethod){
		            	// checking for isShippingAllowed/IsPickAllowed as ng-click handler gets triggered even when links are disabled.
		            	if(delMethod === 'SHP' &&
		            		   iscCore.isBooleanTrue(this.model.itemDetails.PrimaryInformation.IsShippingAllowed)){
		            		this.ui.deliveryMethod = delMethod;
		            	}
		            	if(delMethod === "PICK" &&
		            		iscCore.isBooleanTrue(this.model.itemDetails.PrimaryInformation.IsPickupAllowed)){
		            		this.ui.deliveryMethod = delMethod;
		            	}
		            	if(delMethod === "CARRY"){
		            		this.ui.deliveryMethod = delMethod;
		            	}
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiOpenStoreSearch
				  		 *@description Onclick handler function of PICK availability element in view.Opens store search popup.
				  		 *@param {String} fromContext - next action handler for store selection.Create/update order if set to 'addToCart'
				  		 */
		            uiOpenStoreSearch: function(fromContext){
		            	if(this.model.itemDetails.PrimaryInformation.IsPickupAllowed === 'Y'){
		            		var that = this;
                        that.fromContext = fromContext;

		            	var storeSearchModalInput = {
		            			modalInput: function(){
		            				return {
	            							inputData : {
	            								callingMode : "ADDITEMS",
	            								itemDetails : that.model.itemDetails,
	            								RequiredQty : that.ui.defaultQty}
	            							};
		            			}
		            	};
		            	iscModal.openModal('store.views.common.storesearch.storesearch',storeSearchModalInput,{})
		            			 .then(function(callBackData){
		            		that.afterStoreSelection.call(that,callBackData.data,that.fromContext);
							},angular.noop);
		            	}

		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiFetchVariantItemDetails
				  		 *@description Callback handler function to display variant product details.
				  		 */
		            uiFetchVariantItemDetails: function(itemId){
		            	this.getCompleteItemDetails(itemId);
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname uiRenderHtml
				  		 *@description Handles html content if present in product description.
				  		 *@param {String} itemDesc - Product description
				  		 */
		            uiRenderHtml: function(itemDesc){
		            		return $sce.trustAsHtml(itemDesc);
		            },					
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname handleGetCompleteItemDetails
				  		 *@description Success callbackhandler for getCompleteItemDetails mashup.Displays product details along with availability information,opens product search if
				  		 * search results are present in the output
				  		 *@param {Object} data - mashup output object of getCompleteItemDetails mashup.
				  		 */
		            handleGetCompleteItemDetails: function(data){
		            	var output = iscMashup.getMashupOutput(data,'getCompleteItemList');
		            	var itemDetails = output.ItemList.Item;
		            	//this.ui.focusScanField = true;
						if(!iscWizard.getWizardContext('findProductDone') && iscAppContext.isMobile() && iscWizard.getWizardAction() == 'NEXT') {
							iscWizard.setWizardContext('findProductDone','true');
							this.ui.focusScanField = false;
						} else if(iscWizard.getWizardContext('findProductDone') && iscAppContext.isMobile() && iscWizard.getWizardAction() == 'PREVIOUS') {
							iscWizard.setWizardContext('findProductDone',false);
							this.ui.focusScanField = false;
						} else {
							this.ui.focusScanField = true;
						}
		            	var searchResult = output.ItemList.SearchResult;

		            	if(iscCore.isVoid(itemDetails) && iscCore.isVoid(searchResult)){
		            		this.ui.noProductsFound = true;
		            		this.ui.showItemDetails = false;
		            	}
		            	else if(!iscCore.isVoid(searchResult)){
	            			// open item search page with results.
		            		var pageInput = iscWizard.getWizardPageInput();
		            		var flowName = "";
		            		if(!iscCore.isVoid(pageInput) && !iscCore.isVoid(pageInput.flowName)) {
		            			flowName = pageInput.flowName;
		            		}
		            		if(!this.ui.showCheckOutButton){
		            			searchResult.searchContext='scanInStore';
		            			iscWizard.gotoCustomPage('productSearch',searchResult,{removeCurrent:true,wizardPageCssClass:"fullscreen-modal", flowName:flowName});
			            	}else{
			            		iscWizard.gotoCustomPage('productSearch',searchResult,{removeCurrent:true, flowName:flowName});
			            	}
	            			
	            		}
		            	else{
		            		this.ui.showItemDetails = true;
		            		this.resetUIAttributes();
		            		this.model.itemDetails = this.model.getCompleteItemList.ItemList.Item[0];
		            		if(this.model.itemDetails.PrimaryInformation.KitCode === 'BUNDLE' ||
		            			this.model.itemDetails.PrimaryInformation.KitCode==='PK' ||
		            			this.model.itemDetails.PrimaryInformation.KitCode==='DPK'){
		            			iscModal.showErrorMessage(iscI18n.translate('globals.MSG_Item_not_supported'));
		            			return;
		            		}
		            		if(!iscCore.isVoid(this.model.itemDetails.ClassificationCodes) &&
		            			 !iscCore.isVoid(this.model.itemDetails.ClassificationCodes.Model)){
		            			// show variations for items which is a variant item of variation item(eg:RedJacketM)
		            				this.ui.variantItemId = this.model.itemDetails.ItemID;
		            		}
		            		if(!iscCore.isVoid(this.model.itemDetails.Availabilities)){
		            			this.handleItemAvailability(this.model.itemDetails.Availabilities);
		            		}
		            	}
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname resetUIAttributes
				  		 *@description reset UI attributes used to display product information in the view.
				  		 */
		            resetUIAttributes: function(){
		            	this.ui.noProductsFound = false;

	            		this.ui.showItemDesc = true;
						this.ui.activeTabIndex = 0;
	            		this.ui.showRelatedItems = false;
						if(!iscCore.isVoid(this.model.changeVariationInput)){
							this.ui.defaultQty = this.model.changeVariationInput.OrderLine.OrderLineTranQuantity.OrderedQty;
						}
						else{
							this.ui.defaultQty = 1;
						}
	            		
	            		this.ui.priceOverride.isPriceOverriden = false;
	            		this.ui.variantItemId = '';
	            		this.resetAvailabilityUIAttrs();
						this.ui.selectedShipNode = {
							shipNode:'',
							shipNodeDesc:''
						};
	            		
                  this.model.relatedItemDetails = {};
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname resetAvailabilityUIAttrs
				  		 *@description reset UI attributes used to display product availability information in the view.
				  		 */
		            resetAvailabilityUIAttrs: function(){
		            	this.ui.availability = {
		            		itemShpAvailableDate : '',
			            	itemShpAvailableText : '',
			            	itemShpAvailable : false,
			            	itemShpAvailableToday : false,

			            	//pick ui attributes
			            	itemPickAvailable : false,
			            	itemPickAvailableText : '',
			            	itemPickAvailableDate : '',

			            	//carry ui attributes.
			            	itemCarryAvailable : false,
			            	itemCarryAvailableDate : ''
		            	}
                     
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname handleShpAvailabilityInfo
				  		 *@description Sets the availability related UI attributes to display
				  		 * product availability for SHP delivery method.
				  		 *@param {Object} availability - Object having SHP related availability information.
				  		 */
		            handleShpAvailabilityInfo: function(availability,isAvailabilityRealtimeData){
		            	var hasAnyUnavailableQty = '';
            			var earliestShpDate = '';
		            	if(!iscCore.isVoid(availability)){
		            		 hasAnyUnavailableQty = availability.HasAnyUnavailableQty;
            			    earliestShpDate = availability.EarliestShipDate;
		            	}
            			if(hasAnyUnavailableQty === "N"){
    						// item available.
		                     if(this.model.itemDetails.PrimaryInformation.IsShippingAllowed === 'Y' &&
		                     	this.ui.deliveryMethod === ''){
		                        this.ui.deliveryMethod = 'SHP';
		                     }
		                    if(isAvailabilityRealtimeData === 'Y'){

		                    	this.ui.availability.itemShpAvailableText = earliestShpDate;
	    						this.ui.availability.itemShpAvailableDate = earliestShpDate;

		                    }else if (isAvailabilityRealtimeData === 'N'){
		                    	this.ui.availability.itemShpAvailableText = availability.ProductAvailDate;
	    						this.ui.availability.itemShpAvailableDate = availability.ProductAvailDate;

		                    }

        					this.ui.availability.itemShpAvailable = true;
    						var isAvailableToday = availability.IsAvailableToday;
    						if(isAvailableToday === "Y"){
    							// item available today. show within 24hrs.
    							this.ui.availability.itemShpAvailableToday = true;
    						}
    					}
    					else{
    						this.ui.availability.itemShpAvailable = false;
    						this.ui.availability.itemShpAvailableText = '';
    					}
		            },
		           /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname handlePickAvailabilityInfo
				  		 *@description Sets the availability related UI attributes to display
				  		 * product availability for PICK delivery method.
				  		 *@param {Object} availability - Object having PICK availability information.
				  		 */
		            handlePickAvailabilityInfo: function(availability){
		            	var hasAnyUnavailableQty = '';
		            	var isAvailableToday = '';
		            	var distance = '';
		            	var sameStore = false;
		            	if(!iscCore.isVoid(availability)){
		            		hasAnyUnavailableQty = availability.HasAnyUnavailableQty;
		            	   isAvailableToday = availability.IsAvailableToday;
		            	}
        					if(hasAnyUnavailableQty === 'N'){
        					// item available.
        					if(!iscCore.isVoid(availability.ShipNode)){
		            		//this.ui.selectedShipNode.shipNode = availability.ShipNode;
		            		//this.ui.selectedShipNode.shipNodeDesc = availability.ShipNodeDescription;
			            		if(iscAppContext.getFromContext("storeName") === availability.ShipNode){
			            			// item available in same store. stamp ship node,else force user to select store.
			            			this.ui.selectedShipNode.shipNode = availability.ShipNode;
			            		    this.ui.selectedShipNode.shipNodeDesc = availability.ShipNodeDescription;
			            		    sameStore = true;
			            		}
		            	}

	                    if(this.model.itemDetails.PrimaryInformation.IsPickupAllowed === 'Y' &&
	                    	this.ui.deliveryMethod === '' ){
	                        this.ui.deliveryMethod = 'PICK';
	                    }
        					this.ui.availability.itemPickAvailable = true;
        					this.ui.availability.itemPickAvailableDate = availability.ProductAvailDate;
        					if(isAvailableToday === "Y"){
        						if(sameStore){
        							//available today,same store (today,date at ship node desc)
        							this.ui.availability.itemPickAvailableText = iscI18n.translate
            					    ('globals.LABEL_ItemAvailableTodayAtStore',
            							{date: $filter('date')(availability.ProductAvailDate, 'mediumDate'),
            							shipNodeDesc: this.ui.selectedShipNode.shipNodeDesc});
        						}
        						else{
        							// available today,diff store (today,date within 25 miles)
        							this.ui.availability.itemPickAvailableText = iscI18n.translate
            					    ('addItems.LABEL_ItemPickAvailableTodayDiffStore',{date: $filter('date')(availability.ProductAvailDate, 'mediumDate'),
            					    	distance: $filter('number')(availability.Distance, 2), distanceUOM: availability.DistanceUOMDesc});
        						}

        					}
        					else{
        						if(sameStore){
        							// available in future (future date at ship node desc)
        							this.ui.availability.itemPickAvailableText = iscI18n.translate
            					('addItems.LABEL_ItemPickAvailableNotTodaySameStore',
                    					{date: $filter('date')(availability.ProductAvailDate, 'fullDate') ,
                    					shipNodeDesc: this.ui.selectedShipNode.shipNodeDesc});
        						}
        						else{
        							// available in future (future date within distance.)
        							this.ui.availability.itemPickAvailableText = iscI18n.translate
            					('addItems.LABEL_ItemPickAvailableNotTodayDiffStore',
                    					{date: $filter('date')(availability.ProductAvailDate, 'fullDate') ,
                    					distance: $filter('number')(availability.Distance, 2), distanceUOM: availability.DistanceUOMDesc} );
        						}

        					}
        				}
        				else{
        					this.ui.availability.itemPickAvailable = false;
        					this.ui.availability.itemPickAvailableText = '';
        					this.ui.availability.itemPickAvailableDate = '';
        				}
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname handleCarryAvailabilityInfo
				  		 *@description Sets the availability related UI attributes to display
				  		 * product availability for CARRY delivery method.
				  		 *@param {Object} availability - Object having CARRY related availability information.
				  		 */
		            handleCarryAvailabilityInfo: function(availability){
		            	var hasAnyUnavailableQty = '';
		            	var isAvailableToday = '';
		            	if(!iscCore.isVoid(availability)){
		            		hasAnyUnavailableQty = availability.HasAnyUnavailableQty;
		            	   isAvailableToday = availability.IsAvailableToday;
		            	}
		            	
                        var isOrgRoleNode = iscWizard.getWizardModel("isOrgRoleNode");
		            	if(!iscCore.isVoid(isOrgRoleNode) && isOrgRoleNode == 'N')
		            		hasAnyUnavailableQty = 'Y'
		            	
		            	if(hasAnyUnavailableQty === 'N'){
		            		// item available, set delivery method to carry.
                        // if item available to carry from store,then set delivery method to carry.
                        if(this.ui.deliveryMethod === ''){
                        	if(!iscCore.isVoid(this.model.orderDetails)){
                        		if(!iscCore.isVoid(this.model.orderDetails.Order)){
                        			if(!iscCore.isVoid(this.model.orderDetails.Order.DraftOrderFlag)){
                        				if(this.model.orderDetails.Order.DraftOrderFlag == 'Y'){
                                            this.ui.deliveryMethod = 'CARRY';
                        				}
                        			}
                        		}
                        	}
                        }
                        if(isAvailableToday === "Y"){
                        	
		            			// available today. (today at store desc)
                        	
		            			this.ui.availability.itemCarryAvailable = true;
		            			var date = availability.ProductAvailDate;

		            			this.ui.availability.itemCarryAvailableDate = iscI18n.translate
            					('globals.LABEL_ItemAvailableTodayAtStore',{date: $filter('date')(availability.ProductAvailDate, 'mediumDate'),shipNodeDesc: availability.ShipNodeDescription});
                        	
                        }
		            	}
		            	else{
		            		this.ui.availability.itemCarryAvailable = false;
		            		this.ui.availability.itemCarryAvailableDate = '';
		            	}
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname handleItemAvailability
				  		 *@description Sets the availability related UI attributes to display using data obtained from mashup output.
				  		 *@param {Object} availabilities - Object having product availability information.
				  		 */
		            handleItemAvailability: function(availabilities){
		            	var isAvailabilityRealtimeData = availabilities.IsAvailabilityRealTimeData;
		            	//isAvailabilityRealtimeData = 'N';
		            	this.resetAvailabilityUIAttrs();
						if(!iscCore.isVoid(this.ui.deliveryMethod)){
							// check if item is available for selected delivery method.
							// if out of stock,reset delivery method to '' and set to next available delivery method.
							var availability = this.getAvailabilityInfoBasedOnDelMethod(availabilities,this.ui.deliveryMethod);
							if(!iscCore.isVoid(availability)){
								var hasAnyUnavailableQty = availability.HasAnyUnavailableQty;
								if(hasAnyUnavailableQty === 'Y'){
									this.ui.deliveryMethod = '';
								}
							}
						}
		            	var availability = null;
		            	if(availabilities.Availability instanceof Array){
		            		availability = this.getAvailabilityInfoBasedOnDelMethod(availabilities,'CARRY');
		            		this.handleCarryAvailabilityInfo(availability);
		            		availability = this.getAvailabilityInfoBasedOnDelMethod(availabilities,'SHP');
		            		this.handleShpAvailabilityInfo(availability,isAvailabilityRealtimeData);
		            		availability = this.getAvailabilityInfoBasedOnDelMethod(availabilities,'PICK');
		            		this.handlePickAvailabilityInfo(availability);
		            	}
		            	else{
		            		availability = availabilities.Availability;
		            		this.processAvailabilityInfo(availability,isAvailabilityRealtimeData);
		            	}
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname getAvailabilityInfoBasedOnDelMethod
				  		 *@description Scans the product availability output object to return the availability element for specific delivery method
				  		 *@param {Object} availabilities - Object having product availability information.
				  		 *@param {Object} deliveryMethod - Delivery method - SHP,PICK,CARRY
				  		 *@return {Object} availability - Object having availability information for specific delivery method.
				  		 */
		            getAvailabilityInfoBasedOnDelMethod: function(availabilities,deliveryMethod){
		            	var availability = null;
		            	if(availabilities.Availability instanceof Array){
		            		var availabilityArr = availabilities.Availability;
		            		var length = availabilityArr.length;
		            		for(var i = 0; i < length; i++){
									availability = availabilityArr[i];
									if(availability.DeliveryMethod === deliveryMethod ||
										(deliveryMethod === 'CARRY' && iscCore.isVoid(availability.DeliveryMethod))){
										return availability;
									}
		            		}
		            	}
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname getAvailabilityInfoBasedOnDelMethod
				  		 *@description Calls appropriate handlers to display item availability for different
		             *              delivery methods.
				  		 *@param {Object}availability - json object containning availability information for
		             *        shp,pick and carry delivery methods.
				  		 */
		            processAvailabilityInfo: function(availability,isAvailabilityRealtimeData){
		            	if(!iscCore.isVoid(availability)){
	            			var deliveryMethod = availability.DeliveryMethod;
	            			if(!iscCore.isVoid(deliveryMethod)){
                           if(deliveryMethod === "CARRY"){
		            				this.handleCarryAvailabilityInfo(availability);
		            			}
                           if(deliveryMethod === "SHP"){
		            				this.handleShpAvailabilityInfo(availability,isAvailabilityRealtimeData);
		            			}
		            			if(deliveryMethod === "PICK"){
		            				this.handlePickAvailabilityInfo(availability);
		            			}

	            			}
	            		}
		            },
			        /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname showRelatedItems
				  		 *@description Paints related items by calling mashup to get all associations of the product.
				  		 */
			        showRelatedItems: function(){
                  	var getRelatedItemsInput = this.getCompleteItemDetailsApiInput(this.model.itemDetails.ItemID,false);
  		            	iscMashup.callMashup(this,'getRelatedItems',getRelatedItemsInput,{}).then(function(){
								this.ui.showItemDesc = false;
  		            			this.ui.activeTabIndex = 1;
		              			this.ui.showRelatedItems = true;
  		            	}.bind(this),angular.noop);
			        },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname afterStoreSelection
				  		 *@description Callback handler of store selection popup. Updates product availability information with
				  		 *data returned by the store selection popup.
				  		 *@param {Object} data - Selected store details.
				  		 *@param {Object} fromContext - Context opening the store selection popup.
				  		 */
		            afterStoreSelection: function(data,fromContext){
		            	this.ui.isScreenDirty = true;
		            	this.ui.selectedShipNode.shipNode = data.selectedStore.ShipNode;
	            		this.ui.selectedShipNode.shipNodeDesc = data.selectedStore.Description;

	            		if(iscCore.isBooleanTrue(data.selectedStore.Availability.IsAvailable) &&
	            				iscCore.isBooleanFalse(data.selectedStore.Availability.IsFutureAvailability)){
	            			//item is available today
	            			this.ui.availability.itemPickAvailable = true;
	            			this.ui.availability.itemPickAvailableDate = data.selectedStore.Availability.AvailableDate;
	            			if(iscAppContext.getFromContext("storeName") === data.selectedStore.ShipNode){
	            				this.ui.availability.itemPickAvailableText = iscI18n.translate
	    						('globals.LABEL_ItemAvailableTodayAtStore',{date: $filter('date')(data.selectedStore.Availability.AvailableDate, 'mediumDate'),
	    						shipNodeDesc: this.ui.selectedShipNode.shipNodeDesc});
	            			}else{
	            				this.ui.availability.itemPickAvailableText = iscI18n.translate
            					    ('addItems.LABEL_ItemPickAvailableTodayDiffStore',{date: $filter('date')(data.selectedStore.Availability.AvailableDate, 'mediumDate'),
            					    	distance: $filter('number')(data.selectedStore.DistanceFromShipToAddress, 2), distanceUOM: data.selectedStore.DistanceUOMDesc});
	            			
	            			}
	            			
	            		}
	            		else if(iscCore.isBooleanTrue(data.selectedStore.Availability.IsAvailable) &&
	            				iscCore.isBooleanTrue(data.selectedStore.Availability.IsFutureAvailability)){
	            			// item is available at future date.
	            			this.ui.availability.itemPickAvailable = true;
	            			this.ui.availability.itemPickAvailableDate = data.selectedStore.Availability.AvailableDate;
	            			this.ui.availability.itemPickAvailableText = iscI18n.translate
        					('addItems.LABEL_ItemPickAvailableNotTodaySameStore',
                					{date: $filter('date')(data.selectedStore.Availability.AvailableDate, 'fullDate'), shipNodeDesc: this.ui.selectedShipNode.shipNodeDesc});
	            		}
	            		else if(iscCore.isBooleanFalse(data.selectedStore.Availability.IsAvailable) &&
	            				iscCore.isBooleanFalse(data.selectedStore.Availability.IsFutureAvailability)){
	            			this.ui.availability.itemPickAvailable = false;
	            		}
	            		this.uiSetDeliveryMethod('PICK');
	            		if(fromContext !== null && fromContext !== undefined && fromContext === 'addToCart'){
	            			this.uiHandleAddToCart();
	            		}else if(fromContext === 'changeVariation'){
	            			this.uiHandleUpdateCart();
	            		}
	            		
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname getAddToCartInput
				  		 *@description Frames createOrder/updateOrder input object
				  		 *@return {Object} addToCartInput - create/update order mashup input object.
				  		 */
		            getAddToCartInput: function(){
		            	var addToCartInput = {};
		            	addToCartInput.Order = {};
						var pageInput = iscWizard.getWizardPageInput();
						var inputData = pageInput.input;
						var searchContext = pageInput.searchContext;
						
						if(!iscCore.isVoid(this.model.orderDetails)){
		            		addToCartInput.Order.OrderHeaderKey =this.model.orderDetails.Order.OrderHeaderKey;
		            	}
						else{
							addToCartInput.Order.EntryType = iscAppContext.getFromContext('storeEntryType');
		            		addToCartInput.Order.DocumentType = iscAppContext.getFromContext('salesOrderDocType');
                            if(!iscCore.isVoid(iscWizard.getWizardModel('customerModel'))){
                                var customerInfo = iscWizard.getWizardModel('customerModel');
                                var customerModel = customerInfo;
								
                                addToCartInput.Order.BillToID = customerInfo.Customer.CustomerID; 
                                if(!iscCore.isVoid(customerInfo.Customer.DisplayCustomerAddress)){
                                 addToCartInput.Order.PersonInfoShipTo={};
                                 addToCartInput.Order.PersonInfoShipTo = angular.copy(customerInfo.Customer.DisplayCustomerAddress);
                                 //if(customerInfo.addressSelected.IsDefaultBillTo === 'Y'){
                                     addToCartInput.Order.PersonInfoBillTo={};
                                     addToCartInput.Order.PersonInfoBillTo = angular.copy(customerInfo.Customer.DisplayCustomerAddress);
                                 //}
                                }


                                if(customerModel.Customer.CustomerType === '02' || (customerModel.Customer.CustomerContactList &&  customerModel.Customer.CustomerContactList.CustomerContact && customerModel.Customer.CustomerContactList.CustomerContact.length === 1)){
                                addToCartInput.Order.CustomerContactID = customerModel.Customer.CustomerContactList.CustomerContact[0].CustomerContactID;
                                addToCartInput.Order.CustomerFirstName = customerModel.Customer.CustomerContactList.CustomerContact[0].FirstName;
                                addToCartInput.Order.CustomerLastName = customerModel.Customer.CustomerContactList.CustomerContact[0].LastName;
                                addToCartInput.Order.CustomerEMailID = customerModel.Customer.CustomerContactList.CustomerContact[0].EmailID;

                                if(!iscCore.isVoid(customerInfo.addressSelected)){
                                    addToCartInput.Order.CustomerZipCode = customerInfo.addressSelected.PersonInfo.ZipCode;
                                   }
                                }
                            }
						}
		            	addToCartInput.Order.OrderLines={};
						addToCartInput.Order.OrderLines.OrderLine = [{
								Item: {
									ItemID: this.model.itemDetails.ItemID,
									UnitOfMeasure: this.model.itemDetails.UnitOfMeasure,
									ProductClass: this.model.itemDetails.PrimaryInformation.DefaultProductClass
								},
								OrderLineTranQuantity:{
									OrderedQty : this.ui.defaultQty
								}
						}];
		        		if(this.ui.deliveryMethod != ''){
		        			if(this.ui.deliveryMethod === 'CARRY'){
		        				//TODO: change to carry after enhancement from foundation is obtained.
		        				addToCartInput.Order.OrderLines.OrderLine[0].DeliveryMethod = this.ui.deliveryMethod;
		        			}
		        			else if(this.ui.deliveryMethod === 'PICK'){
								if(this.ui.showUpdateCart === true && this.ui.variantItemSelected === false && (!iscCore.isVoid(pageInput.searchContext) && 
								pageInput.searchContext === 'changeVariation')){
									// change variation clicked,but variation is not changed.Hence restore orderline's shipnode.
									this.ui.selectedShipNode.shipNode = this.model.changeVariationInput.OrderLine.Shipnode.ShipNode;
								}
		        				if(this.ui.selectedShipNode.shipNode === ""){
		        					//open store search popup.
		        					if((!iscCore.isVoid(pageInput.searchContext) && 
		    								pageInput.searchContext === 'changeVariation')){
		        						this.uiOpenStoreSearch('changeVariation');
		        					}else{
		        					this.uiOpenStoreSearch('addToCart');
		        					}
                           			return -1;
		        				}
		        				else{
		        					addToCartInput.Order.OrderLines.OrderLine[0].ShipNode = this.ui.selectedShipNode.shipNode;
		        					addToCartInput.Order.OrderLines.OrderLine[0].DeliveryMethod = this.ui.deliveryMethod;
		        					addToCartInput.Order.OrderLines.OrderLine[0].ReqShipDate  = this.ui.availability.itemPickAvailableDate;
		        				}
		        			}
		        			else if(this.ui.deliveryMethod === 'SHP'){
		        				addToCartInput.Order.OrderLines.OrderLine[0].DeliveryMethod = this.ui.deliveryMethod;
		        				var isAvailabilityRealtimeData =this.model.getCompleteItemList.ItemList.Item[0].Availabilities.IsAvailabilityRealTimeData;
		        				//isAvailabilityRealtimeData = 'N';
		        				if(isAvailabilityRealtimeData === 'Y'){
		        					addToCartInput.Order.OrderLines.OrderLine[0].EarliestShipDate = this.ui.availability.itemShpAvailableDate;
			        				addToCartInput.Order.OrderLines.OrderLine[0].ReqShipDate = this.ui.availability.itemShpAvailableDate;
		        				}/*else{
		        					call getItemAvailabilityForStore Api to get the real time inventory picture

		        				}*/


		        			}
		        		}
						if(this.ui.showUpdateCart === true){							
							addToCartInput.Order.PendingChanges = {
								'RecordPendingChanges':'Y'
							};
							var noteText = '';
							var note = {};
							if(this.ui.variantItemSelected === true && (!iscCore.isVoid(pageInput.searchContext) && 
								pageInput.searchContext === 'changeVariation')){
								noteText = iscI18n.translate
		            					('addItems.MSG_VariationChanged',
		            					{itemId: pageInput.input.OrderLine.ItemDetails.ItemID});
								note = iscOrder.addNote(noteText,"YCD_CHANGE_VARIATION");
								addToCartInput.Order.OrderLines.OrderLine[1] = {
									'OrderLineKey': pageInput.input.OrderLine.OrderLineKey,
									'Action': 'CANCEL'
								};	
								addToCartInput.Order.Notes = [];
								addToCartInput.Order.Notes.push(note);							
							}
							else if(this.ui.showUpdateCart === true && !iscCore.isVoid(pageInput.input.OrderLine)){
								// variations not changed,but other attrs like delivery method,qty is changed.
								addToCartInput.Order.OrderLines.OrderLine[0].OrderLineKey = pageInput.input.OrderLine.OrderLineKey;
							}
							else{
								// add note text for new line.
								 addToCartInput.Order.Notes = [];
								 noteText = iscI18n.translate
	            					('addItems.MSG_NewLineNoteText',
	            					{itemId: pageInput.input});
							note = iscOrder.addNote(noteText,"YCD_MULTI_ADD_LINES_INFO");
								addToCartInput.Order.Notes.push(note);	
							}
						}
		            return addToCartInput;
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname setPriceOverrideInAddToCartInput
				  		 *@description Sets price override data while adding product to cart.
				  		 *@param {Object} addToCartInput - create/update order mashup input object.
				  		 */
		            setPriceOverrideInAddToCartInput: function(addToCartInput){
		            	addToCartInput.Order.OrderLines.OrderLine[0].LinePriceInfo = {
		            		ListPrice: this.model.itemDetails.ComputedPrice.ListPrice,
		            		UnitPrice: this.model.itemDetails.ComputedPrice.UnitPrice,
		            		IsPriceLocked: 'Y'
		            	};
	        			this.addPriceOverrideDefaultNote(addToCartInput);
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname addPriceOverrideDefaultNote
				  		 *@description Sets default note at ordeline, if price is overriden for the product.
				  		 *@param {Object} addToCartInput - create/update order mashup input object.
				  		 */
		            addPriceOverrideDefaultNote: function(addToCartInput){
		            	var noteText = iscI18n.translate
		            					('addItems.MSG_PriceOverrideReason',
		            					{overrideReason: this.ui.priceOverride.priceOverrideReason});
		            	addToCartInput.Order.OrderLines.OrderLine[0].Notes = [
		            		{
		            			Note:{
		            				NoteText: noteText,
		            				ReasonCode: 'YCD_NEW_ITEM_INFO'
		            			}
		            		}
		            	];
		            },
					updateCart: function(cartInput){
						var mashupToCall = 'changeOrderPendingChanges';
						if(!iscCore.isVoid(cartInput) && cartInput.Order.OrderLines.OrderLine[0].DeliveryMethod === 'SHP' && 
							(iscCore.isVoid(cartInput.Order.OrderLines.OrderLine[0].EarliestShipDate))){
							var input = this.getItemAvailabilityForStoreApiInput(this.ui.defaultQty);
		            			input.Promise.addToCartInput =cartInput ;
		            			input.Promise.mashupToCall = mashupToCall ;
				            	iscMashup.callMashup(this,"getRealTimeItemAvailabilityForStore",input,{}).then(function(data){
				            		var orderModel = data.MashupRefs.MashupRef[0].Output;
					            	iscWizard.setWizardModel("orderModel",orderModel);
					            	this.ui.focusScanField = false;
					            		iscWizard.gotoCustomPage('editOrderDetails',{},{removeCurrent: true});
				            	}.bind(this),angular.noop);
						}
						else{
							iscMashup.callMashup(this,mashupToCall,cartInput,{}).then(function(data){
								var orderModel = data.MashupRefs.MashupRef[0].Output;
				            	iscWizard.setWizardModel("orderModel",orderModel);
				            	this.model.orderDetails = orderModel;
				            	this.ui.focusScanField = false;
					            iscWizard.gotoCustomPage('editOrderDetails',{},{removeCurrent: true});
			            	}.bind(this),angular.noop);
						}
					},
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname saveItemToCart
				  		 *@description Calls createOrder if order is not created,otherwise calls modifyFulfillmentOptions to update
				  		 *order while adding the product to cart.
				  		 *@param {Object} addToCartInput - create/update order mashup input object.
				  		 */
		            saveItemToCart: function(addToCartInput){
		            	var mashupToCall = 'createOrder';
		            	if(addToCartInput && !iscCore.isVoid(addToCartInput.Order)){
		            		if(this.ui.priceOverride.isPriceOverriden){
			        			this.setPriceOverrideInAddToCartInput(addToCartInput);
		            			if(!iscCore.isVoid(addToCartInput.Order.OrderHeaderKey)){
		            				mashupToCall = "modifyFulfillmentOptionsWithOvp";
		            			}
		            			else{
		            				mashupToCall = "createOrderWithOvp";
		            			}
		            		}
		            		else{
		            			if(!iscCore.isVoid(addToCartInput.Order.OrderHeaderKey)){
		            				mashupToCall = "modifyFulfillmentOptions";
		            			}
		            			else{
		            				mashupToCall = "createOrder";
		            			}
		            		}
		            	}
		            	/* determine whether real time availability needs to be checked */
		            	if((mashupToCall ==='modifyFulfillmentOptions' || mashupToCall ==='createOrder') && (addToCartInput.Order.OrderLines.OrderLine[0].DeliveryMethod === 'SHP') &&
		            			(iscCore.isVoid(addToCartInput.Order.OrderLines.OrderLine[0].EarliestShipDate))){

		            		var input = this.getItemAvailabilityForStoreApiInput(this.ui.defaultQty);
		            			input.Promise.addToCartInput =addToCartInput ;
		            			input.Promise.mashupToCall = mashupToCall ;
				            	iscMashup.callMashup(this,"getRealTimeItemAvailabilityForStore",input,{}).then(function(data){
				            		var orderModel = data.MashupRefs.MashupRef[0].Output;
					            	iscWizard.setWizardModel("orderModel",orderModel);
					            	this.ui.orderTotalQty = orderModel.Order.OrderLines.TotalNumberOfRecords;
					            	this.model.orderDetails = orderModel;
					            	this.ui.focusScanField = false;
					            	this.resetOrderRelatedAttrs();
					            	if(!this.ui.showCheckOutButton){
					            		//iscWizard.gotoCustomPage('cartDetails',{},{removeCurrent: true});
					            		iscWizard.gotoPreviousPage();
					            	}else{
									var alertMessage = iscI18n.translate("additems.aria_cartAdditionSuccessMessage",{quantity:this.ui.orderTotalQty});
									iscModal.showA11YAlertMessage(alertMessage);
									}
				            	}.bind(this),angular.noop);

		            	}else{
		            		iscMashup.callMashup(this,mashupToCall,addToCartInput,{}).then(function(data){
								var orderModel = data.MashupRefs.MashupRef[0].Output;
				            	iscWizard.setWizardModel("orderModel",orderModel);
				            	this.ui.orderTotalQty = orderModel.Order.OrderLines.TotalNumberOfRecords;
				            	this.model.orderDetails = orderModel;
				            	this.ui.focusScanField = false;
				            	this.resetOrderRelatedAttrs();
				            	
				            	if(!this.ui.showCheckOutButton){
				            		//iscWizard.gotoCustomPage('cartDetails',{},{removeCurrent: true});
				            		iscWizard.gotoPreviousPage();
				            	}else{
								var alertMessage = iscI18n.translate("additems.aria_cartAdditionSuccessMessage",{quantity:this.ui.orderTotalQty});
								iscModal.showA11YAlertMessage(alertMessage);
				            	}
			            	}.bind(this),angular.noop);
		            	}

		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname resetOrderRelatedAttrs
				  		 *@description Sets the order related ui attributes to default value after the product is added to cart.
				  		 */
		            resetOrderRelatedAttrs: function(){
		            	this.ui.isScreenDirty = false;
		            	/*this.ui.priceOverride = {
		            		isPriceOverriden:false,
		            		priceOverrideReason:''
		            	};*/
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname getCompleteItemDetailsApiInput
				  		 *@description Returns the getCompleteItemDetails mashup input object.
				  		 *@param {String} itemId - Unique identifier of the product
				  		 *@param {Boolean} sendBarCode - True if barCode data is to be set in mashup input,false otherwise.
				  		 *
				  		 */
		            getCompleteItemDetailsApiInput: function(itemId,sendBarCode){
		            	var getCompleteItemDetailsInput = {
		            		Item:{
		            			ItemID: itemId,
								RequiredQty: this.ui.defaultQty
		            		}
		            	};
		            	var orderModel = iscWizard.getWizardModel("orderModel");
		            	if(!iscCore.isVoid(orderModel)){
		            		var customerId = iscCore.getValueFromJsonPath(orderModel,"Order.BillToID");
		            		if(!iscCore.isVoid(customerId)){
		            			getCompleteItemDetailsInput.Item.CustomerInformation = {
		            				CustomerID : customerId
		            			}
		            		}
		            	}
		            	if(sendBarCode){
		            		getCompleteItemDetailsInput.Item.BarCode = {};
		            		getCompleteItemDetailsInput.Item.BarCode.BarCodeData = itemId;
		            	}
		            	return getCompleteItemDetailsInput;
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname getCompleteItemDetails
				  		 *@description Invokes getCompleteItemList mashup and registers the success callback handler for
				  		 *the mashup.
				  		 *@return {String} itemId - Product unique identifier used to call mashup.
				  		 */
		            getCompleteItemDetails: function(itemId){
		            	if(iscCore.isVoid(itemId)){
		            		if(!this.ui.openBlankPage)
		            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
		            	}
		            	else{
		            		var getCompleteItemDetailsApiInput = this.getCompleteItemDetailsApiInput(itemId,true);
		            		// setting default page size to be used to call searchproduct if
		            		// getCompleteItemDetails does not return any result.
		            		getCompleteItemDetailsApiInput.Item.DefaultPageSize = iscAppContext.getFromContext("defaultPageSize");
		            		iscMashup.callMashup(this,"getCompleteItemList",getCompleteItemDetailsApiInput,{}).then(this.handleGetCompleteItemDetails.bind(this),angular.noop);
		            	}

		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname callGetItemAvailabilityForStoreApi
				  		 *@description Invokes getItemAvailabilityForStore mashup to get product availability for quantity
				  		 *set in the view.
				  		 *@return {String} qty - Product quantity set in the view.
				  		 */
		            callGetItemAvailabilityForStoreApi: function(qty){
		            	var input = this.getItemAvailabilityForStoreApiInput(qty);
		            	iscMashup.callMashup(this,"getItemAvailabilityForStore",input,{}).then(function(data){
		            			var apiOutput = iscMashup.getMashupOutput(data,'getItemAvailabilityForStore');
		            			var promiseLine = apiOutput.Promise.PromiseLines.PromiseLine[0];
		            			if(!iscCore.isVoid(promiseLine.Availabilities)){
		            				this.handleItemAvailability(promiseLine.Availabilities);
		            			}
		            	}.bind(this),angular.noop);
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname getItemAvailabilityForStoreApiInput
				  		 *@description Returns the input object for getItemAvailabilityForStore mashup using the quantity
				  		 *displayed in the view.
				  		 *@param {String} qty - product quantity displayed in view.
				  		 *@return {Object} input - mashup input object.
				  		 */
		            getItemAvailabilityForStoreApiInput: function(qty){
		            	var currentStoreAddress = iscAppContext.getFromContext('storeAddress').ShipNodePersonInfo;
		            	var input = {
                        Promise:{
                           ShipToAddress: currentStoreAddress,
                           PromiseLines:[{
                              PromiseLine:{
                                 ItemID: this.model.itemDetails.ItemID,
                                 UnitOfMeasure: this.model.itemDetails.UnitOfMeasure,
                                 ProductClass: this.model.itemDetails.PrimaryInformation.DefaultProductClass,
                                 RequiredQty: qty
                              }
                           }]
                        }
                    };

		            	 var orderDetails = iscWizard.getWizardModel("orderModel");
		            	 if(!iscCore.isVoid(orderDetails) && !iscCore.isVoid(orderDetails.Order.OrderHeaderKey)){
		            		 input.Promise.OrderHeaderKey = orderDetails.Order.OrderHeaderKey;
		            	 }

		            	return input;
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname handleWizardBack
				  		 *@description Onclick handler for the wizard back button.Displays screen dirty check popup if
				  		 *screen is dirty,opens previous page of wizard otherwise.
				  		 */
						handleWizardBack:function(){
							var isFirstPage = iscWizard.isFirstPage();
							if(!iscCore.isVoid(this.model.customerDetails) && !iscCore.isVoid(this.model.customerDetails.Customer.CustomerKey) ){
								isFirstPage =false;	
							}
							if(this.ui.isScreenDirty){
								if(isFirstPage){
									this.uiCancel();
								}
								else{
									iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
			            			if(iscCore.isBooleanTrue(action)){
			            				iscWizard.gotoPreviousPage(true);
			            			}
			            		});
								}
								return true;
							}
							else if(isFirstPage){
								this.uiCancel();
								return true;
							}
							else{
								return false;
							}
						},
						/**
				  		 *@iscdoc method
						 *@viewname store.views.order.add-cart.add-items
				  		 *@methodname handleWizardExit
				  		 *@description Onclick handler for the wizard cancel button.Displays screen dirty check popup if
				  		 *screen is dirty,closes the wizard otherwise.
				  		 */
						handleWizardExit:function(){
							var confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
							if(this.ui.orderTotalQty < 1){
									confirmationMsg = iscI18n.translate('addItems.WarningMessage_Cancel');
							}
							iscModal.showConfirmationMessage(confirmationMsg).then(
								function(callBackAction){
										//
										if(callBackAction === 'YES'){
												iscWizard.exitWizard();
										}
								},
								function(callBackAction){
										//      Do Nothing

								});
							return true;
						},
						
						uiShareProductDetails:function(){
				            var that = this;
                            var customerId = "";
                            var orderCustomerId = iscCore.getValueFromJsonPath(this.model.orderDetails,"Order.BillToID");
                            
                            if(!iscCore.isVoid(orderCustomerId)){
                                customerId = orderCustomerId;
                            }
                            
                            else if(!iscCore.isVoid(iscWizard.getWizardModel('customerModel'))){
                                var customerInfo = iscWizard.getWizardModel('customerModel');
                                customerId = customerInfo.Customer.CustomerID;
                            }
							var resolveData = {
			                    modalInput : function(){
			                        return {
			                            ItemDetails:{
			                                ItemID:that.model.itemDetails.ItemID,
			                                UnitOfMeasure:that.model.itemDetails.UnitOfMeasure,
                                            ItemKey : that.model.itemDetails.ItemKey
			                            },
			                            CustomerDetails:{
			                                CustomerID:customerId 
			                            }
			                        }
			                    }
			                };
                            
                            
                            
                            //iscModal.openModal('store.views.customer.customer-profile.product-details',resolveData,{}).then(angular.noop,angular.noop);
			            	iscModal.openModal('store.views.common.product.product-details-share',resolveData,{}).then(angular.noop,angular.noop);
						}
					});
		}
	]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.order.appeasement.customer-appeasement
 *@package store.views.order.appeasement
 *@class customer-appeasement
 *@description Displays the customer appeasement screen.
 *
 */

angular.module('store').controller('store.views.order.appeasement.customer-appeasement',
		  ['$scope','$rootScope','$filter','iscScreen','iscMashup','iscResourcePermission','iscState','iscStateParams','iscPrint','iscModal','iscOrder','iscPayment','iscPaymentinput','$timeout','iscI18n','iscAppContext',
			function($scope,$rootScope,$filter,iscScreen,iscMashup,iscResourcePermission,iscState,iscStateParams,iscPrint,iscModal,iscOrder,iscPayment,iscPaymentinput,$timeout,iscI18n,iscAppContext) {				
				iscScreen.initializeScreen($scope,{
		
					model:{
							
							/**
				           *@iscdoc model
				  		   *@viewname store.views.order.appeasement.customer-appeasement
				           *@name orderAppeaseReasons
				           *@description This model contains the getCommonCodeList api output for codetype TODO.
				           */
				    	  "orderAppeaseReasons" : {} ,
							/**
				           *@iscdoc model
				  		   *@viewname store.views.order.appeasement.customer-appeasement
				           *@name productAppeaseReasons
				           *@description This model contains the getCommonCodeList api output for codetype TODO.
				           */
				    	  "productAppeaseReasons" : {} ,
				    	  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.appeasement.customer-appeasement
				           *@name orderAppeaseOptions
				           *@description This model contains the output of YCDGetAppeasementOffersForStoreUE call for an order.
				           */
				    	  "orderAppeaseOptions" : {} ,
							/**
				           *@iscdoc model
				  		   *@viewname store.views.order.appeasement.customer-appeasement
				           *@name productAppeaseOptions
				           *@description This model contains the output of YCDGetAppeasementOffersForStoreUE call for products.
				           */
				    	  "productAppeaseOptions" : {} ,
							/**
				           *@iscdoc model
				  		   *@viewname store.views.order.appeasement.customer-appeasement
				           *@name orderLineList
				           *@description This model contains the getCompleteOrderLineList api output.
				           */
				    	  "orderLineList" : {} ,
				    	  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.appeasement.customer-appeasement
				           *@name orderModel
				           *@description This is order capture wizard model containing the order information.
				           */
				    	  "orderModel" : {},
				    	  /**
							*@iscdoc model
							*@viewname store.views.order.appeasement.customer-appeasement
							*@name noteList
							*@description Holds the output data of getNoteList api. This is used to list the notes in the UI TODO HANDLE AFTER CONFIRMING CHILD SCREEN USE
							*/
				    	  "noteList":{},
				    	  
				    	    /**
							*@iscdoc model
							*@viewname store.views.order.appeasement.customer-appeasement
							*@name productAppeaseOptionsUnchanged
							*@description Holds a copy of the appeasement options loaded in product tab.
							*/
				    	  "productAppeaseOptionsUnchanged":{},
				    	  
				    	    /**
							*@iscdoc model
							*@viewname store.views.order.appeasement.customer-appeasement
							*@name orderAppeaseOptionsUnchanged
							*@description Holds a copy of the appeasement options loaded in order tab.
							*/
				    	  "orderAppeaseOptionsUnchanged":{}
				    	  
				    	 
				      },
				     
				  		mashupRefs : [
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.appeasement.customer-appeasement
									*@mashupid customerAppeasement_getReasonCodes
									*@mashuprefid customerAppeasement_getReasonCodes
									*@modelname orderAppeaseReasons
									*@description This mashup is used to get the list of Appeasement Reasons for Order.
									*/
				  				 mashupRefId: 'customerAppeasement_getReasonCodes',
						         mashupId: 'customerAppeasement_getReasonCodes',
						         modelName: 'orderAppeaseReasons'
				  			},
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.appeasement.customer-appeasement
									*@mashupid customerAppeasement_getProductReasonCodes
									*@mashuprefid customerAppeasement_getProductReasonCodes
									*@modelname productReasonCodes
									*@description This mashup is used to get the list of Appeasement Reasons for Products.
									*/
				  				 mashupRefId: 'customerAppeasement_getProductReasonCodes',
						         mashupId: 'customerAppeasement_getProductReasonCodes',
						         modelName: 'productAppeaseReasons'
				  			},
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.appeasement.customer-appeasement
									*@mashupid store.views.order.appeasement.customer-appeasement.getAppeasementOffersForStoreUE
									*@mashuprefid store.views.order.appeasement.customer-appeasement.getAppeasementOffersForStoreUE
									*@modelname getAppeasementOffersForStore
									*@description This mashup is used to get the appeasement reasons.
									*/
				  				 mashupRefId: 'getAppeasementOffersForStoreUE',
						         mashupId: 'store.views.order.appeasement.customer-appeasement.getAppeasementOffersForStoreUE',
						         modelName: 'orderAppeaseOptions'
				  			},
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.appeasement.customer-appeasement
									*@mashupid store.views.order.appeasement.customer-appeasement.provideAppeasementInStoreUE
									*@mashuprefid provideAppeasementInStoreUE
									*@modelname provideAppeasementInStoreUE
									*@description This mashup is used to call provideAppeasementInStore UE.
									*/
				  				 mashupRefId: 'provideAppeasementInStoreUE',
						         mashupId: 'store.views.order.appeasement.customer-appeasement.provideAppeasementInStoreUE',
						         modelName: 'provideAppeasementInStoreUE'
				  			},
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.appeasement.customer-appeasement
									*@mashupid store.views.order.appeasement.customer-appeasement.sendFutureOrderCustomerAppeasementUE
									*@mashuprefid sendFutureOrderCustomerAppeasementUE
									*@modelname sendFutureOrderCustomerAppeasementUE
									*@description This mashup is used to call sendFutureOrderCustomerAppeasement UE.
									*/
				  				 mashupRefId: 'sendFutureOrderCustomerAppeasementUE',
						         mashupId: 'store.views.order.appeasement.customer-appeasement.sendFutureOrderCustomerAppeasementUE',
						         modelName: 'sendFutureOrderCustomerAppeasementUE'
				  			},
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.appeasement.customer-appeasement
									*@mashupid store.views.order.appeasement.customer-appeasement.provideAppeasementAsCouponUE
									*@mashuprefid provideAppeasementAsCouponUE
									*@modelname provideAppeasementAsCouponUE
									*@description This mashup is used to call issueCouponAsAppeasement UE.
									*/
				  				 mashupRefId: 'provideAppeasementAsCouponUE',
						         mashupId: 'store.views.order.appeasement.customer-appeasement.provideAppeasementAsCouponUE',
						         modelName: 'provideAppeasementAsCouponUE'
				  			},
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.appeasement.customer-appeasement
									*@mashupid store.views.order.appeasement.customer-appeasement.provideAppeasementAsGiftCardUE
									*@mashuprefid provideAppeasementAsGiftCardUE
									*@modelname provideAppeasementAsGiftCardUE
									*@description This mashup is used to call provideAppeasementAsGiftCard UE.
									*/
				  				 mashupRefId: 'provideAppeasementAsGiftCardUE',
						         mashupId: 'store.views.order.appeasement.customer-appeasement.provideAppeasementAsGiftCardUE',
						         modelName: 'provideAppeasementAsGiftCardUE'
				  			},
			  				{
					  		  /**
			  				   *@iscdoc mashup
			  		   			*@viewname store.views.order.appeasement.customer-appeasement
			  		   			*@mashupid store.views.order.appeasement.customer-appeasement.getNoteList
					   			*@mashuprefid getNoteList
					   			*@modelname noteList
			  		   			*@description Gets notes with ReasonCode of YCD_CUSTOMER_APPEASE TODO HANDLE AFTER CONFIRMING CHILD SCREEN USE
			  		   			*/
			  		  		
								mashupRefId: 'getNoteList',
								mashupId: 'store.views.order.appeasement.customer-appeasement.getNoteList',
								modelName : 'noteList'								
							},

							{
								/**
				  				   *@iscdoc mashup
				  		   			*@viewname store.views.order.appeasement.customer-appeasement
				  		   			*@mashupid store.views.order.appeasement.customer-appeasement.changeOrder
						   			*@mashuprefid changeOrder
				  		   			*@description Adds a note to a order for Customer-Appeasement TODO check if needed
				  		   			*/
								mashupRefId: 'changeOrder',
								mashupId: 'store.views.order.appeasement.customer-appeasement.changeOrder'
							},
							
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.appeasement.customer-appeasement
									*@mashupid store.views.order.appeasement.customer-appeasement.getCompleteOrderLineList
									*@mashuprefid getCompleteOrderLineList
									*@modelname orderLineList
									*@description This mashup is used to get the list of OrderLines.
									*/
				  				 mashupRefId: 'getCompleteOrderLineList',
						         mashupId: 'store.views.order.appeasement.customer-appeasement.getCompleteOrderLineList',
						         modelName: "orderLineList"
				  			}
				  		],
				  		
				  		
			            ui:{
				    	  	/**
							 *@iscdoc uiattr
			    			 *@viewname store.views.order.appeasement.customer-appeasement
			    			 *@property {String} mainDisplaySelection - Determines whether Order or Product tab is shown. Will have a value of ORDER or PRODUCT
			    			 */
			            	mainDisplaySelection: "ORDER",
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.appeasement.customer-appeasement
			    			 *@property {Number} oLineShownCount - pageSize of the Order line list for continuous scrolling.
			    			 */
			            	oLineShownCount: 4,
			    			/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.appeasement.customer-appeasement
			    			 *@property {String} Currency - Locale currency.
			    			 */	
			    			Currency : "",
			    			/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.appeasement.customer-appeasement
			    			 *@property {String} UnitPrice - unitprice / new price.
			    			 */
			    			UnitPrice: "",
			            	showBackLink : "Y",
							/**
							 *@iscdoc uiattr
			    			 *@viewname store.views.order.appeasement.customer-appeasement
			    			 *@property {Number} activeTabIndex - index of the tab that is active in mobile
			    			 */
							activeTabIndex: 0,
							selectedProductOrderLines:[],
							selectedOrderReason:"",
							selectedOrderReasonDesc:"",
							selectedProductReason:"",
							selectedProductReasonDesc:"",
							/**
							 *@iscdoc uiattr
							 *@viewname store.views.order.appeasement.customer-appeasement
							 *@property {Object} selectedStore - Selected carrier object on popup window.
							 */
							selectedOrderOption : "",
							/**
							 *@iscdoc uiattr
							 *@viewname store.views.order.appeasement.customer-appeasement
							 *@property {Object} selectedCarrierDesc - Description of the selected carrier on popup window.
							 */
							selectedOrderOptionDesc : "",
							/**
							 *@iscdoc uiattr
							 *@viewname store.views.order.appeasement.customer-appeasement
							 *@property {Object} selectedStore - Selected carrier object on popup window.
							 */
							selectedProductOption : "",
							/**
							 *@iscdoc uiattr
							 *@viewname store.views.order.appeasement.customer-appeasement
							 *@property {Object} selectedCarrierDesc - Description of the selected carrier on popup window.
							 */
							selectedProductOptionDesc : "",
							offerAmount : 0.0
			            	
			            },
			            
		                /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@methodname uiClose.
						 *@description Closes customer appeasement screen. 
						 */
		                
			            uiClose : function(){
			              
			              	var confirmationMsg = iscI18n.translate('editorderdetails.MSG_CloseWithNoPendingChanges');
			            	
			            	iscModal.showConfirmationMessage(confirmationMsg).then(
								function(callBackAction){
			            			//
									if(callBackAction === 'YES'){
										iscState.goToPreviousState();
									}
			       				},
			  					function(callBackAction){
			            			//		Do Nothing

			       				});
			       				
			       				
			              
			                
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@methodname uiShowHome.
						 *@description This method opens the home screen. 
						 */
			            
			    		uiShowHome : function(){
			    			iscState.goToState('/home',{},{});
			    		},
			    		
			    		 /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@methodname uiOLineScrollActionValidator
						 *@description Validates if next page action should be performed by checking whther api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
						 */
			    		 uiOLineScrollActionValidator : function(){
			             	return true;
			             },
					   
						/**
						 *@iscdoc viewinit
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@method initialize
						 *@description Initializes the customer appeasement screen with api/ue calls to populate the screen.
						 */
				  	   
				  		initialize : function()
						{
				  			this.model.orderModel = iscStateParams.params.orderInput;
							this.ui.Currency = this.model.orderModel.Order.PriceInfo.Currency;
				  			
				  			if(iscStateParams.params.showBackLink) {
				  				this.ui.showBackLink = "Y";
				  			}
				  			
				  			var getOffersMashupInput = {};
					 		getOffersMashupInput.InvokeUE = {"DocumentType" : this.model.orderModel.Order.DocumentType};
					 		getOffersMashupInput.InvokeUE.XMLData = {};
					 		getOffersMashupInput.InvokeUE.XMLData.AppeasementOffers = {"AppeasementLevel":"ORDER", "Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey, "OrderNo" : this.model.orderModel.Order.OrderNo, "DocumentType" : this.model.orderModel.Order.DocumentType}};
							
							
							var notesListInput={};
							notesListInput.Note={};
							notesListInput.Note.TableKey=this.model.orderModel.Order.OrderHeaderKey;
							
							
							var mashupArray = [];
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'customerAppeasement_getReasonCodes',{}));
			        	    mashupArray.push(iscMashup.getMashupRefObj(this,'customerAppeasement_getProductReasonCodes',{}));
			        	    mashupArray.push(iscMashup.getMashupRefObj(this,'getAppeasementOffersForStoreUE', getOffersMashupInput));
			        	    mashupArray.push(iscMashup.getMashupRefObj(this,'getNoteList',notesListInput));
			        	    
			        	    iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitAPICalls.bind(this),angular.noop);
			        	    
						},
						/**
						 *@iscdoc method
						 *@viewname store.views.order.appeasement.customer-appeasement
				 		 *@methodname handleInitAPICalls
						 *@description Callback handler for init APIs. Initialize the reasonList model and default the reason code selection. TODO update
						 *@param {Object} response - mashup response JSON object
						 */
						handleInitAPICalls:function(response) {
							
							this.handleGetAppeasementOffersForStoreUE(response);
							
							//handle customerAppeasement_getReasonCodes & customerAppeasement_getProductReasonCodes
							if(this.model.orderAppeaseReasons && this.model.productAppeaseReasons) {
								if(this.model.orderAppeaseReasons.CommonCodeList.CommonCode){
									this.ui.selectedOrderReason = this.model.orderAppeaseReasons.CommonCodeList.CommonCode[0];
									this.ui.selectedOrderReasonDesc = this.model.orderAppeaseReasons.CommonCodeList.CommonCode[0].CodeShortDescription;
								
								}
								
								if(this.model.productAppeaseReasons.CommonCodeList.CommonCode){
									this.ui.selectedProductReason = this.model.productAppeaseReasons.CommonCodeList.CommonCode[0];
									this.ui.selectedProductReasonDesc = this.model.productAppeaseReasons.CommonCodeList.CommonCode[0].CodeShortDescription;
								}
								
							}
							
							//this.model.orderAppeaseReasons = iscMashup.getMashupOutput(response,"customerAppeasement_getReasonCodes");
							//this.model.productAppeaseReasons = iscMashup.getMashupOutput(response,"customerAppeasement_getProductReasonCodes");
							//this.model.noteList = iscMashup.getMashupOutput(response,"getNoteList");
							
						},
						/**
						 *@iscdoc method
						 *@viewname store.views.order.appeasement.customer-appeasement
				 		 *@methodname handleGetAppeasementOffersForStoreUE
						 *@description Handler method for handleGetAppeasementOffersForStoreUE mashup.
						 */
						handleGetAppeasementOffersForStoreUE : function(response){
							var currency = this.model.orderModel.Order.PriceInfo.Currency;
							
							if(iscCore.isVoid(iscMashup.getMashupOutput(response,"getAppeasementOffersForStoreUE").InvokeUE.XMLData)){
								console.log("ERROR: getAppeasementOffersForStoreUE.InvokeUE.XMLData is empty");
								return;
							}
							
							var offersOutput = iscMashup.getMashupOutput(response,"getAppeasementOffersForStoreUE").InvokeUE.XMLData;
							
							var copyOfOffersOutput = angular.copy(offersOutput);
							this.uiTrimAppeasementOffersBasedOnPermission(copyOfOffersOutput);
							
							var appOffersList = copyOfOffersOutput.AppeasementOffers.AppeasementOffer;
							
							
							
							
							var offerValue = "";
							var preferredOptionPos=0;
							for(var y=0;y<appOffersList.length;y++){
								offerValue = appOffersList[y].OfferType;
								
								if(appOffersList[y].Preferred === "Y"){
									preferredOptionPos = y;
								}
								
								var percentValue;
								if(offerValue.includes("COUPON")){
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Coupon");
								}else if(offerValue.includes("GIFT_CARD")){
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Gift_Card");
								}else if(offerValue.includes("PERCENT_ORDER")){
									percentValue = appOffersList[y].DiscountPercent;
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Percent_Current",{percent:percentValue});
									appOffersList[y].FormattedOfferAmount = $filter('iscCurrency')(angular.copy(appOffersList[y].OfferAmount),currency);
									appOffersList[y].isPercent=true;
								}else if(offerValue.includes("PERCENT_FUTURE_ORDER")){
									percentValue = appOffersList[y].DiscountPercent;
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Percent_Future",{percent:percentValue});
									appOffersList[y].FormattedOfferAmount = $filter('iscCurrency')(angular.copy(appOffersList[y].OfferAmount),currency);
									appOffersList[y].isPercent=true;
								}else if(offerValue.includes("FLAT_AMOUNT_ORDER")){
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Amount_Current");
								}else if(offerValue.includes("FLAT_AMOUNT_FUTURE_ORDER")){
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Amount_Future");
								}
								
								//Add additional attributes to be checked during appeasement options selection in UI/html and saving screen
								if(offerValue.includes("PERCENT")){
									appOffersList[y].isPercent=true;
								}
								if(offerValue.includes("FUTURE")){
									appOffersList[y].isFuture=true;
								}
								if(offerValue.includes("FLAT")){
									appOffersList[y].isAmount=true;
								}
								
							}
							
							//keeping a backup of this model as the new model would be updated on product selections
							//this.model.copyOfAppeasementOffers=angular.copy(offersOutput);
							
							this.model.orderAppeaseOptions = angular.copy(copyOfOffersOutput);
							this.model.productAppeaseOptions = angular.copy(copyOfOffersOutput);
							this.model.orderAppeaseOptionsUnchanged = angular.copy(copyOfOffersOutput);
							this.ui.selectedOrderOption = this.model.orderAppeaseOptions.AppeasementOffers.AppeasementOffer[preferredOptionPos];
							this.ui.selectedOrderOptionDesc = this.model.orderAppeaseOptions.AppeasementOffers.AppeasementOffer[preferredOptionPos].OfferTypeDesc;
							
							this.ui.selectedProductOption = this.model.productAppeaseOptions.AppeasementOffers.AppeasementOffer[preferredOptionPos];
							this.ui.selectedProductOptionDesc = this.model.productAppeaseOptions.AppeasementOffers.AppeasementOffer[preferredOptionPos].OfferTypeDesc;
							
						},
						
						/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@methodname uiPostComment
						 *@description Handles the scenario when 'Add' button is clicked on the modal.
						 */
						uiPostNote : function(noteAPIInput){
							//comments.controller.js for reference
							var changeOrderInput = {};
							changeOrderInput.Order = {};
							changeOrderInput.Order.OrderHeaderKey = this.model.orderModel.Order.OrderHeaderKey;
							
							var appeaseReason="";
							if(this.ui.mainDisplaySelection === "ORDER"){
								appeaseReason = this.ui.selectedOrderReason.CodeValue;
							}else if(this.ui.mainDisplaySelection === "PRODUCT"){
								appeaseReason = this.ui.selectedProductReason.CodeValue;
								
							}
								
								
							
							changeOrderInput.Order.ModificationReasonCode=appeaseReason;
							changeOrderInput.Order.Notes = noteAPIInput;
							var mashupArray = [];
							mashupArray.push(iscMashup.getMashupRefObj(this,'changeOrder',changeOrderInput));
							mashupArray.push(iscMashup.getMashupRefObj(this,'getNoteList', {"Note" : { "TableKey" : this.model.orderModel.Order.OrderHeaderKey}}));
							iscMashup.callMashups(this,mashupArray,{}).then(this.handlechangeOrder.bind(this),this.changeOrderAPIErrorCallBack.bind(this));
						},
						/**
						 *@iscdoc method
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@methodname handlechangeOrder
						 *@description call Back handler of changeOrder API call.
						 */
						handlechangeOrder : function(data){
							$scope.$broadcast('clearNoteFields');
						},
						/**
						 *@iscdoc method
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@methodname changeOrderAPIErrorCallBack
						 *@description error call Back handler of changeOrder API call.
						 */
						
						changeOrderAPIErrorCallBack:function(response) {
							var errorMsg = response.Errors.Error[0].ErrorDescription;
				  			var errorCode = response.Errors.Error[0].ErrorCode;
				  			if(iscI18n.hasKey("apierror."+errorCode)){
				  				errorMsg = iscI18n.translate("apierror."+errorCode);
				  				iscModal.showErrorMessage(errorMsg,null,null);				
				  			}
				  			else{
				  				iscModal.showErrorMessage(errorMsg,null,null);
				  			}
							//$uibModalInstance.dismiss(response);
						},
						
						/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@method uiDisplayOrder
						 *@description Store the current appeasement level selection .
						 */
						uiDisplayOrder:function(){
							this.ui.mainDisplaySelection = "ORDER";
							if(!iscCore.isVoid(this.model.orderAppeaseOptionsUnchanged)){
								this.model.orderAppeaseOptions = angular.copy(this.model.orderAppeaseOptionsUnchanged);
							}	
						},
						/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@method uiDisplayProduct
						 *@description Store the current appeasement level selection .
						 */
						uiDisplayProduct:function(){
							this.ui.mainDisplaySelection = "PRODUCT";
							
							var getOffersMashupInput = {};
					 		getOffersMashupInput.InvokeUE = {"DocumentType" : this.model.orderModel.Order.DocumentType};
					 		getOffersMashupInput.InvokeUE.XMLData = {};
					 		getOffersMashupInput.InvokeUE.XMLData.AppeasementOffers = {"AppeasementLevel":"PRODUCT", "Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey, "OrderNo" : this.model.orderModel.Order.OrderNo, "DocumentType" : this.model.orderModel.Order.DocumentType}};
							
							var orderLineObj={};
							orderLineObj.OrderLine={};
							orderLineObj.OrderLine.OrderHeaderKey=this.model.orderModel.Order.OrderHeaderKey;
							
							var mashupArray = [];
			        	    mashupArray.push(iscMashup.getMashupRefObj(this,'getAppeasementOffersForStoreUE', getOffersMashupInput));
			        	    mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteOrderLineList',orderLineObj));													
							 
							//Check if the tab has already been selected previously
							if(iscCore.isVoid(this.model.productAppeaseOptionsUnchanged)){
								iscMashup.callMashups(this,mashupArray,{}).then(this.handleApiCallsForProductsTab.bind(this),angular.noop);
							}else {
								this.model.productAppeaseOptions=angular.copy(this.model.productAppeaseOptionsUnchanged);
							
							}
						},
						
						
						
						/**
					 	*@description Callback handler for init APIs of product tab. This method initializes the model containing the appeasement options and sets the default selection.
						*@param {Object} response - mashup response JSON object 
						*/
						 
						handleApiCallsForProductsTab : function(response){
							var offersOutput = iscMashup.getMashupOutput(response,"getAppeasementOffersForStoreUE").InvokeUE.XMLData;
							var currency = this.model.orderModel.Order.PriceInfo.Currency;
							var copyOffersOutput = angular.copy(offersOutput);
							var appOffersList = copyOffersOutput.AppeasementOffers.AppeasementOffer;
							
							this.uiTrimAppeasementOffersBasedOnPermission(copyOffersOutput);
							var offerValue = "";
							var preferredOptionPos=0;
							for(var y=0;y<appOffersList.length;y++){
								offerValue = appOffersList[y].OfferType;
								
								if(appOffersList[y].Preferred === "Y"){
									preferredOptionPos = y;
								}
								
								var percentValue;
								if(offerValue.includes("COUPON")){
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Coupon");
								}else if(offerValue.includes("GIFT_CARD")){
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Gift_Card");
								}else if(offerValue.includes("PERCENT_ORDER")){
									percentValue = appOffersList[y].DiscountPercent;
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Percent_Product_Current",{percent:percentValue});
									appOffersList[y].isPercent=true;
								}else if(offerValue.includes("PERCENT_FUTURE_ORDER")){
									percentValue = appOffersList[y].DiscountPercent;
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Percent_Future",{percent:percentValue});
									appOffersList[y].FormattedOfferAmount = $filter('iscCurrency')(angular.copy(appOffersList[y].OfferAmount),currency);
									appOffersList[y].isPercent=true;
								}else if(offerValue.includes("FLAT_AMOUNT_ORDER")){
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Amount_Current_Product");
								}else if(offerValue.includes("FLAT_AMOUNT_FUTURE_ORDER")){
									appOffersList[y].OfferTypeDesc=iscI18n.translate("customerappeasement.LABEL_Amount_Future");
								}
								
								//Add additional attributes to be checked during appeasement options selection in UI/html and saving screen
								if(offerValue.includes("PERCENT")){
									appOffersList[y].isPercent=true;
								}
								if(offerValue.includes("FUTURE")){
									appOffersList[y].isFuture=true;
								}
								if(offerValue.includes("FLAT")){
									appOffersList[y].isAmount=true;
								}
								
							}
							
							this.model.productAppeaseOptionsUnchanged = angular.copy(copyOffersOutput);
							this.model.productAppeaseOptions = angular.copy(copyOffersOutput);
							
							this.ui.selectedProductOption = this.model.productAppeaseOptions.AppeasementOffers.AppeasementOffer[preferredOptionPos];
							this.ui.selectedProductOptionDesc = this.model.productAppeaseOptions.AppeasementOffers.AppeasementOffer[preferredOptionPos].OfferTypeDesc;
						
						},
						/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
				 		 *@methodname uiSubmit
						 *@description Handle the save/submit button click of the page. Determine which UE needs to be called.
						 */
						uiSubmit:function(){
							
							var appeaseOption;
							var appeaseReason;
							var offerType="";
							if(this.ui.mainDisplaySelection === "ORDER"){
								appeaseOption = this.ui.selectedOrderOption;
								appeaseReason = this.ui.selectedOrderReason;
							}else if(this.ui.mainDisplaySelection === "PRODUCT"){
								if(this.ui.selectedProductOrderLines.length === 0){
									  iscModal.showErrorMessage("customerappeasement.WarningMessage_SelectOrderLines",null,null);
									  return;
								
								}
								appeaseOption = this.ui.selectedProductOption;
								appeaseReason = this.ui.selectedProductReason;
							}
							offerType=appeaseOption.OfferType;
							
				  			var mashupInput = {};
					 		mashupInput.InvokeUE = {"DocumentType" : this.model.orderModel.Order.DocumentType};
					 		mashupInput.InvokeUE.XMLData = {};
					 		
							
							if(offerType.includes("COUPON")){
								mashupInput.InvokeUE.XMLData.AppeasementOffers = {"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey, "OrderNo" : this.model.orderModel.Order.OrderNo, "DocumentType" : this.model.orderModel.Order.DocumentType}};
								iscMashup.callMashup(this,"provideAppeasementAsCouponUE",mashupInput,{}).then(this.handleSaveAPICalls.bind(this),angular.noop);
							}
							else if(offerType.includes("GIFT_CARD")){
								mashupInput.InvokeUE.XMLData.AppeasementOffers = {"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey, "OrderNo" : this.model.orderModel.Order.OrderNo, "DocumentType" : this.model.orderModel.Order.DocumentType}};
								iscMashup.callMashup(this,"provideAppeasementAsGiftCardUE",mashupInput,{}).then(this.handleSaveAPICalls.bind(this),angular.noop);
							}
							else if(offerType.includes("FUTURE")){
								this.callSendFutureUE(appeaseReason, appeaseOption, mashupInput);
							}
							else{
								mashupInput.InvokeUE.XMLData.AppeasementOffers = {"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey, "OrderNo" : this.model.orderModel.Order.OrderNo, "DocumentType" : this.model.orderModel.Order.DocumentType}};
								this.callProvideAppeasementUE(appeaseReason, appeaseOption, mashupInput);
							}							
						},
						/**
						 *@iscdoc method
						 *@viewname store.views.order.appeasement.customer-appeasement
				 		 *@methodname callSendFutureUE
						 *@description Create input and call sendFutureOrderCustomerAppeasementUE mashup.
						 */
						callSendFutureUE : function(appeaseReason, appeaseOption, mashupInput){
							mashupInput.InvokeUE.XMLData = {"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey, "OrderNo" : this.model.orderModel.Order.OrderNo, "DocumentType" : this.model.orderModel.Order.DocumentType}};
							if(!iscCore.isVoid(this.model.orderModel.Order.PersonInfoBillTo)){
								mashupInput.InvokeUE.XMLData.Order.PersonInfoBillTo={};
								mashupInput.InvokeUE.XMLData.Order.PersonInfoBillTo=this.model.orderModel.Order.PersonInfoBillTo;
							}
							
							if(this.ui.mainDisplaySelection === "ORDER"){
								mashupInput.InvokeUE.XMLData.Order.AppeasementOffer={"OfferType":appeaseOption.OfferType, "OfferAmount":appeaseOption.OfferAmount,"DiscountPercent":appeaseOption.DiscountPercent,"Preferred":appeaseOption.Preferred};
							}
							else{
								mashupInput.InvokeUE.XMLData.Order.AppeasementOffer={"OfferType":appeaseOption.OfferType, "OfferAmount":appeaseOption.OfferAmount,"DiscountPercent":appeaseOption.DiscountPercent,"Preferred":appeaseOption.Preferred};
							}
							
							iscMashup.callMashup(this,"sendFutureOrderCustomerAppeasementUE",mashupInput,{}).then(this.handleSaveAPICalls.bind(this),angular.noop);
						},
						/**
						 *@iscdoc method
						 *@viewname store.views.order.appeasement.customer-appeasement
				 		 *@methodname callProvideAppeasementUE
						 *@description Create input and call provideAppeasementInStoreUE mashup.
						 */
						callProvideAppeasementUE : function(appeaseReason, appeaseOption, mashupInput){
							//mashupInput.InvokeUE.XMLData = {"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey, "OrderNo" : this.model.orderModel.Order.OrderNo, "DocumentType" : this.model.orderModel.Order.DocumentType}};
							
							if(!iscCore.isVoid(this.model.orderModel.Order.PriceInfo)){
								mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.PriceInfo={};
								mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.PriceInfo=this.model.orderModel.Order.PriceInfo;
							}
							if(!iscCore.isVoid(this.model.orderModel.Order.OverallTotals)){
								//mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.OverallTotals={};
								//mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.OverallTotals=this.model.orderModel.Order.OverallTotals;
								mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.OverallTotals={"GrandCharges":this.model.orderModel.Order.OverallTotals.GrandCharges,
										"GrandDiscount":this.model.orderModel.Order.OverallTotals.GrandDiscount,"GrandTax":this.model.orderModel.Order.OverallTotals.GrandTax, 
										"GrandTotal":this.model.orderModel.Order.OverallTotals.GrandTotal, "HdrCharges":this.model.orderModel.Order.OverallTotals.HdrCharges,
										"HdrDiscount":this.model.orderModel.Order.OverallTotals.HdrDiscount, "HdrTax":this.model.orderModel.Order.OverallTotals.HdrTax,
										"HdrTotal":this.model.orderModel.Order.OverallTotals.HdrTotal ,"LineSubTotal":this.model.orderModel.Order.OverallTotals.LineSubTotal};
							}
							
							if(this.ui.mainDisplaySelection === "ORDER"){
								mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.Appeasement={"AppeasementLevel":"ORDER","ReasonCode":appeaseReason.CodeValue, "OfferAmount":appeaseOption.OfferAmount};
							}
							else{
								mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.Appeasement={"AppeasementLevel":"ORDERLINE","ReasonCode":appeaseReason.CodeValue, "OfferAmount":appeaseOption.OfferAmount};
								//Add OrderLines to Mashup Input
								mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.OrderLines={};
								mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.OrderLines.OrderLine=[];
								for(var i=0; i<this.ui.selectedProductOrderLines.length;i++){
									mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.OrderLines.OrderLine[i]={"OrderLineKey":this.ui.selectedProductOrderLines[i].OrderLineKey,"OrderedQty":this.ui.selectedProductOrderLines[i].OrderedQty};
									mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.OrderLines.OrderLine[i].LinePriceInfo={};
									mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.OrderLines.OrderLine[i].LinePriceInfo=this.ui.selectedProductOrderLines[i].LinePriceInfo;
									mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.OrderLines.OrderLine[i].LineOverallTotals=this.ui.selectedProductOrderLines[i].LineOverallTotals;//may need to set to empty object first
								}
							}
							
							if(appeaseOption.isPercent){
								mashupInput.InvokeUE.XMLData.AppeasementOffers.Order.Appeasement.DiscountPercent=appeaseOption.DiscountPercent;
							}
							
							iscMashup.callMashup(this,"provideAppeasementInStoreUE",mashupInput,{}).then(this.handleSaveAPICalls.bind(this),angular.noop);
						},
						uiOrderLineSelection:function(orderLine) {
							if(orderLine.checked){
								this.ui.selectedProductOrderLines.push(orderLine);
				        	}else{
				        		var index = this.ui.selectedProductOrderLines.indexOf(orderLine);
				        		if(index>-1){
				        			this.ui.selectedProductOrderLines.splice(index,1);
				        		}
				        	}
				        },
						uiToggleOrderChannelSelection:function(orderLine) {
							if(orderLine.checked){
								this.ui.selectedProductOrderLines.push(orderLine);
				        	}else{
				        		var index = this.ui.selectedProductOrderLines.indexOf(orderLine);
				        		if(index>-1){
				        			this.ui.selectedProductOrderLines.splice(index,1);
				        		}
				        	}
				        	
				        	//compute the line discount which will be applied for the order lines
				        	this.computeSelectedOrderLineTotal(orderLine);
				        },
				        
				     	/**
						 *@iscdoc method
						 *@viewname store.views.order.appeasement.customer-appeasement
				 		 *@methodname computeSelectedOrderLineTotal
						 *@description Computes the line total of selected order lines
						 */
				        
				        computeSelectedOrderLineTotal : function(orderLine){
				        	var currency = this.model.orderModel.Order.PriceInfo.Currency;
				        	var lineTotal = orderLine.LineOverallTotals.LineTotal;
				        	var appeasementOffers = this.model.productAppeaseOptions.AppeasementOffers;
				        	if(appeasementOffers){
				        		var appeasementOffer = appeasementOffers.AppeasementOffer;
				        		for(var i=0;i<appeasementOffer.length;i++){
				        			var appeasementOfferObj = appeasementOffer[i];
				        			var offerType = appeasementOfferObj.OfferType
				        			if(offerType === "PERCENT_ORDER" ){
				        				if(orderLine.checked){
				        					var disPercAdd = (lineTotal* (appeasementOfferObj.DiscountPercent)/100);
				        					this.ui.offerAmount = this.ui.offerAmount + disPercAdd;
				        					var finalAmtAdd = parseFloat(this.ui.offerAmount).toFixed(2);
				        					appeasementOfferObj.OfferAmount=finalAmtAdd;
				        					appeasementOfferObj.FormattedOfferAmount = $filter('iscCurrency')(angular.copy(finalAmtAdd),currency);
				        					break;
				        				}else{
				        					if(this.ui.offerAmount>0){
				        						var disPercSub = (lineTotal* (appeasementOfferObj.DiscountPercent)/100);
				        						this.ui.offerAmount=this.ui.offerAmount - disPercSub;
				        						var finalAmtSub = parseFloat(this.ui.offerAmount).toFixed(2);
				        						appeasementOfferObj.OfferAmount=finalAmtSub;
				        						appeasementOfferObj.FormattedOfferAmount = $filter('iscCurrency')(angular.copy(finalAmtSub),currency);
				        						break;
				        					}
				        					

				        				
				        				}
				        				
				        			}
				        			
				        		}
				        	}
				        
				        },
						/**
						 *@description Callback handler for APIs called when save/done is clicked on screen
						 *@param {Object} response - mashup response JSON object
						 */
						handleSaveAPICalls:function(response) {
						
							 			var messageOption = { 
						    					options: { 
						    						headerText: "globals.LABEL_Success",
						    						action:[
						    						  {
						    						    actionName:"OK",
						    						    actionLabel:"payment.ACTION_ViewOrderSummary"
						    						  }
						    						]
						    					}
						    					
						    				};
						    				var message = iscI18n.translate('customerappeasement.MESSAGE_AppeasementSuccess');
						    				iscModal.showSuccessMessage(message, messageOption).then(
						    							function(callBackData){
									            			iscState.goToPreviousState();        			
									       				},
									       				function(callBackData){
									            			iscState.goToPreviousState();          			
									       				});
							
						},
						
						/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@methodname uiGetOrderLineListNext
						 *@description Shows next set of order lines when order lines panel is scrolled.
						 */
				  		uiGetOrderLineListNext: function(){
			            	    if(this.ui.oLineShownCount <= this.model.orderLineList.OrderLineList.OrderLine.length){
				                  this.ui.oLineShownCount+=4;
				                }
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@methodname uiOLineScrollActionValidator 
						 *@description Validates if next page action should be performed by checking whther api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
						 */
			            uiOLineScrollActionValidator : function(){
			            	return true;
			            },
						
						/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@methodname uiOnEnterInputField
						 *@description OnEnter handler of UI input fields, invokes onClick handler of "Apply" button.
						 */
						
						uiOnEnterInputField : function (form) {
							
						},
						uiOnAmountFieldChange:function(){
							this.ui.selectedOrderOption.OfferAmount = angular.copy(this.ui.selectedOrderOption.FormattedOfferAmount);
							this.ui.selectedOrderOption.FormattedOfferAmount = $filter('iscCurrency')(angular.copy(this.ui.selectedOrderOption.FormattedOfferAmount),this.ui.Currency);
							
						},
						
						uiOnProductAmountFieldChange:function(){
							this.ui.selectedProductOption.OfferAmount = angular.copy(this.ui.selectedProductOption.FormattedOfferAmount);
							this.ui.selectedProductOption.FormattedOfferAmount = $filter('iscCurrency')(angular.copy(this.ui.selectedProductOption.FormattedOfferAmount),this.ui.Currency);
							
						},
						
						/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.appeasement.customer-appeasement
						 *@methodname uiTrimAppeasementOffersBasedOnPermission
						 *@description Trims the appeasement offers based on permission. Variable appeasement offers will be shown only if the below mentioned permission is present.
						 */
						uiTrimAppeasementOffersBasedOnPermission  : function(offersList){
							var appeasementOffers = offersList.AppeasementOffers;
							var appeasementOffer = appeasementOffers.AppeasementOffer;
							if(appeasementOffer){
								for(var i=0;i<appeasementOffer.length;i++){
									var appeasementOfferObj = appeasementOffer[i];
									var offerType = appeasementOfferObj.OfferType;
									if(offerType.includes("FLAT_AMOUNT_ORDER") || offerType.includes("FLAT_AMOUNT_FUTURE_ORDER")){
										if(!iscResourcePermission.hasPermission("WSC000080")) {
											appeasementOffer.splice(i);
										
										}
									
									}
								
								}
							
							}
						
						},
						
						
						uiIsOrderLineCancelled: function(orderLine) {
							var retVal = false;
							var orderLineTransQty = orderLine.OrderLineTranQuantity;
							if(orderLineTransQty){
								var orderedQty = orderLineTransQty.OrderedQty;
								if(orderedQty == 0) {
									retVal= true;
								}
							}
							
							return retVal;
						
						}
						
				 });
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.order.cancel.cancelorder
 *@package store.views.order.cancel
 *@class cancelorder
 *@description Controller used for handling cancelorder popup 
 *  
 */


angular.module('store').controller('store.views.order.cancel.cancelorder',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscModal','iscAppContext','iscI18n',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscModal,iscAppContext,iscI18n) {
		
	iscScreen.initializeModalScreen($scope,{

  		model:{
		   /**
			*@iscdoc model
			*@viewname store.views.order.cancel.cancelorder
			*@name cancelOrderReasonList
			*@description Holds the output data of getCancelOrderReasonList mashup. This is used to populate the dropdown on the UI
			*/
			"cancelOrderReasonList":{}
  		},

  		mashupRefs : [
  		
  				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.order.cancel.cancelorder
  		   			*@mashupid cancelorder_getCancelOrderReasonList
		   			*@mashuprefid getCancelOrderReasonList
		   			*@modelname cancelOrderReasonList
  		   			*@description Fetches the reasons that may make a user cancel an order
  		   			*/
  		  		
					mashupRefId: 'getCancelOrderReasonList',
					mashupId: 'cancelorder_getCancelOrderReasonList',
					modelName : 'cancelOrderReasonList'								
				},
				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.order.cancel.cancelorder
  		   			*@mashupid cancelOrder
		   			*@mashuprefid cancelOrder
  		   			*@description Cancels the created order based on the reason provided the user.
  		   			*/
  		  		
					mashupRefId: 'cancelOrder',
					mashupId: 'cancelOrder'						
				}
			],


		ui:{
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.order.cancel.cancelorder
			 *@property {String} cancelOrderReason - Reason for cancelling an order as selected by the user on UI
			 */
			cancelOrderReason : ""
		},

		/**
		 *@iscdoc viewinit
		 *@viewname store.views.order.cancel.cancelorder
		 *@method initialize
		 *@description Initializes the cancel order modal by calling the getCancelOrderReasonList mashup.
		 */
		initialize : function(){
			var getCancelOrderReasonListInput = {};
			getCancelOrderReasonListInput.CommonCode = {};
			getCancelOrderReasonListInput.CommonCode.DocumentType = modalInput.documentType;
				
			iscMashup.callMashup(this,'getCancelOrderReasonList',getCancelOrderReasonListInput,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
		},
			
		handleInitApiCalls : function() {
			if(iscCore.isVoid(this.ui.cancelOrderReason)){
				this.ui.cancelOrderReason =this.model.cancelOrderReasonList.CommonCodeList.CommonCode[0];
			}
		},

		/**
		 *@iscdoc uimethod
		 *@viewname store.views.order.cancel.cancelorder
		 *@methodname uiClose
		 *@description Handles the scenario when 'Cancel' button is clicked on the modal.
		 */
		uiClose : function () {
			$uibModalInstance.dismiss('cancel');
		},

		/**
		 *@iscdoc uimethod
		 *@viewname store.views.order.cancel.cancelorder
		 *@methodname uiSubmit
		 *@description Handles the scenario when 'OK' button is clicked on the modal, propagates the cancel reason back to the invoking screen.
		 */
		uiSubmit : function () {
			if(this.ui.cancelOrderReason.CodeValue) {
				var apiInput = {};
				apiInput.Order = {};
				apiInput.Order.Notes = {};
				apiInput.Order.Notes.Note = {};
				apiInput.Order.Action = 'CANCEL';
				apiInput.Order.ModificationReasonCode = this.ui.cancelOrderReason.CodeValue;
				apiInput.Order.OrderHeaderKey = modalInput.Order.OrderHeaderKey;
		
				var cancelReasonShortDescription = this.getCancellationDescription(this.ui.cancelOrderReason.CodeValue);
				var cancellationNote = iscI18n.translate("ordersummary.OrderCancellationNote", {"cancelReason": cancelReasonShortDescription,'user':iscAppContext.getFromContext('currentLoginID')});
				apiInput.Order.Notes.Note.NoteText = cancellationNote;
			   
				iscMashup.callMashup(this,'cancelOrder',apiInput,{}).then(this.cancelOrderAPICallBack.bind(this),this.cancelOrderAPIErrorCallBack.bind(this),angular.noop);
			} else {
				errorMsg = iscI18n.translate("ordersummary.OrderCancellationReasonNotFound");
  				iscModal.showErrorMessage(errorMsg,null,null);
				$uibModalInstance.dismiss('No cancellation reason');
			}
		},
		
		/**
		 *@iscdoc method
		 *@viewname store.views.order.cancel.cancelorder
		 *@methodname getCancellationDescription
		 *@description Returns the description corresponding to the cancellation code
		 */
		getCancellationDescription : function(codeValue) {
			var cancellationNoteDescription = "";
			angular.forEach(this.model.cancelOrderReasonList.CommonCodeList.CommonCode, function(value) {
				if(value.CodeValue == codeValue) {
					cancellationNoteDescription = value.CodeShortDescription;
				}
			});
			return cancellationNoteDescription;
		},
		
		cancelOrderAPICallBack : function(response) {
			var apiOutput = iscMashup.getMashupOutput(response,"cancelOrder");
			var resultdata = {};
			resultdata.cancelOrderAPIOutput = {};
			if(apiOutput) {
				resultdata.cancelOrderAPIOutput.cancelledOrderNumber = apiOutput.Order.OrderNo;
				resultdata.cancelOrderAPIOutput.cancelOrderAPISuccess = true;
				resultdata.cancelOrderAPIOutput.order = apiOutput;
			}
			$uibModalInstance.close(resultdata);
		},
		
		cancelOrderAPIErrorCallBack: function(response) {
			var errorMsg = response.Errors.Error[0].ErrorDescription;
  			var errorCode = response.Errors.Error[0].ErrorCode;
  			if(iscI18n.hasKey("apierror."+errorCode)){
  				errorMsg = iscI18n.translate("apierror."+errorCode);
  				iscModal.showErrorMessage(errorMsg,null,null);				
  			}
  			else{
  				iscModal.showErrorMessage(errorMsg,null,null);
  			}
			$uibModalInstance.dismiss(response);
		}

  	});
		
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.order.cancel.cancelorderline
 *@package store.views.order.cancel
 *@class cancelorderline
 *@description Controller used for handling cancelorderline popup 
 *  
 */


angular.module('store').controller('store.views.order.cancel.cancelorderline',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscModal','iscAppContext','iscI18n',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscModal,iscAppContext,iscI18n) {
		
	iscScreen.initializeModalScreen($scope,{

  		model:{
		   /**
			*@iscdoc model
			*@viewname store.views.order.cancel.cancelorderline
			*@name cancelOrderReasonList
			*@description Holds the output data of getCancelOrderReasonList mashup. This is used to populate the dropdown on the UI
			*/
			"cancelOrderReasonList":{}
  		},

  		mashupRefs : [
  		
  				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.order.cancel.cancelorderline
  		   			*@mashupid cancelorder_getCancelOrderReasonList
		   			*@mashuprefid getCancelOrderReasonList
		   			*@modelname cancelOrderReasonList
  		   			*@description Fetches the reasons that may make a user cancel an order
  		   			*/
  		  		
					mashupRefId: 'getCancelOrderReasonList',
					mashupId: 'cancelorder_getCancelOrderReasonList',
					modelName : 'cancelOrderReasonList'								
				},
				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.order.cancel.cancelorderline
  		   			*@mashupid store.views.order.cancel.cancelOrderLines
		   			*@mashuprefid store.views.order.cancel.cancelOrderLines
  		   			*@description Cancels the created order based on the reason provided the user.
  		   			*/
  		  		
					mashupRefId: 'store.views.order.cancel.cancelOrderLines',
					mashupId: 'store.views.order.cancel.cancelOrderLines'						
				}
			],


		ui:{
				
			/**
			 *@iscdoc uiattr
			 *@viewname store.views.order.cancel.cancelorderline
			 *@property {String} cancelOrderReason - Reason for cancelling an order as selected by the user on UI
			 */
			cancelOrderReason : ""
		},

		/**
		 *@iscdoc viewinit
		 *@viewname store.views.order.cancel.cancelorderline
		 *@method initialize
		 *@description Initializes the cancel order modal by calling the getCancelOrderReasonList mashup.
		 */
		initialize : function(){
			var getcancelOrderReasonListInput = {};
			getcancelOrderReasonListInput.CommonCode = {};
				
			iscMashup.callMashup(this,'getCancelOrderReasonList',getcancelOrderReasonListInput,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
		},
			
		handleInitApiCalls : function() {
			if(iscCore.isVoid(this.ui.cancelOrderReason)){
				this.ui.cancelOrderReason =this.model.cancelOrderReasonList.CommonCodeList.CommonCode[0];
			}
		},

		/**
		 *@iscdoc uimethod
		 *@viewname store.views.order.cancel.cancelorderline
		 *@methodname uiClose
		 *@description Handles the scenario when 'Cancel' button is clicked on the modal.
		 */
		uiClose : function () {
			$uibModalInstance.dismiss('cancel');
		},

		/**
		 *@iscdoc uimethod
		 *@viewname store.views.order.cancel.cancelorderline
		 *@methodname uiSubmit
		 *@description Handles the scenario when 'OK' button is clicked on the modal, propagates the cancel reason back to the invoking screen.
		 */
		uiSubmit : function () {
			if(this.ui.cancelOrderReason.CodeValue) {
				var apiInput = {};
				apiInput.Order = {};
				apiInput.Order.OrderHeaderKey = modalInput.orderHeaderKey;
				apiInput.Order.Notes = {};
				apiInput.Order.Notes.Note = {};
				apiInput.Order.OrderLines = {};
				apiInput.Order.OrderLines.OrderLine = {};
				apiInput.Order.OrderLines.OrderLine.OrderLineKey = modalInput.orderLine.OrderLineKey;
		
				var cancelReasonShortDescription = this.getCancellationDescription(this.ui.cancelOrderReason.CodeValue);
				var cancellationNote = iscI18n.translate("editorderdetails.OrderLineCancellationNote", {"cancelReason": cancelReasonShortDescription,"itemId": modalInput.orderLine.ItemDetails.ItemID,'user':iscAppContext.getFromContext('currentLoginID')});
				apiInput.Order.Notes.Note.NoteText = cancellationNote;
			   
				iscMashup.callMashup(this,'store.views.order.cancel.cancelOrderLines',apiInput,{}).then(this.cancelOrderLineAPICallBack.bind(this),this.cancelOrderLineAPIErrorCallBack.bind(this));
			} else {
				errorMsg = iscI18n.translate("editorderdetails.OrderLineCancellationReasonNotFound");
  				iscModal.showErrorMessage(errorMsg,null,null);
				$uibModalInstance.dismiss('No cancellation reason');
			}
		},
		
		/**
		 *@iscdoc method
		 *@viewname store.views.order.cancel.cancelorderline
		 *@methodname getCancellationDescription
		 *@description Returns the description corresponding to the cancellation code
		 */
		getCancellationDescription : function(codeValue) {
			var cancellationNoteDescription = "";
			angular.forEach(this.model.cancelOrderReasonList.CommonCodeList.CommonCode, function(value) {
				if(value.CodeValue == codeValue) {
					cancellationNoteDescription = value.CodeShortDescription;
				}
			});
			return cancellationNoteDescription;
		},
		
		cancelOrderLineAPICallBack : function(response) {
			var apiOutput = iscMashup.getMashupOutput(response,"store.views.order.cancel.cancelOrderLines");
			var resultdata = {};
			resultdata.cancelOrderLineAPIOutput = {};
			if(apiOutput) {
				resultdata.cancelOrderLineAPIOutput.cancelOrderLineAPISuccess = true;
				resultdata.cancelOrderLineAPIOutput.order = apiOutput;
			}
			$uibModalInstance.close(resultdata);
		},
		
		cancelOrderLineAPIErrorCallBack: function(response) {
			var errorMsg = response.Errors.Error[0].ErrorDescription;
  			var errorCode = response.Errors.Error[0].ErrorCode;
  			if(iscI18n.hasKey("apierror."+errorCode)){
  				errorMsg = iscI18n.translate("apierror."+errorCode);
  				iscModal.showErrorMessage(errorMsg,null,null);				
  			}
  			else{
  				iscModal.showErrorMessage(errorMsg,null,null);
  			}
			$uibModalInstance.dismiss(response);
		}

  	});
		
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.order.cart-details.cart-details
 *@package store.views.order
 *@class cart-details
 *@description Displays the cart details screen in order capture flow.
 *
 */

   angular.module('store').controller('store.views.order.cart-details.cart-details',
		  ['$scope','$rootScope','iscScreen','iscWizard','$timeout','$filter','$locale','iscMashup','iscResourcePermission','iscModal','iscI18n','iscAppContext','iscOrder',
			function($scope,$rootScope,iscScreen,iscWizard,$timeout,$filter,$locale,iscMashup,iscResourcePermission,iscModal,iscI18n,iscAppContext,iscOrder) {				
				iscWizard.initializeWizardPage($scope,{
					  
				      model:{
				    	  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.cart-details.cart-details
				           *@name orderLineList
				           *@description This model contains the getCompleteOrderLineList api output.
				           */
				    	  "orderLineList" : {} ,
				    	  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.cart-details.cart-details
				           *@name orderModel
				           *@description This is order capture wizard model containing the order information.
				           */
			    		  "orderModel" : {},
			    		  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.cart-details.cart-details
				           *@name giftModel
				           *@description This model contains the order level gift information.
				           */
			    		  "giftModel" : {},
			    		  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.cart-details.cart-details
				           *@name couponInput
				           *@description This model contains the translateBarcode api input used when item is scanned.
				           */
			    		  "couponInput":{
			    			  "couponID" :""
			    		  },
			    		  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.cart-details.cart-details
				           *@name scanItemInput
				           *@description This model contains the translateBarcode api input used when coupon is scanned.
				           */
			    		  "scanItemInput":{
			    			  "itemID":""
			    		  },
			    		  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.cart-details.cart-details
				           *@name getRuleDetails_ChargeShipLines
				           *@description This model contains the getRuleDetails api output for CHARGE_SHIP_LINES_AT_STORE.
				           */
						"getRuleDetails_ChargeShipLines":{},
						
						"customerDetails":{}
						
				      },
                        
				      /**
				       *MashupRefs
				       *array containing the list of mashups referred in this controller
				       */
				      
				  		mashupRefs : [
					        
					        
				  			{
				  				
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid viewcart_getCompleteOrderLineList
									*@mashuprefid viewcart_getCompleteOrderLineList
									*@modelname orderLineList
									*@description This mashup is used to get the list of OrderLines.
									*/
				  				 mashupRefId: 'viewcart_getCompleteOrderLineList',
						         mashupId: 'viewcart_getCompleteOrderLineList',
						         modelName: "orderLineList"
						       
				  			},
				  			 
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid viewcart_getCompleteOrderDetails
									*@mashuprefid viewcart_getCompleteOrderDetails
									*@modelname getCompleteOrderDetails
									*@description This mashup is used to get order details.
									*/
				  				
				  				 mashupRefId: 'viewcart_getCompleteOrderDetails',
						         mashupId: 'viewcart_getCompleteOrderDetails',
						         modelName: 'getCompleteOrderDetails'
				  			},
				  			{
				  			 /**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid wsc_paymentCapture_getRuleDetails_ChargeShipLines
								*@mashuprefid getRuleDetails_ChargeShipLines
								*@modelname getRuleDetails_ChargeShipLines
								*@description This mashup is used to get rule details of the Rule 'CHARGE_SHIP_LINES_AT_STORE' for the Store's Enterprise.
								*/
					            	mashupRefId: 'getRuleDetails_ChargeShipLines',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_ChargeShipLines',
					            	modelName : 'getRuleDetails_ChargeShipLines'
					        },
				  			 
				  			{  
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid viewcart_ovp_modifyFulfillmentOptions
									*@mashuprefid viewcart_ovp_modifyFulfillmentOptions
									*@description This mashup is used to call modifyFulfillmentOptions when price is overridden for a product.
									*/
				  				mashupRefId: 'viewcart_ovp_modifyFulfillmentOptions',
				  				mashupId: 'viewcart_ovp_modifyFulfillmentOptions'
				  				
				  			},
				  			
				  			{   /**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid viewcart_customer_modifyFulfillmentOptions
								*@mashuprefid viewcart_customer_modifyFulfillmentOptions
								*@description This mashup is used to call modifyFulfillmentOptions when customer is identified or order address is changed in customer panel.
								*/
				  				mashupRefId:'viewcart_customer_modifyFulfillmentOptions',
				  				mashupId:'viewcart_customer_modifyFulfillmentOptions'
				  			},
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid viewcart_getItemAvailabilityForStore
									*@mashuprefid viewcart_getItemAvailabilityForStore
									*@description This mashup is used to check availability of the product when quantity is edited or ShipTo address of order line is changed.
									*/
				  				mashupRefId:'viewcart_getItemAvailabilityForStore',
				  				mashupId:'viewcart_getItemAvailabilityForStore'
				  			},
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid viewcart_modifyFulfillmentOptions
									*@mashuprefid viewcart_modifyFulfillmentOptions
									*@description This mashup is used to call modifyFulfillmentOptions api when coupon is removed,store is selected for a pickup line and delivery method is changed.
									*/
				  				mashupRefId:'viewcart_modifyFulfillmentOptions',
				  				mashupId:'viewcart_modifyFulfillmentOptions'
				  				
				  			},
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid viewcart_translateBarcodeForCoupon
									*@mashuprefid viewcart_translateBarcodeForCoupon
									*@description This mashup is used to call translateBarcode api when coupon is scanned.
									*/
				  				mashupRefId:'viewcart_translateBarcodeForCoupon',
				  				mashupId:'viewcart_translateBarcodeForCoupon'	
				  			},
				  			
				  			{   
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid viewcart_changeOrderForGift
									*@mashuprefid viewcart_changeOrderForGift
									*@description This mashup is used to call changeOrder api to add/edit/delete gift information either at order/orderline level.
									*/
				  				mashupRefId:'viewcart_changeOrderForGift',
				  				mashupId:'viewcart_changeOrderForGift'
				  				
				  			},
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid vc_modifyFulfillmentOptionsForDeletion
									*@mashuprefid vc_modifyFulfillmentOptionsForDeletion
									*@description This mashup is used to call modifyFulfillmentOptions api to delete a order line.
									*/
				  				mashupRefId:'vc_modifyFulfillmentOptionsForDeletion',
				  				mashupId:'vc_modifyFulfillmentOptionsForDeletion'
				  				
				  			},
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid vc_getCompleteOrderLineList
									*@mashuprefid vc_getCompleteOrderLineList
									*@description This mashup is used to call getCompleteOrderLineList to get total number of order lines to validate whether the order needs to be reserved.
									*/
				  				mashupRefId:'vc_getCompleteOrderLineList',
				  				mashupId:'vc_getCompleteOrderLineList' 
				  				
				  			},
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid vc_updateSettledQtyOnAllLines
									*@mashuprefid vc_updateSettledQtyOnAllLines
									*@description This mashup is used to call changeOrder to update SettledQuantity on non-settled lines in case of orders in mixed mode, which is having settled and non-settled lines.
									*/
				  				mashupRefId:'vc_updateSettledQtyOnAllLines',
				  				mashupId:'vc_updateSettledQtyOnAllLines' 
				  				
				  			},
				  			
				            {

				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.cart-details.cart-details
									*@mashupid vc_getCompleteItemList
									*@mashuprefid vc_getCompleteItemList
									*@description This mashup is used to call getCompleteItemList when a carry product is scanned.
									*/
				            	mashupRefId: 'vc_getCompleteItemList',
				            	mashupId: 'vc_getCompleteItemList'
				            },
				            
				            {
				            mashupRefId: 'vc_getOrderFulfillmentDetails',
				            	mashupId: 'vc_getOrderFulfillmentDetails',
				            	modelName : 'getOrderFulfillmentDetails'
				            }
				          

				  		],
				  		
			            ui:{
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.cart-details.cart-details
			    			 *@property {Boolean}  showCouponScanField - true if coupon scan fields needs to be shown, false otherwise.
			    			 */
			            	showCouponScanField: false,
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.cart-details.cart-details
			    			 *@property {String} isOrderGift - Y if the order is Gift.
			    			 */
			            	isOrderGift:'',
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.cart-details.cart-details
			    			 *@property {Boolean} oLineQtyEditResourcePermission - true/false based on resource permission for editing order line quantity.
			    			 */
			            	oLineQtyEditResourcePermission :false,
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.cart-details.cart-details
			    			 *@property {Number} oLineShownCount - pageSize of the Order line list for continuous scrolling.
			    			 */
			            	oLineShownCount: 5,
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.cart-details.cart-details
			    			 *@property {Boolean} applyCouponResourcePermission - true/false based on resource permission for applying coupon to order.
			    			 */
			            	applyCouponResourcePermission :false,
							/**
							 *@iscdoc uiattr
			    			 *@viewname store.views.order.cart-details.cart-details
			    			 *@property {Integer} activeTabIndex - index of the tab that is active in mobile
			    			 */
						activeTabIndex: -1,
							
						checkAvailability:true,
						
						availabilityInfoLoading:true
			            	
			            },
			            
				            /**
							 *@iscdoc viewinit
							 *@viewname store.views.order.cart-details.cart-details
							 *@method initialize
							 *@description Initializes the cart details screen with getCompleteOrderDetails and getCompleteOrderLineList api calls.
							 */
				  		    initialize : function(){
				  		    $rootScope.$showBackButtonForStates = true;
				  			this.model.orderModel = iscWizard.getWizardModel("orderModel");
				  			this.model.giftModel = iscWizard.getWizardModel("giftOptionsForOrderModel");
				  			if(!iscCore.isVoid(this.model.giftModel)){
				  				this.ui.isOrderGift = this.model.giftModel.giftFlag;
				  			}
				  			
				  			if(iscResourcePermission.hasPermission("WSC000032")){
				  				this.ui.oLineQtyEditResourcePermission=true;
							}	
				  			
                            this.model.customerDetails = iscWizard.getWizardModel("customerModel");    
                            
				        	var mashupArray = [];
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'viewcart_getCompleteOrderLineList',{"OrderLine" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey}}));
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'viewcart_getCompleteOrderDetails', {"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey}}));
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'getRuleDetails_ChargeShipLines', {}));
				        /*	if(this.ui.checkAvailability){
				        	 	mashupArray.push(iscMashup.getMashupRefObj(this,'vc_getOrderFulfillmentDetails',  {"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey}})); 		
				        	}*/
				       
				        	//mashupArray.push(iscMashup.getMashupRefObj(this,'getNoteList', {"Note" : { "TableKey" : this.model.orderModel.Order.OrderHeaderKey}}));
				        	
				        	iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				  			},
				  		
				  			 /**
							 *@iscdoc method
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname handleInitApiCalls
							 *@description callback handler for init api calls getCompleteOrderDetails and getCompleteOrderLineList.
							 *@param {Object} data - Controller data of init api calls.
							 */	
					  		  handleInitApiCalls : function (data){
					  			
					  			var apiOutput = iscMashup.getMashupOutput(data,"viewcart_getCompleteOrderLineList");
					  			var orderLines = []; 
					 	        orderLines = apiOutput.OrderLineList.OrderLine;
					 	        
					 			if(!iscCore.isVoid(orderLines)){
					 				
					 				for(var k= 0; k<orderLines.length ; k++){
					 					orderLines[k].OrderLineTranQuantity.OrderedQty = $filter('number')(orderLines[k].OrderLineTranQuantity.OrderedQty);    
					 					orderLines[k].OrderedQty = $filter('number')(orderLines[k].OrderedQty);
									}
					 			}
					 			
					 			this.model.orderLineList = apiOutput;
					 			
					 			 $timeout(function(){
					 				iscMashup.callMashup(this,"vc_getOrderFulfillmentDetails",{"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey}},{showMask:false}).then(this.handleAvailabilityOfCart.bind(this),angular.noop);
				                    }.bind(this),0);
					  		  },
					  		  
					  		  
					  		handleAvailabilityOfCart:function(data){
					  			this.ui.availabilityInfoLoading = false;
					  			var apiOutput = iscMashup.getMashupOutput(data,"vc_getOrderFulfillmentDetails");
					  			var orderLines = []; 
					 	        orderLines = apiOutput.Order.OrderLines.OrderLine;
					 	        var unAvailableOLines = [];
					 	        
					 			if(!iscCore.isVoid(orderLines)){
					 				
					 				for(var k= 0; k<orderLines.length ; k++){
					 					if(orderLines[k].HasAnyUnavailableQty == 'Y' && orderLines[k].DeliveryMethod !='CARRY'){
					 						unAvailableOLines.push(orderLines[k].OrderLineKey);
					 					}
									}
					 			}
					 			//unAvailableOLines.push('20171122122656244318');
					 			if(unAvailableOLines.length > 0){
					 				this.updateOrderLineListWithAvailabilityInfo(unAvailableOLines);	
					 			}
					 			
					  		}, 
					  		
					  		
					  		updateOrderLineListWithAvailabilityInfo:function(unAvailableOLines){
					  			
					  			var orderLines = []; 
						        orderLines = this.model.orderLineList.OrderLineList.OrderLine;
				     		    for(var j=0; j<unAvailableOLines.length; j++){
									for(var k= 0; k<orderLines.length ; k++){
										if(orderLines[k].OrderLineKey === unAvailableOLines[j]){
											orderLines[k].HasAnyUnavailableQty='Y';
											break;
										}
									}
				     	 	   }
					  		},
				  		  
				  			/**
							 *@iscdoc uimethod
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname uiOnQuantityFieldFocus
							 *@description This is a onFocus event handler of quantity field.
							 *@param {Object} qtyField - quantity field as JSON object. 
							 *@param {Object} orderlineModel - orderLine data as JSON object. 
							 */
				  			uiOnQuantityFieldFocus :function (qtyField,orderLineModel) {
				  				if($scope.cartDetails.$valid)
				  				var formats = $locale.NUMBER_FORMATS;
					  			var oldQuantity = orderLineModel.OrderLineTranQuantity.OrderedQty;
					  			if(!iscCore.isVoid(oldQuantity)){
					  				oldQuantity=oldQuantity.replace(formats.GROUP_SEP, '');		
					  			}
					  			if(orderLineModel.showQtyUpdate !=='Y'){
					  				qtyField.oldQty = oldQuantity;
					  			}
				  				
				  		    },
				  			
				  		  /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname uiCancel
							 *@description This method handles on click of cancel button in cart details screen.
							 */
			              uiCancel : function(){
			            	iscModal.showConfirmationMessage(iscI18n.translate('order.WarningMessage_Cancel')).then(
								function(callBackAction){
									if(callBackAction === 'YES'){
										iscWizard.closeWizard();
									}
			       				},
			  					function(callBackAction){
			       				});
			              },
			            
			              /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname uiGetItemDetailsForScan
							 *@description This method handles scanning of a carry item by calling getCompleteItemList api to get product details and subsequently modifyFulfillmentOptions api to add the order line.
							 *@param {String} barCodeData - BarCode data of the scanned product. 
							 */ 
			            uiGetItemDetailsForScan: function(barCodeData){
			            	if(!iscCore.isVoid(barCodeData)){
			            		var getCompleteItemDetailsApiInput = {'Item':{ 'BarCode' :{'BarCodeData': barCodeData}}};
			                	getCompleteItemDetailsApiInput.Item.OrderHeaderKey = this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
			                	iscMashup.callMashup(this,"vc_getCompleteItemList",getCompleteItemDetailsApiInput,{}).then(this.handleItemScan.bind(this),angular.noop);
			            	}
			            	else{
			            		iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.MSG_InvalidBarCodeData'));
							    }
			            },
			            
			            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname uiOpenProductSearch
				  		 *@description Onclick handler function for search icon in scan field.Opens dirty popup if screen is dirty
				  		 * and based on action selected opens search product wizard page or stays in the same screen.
						 *@param {String} searchTxt - Input to search for matching products.
				  		 */
		            uiOpenProductSearch: function(searchTxt){
		            	var that = this;
		            	var openProductSearch = true;
		            	if(this.ui.isScreenDirty){
		            		iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
		            			if(iscCore.isBooleanTrue(action)){
		            				// action is yes. check search text and if valid, open search page.
		            				if(!iscCore.isVoid(searchTxt)){
					            		var pageInput = {
						            			input: searchTxt
						            	};
						            	iscWizard.gotoCustomPage('productSearch',pageInput,{removeCurrent: false,wizardPageCssClass:"fullscreen-modal"});
					            	}
					            	else{
					            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
					            	}
		            			}
		            			else{
		            				// action is no. so clear search text.
		            				that.model.searchInput = '';
		            			}
		            		});
		            	}
		            	else{
		            		if(!iscCore.isVoid(searchTxt)){
			            		var pageInput = {
				            			input: searchTxt,
				            			searchContext : 'scanInStore'
				            	};
				            	//iscWizard.gotoCustomPage('productSearch',pageInput,{wizardPageCssClass:"fullscreen-modal"});
				            	iscWizard.gotoCustomPage('addItems',pageInput,{removeCurrent: false,wizardPageCssClass:"fullscreen-modal"});
			            	}
			            	else{
			            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
			            	}
		            	}
		            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname handleItemScan
						 *@description callback handler for getCompleteItemList api call.
						 *@param {Object} data - Controller data of getCompleteItemList api call.
						 */	
			            handleItemScan: function(data){
			            	
			            	var apiOutput = iscMashup.getMashupOutput(data,"vc_getCompleteItemList");
			    			if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.Order.OrderLines)){
			    				if(!(this.model.orderLineList.OrderLineList.TotalNumberOfRecords =='0')){
			    					iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
			    				}
			    				else{
			    					this.model.orderLineList.OrderLineList.OrderLine = [];
			    					this.model.orderLineList.OrderLineList.OrderLine = apiOutput.Order.OrderLines.OrderLine;
			    					this.model.orderLineList.OrderLineList.TotalNumberOfRecords =  apiOutput.Order.OrderLines.TotalNumberOfRecords;
			    				}
			 			    	this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
			 			    	this.ui.oLineShownCount = this.model.orderLineList.OrderLineList.OrderLine.length;
			 			    	$timeout(function(){
			 		            	var objDiv = document.getElementById("orderLinesHolder");
			 		            	objDiv.scrollTop = objDiv.scrollHeight;
			 		            }, 0);
			    			}
			    			else {
			    				var pageInput = {
				            			input: this.model.scanItemInput.itemID,
				            			searchContext : 'scanInStore'
				            	};
				            	iscWizard.gotoCustomPage('addItems',pageInput,{removeCurrent: false,wizardPageCssClass:"fullscreen-modal"});
				            	
			    			}
			                this.model.scanItemInput.itemID ='';
			                $scope.cartDetails.$setPristine();
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uihandleScreenDirty
						 *@description This method is called on click of Continue to payment button when the screen is dirty.
						 */ 	
			            uihandleScreenDirty: function(){
			            	iscModal.showErrorMessage(iscI18n.translate('globals.MSG_SCREEN_ERRORS')); 
			            }, 
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname handleWizardBack
						 *@description This method handles the on click of back  in wizard.
						 */ 	
			            
						handleWizardBack:function(){
							var isFirstPage = iscWizard.isFirstPage();
							var isDirty = $scope.cartDetails.$dirty;
							if(isDirty){
								var confirmationMsg = null;
								if(isFirstPage){
									confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
									iscModal.showConfirmationMessage(confirmationMsg).then(
											function(callBackAction){
												if(callBackAction === 'YES'){
													iscWizard.closeWizard();
												}
						       				});
								}
								else{
									iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
			            			if(iscCore.isBooleanTrue(action)){
			            				iscWizard.gotoPreviousPage(true);
			            			}
			            		});
								}
								return true;
							}else if(isFirstPage){
								confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
								iscModal.showConfirmationMessage(confirmationMsg).then(
										function(callBackAction){
											if(callBackAction === 'YES'){
												iscWizard.closeWizard();
											}
					       				});
								return true;
							}
							else{
								return false;
							}
						},
						
						/**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname handleWizardExit
						 *@description This method handles the on click of cancel button in wizard.
						 */ 
						
						handleWizardExit:function(){
							var confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
							
							iscModal.showConfirmationMessage(confirmationMsg).then(
								function(callBackAction){
										//
										if(callBackAction === 'YES'){
												iscWizard.exitWizard();
										}
								},
								function(callBackAction){
										//      Do Nothing

								});
							return true;						
						},
						
						/* 
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiApplyCoupon
						 *@description This method is used to show coupon scan field on click of Apply coupons button and to call translateBarcode api when coupon is scanned.
						 *@param {String} couponID - BarCode data of the scanned coupon. 
						  
						
						 uiApplyCoupon :function(couponID){
			            	if(iscCore.isVoid(couponID)){
			                	this.ui.showCouponScanField = true;
			            	}else{
			            		iscMashup.callMashup(this,"viewcart_translateBarcodeForCoupon",{"BarCode" : { "BarCodeData" : couponID ,"OrderHeaderKey" : this.model.getCompleteOrderDetails.Order.OrderHeaderKey}},{}).then(this.handleApplyCoupon.bind(this),angular.noop);
			            	}
			            },
			            
			            
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiApplyCoupon
						 *@description This method calls modifyFulfillmentOptions api to remove a coupon.
						 *@param {Object} promotion - promotion that needs to removed. 
						  
			            
			            uiRemoveCoupon : function(promotion){
			            	var apiInput ={'Order':{'OrderHeaderKey':this.model.getCompleteOrderDetails.Order.OrderHeaderKey,'Promotions':[{'Promotion':{'Action':'REMOVE','PromotionId' : promotion.PromotionId}}]}}; 
			        		iscMashup.callMashup(this,"viewcart_modifyFulfillmentOptions",apiInput,{}).then(this.handleRemoveCoupon.bind(this),angular.noop);
			            },
			            
			            
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname handleRemoveCoupon
						 *@description This method is the callback handler for  modifyFulfillmentOptions api to remove a coupon.
						 *@param {Object} promotion - promotion that needs to removed. 
						  
			            
			            handleRemoveCoupon : function(data){
			            	this.handleModifyFulfillmentOptionsOutput(data);
							var alertMessage = iscI18n.translate("viewcartdetails.aria_deleteCouponSuccessMessage");
							iscModal.showA11YAlertMessage(alertMessage);
			            },*/
			            
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiOpenConfirmationForGiftDelete
						 *@description Shows confirmation dialog when Remove Gift button is clicked.On Conformation,removeGiftOptionsForOrder method is called.
						 */ 
			            
			            uiOpenConfirmationForGiftDelete : function(){
			            	var that = this;
			            	iscModal.showConfirmationMessage("viewcartdetails.LABEL_GiftDeleteConfirmation").then(function(action){
								that.removeGiftOptionsForOrder(action);
							});
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiConfirmDeletion
						 *@description Shows confirmation dialog before deleting order line.On Conformation,deleteOrderLine method is called.
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */ 
			            
			            uiConfirmDeletion : function(orderLineModel){
			            	
			            	var that = this;
			            	iscModal.showConfirmationMessage("viewcartdetails.LABEL_OLineDeleteConfirmation").then(function(action){
								that.deleteOrderLine(action,orderLineModel);
							});
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname deleteOrderLine
						 *@description Deletes order line by calling modifyFulfillmentOptions api.
						 *@param {String} action - action is the response of a confirmation dialog to delete order line. 
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */ 
			            
			            deleteOrderLine : function(action,orderLineModel){
			            	if(action === 'YES'){
				            	var apiInput ={'Order':{'OrderHeaderKey':this.model.getCompleteOrderDetails.Order.OrderHeaderKey,'OrderLines':[{'OrderLine':{'Action':'REMOVE','OrderLineKey' : orderLineModel.OrderLineKey}}]}}; 
				            	iscMashup.callMashup(this,"vc_modifyFulfillmentOptionsForDeletion",apiInput,{}).then(this.updateOrderLineList.bind(this),angular.noop);
			            	}
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname updateOrderLineList
						 *@description Call back handler of modifyFulfillmentOptions api when order line is deleted.It Updates Order Header and Order line list data.
						 *@param {Object} data - Controller data of modifyFulfillmentOptions api call.
						 */ 
			            
			            updateOrderLineList : function(data){
			            	var apiOutput = iscMashup.getMashupOutput(data,"vc_modifyFulfillmentOptionsForDeletion");
			            	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
						    this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
						    var alertMessage = iscI18n.translate("viewcartdetails.aria_deleteOrderLineSuccessMessage");
							iscModal.showA11YAlertMessage(alertMessage);
							
							if(this.model.orderLineList.OrderLineList.TotalNumberOfRecords == 0){
								this.model.giftModel = {};
			            		iscWizard.setWizardModel("giftOptionsForOrderModel",{});
			            		this.ui.isOrderGift = '';
							}
							
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname removeGiftOptionsForOrder
						 *@description Removes Gift options for Order by calling changeOrder api.
						 *@param {String} action - action is the response of a confirmation dialog to remove gift options for order. 
						 */ 
			            
			            removeGiftOptionsForOrder : function(action){
			            	if(action === 'YES'){
			            		var orderLineList = this.model.orderLineList.OrderLineList.OrderLine;
			            		/* update the wizard model data */
			            		this.model.giftModel = {};
			            		iscWizard.setWizardModel("giftOptionsForOrderModel",{});
			            		this.ui.isOrderGift = '';
			            		var apiInput =iscOrder.prepareChangeOrderInputForGiftRemoval(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderLineList);
			            		iscMashup.callMashup(this,"viewcart_changeOrderForGift",apiInput,{}).then(this.updateGiftMessageRemovalForOrder.bind(this),angular.noop);
			            	}
			            },
			           
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiOpenGiftOptionsForOrder
						 *@description Opens Gift options popup for order when Apply Gift Options button is clicked.
						 */  
			          uiOpenGiftOptionsForOrder : function(){
			               
			               var that = this;	
			               var isAnyLineGift = iscOrder.checkIfAnyOrderlineIsGift(this.model.orderLineList);
			          	   if(isAnyLineGift){
			          		   iscModal.showConfirmationMessage("viewcartdetails.LABEL_GiftOrderConfirmation").then(function(action){
										that.overRideGiftOptions(action);
									});
			          	   }else{
			          		   this.overRideGiftOptions('YES');
			          	   }
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiOpenGiftOptionsForOrderLine
						 *@description Opens Gift options popup for order line on click of 'Make this product a gift' link.
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */
			            
			            uiOpenGiftOptionsForOrderLine : function(orderlineModel){
			            	
			        	var that = this;
			       		var giftOptionsInput = null;
			       		if(orderlineModel.GiftFlag == "Y"){
			                    
			       			var giftInstructionObj =iscOrder.getGiftInstructionForOrderLine(orderlineModel);
			       			var giftMessage = null;
			       			if(giftInstructionObj !== null){
			       			  giftMessage = giftInstructionObj.InstructionText;
			       			}
			       			
			       			var giftRecipient =null;
			       			if(orderlineModel.PersonInfoMarkFor && orderlineModel.PersonInfoMarkFor.FirstName){
			       				giftRecipient = orderlineModel.PersonInfoMarkFor.FirstName;
				       		}
			       			
			       			 giftOptionsInput = {
			               			gift:{
			               				giftFlag:"Y",
			               				giftWrap: orderlineModel.ItemDetails.PrimaryInformation.AllowGiftWrap,
			               				giftRecipient : giftRecipient,
			               				giftMessage : giftMessage, 
			               				giftWrapChecked: orderlineModel.GiftWrap,
			               				showRemoveGift:'Y'
			              			}
			               	};
			       		}else{
			       			
			       			 giftOptionsInput = {
			               			gift:{
			               				giftWrap: orderlineModel.ItemDetails.PrimaryInformation.AllowGiftWrap,
			               				giftWrapChecked: 'N'
			             			}
			               	};
			       		}
			       		
				       	var giftOptionsModalInput = {
				       			modalInput: function(){
				       				return giftOptionsInput;
				       			}
				       	};
			       	
				       	iscModal.openModal('store.views.common.gift.giftoptions',giftOptionsModalInput,{})
								.then (function(callBackData){
									if(callBackData.data !== null && callBackData.data !== undefined){
										that.applyGiftOptionsForOrderLine.call(that,callBackData.data,orderlineModel);
									}
									},
									angular.noop);
			       
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname overRideGiftOptions.
						 *@description Opens Gift options popup for Order overriding the existing gift options information at order line level .
						 *@param {String} action - action is the response of a confirmation dialog to override gift options. 
						 */
			            
			            overRideGiftOptions : function(action){
			            	if(action === 'YES'){
			            	   var that = this;	
			            	   this.model.giftModel = iscWizard.getWizardModel("giftOptionsForOrderModel");
			            		var giftOptionsInput = {};
			            		giftOptionsInput.gift = {};
			            		
			            		if(!iscCore.isVoid(this.model.giftModel)){
			            			
			            			giftOptionsInput.gift.giftRecipient = this.model.giftModel.giftRecipient;
			            			giftOptionsInput.gift.giftMessage =   this.model.giftModel.giftMessage;
			            			giftOptionsInput.gift.giftWrapChecked = this.model.giftModel.giftWrapChecked
			            		}
			            		
			                	var giftOptionsModalInput = {
			                			modalInput: function(){
			                				return giftOptionsInput;
			                			}
			                	};
			                	
			                	iscModal.openModal('store.views.common.gift.giftoptions',giftOptionsModalInput,{})
			     					.then(function(callBackData){
			    						if(callBackData !== null && callBackData.data !== null && callBackData.data !== undefined){
			    							that.applyGiftOptionsForOrder.call(that,callBackData.data);
			    						}
			       					},
			       					angular.noop);
			                }
			            	},
			            	
			            	 /**
							 *@iscdoc method
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname applyGiftOptionsForOrder.
							 *@description Calls changeOrder api to save data captured in gift options popup.
							 *@param {Object} data - JSON object containing data captured in gift options popup. 
							 */
			            	
			            	applyGiftOptionsForOrder : function(data){
			                	var orderLineList =[];
			                	orderLineList = this.model.orderLineList.OrderLineList.OrderLine;
			            		/* update the wizard model data */
			                	var giftPopupData = angular.copy(data);
			            		var apiInput =iscOrder.prepareChangeOrderInputForGift(data,this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderLineList);
			            		iscMashup.callMashup(this,"viewcart_changeOrderForGift",apiInput,{}).then(this.updateOrderWithGiftMessage.bind(this,giftPopupData),angular.noop);
			            	},
			            
			            	/**
							 *@iscdoc method
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname applyGiftOptionsForOrderLine.
							 *@description Calls changeOrder api to save data captured in gift options popup.
							 *@param {Object} data - JSON object containing data captured in gift options popup. 
							 *@param {Object} orderlineModel - orderLine data as JSON object.  
							 */
			            	
			            applyGiftOptionsForOrderLine : function(data,orderlineModel){
			            	
			            	var orderLineList =[];
			                orderLineList[0] = orderlineModel;
			            	if((!iscCore.isVoid(data.removeGift))&&(data.removeGift === 'Y')){
			            		var apiInput =iscOrder.prepareChangeOrderInputForGiftRemoval(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderLineList);
			            		iscMashup.callMashup(this,"viewcart_changeOrderForGift",apiInput,{}).then(this.updateOrderLineAfterGiftRemoval.bind(this),angular.noop);
			            	}else{
			            		 var apiInput =iscOrder.prepareChangeOrderInputForGift(data,this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderLineList);
			                     iscMashup.callMashup(this,"viewcart_changeOrderForGift",apiInput,{}).then(this.updateOrderLineWithGiftMessage.bind(this),angular.noop);    	
			            	}
			            	
			        	},
			            
			        	/**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname updateOrderLineAfterGiftRemoval.
						 *@description Updates the order line once the gift options are removed.
						 *@param {Object} data - JSON object containing changeOrder api output. 
						 */
			        	
			        	updateOrderLineAfterGiftRemoval : function(data){
			        		var apiOutput = iscMashup.getMashupOutput(data,"viewcart_changeOrderForGift");
			        		iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
			        		
			        		if(this.model.orderLineList.OrderLineList.OrderLine.length === 1){
			        			this.model.giftModel = {};
				        		iscWizard.setWizardModel("giftOptionsForOrderModel",{});
				        		this.ui.isOrderGift = '';
				                }
			        		
			        	},
			        	
			        	/**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname updateOrderLineWithGiftMessage.
						 *@description Updates the order line with gift data.
						 *@param {Object} data - JSON object containing changeOrder api output. 
						 */
			        	
			            updateOrderLineWithGiftMessage : function(data){
			            	var apiOutput = iscMashup.getMashupOutput(data,"viewcart_changeOrderForGift");
			            	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname updateOrderWithGiftMessage.
						 *@description Updates the order with gift data.
						 *@param {Object} data - JSON object containing changeOrder api output. 
						 */
			            
			            updateOrderWithGiftMessage : function(giftPopupData, data){
			            	var apiOutput = iscMashup.getMashupOutput(data,"viewcart_changeOrderForGift");
			            	
			            	this.model.giftModel = giftPopupData;
		            		iscWizard.setWizardModel("giftOptionsForOrderModel",giftPopupData);
			            	
			            	if((!iscCore.isVoid(apiOutput.Order.OrderLines)) && (!iscCore.isVoid(apiOutput.Order.OrderLines.OrderLine))){
			            		if(this.model.orderLineList.OrderLineList.OrderLine.length === apiOutput.Order.OrderLines.OrderLine.length){
			            			this.replaceCompleteOrderLineList(apiOutput);
			            		}else{
			            			iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);	
			            		}
			            	}
			            	
			            	this.ui.isOrderGift = 'Y';
			            },
			           
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname updateGiftMessageRemovalForOrder.
						 *@description Updates the order once the gift options are removed.
						 *@param {Object} data - JSON object containing changeOrder api output. 
						 */
			            
			           updateGiftMessageRemovalForOrder : function(data){
			            	var apiOutput = iscMashup.getMashupOutput(data,"viewcart_changeOrderForGift");
			            	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
			            	//this.replaceCompleteOrderLineList(apiOutput);
			            	this.ui.isOrderGift = '';
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname replaceCompleteOrderLineList.
						 *@description Updates the orderLineList model with the latest order line list.
						 *@param {Object} apiOutput - JSON object containing changeOrder api output. 
						 */
			            
			            replaceCompleteOrderLineList : function(apiOutput){
			            	if((!iscCore.isVoid(apiOutput.Order.OrderLines)) && (!iscCore.isVoid(apiOutput.Order.OrderLines.OrderLine))){
			            		delete this.model.orderLineList.OrderLineList["OrderLine"];
			                	this.model.orderLineList.OrderLineList.OrderLine = [];
			                	this.model.orderLineList.OrderLineList.OrderLine = apiOutput.Order.OrderLines.OrderLine;	
			            	}
			            },
			            
			            /*
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname handleApplyCoupon.
						 *@description Call back handler for translateBarcode api when coupon is scanned.Updates order with promotion details if applying coupon is successful .
						 *@param {Object} apiOutput - JSON object containing translateBarcode api output. 
						 */
			            
			          /*  handleApplyCoupon : function(data){
			            	var apiOutput = iscMashup.getMashupOutput(data,"viewcart_translateBarcodeForCoupon");
			            		iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
			    			    this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
				        		this.model.couponInput.couponID ="";	
			            	$scope.cartDetails.$setPristine();
							var alertMessage = iscI18n.translate("viewcartdetails.aria_applyCouponSuccessMessage");
							iscModal.showA11YAlertMessage(alertMessage);
			            },*/
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiCouponApplied
						 *@description This method is used to update order details once a coupon is added or removed
						 *@param {Object} orderDetails - order model that apply coupon directive returns. 
						 */ 
			            uiCouponApplied:function(orderDetails){		        	
				        	this.model.getCompleteOrderDetails = orderDetails;
				        	$scope.cartDetails.$setPristine();
							/*var alertMessage = iscI18n.translate("viewcartdetails.aria_applyCouponSuccessMessage");
							iscModal.showA11YAlertMessage(alertMessage);*/
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiValidateQuantityAndUpdate.
						 *@description Validates order line quantity change and calls getItemAvailabilityForStore api to check the Item availability .
						 *@param {Object} qtyField - quantity field as JSON object. 
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */
			            
				  		uiValidateQuantityAndUpdate : function(qtyField,orderlineModel){
				  			
				  			var formats = $locale.NUMBER_FORMATS;
				  			var newQuantity = orderlineModel.OrderLineTranQuantity.OrderedQty;
				  			newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
				  			orderlineModel.OrderLineTranQuantity.OrderedQty = newQuantity;
				  			if(qtyField.oldQty !== newQuantity){
				  				qtyField.oldQty = newQuantity ;
				  			if (typeof newQuantity == "string")
				  				newQuantity = parseInt(newQuantity,10);
				  			if (newQuantity === 0 ) {
				  				iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.MSG_InvalidQty')); 
				  				orderlineModel.OrderLineTranQuantity.OrderedQty = orderlineModel.OrderedQty;
				  				orderlineModel.showQtyUpdate='N';
						    }else{
					  			var  modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
					  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
					  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.OrderedQty = orderlineModel.OrderLineTranQuantity.OrderedQty;
					  			var getItemAvailabilityForStoreInput = this.getItemAvailabilityForStoreApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel);
					  			getItemAvailabilityForStoreInput.Promise.modifyFulfillmentOptionsInput =modifyFulfillmentOptionsInput ;
					  			iscMashup.callMashup(this,"viewcart_getItemAvailabilityForStore",getItemAvailabilityForStoreInput,{}).then(this.handleOrderLineQtyChange.bind(this),angular.noop);
						    }
				  			}
				  		},
				  		
				  		/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiShowUpdateButton.
						 *@description Shows/hides Update button for quantity field based on the validity of the edited quantity.
						 *@param {Object} qtyField - quantity field as JSON object. 
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */
				  		
				  		uiShowUpdateButton : function(qtyField,orderlineModel){
				  						
				  						var formats = $locale.NUMBER_FORMATS;
							  			var newQuantity = orderlineModel.OrderLineTranQuantity.OrderedQty;
							  			if(!iscCore.isVoid(newQuantity))
							  				newQuantity = newQuantity.replace(formats.GROUP_SEP, '');
							  			if((!iscCore.isVoid(newQuantity)) && qtyField.oldQty !== newQuantity)
							  				orderlineModel.showQtyUpdate ='Y';
							  			else
							  				orderlineModel.showQtyUpdate ='N';
				  			
				  		},
				  		
				  		/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiHideUpdateButton.
						 *@description hides Update button for quantity field.
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */
				  		
				  		uiHideUpdateButton : function(orderlineModel){
				  			orderlineModel.showQtyUpdate ='N';
				  		},
				  		
				  		/**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname getItemAvailabilityForStoreApiInput.
						 *@description utility to prepare getItemAvailabilityForStore api input.
						 *@param {String} orderHeaderKey - unique identifier for order. 
						 *@param {String} orderlineModel - orderLine data as JSON object. 
						 *@returns {Object} json object. 
						 */
				  		getItemAvailabilityForStoreApiInput : function(orderHeaderKey,orderlineModel){
				  			var getItemAvailabilityForStoreInput = {'Promise':
													                  {'OrderHeaderKey':orderHeaderKey,
													                   'OrderLineKey':	orderlineModel.OrderLineKey,
													                   'PromiseLines':
													                       {
													                       'PromiseLine':
													                              [ 
													                                {'ItemID':orderlineModel.ItemDetails.ItemID,
													                                 'UnitOfMeasure' : orderlineModel.ItemDetails.UnitOfMeasure,
														                             'RequiredQty': orderlineModel.OrderLineTranQuantity.OrderedQty,
														                             'Quantity':orderlineModel.OrderLineTranQuantity.OrderedQty,
														                             'OrderLine':
														                                {
														                                   'OrderLineKey':orderlineModel.OrderLineKey,
															                               'DeliveryMethod':orderlineModel.DeliveryMethod 
														                                }
													                               }
													                              ] 
													                       }
													                   }
													                }; 

							if(orderlineModel.DeliveryMethod === "SHP"){
								getItemAvailabilityForStoreInput.Promise.ComputeShpAvl = "Y";	
							}
							
							else if(orderlineModel.DeliveryMethod === "PICK"){
								getItemAvailabilityForStoreInput.Promise.ComputePickupAvl = "Y";	
							    getItemAvailabilityForStoreInput.Promise.ShipNode =  orderlineModel.Shipnode.ShipNode;
							}
							else if(orderlineModel.DeliveryMethod === "CARRY"){
							getItemAvailabilityForStoreInput.Promise.ComputeCarryAvl = "Y";
							 getItemAvailabilityForStoreInput.Promise.ShipNode =  orderlineModel.Shipnode.ShipNode;
							}
				  			
							return getItemAvailabilityForStoreInput;
				  		},
				  		
				  		/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiGetOrderLineListNext.
						 *@description Shows next set of order lines when order lines panel is scrolled.
						 */
				  		
				  		uiGetOrderLineListNext: function(){
			            	    if(this.ui.oLineShownCount <= this.model.orderLineList.OrderLineList.OrderLine.length){
				                  this.ui.oLineShownCount+=5;
				                }
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiOLineScrollActionValidator 
						 *@description Validates if next page action should be performed by checking whther api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
						 */
			            
			            uiOLineScrollActionValidator : function(){
			            	return true;
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiCheckDirtyStateBeforePayment
						 *@description Onclick event handler for 'Continue to Payment' button.Checks the cart details screen for dirty state.
						 */
			            uiCheckDirtyStateBeforePayment : function (){
			            	
			            	/* Check whether the screen is dirty before navigating to payment screen*/
			            	 
			            	 var isDirty = $scope.cartDetails.$dirty;
			            	 if(isDirty){
			            		 var that = this;
			            		 iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
				            			if(iscCore.isBooleanTrue(action)){
				            				that.uiValidateOrderBeforePayment();
				            			}
			            	 });
			            	 }else{
			            		 this.uiValidateOrderBeforePayment();
			            	 }		
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiValidateOrderBeforePayment
						 *@description Handles 'Continue to Payment' button when screen is not dirty.Validates the order for Shipping address when shipping lines are present.
						 */
			            
			             uiValidateOrderBeforePayment : function(){
			            	 
			            	/* check whether all the lines are carry lines*/  
			            	 
	            		    var orderDetailsModel = {};
	            		    orderDetailsModel.Order= {};
	            		    orderDetailsModel.Order.OrderLines = {};
	            		    orderDetailsModel.Order.OrderLines.OrderLine = this.model.orderLineList.OrderLineList.OrderLine;
	            		   
	            		    if(iscOrder.orderHasOnlyCarryLines(orderDetailsModel)){
	            		    	
	            		    	iscWizard.gotoCustomPage('paymentCapture',{},{});;
	            		    }
	            		    else{
	            		    	
	            		    	
			            	 var isShippingLinePresent = iscOrder.checkIfOrderHasShipLines(this.model.orderLineList.OrderLineList.OrderLine);
			            	 
			             	/* validate whether all the lines have ship to address*/
			            	 var isShippingLinePresent = iscOrder.checkIfOrderHasShipLines(this.model.orderLineList.OrderLineList.OrderLine);
			            	 var checkAvailability = true;
			            	 if(isShippingLinePresent){
			            		 var orderModel = this.model.getCompleteOrderDetails;
			                	 if(iscCore.isVoid(orderModel.Order.PersonInfoShipTo)){
			                		 iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.NoShipToAddressOline')); 
			                		 checkAvailability = false;
			            	 }
			            	 }
			            	     if(checkAvailability){
			            	     	if(!iscOrder.orderHasMixedSettledLines(this.model.orderLineList.OrderLineList.OrderLine)){
			            	     		var apiInput = {};
				                 		apiInput.Order= {};
				                 		apiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
				                 		iscMashup.callMashup(this,"vc_getCompleteOrderLineList",apiInput,{}).then(this.goToPaymentPage.bind(this),angular.noop); 
			            	     	}
			            	    	else {
			            	    		var computeAvailabilityApiInput = {};
				                 		computeAvailabilityApiInput.Order= {};
				                 		computeAvailabilityApiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
				                 		var updateSettledQtyOnAllLinesApiInput = {};
				                 		updateSettledQtyOnAllLinesApiInput.Order= {};
				                 		updateSettledQtyOnAllLinesApiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
				                 		updateSettledQtyOnAllLinesApiInput.Order.OrderLines = {};
				                 		updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine = [];
				                 		for(var i= 0; i<this.model.orderLineList.OrderLineList.OrderLine.length; i++){
				                 			var orderline = this.model.orderLineList.OrderLineList.OrderLine[i];
											if(orderline.OrderLineTranQuantity && orderline.OrderLineTranQuantity.OrderedQty 
												&& orderline.OrderLineTranQuantity.SettledQuantity && orderline.OrderLineTranQuantity.OrderedQty != orderline.OrderLineTranQuantity.SettledQuantity){
												var lengthOfInputOrderLines = updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine.length;
												updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines] = {};
												updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineKey = orderline.OrderLineKey;
												updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineTranQuantity = {};
												updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineTranQuantity.SettledQuantity = orderline.OrderLineTranQuantity.OrderedQty;
											 }
										}
			            	    		var updateSettledQtyOnAllLinesMashupRefObj = iscMashup.getMashupRefObj(this,"vc_updateSettledQtyOnAllLines",updateSettledQtyOnAllLinesApiInput);
			            	    		var computeAvailabilityMashupRefObj = iscMashup.getMashupRefObj(this,"vc_getCompleteOrderLineList",computeAvailabilityApiInput);
			            	    		var mashupRefList = [updateSettledQtyOnAllLinesMashupRefObj,computeAvailabilityMashupRefObj];
		            					iscMashup.callMashups(this,mashupRefList,{}).then(this.goToPaymentPage.bind(this),angular.noop);
			            	    	}
			            	     }
			            		 
			              }
			             }  
	            		    ,
			              
			              /**
							 *@iscdoc method
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname goToPaymentPage
							 *@description Callback handler for getCompleteOrderLineList api whose custom mashup checks the availbility of all order lines.If all the lines are available,Payment screen is shown. 
							 *@param {Object} data - JSON object containing getCompleteOrderLineList api output.
						  */
			              
			              goToPaymentPage : function(data){
			            	 var output = iscMashup.getMashupOutput(data,"vc_getCompleteOrderLineList");
			             	 if(output.OrderLineList.IsAnyLineUnAvailable == "N"){
			             		 iscWizard.gotoCustomPage('paymentCapture',{},{});;
			             	 }
			             	 else{
			             		 iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.UnAvailbleLines'));
			             	 }
			              },
                        
			              /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname uiGetItemDetails
							 *@description Opens product details screen.
							 *@param {String} itemId - one of the unique identifier of a product.  
							 *@param {String} uom - one of the unique identifier of a product.  
						  */
			              
			            uiGetItemDetails:function(itemId,uom){
			  				if(!iscCore.isVoid(itemId)){
			  					var pageInput = {
			  							input: itemId
			  					};
			  			        iscWizard.gotoCustomPage('addItems',pageInput,{});
			  				}
			  		    },
			  		  
			  		  /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiAddOrEditAddress
						 *@description Opens Address capture popup for Adding or Editing Order/OrderLine shippping address.
						 *@param {String} mode - Specifies whether the address needs to be added or edited.
						 *@param {Object} orderlineModel - orderLine data as JSON object.    
					  */
			  		    
			  		  uiAddOrEditAddress : function(mode,orderlineModel){
			 			   var that = this;
			 			   var popupInput = {};
			 			   popupInput.Mode = mode;
			 			  
			 			   popupInput.Context = "showDefaultshipto";
			 			   if(mode == "Edit"){
			 				  if(!iscCore.isVoid(orderlineModel.PersonInfoShipTo)){
			 					 popupInput.PersonInfo = angular.copy(orderlineModel.PersonInfoShipTo);     
			 				  }else{
			 					 popupInput.PersonInfo = angular.copy(this.model.getCompleteOrderDetails.Order.PersonInfoShipTo);   
			 				  }
			 			   }
			 			   
			 			   if(!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo){
			 				  popupInput.hideShipaddress = true;
			 			   }else {
			 				  if(mode=='Add'){
			 					 popupInput.PersonInfo ={};
			 				  }
			 					 popupInput.PersonInfo.IsDefaultShippingAddress='N';
			 			   }
			 			  
			 			   var addressPopUpInput = {
			 					 modalInput: function(){
			          				return popupInput;
			          			}   
			 					   
			 			   };
			 			   
			 			 iscModal.openModal('store.views.common.orderaddress.orderaddresspopup',addressPopUpInput,{})
								.then(function(callBackData){
			          			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
			          				that.onAddressAdditionOrEdit.call(that,callBackData.data,orderlineModel);
			          			}		            			
			     				},
								angular.noop);
			 		     },
			 		  
			 		    /**
							 *@iscdoc method
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname onAddressAdditionOrEdit
							 *@description Call back handler of address capture popup,which calls getItemAvailabilityForStore api for captured address to check the availability of the product.
							 *@param {Object} data - data captured in address capture popup.
							 *@param {Object} orderlineModel - orderLine data as JSON object.    
						  */
			 		     
			 		  onAddressAdditionOrEdit : function(data,orderlineModel){
			 			    
			 			    var personInfo = angular.copy(data);
			 			    
			 			   delete personInfo.IsDefaultShippingAddress;
			 			   delete personInfo.IsDefaultBillingAddress;
			 			   
			 			    var modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
				  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
				  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.OrderedQty = orderlineModel.OrderLineTranQuantity.OrderedQty;
				  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = {};
				  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = personInfo;
				  			
				  			/* check if the order has ship to address*/
				  			if((!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo) || (data.IsDefaultShippingAddress === 'Y')){
				  				modifyFulfillmentOptionsInput.Order.PersonInfoShipTo  =  personInfo;
				  				if(!this.model.getCompleteOrderDetails.Order.BillToID){
				  				modifyFulfillmentOptionsInput.Order.CustomerFirstName =  personInfo.FirstName;
				      	        modifyFulfillmentOptionsInput.Order.CustomerLastName  =  personInfo.LastName;
				      	        modifyFulfillmentOptionsInput.Order.CustomerEMailID   =  personInfo.EMailID;
				      	        modifyFulfillmentOptionsInput.Order.CustomerZipCode   =  personInfo.ZipCode;
				  				}
				  			}
			               /* getItemAvailabilityForStore API Input*/
				  			
				  			var getItemAvailabilityForStoreInput = this.getItemAvailabilityForStoreApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel);
				  			getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine[0].ShipToAddress = personInfo;
				  			getItemAvailabilityForStoreInput.Promise.modifyFulfillmentOptionsInput =modifyFulfillmentOptionsInput ;
				  			iscMashup.callMashup(this,"viewcart_getItemAvailabilityForStore",getItemAvailabilityForStoreInput,{}).then(this.handleShippingLineAddress.bind(this),angular.noop);
				  			
			 		  },
			 		   
			 		 /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiIdentifyCustomerPopup
						 *@description Opens identify customer popup.
						 *@param {Object} orderlineModel - orderLine data as JSON object.    
					  */
			 		  
			  		   uiIdentifyCustomerPopup:function(orderlineModel){
			  			var customerInput = {};
			  			var that = this;
			  			customerInput.Mode = "Identify";
			  			var customerPopupInput = {
			          			modalInput: function(){
			          				return customerInput;
			          			}
			          	};
			  			
						iscModal.openModal('store.views.common.customer.customerpopup',customerPopupInput,{})
								.then(function(callBackData){
			        			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
			        				that.onCustomerIdentification.call(that,callBackData.data);
			        			}		            			
			   				},
								angular.noop);	
			  		  },
			  		  
			  		 /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname onCustomerIdentification
						 *@description call back handler of identify customer popup.It calls modifyFulfillmentOptions to save the customer information on order.
						 *@param {Object} customerInfo - data passed from identify customer popup .    
					  */
			  		  
			          onCustomerIdentification: function(customerInfo){
			        	  var customerModel = customerInfo.customerModel;
			        	  
			        	   var modifyFulfillmentOptionsInput  = {};
			          	   modifyFulfillmentOptionsInput.Order ={};
			          	   modifyFulfillmentOptionsInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
			          	   modifyFulfillmentOptionsInput.Order.BillToID = customerModel.Customer.CustomerID; 
			          	   if(!iscCore.isVoid(customerInfo.addressSelected)){
			          		 modifyFulfillmentOptionsInput.Order.PersonInfoShipTo={};
				  			 modifyFulfillmentOptionsInput.Order.PersonInfoShipTo = angular.copy(customerInfo.addressSelected.PersonInfo);
			          		 if(customerInfo.addressSelected.IsDefaultBillTo === 'Y'){
				          		 modifyFulfillmentOptionsInput.Order.PersonInfoBillTo={};
					  			 modifyFulfillmentOptionsInput.Order.PersonInfoBillTo = angular.copy(customerInfo.addressSelected.PersonInfo);
			          		 }
			          	   }
			          	   
			          	   
			      	       if(customerModel.Customer.CustomerType === '02' || (customerModel.Customer.CustomerContactList &&  customerModel.Customer.CustomerContactList.CustomerContact && customerModel.Customer.CustomerContactList.CustomerContact.length === 1)){
			  				modifyFulfillmentOptionsInput.Order.CustomerContactID =  customerModel.Customer.CustomerContactList.CustomerContact[0].CustomerContactID;
			  				modifyFulfillmentOptionsInput.Order.CustomerFirstName =  customerModel.Customer.CustomerContactList.CustomerContact[0].FirstName;
			     	    	modifyFulfillmentOptionsInput.Order.CustomerLastName  =  customerModel.Customer.CustomerContactList.CustomerContact[0].LastName;
			     	    	modifyFulfillmentOptionsInput.Order.CustomerEMailID   =  customerModel.Customer.CustomerContactList.CustomerContact[0].EmailID;
			     	    	
			     	    	if(!iscCore.isVoid(customerInfo.addressSelected)){
			     	    		modifyFulfillmentOptionsInput.Order.CustomerZipCode   =  customerInfo.addressSelected.PersonInfo.ZipCode;
				          	   }
			      	       }
			          	 
			      	      iscMashup.callMashup(this,"viewcart_customer_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleModifyFulfillmentOptionsForCustomer.bind(this),angular.noop);  
			          },
			          
			          /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiEditAddressInCustomerPanel
						 *@description Opens address capture popup when Edit link is clicked in customer panel 
						 *@param {Object} customerInfo - data passed from identify customer popup .    
					  */
			          
			          uiEditAddressInCustomerPanel: function(){
			   		      var that = this;
			   		      var popupInput = {};
			   		      popupInput.Mode = 'Edit';
			   			  popupInput.PersonInfo = angular.copy(this.model.getCompleteOrderDetails.Order.PersonInfoShipTo);   
			   			  popupInput.hideShipaddress = true;
			   		      var addressPopUpInput = {
			   				 modalInput: function(){
			        				return popupInput;
			        			}   
			   		   };
			   		   
			   		  iscModal.openModal('store.views.common.orderaddress.orderaddresspopup',addressPopUpInput,{})
			   				.then(function(callBackData){
			        			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
			        				that.handleEditAddressInCustomerPanel.call(that,callBackData.data);
			        			}		            			
			   				},
			   				angular.noop);
			     		},
			     		
			     		 /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname handleEditAddressInCustomerPanel
						 *@description Call back handler for order address popup opened in customer panel.this method calls modifyFulfillmentOptions api is called to save the new address.
						 *@param {Object} newAddress - data passed from identify order address popup .    
					     */
			     		
			     		handleEditAddressInCustomerPanel: function(newAddress){
			     		   
			               var personInfo = angular.copy(newAddress);
			 			   delete personInfo.IsDefaultShippingAddress;
			 			    
			     		   var modifyFulfillmentOptionsInput  = {};
			           	   modifyFulfillmentOptionsInput.Order ={};
			           	   modifyFulfillmentOptionsInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
			           	   modifyFulfillmentOptionsInput.Order.PersonInfoShipTo={}
			           	   modifyFulfillmentOptionsInput.Order.PersonInfoShipTo = personInfo;
			           	  
			           	   if(!this.model.getCompleteOrderDetails.Order.BillToID){
			     	       modifyFulfillmentOptionsInput.Order.CustomerFirstName =   personInfo.FirstName;
			     	       modifyFulfillmentOptionsInput.Order.CustomerLastName  =   personInfo.LastName;
			     	       modifyFulfillmentOptionsInput.Order.CustomerEMailID   =   personInfo.EMailID;
			     	       modifyFulfillmentOptionsInput.Order.CustomerZipCode   =   personInfo.ZipCode;
			           	   }
			            	  iscMashup.callMashup(this,"viewcart_customer_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleModifyFulfillmentOptionsForCustomer.bind(this),angular.noop);  
			     		},
			     		
			     		 /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname uiOpenOverridePriceModal
						 *@description onclick handler function for override price icon
						 *@param {Object} orderlineModel - orderLine data as JSON object.    
					     */	
			  		  uiOpenOverridePriceModal: function(orderlineModel){
			          	var that = this;
			          	var ovpInput = {};
			          	ovpInput.price = {};
			          	ovpInput.price.listPrice =  orderlineModel.LinePriceInfo.ListPrice;
			          	ovpInput.price.unitPrice =  orderlineModel.LinePriceInfo.UnitPrice;
			          	ovpInput.price.Currency = this.model.getCompleteOrderDetails.Order.PriceInfo.Currency;
			          	
			          	var priceOverrideInput = {
			          			modalInput: function(){
			          				return ovpInput;
			          			}
			          	};
			          	
			          	iscModal.openModal('store.views.common.priceoverride.priceoverride',priceOverrideInput,{})
								.then(function(callBackData){
			          			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
			          				that.onPriceOverride.call(that,callBackData.data,orderlineModel);
			          			}		            			
			     				},
								angular.noop);	
			          },
			          
			          /**
			           * @iscdoc method
			           * @viewname store.views.order.cart-details.cart-details
			           * @methodname onPriceOverride
			           * @description callback handler function for price override popup.saves the overridden price against item.
			           *@param {Object} data - data sent from override price popup.
					   *@param {Object} orderlineModel - orderLine data as JSON object.  
			           */
			          onPriceOverride: function(data,orderlineModel){
			  			var modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
			  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo = {};
			  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo.ListPrice = orderlineModel.LinePriceInfo.ListPrice;
			  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo.UnitPrice = data.newprice;
			  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo.IsPriceLocked = 'Y';
			         	iscOrder.addPriceOverrideDefaultNote(modifyFulfillmentOptionsInput,data.reason);
			         	iscMashup.callMashup(this,"viewcart_ovp_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handlePriceOverrideApiCall.bind(this),angular.noop);
			          },
			          
			          /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname handlePriceOverrideApiCall
						 *@description Call back handler of modifyFulfillmentOptions api when unit price of product is overridden.
						 *@param {Object} data - modifyFulfillmentOptions api output. 
						 */
			          
			          handlePriceOverrideApiCall : function(data){
			        	  var apiOutput = iscMashup.getMashupOutput(data,"viewcart_ovp_modifyFulfillmentOptions");  
                          this.handleModifyFulfillmentOptionsApiOutput(apiOutput);
			          },
			          
			          /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname handleModifyFulfillmentOptionsForCustomer
						 *@description Call back handler of modifyFulfillmentOptions api when customer is identified or order address is changed in customer panel.
						 *@param {Object} data - modifyFulfillmentOptions api output.
						 */
			          
			          handleModifyFulfillmentOptionsForCustomer : function(data){
			        	  var apiOutput = iscMashup.getMashupOutput(data,"viewcart_customer_modifyFulfillmentOptions");  
                          this.handleModifyFulfillmentOptionsApiOutput(apiOutput);
                          
                          $timeout(function(){
				 				iscMashup.callMashup(this,"vc_getOrderFulfillmentDetails",{"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey}},{showMask:false}).then(this.handleAvailabilityOfCart.bind(this),angular.noop);
			                    }.bind(this),0);
			          },
			          
			          /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname handleModifyFulfillmentOptionsOutput
						 *@description Call back handler of modifyFulfillmentOptions api when coupon is removed,store is selected for a pickup line and delivery method is changed.
						 *@param {Object} data - modifyFulfillmentOptions api output.
						 */
			          
			          handleModifyFulfillmentOptionsOutput : function(data){
			        	  var apiOutput = iscMashup.getMashupOutput(data,"viewcart_modifyFulfillmentOptions");  
                          this.handleModifyFulfillmentOptionsApiOutput(apiOutput);
                          this.model.couponInput.couponID ="";
			          },
			          
			          /**
						 *@iscdoc method
						 *@viewname store.views.order.cart-details.cart-details
						 *@methodname handleModifyFulfillmentOptionsApiOutput
						 *@description Utility which updates orderLineList,getCompleteOrderDetails models when modifyFulfillmentOptions api is called.
						 *@param {Object} apiOutput - modifyFulfillmentOptions api output.
						 */
			          
				  	        handleModifyFulfillmentOptionsApiOutput : function (apiOutput){
				  	        	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
		  	    			    this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
				  	        },
				  	          
				  	      /**
							 *@iscdoc method
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname handleOrderLineQtyChange
							 *@description Call back handler of getItemAvailabilityForStore api.
							 *@param {Object} data - getItemAvailabilityForStore api output.
							 */
				  	        
				  	        handleOrderLineQtyChange : function(data){
				  	        	this.handleItemAvailabilityAndOrderModification(data);
								var alertMessage = iscI18n.translate("viewcartdetails.aria_updateOrderLineQtySuccessMessage");
								iscModal.showA11YAlertMessage(alertMessage);
				  	        },
				  	      
				  	      /**
							 *@iscdoc method
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname handleShippingLineAddress
							 *@description Call back handler of getItemAvailabilityForStore api when shipping line is address is added/modified.
							 *@param {Object} data - getItemAvailabilityForStore api output.
							 */
				  	        
				  	      handleShippingLineAddress : function(data){
				  	    	    
				  	     	this.handleItemAvailabilityAndOrderModification(data);  
				  	      $timeout(function(){
				 				iscMashup.callMashup(this,"vc_getOrderFulfillmentDetails",{"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey}},{showMask:false}).then(this.handleAvailabilityOfCart.bind(this),angular.noop);
			                    }.bind(this),0);
				  	      },
				  	      
				  	      /**
							 *@iscdoc method
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname handleItemAvailabilityAndOrderModification
							 *@description Call back handler of getItemAvailabilityForStore api.
							 *@param {Object} data - getItemAvailabilityForStore api output.
							 */
				  	        
				  	        handleItemAvailabilityAndOrderModification : function(data){
				  	        	
				  	        	var apiOutput = iscMashup.getMashupOutput(data,"viewcart_getItemAvailabilityForStore");
				 			    if(!iscCore.isVoid(apiOutput.Promise)){
				 			    	if(apiOutput.Promise.IsItemQtyAvailable === "N"){
				 			    		iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.OrderLineQtyChangeError'));
				 			    		/* reset the quantity field */
				 			    		var orderLineKey = apiOutput.Promise.OrderLineKey;
				 			    		var orderLineList = []; 
				 			    		orderLineList = this.model.orderLineList.OrderLineList.OrderLine;
			 	  	        		   for(var j=0; j<orderLineList.length; j++){
			 	        					
			 	        						if(orderLineList[j].OrderLineKey == orderLineKey){
			 	        							orderLineList[j].OrderLineTranQuantity.OrderedQty = orderLineList[j].OrderedQty;
			 	        							orderLineList[j].showQtyUpdate ='N';
			 	        							break;
			 	        						}
			 	  	        	 	   }
				 			    	}
				 			    }else{
				 			    	
				 			    	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
				 			    	this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
				 			    	if(iscCore.isVoid(this.model.getCompleteOrderDetails.PromotionsApplied)){
				 			    		this.ui.showCouponScanField = false;
				 			    	}
				 			    	$scope.cartDetails.$setPristine();
				 			    	
				 			    	}
				  	        
				  	        },
				  	        
				  	      /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname uiOpenStoreSearch
							 *@description onclick handler function for store address link.It opens Store search popup.
							 *@param {Object} orderlineModel - orderLine data as JSON object.    
						     */	
				            uiOpenStoreSearch: function(orderlineModel){
				            	var that = this;
				            	var currentStoreAddress = iscAppContext.getFromContext('storeAddress').ShipNodePersonInfo;

				            	var storeSearchModalInput = {
				            			modalInput: function(){
				            				return {
				            				inputData : {callingMode : "CARTDETAILS",orderLine : orderlineModel}		
				            						};
				            								}
				            						};
				            	
				            	iscModal.openModal('store.views.common.storesearch.storesearch',storeSearchModalInput,{})
				            			 .then(function(callBackData){
				            		that.afterStoreSelection.call(that,callBackData.data,orderlineModel);
									},angular.noop);
				            },
				            
				            uiValidateQuantity : function(validationResponseObj, angularErrorObject, modelValue, viewValue){
				            	
				            	/* check if the DataType Validation is successful */
				            	
				            	if(!iscCore.isVoid(angularErrorObject) && angularErrorObject.iscDatatypeValidator)
				            		return validationResponseObj;
				            	else
				            	var isQty_a_Number = !isNaN(viewValue);
				            	if(!iscCore.isBooleanTrue(isQty_a_Number)){
				            		validationResponseObj.booleanResponse = !isNaN(viewValue);
					            	validationResponseObj.errorMesssage = iscI18n.translate("globals.ERROR_invalid_input");
		            			}
				            	
				            	return validationResponseObj;
				            },
				            
				            
				            /**
					           * @iscdoc method
					           * @viewname store.views.order.cart-details.cart-details
					           * @methodname afterStoreSelection
					           * @description Callback handler function of store selection popup. Sets ship node for pickup lines
					           * @param {Object} data - data sent from override store selection popup.
							   * @param {Object} orderlineModel - orderLine data as JSON object.  
					           */
				            afterStoreSelection: function(data,orderlineModel){
					  			var  modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
			    	  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ShipNode = data.selectedStore.ShipNode;
			    	  			iscMashup.callMashup(this,"viewcart_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleModifyFulfillmentOptionsOutput.bind(this),angular.noop);
				            },
				            
				            /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.cart-details.cart-details
							 *@methodname uiChangeDeliveryMethod
							 *@description onclick handler function for change delivery method icon.It opens fulfillment options popup.
							 *@param {Object} orderlineModel - orderLine data as JSON object.    
						     */	
				            
				            uiChangeDeliveryMethod : function(orderlineModel){
				            	
				            	var that = this;
				            	var changeDeliveryModalInput = {
				            					modalInput: function ()
									 				{
									  				return {	
									  					inputData : {
									  							OrderHeaderKey : that.model.getCompleteOrderDetails.Order.OrderHeaderKey,
									  							orderLine : orderlineModel,
									  							orderPersonInfoShipTo : that.model.getCompleteOrderDetails.Order.PersonInfoShipTo
									  								}
								  						};
					  								}
				            					};
				            	
				            	iscModal.openModal('store.views.common.fulfillment.fulfillmentoptions',changeDeliveryModalInput,{})
				            			 .then(function(callBackData){
				            		that.handleDeliveryMethodChange.call(that,callBackData.data,orderlineModel);
									},angular.noop);
				            	
				            },
				            
				            


				            /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.comments.comments
							 *@methodname uiPostComment
							 *@description Handles the scenario when 'post comment' button is clicked on the modal.
							 */
							uiAddComments : function(){
								
								var that = this;
								var orderModel = angular.copy(this.model.getCompleteOrderDetails);   
								var commentsModalInput = {
						       			modalInput: function(){
						       				return orderModel;
						       			}
						       	};
								
								iscModal.openModal('store.views.order.comments.comments',commentsModalInput,{})
		            			 .then(function(callBackData){
		            				 that.model.getCompleteOrderDetails.Order.Notes.NumberOfNotes = callBackData.NoteList.TotalNumberOfRecords;
							},angular.noop);
								
								
							
								
								
							},	
				            /**
					           * @iscdoc method
					           * @viewname store.views.order.cart-details.cart-details
					           * @methodname handleDeliveryMethodChange
					           * @description Callback handler function of fulfillmentoptions popup. 
					           * @param {Object} data - data sent from override fulfillmentoptions popup.
							   * @param {Object} orderlineModel - orderLine data as JSON object.  
					           */
				            handleDeliveryMethodChange : function(data,orderlineModel){
				            	
				            	var newDelMethod = data.newDelMethod
					  			var  modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
			    	  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].DeliveryMethod = newDelMethod;
			    	  			
				            	if(newDelMethod == "PICK"){
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ShipNode = data.selectedStore.ShipNode;
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.SettledQuantity = "0";
				            		if(!iscCore.isVoid(data.selectedStore.Availability.AvailableDate)){
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ReqShipDate = data.selectedStore.Availability.AvailableDate;
				    	  			}
				            	}else if (newDelMethod == "SHP"){
				            		/* If charge shipping lines at store rule is not turned on, set SettledQuantity as 0 */
				            		if(this.model.getRuleDetails_ChargeShipLines && this.model.getRuleDetails_ChargeShipLines.Rules && this.model.getRuleDetails_ChargeShipLines.Rules.RuleSetValue == 'N'){
		            					modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.SettledQuantity = "0";
		            				}
				            		if(!iscCore.isVoid(data.EarliestShipDate)){
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].EarliestShipDate = data.EarliestShipDate;
				            		}
				            		
				            		if(!iscCore.isVoid(data.personInfoShipTo)){
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = {};
				            	
				            		
				            		/* check if the order has ship to address*/
				    	  			if((!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo) || (data.personInfoShipTo.IsDefaultShippingAddress === 'Y')){
				    	  				modifyFulfillmentOptionsInput.Order.PersonInfoShipTo  =  data.personInfoShipTo;
				    	  				if(!this.model.getCompleteOrderDetails.Order.BillToID){
				    	  				modifyFulfillmentOptionsInput.Order.CustomerFirstName =  data.personInfoShipTo.FirstName;
				    	      	        modifyFulfillmentOptionsInput.Order.CustomerLastName  =  data.personInfoShipTo.LastName;
				    	      	        modifyFulfillmentOptionsInput.Order.CustomerEMailID   =  data.personInfoShipTo.EMailID;
				    	      	        modifyFulfillmentOptionsInput.Order.CustomerZipCode   =  data.personInfoShipTo.ZipCode;
				    	  				}
				    	  			}
				    	  			
				            		 delete data.personInfoShipTo.IsDefaultShippingAddress;
				       			     delete data.personInfoShipTo.IsDefaultBillingAddress;
				      			    
				    	  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = data.personInfoShipTo;
				    	  			
				    	  			/* check if the order has ship to address*/
				    	  			if(!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo){
				    	  				modifyFulfillmentOptionsInput.Order.PersonInfoShipTo  =  data.personInfoShipTo;
				    	  			}
				            		}
				            		if(!iscCore.isVoid(data.selectedCarrier)){
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].CarrierServiceCode =data.selectedCarrier.CarrierServiceCode;
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates = {};
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate = [];
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[0] = {};
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[0].CommittedDate = data.selectedCarrier.DeliveryStartDate;
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[0].DateTypeId ="MIN_DELIVERY";
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[1] = {};
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[1].CommittedDate = data.selectedCarrier.DeliveryEndDate;
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[1].DateTypeId ="MAX_DELIVERY";
				            		}
				            		
				            	}else if(newDelMethod == "CARRY"){
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ShipNode = iscAppContext.getFromContext("storeName");
				            		if(orderlineModel.OrderLineTranQuantity.SettledQuantity === "0"){
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.SettledQuantity = "0";
				            		}
				            	}
				            	/* Stamp MarkForKey @ OrderLine If PersonInfoMarkFor element is present*/
				            	if((!iscCore.isVoid(orderlineModel.PersonInfoMarkFor)) && (!iscCore.isVoid(orderlineModel.PersonInfoMarkFor.PersonInfoKey))){
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].MarkForKey = orderlineModel.PersonInfoMarkFor.PersonInfoKey;
				            	}
				            	iscMashup.callMashup(this,"viewcart_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleModifyFulfillmentOptionsOutput.bind(this),angular.noop);
				            }
				    });
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.order.cancel.cancelorder
 *@package store.views.order.cancel
 *@class cancelorder
 *@description Controller used for handling cancelorder popup 
 *  
 */


angular.module('store').controller('store.views.order.comments.comments',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscModal','iscI18n',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscModal,iscI18n) {
		
	iscScreen.initializeModalScreen($scope,{
	
		model:{
			   /**
				*@iscdoc model
				*@viewname store.views.order.comments.comments
				*@name noteList
				*@description Holds the output data of getNoteList api. This is used to list the comments in the UI
				*/
				"noteList":{}
	  		},

	  		mashupRefs : [
	  		
	  				{
			  		  /**
	  				   *@iscdoc mashup
	  		   			*@viewname store.views.order.comments.comments
	  		   			*@mashupid store.views.order.comments.getNoteList
			   			*@mashuprefid getNoteList
			   			*@modelname noteList
	  		   			*@description Fetches notes for a order
	  		   			*/
	  		  		
						mashupRefId: 'getNoteList',
						mashupId: 'store.views.order.comments.getNoteList',
						modelName : 'noteList'								
					},
					
					{
						/**
		  				   *@iscdoc mashup
		  		   			*@viewname store.views.order.comments.comments
		  		   			*@mashupid comments_changeOrder
				   			*@mashuprefid changeOrder
		  		   			*@description adds a note to a order
		  		   			*/
						
						mashupRefId: 'changeOrder',
						mashupId: 'store.views.order.comments.changeOrder'
						
					}
					
				],
				
				
				ui:{
					
				},
				
				/**
				 *@iscdoc viewinit
				 *@viewname store.views.order.comments.comments
				 *@method initialize
				 *@description Initializes the order comments modal by calling the getCancgetNoteList mashup.
				 */
				initialize : function(){
					var getNoteListInput = {};
					getNoteListInput.Note = {};
					getNoteListInput.Note.TableKey = modalInput.Order.OrderHeaderKey;
					iscMashup.callMashup(this,'getNoteList',getNoteListInput,{});
				},
				
				/**
				 *@iscdoc uimethod
				 *@viewname store.views.order.comments.comments
				 *@methodname uiClose
				 *@description Handles the scenario when 'Cancel' button is clicked on the modal.
				 */
				uiClose : function () {
					$uibModalInstance.close(this.model.noteList);
				},
				
				/**
				 *@iscdoc uimethod
				 *@viewname store.views.order.comments.comments
				 *@methodname uiPostComment
				 *@description Handles the scenario when 'post comment' button is clicked on the modal.
				 */
				uiPostComment : function(noteAPIInput){
					var changeOrderInput = {};
					changeOrderInput.Order = {};
					changeOrderInput.Order.OrderHeaderKey = modalInput.Order.OrderHeaderKey;
					changeOrderInput.Order.Notes = noteAPIInput ;
					var mashupArray = [];
					mashupArray.push(iscMashup.getMashupRefObj(this,'changeOrder',changeOrderInput));
					mashupArray.push(iscMashup.getMashupRefObj(this,'getNoteList', {"Note" : { "TableKey" : modalInput.Order.OrderHeaderKey}}));
					iscMashup.callMashups(this,mashupArray,{}).then(this.handleChangeOrder.bind(this),this.changeOrderAPIErrorCallBack.bind(this));
				},
				
				
				/**
				 *@iscdoc method
				 *@viewname store.views.order.comments.comments
				 *@methodname handleChangeOrder
				 *@description call Back handler of changeOrder API call.
				 */
				
				handleChangeOrder : function(data){
					$scope.$broadcast('clearNoteFields');
				},
				
				
				/**
				 *@iscdoc method
				 *@viewname store.views.order.comments.comments
				 *@methodname changeOrderAPIErrorCallBack
				 *@description error call Back handler of changeOrder API call.
				 */
				
				changeOrderAPIErrorCallBack: function(response) {
					var errorMsg = response.Errors.Error[0].ErrorDescription;
		  			var errorCode = response.Errors.Error[0].ErrorCode;
		  			if(iscI18n.hasKey("apierror."+errorCode)){
		  				errorMsg = iscI18n.translate("apierror."+errorCode);
		  				iscModal.showErrorMessage(errorMsg,null,null);				
		  			}
		  			else{
		  				iscModal.showErrorMessage(errorMsg,null,null);
		  			}
					$uibModalInstance.dismiss(response);
				}
				
	  		  
	}
	
	);
	
	}
]);

	
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
 /**
 *@iscdoc viewinfo
 *@viewname store.views.order.item-search.item-search
 *@package store.views.order.item-search
 *@class item-search
 *@description Provides the capability to search for products and view search results.
 *
 */
angular.module('store').controller('store.views.order.item-search.item-search',
  ['$animate','$scope','$rootScope','iscScreen','iscWizard','iscState','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext',
	function($animate,$scope,$rootScope,iscScreen,iscWizard,iscState,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext) {
		
		iscWizard.initializeWizardPage($scope,{
            model:{
                /**
                 *@iscdoc model
                 *@viewname store.views.order.item-search.item-search
                 *@name searchProductsResult
                 *@description Stores the searchCatalogIndex mashup output.
                 */
                "searchProductsResult":{},
                /**
                 *@iscdoc model
                 *@viewname store.views.order.item-search.item-search
                 *@name searchCatalogIndexInput
                 *@description searchCatalogIndex mashup input object.
                 */
                "searchCatalogIndexInput":{},
                /**
                 *@iscdoc model
                 *@viewname store.views.order.item-search.item-search
                 *@name orderDetails
                 *@description Stores the getCompleteOrderDetails mashup output.
                 */
                "orderDetails":{},
                "customerDetails":{}
            },
            mashupRefs:[{
                /**
                *@iscdoc mashup
                *@viewname store.views.order.item-search.item-search
                *@mashupid itemSearch_searchCatalogIndex
                *@mashuprefid searchProducts
                *@description Mashup used to search for products.
                */
                    mashupRefId: 'searchProducts',
                    mashupId: 'itemSearch_searchCatalogIndex'

                },
                {
                /**
                *@iscdoc mashup
                *@viewname store.views.order.item-search.item-search
                *@mashupid addItems_getCompleteOrderDetails
                *@mashuprefid getCompleteOrderDetails
                *@modelname orderDetails
                *@description Mashup used to get no of products in order if order is created.
                */
                    mashupRefId: 'getCompleteOrderDetails',
                    mashupId: 'itemSearch_getCompleteOrderDetails',
                    modelName : 'orderDetails'
                }],
            ui:{
               /**
                *@iscdoc uiattr
                *@viewname store.views.order.item-search.item-search
                *@property {Integer}  productSearchPageNo - Default page number while searching for products.
                */
                productSearchPageNo: "1",
                
                /**
                *@iscdoc uiattr
                *@viewname store.views.order.item-search.item-search
                *@property {String}  searchContext - Context of item search.
                */
                searchContext: "",
                
                /**
                *@iscdoc uiattr
                *@viewname store.views.order.item-search.item-search
                *@property {String}  searchInput - Product search input value entered by user,blank by default.
                */
                searchInput:"",
                /**
                *@iscdoc uiattr
                *@viewname store.views.order.item-search.item-search
                *@property {Integer}  orderTotalQty - Total number of products present in the order.
                */
                orderTotalQty: '0',
                /**
                *@iscdoc uiattr
                *@viewname store.views.order.item-search.item-search
                *@property {String}  pageSize - Default number of records to be shown in view during product search.
                */
                pageSize: '',
                /**
                *@iscdoc uiattr
                *@viewname store.views.order.item-search.item-search
                *@property {String}  noOfSearchResults - Displays the number of products shown in view.
                */
                noOfSearchResults: 0,
                /**
                *@iscdoc uiattr
                *@viewname store.views.order.item-search.item-search
                *@property {Boolean}  searchInProgress - True is mashup call is still in progress,false otherwise.
                */
                searchInProgress: false,
                /**
                *@iscdoc uiattr
                *@viewname store.views.order.item-search.item-search
                *@property {Boolean}  focusScanField - True if focus is to be set on search field,false otherwise.
                */
                focusScanField : true,
                 /**
                *@property {String}  productSearchText - Contains product search text
                */
                productSearchText:"",
                /**
                 * @property {Boolean}  showMiniCart - Toggles the display on mini cart 
                 */
                showMiniCart : false,
                /**
                 * @property {Boolean}  hideActionsPanel - Toggles the display of actions like Close, Checkout.
                 */
                hideActionsPanel : false
                
                
            },
            /**
             *@iscdoc viewinit
             *@viewname store.views.order.item-search.item-search
             *@description Searches the product using the input passed to the view, gets order details if order is already created.
             */
            initialize: function(){
            	
            	//console.log(iscStateParams);
            	
                  this.ui.pageSize = iscAppContext.getFromContext("defaultPageSize");
                  this.ui.showItemSearch = this.ui.showMiniCart = true;
                  var pageInput = iscWizard.getWizardPageInput();
                  var pageOptions = iscWizard.getWizardPageOptions();
                  if(!iscCore.isVoid(pageOptions) && !iscCore.isVoid(pageOptions.flowName) && pageOptions.flowName == "CLIENTELING") {
                	  	this.ui.hideActionsPanel = true;
                  }
                  var operation = pageInput.operation;
                  var inputData = pageInput.input;
                  var openBlankPage = pageInput.openBlankPage;
                  
                  this.model.customerDetails = iscWizard.getWizardModel("customerModel");
                
                  var orderDetails = iscWizard.getWizardModel("orderModel");
                  
                    var searchContext = pageInput.searchContext;
	            	if(!iscCore.isVoid(searchContext) && searchContext==='scanInStore'){
	            		$rootScope.$showBackButtonForStates = false;
	            		this.ui.searchContext = 'scanInStore';
	            	}
	            	
                  if(!iscCore.isVoid(orderDetails) && !iscCore.isVoid(orderDetails.Order.OrderHeaderKey)){
                           var getOrderDetailsInput = {
                                Order:{
                                    OrderHeaderKey: orderDetails.Order.OrderHeaderKey
                                }
                           };
                           iscMashup.callMashup(this,'getCompleteOrderDetails',getOrderDetailsInput,{}).then(function(){
                               orderDetails = this.model.orderDetails;
                               iscWizard.setWizardModel("orderModel",this.model.orderDetails);
                               this.ui.orderTotalQty = orderDetails.Order.OrderLines.TotalNumberOfRecords;
                           }.bind(this),angular.noop);
                   }
                   if(!iscCore.isVoid(pageInput.CatalogSearch)){
                           this.ui.productSearchPageNo = 1;
                           if(!iscCore.isVoid(pageInput.SearchText)){
                               // set the input model,which will be used for continuous scroll.
                               this.model.searchCatalogIndexInput = {
                                   CatalogSearch:{
                                       Terms:{
                                           Term:{
                                               Value: pageInput.SearchText
                                           }
                                       }
                                   }
                               };
                           }
                           this.handleSearchCatalogIndex(pageInput);
                   }
                   else{
                       //call searchCatalogIndex api and show results.
                	   if(!openBlankPage){
                		   this.searchProduct('search',inputData);
                	   }else{
                		   iscWizard.gotoCustomPage('addItems',{openBlankPage :true},{removeCurrent:true});
                	   }
                      
                   }
            },
         /**
         *@iscdoc uimethod
         *@viewname store.views.order.item-search.item-search
         *@methodname uiOpenItemDetails
         *@description Onclick handler for scan icon in search product input box.Opens product details view using the product identifier.
         *param {String} itemId - Product unique identifier.
         */
         uiOpenItemDetails:function(itemId){
        	 
            if(!iscCore.isVoid(itemId)){
            	
            	  var wizardInput = iscWizard.getWizardPageInput();
                 
            	  var pageInput = {
                			input: itemId
                	  };
                  
                    var searchContext = wizardInput.searchContext;
	            	if(!iscCore.isVoid(searchContext) && searchContext==='scanInStore'){
	            		pageInput.searchContext = 'scanInStore';
	            		 iscWizard.gotoCustomPage('addItems',pageInput,{removeCurrent:true,wizardPageCssClass:"fullscreen-modal"});
	            		 
	            	}
	            	else{
	            		iscWizard.gotoCustomPage('addItems',pageInput,{});
	            	}	
                 
            }
            else{
                   iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
            }
        },
        /**
         *@iscdoc uimethod
         *@viewname store.views.order.item-search.item-search
         *@methodname uiHandleCheckout
         *@description Onclick handler for checkout button in view.Opens cart details page if order is already created.
         */
        uiHandleCheckout:function(){
           iscWizard.gotoCustomPage('cartDetails',{},{});
        },
        /**
         *@iscdoc uimethod
         *@viewname store.views.order.item-search.item-search
         *@methodname uiCancel
         *@description Cancel button onclick handler for wizard.Shows confirmation message,if yes then closes the wizard.
         */
        uiCancel : function(){
        	
        	if(this.ui.searchContext == 'scanInStore'){
        	
        		iscWizard.gotoPreviousPage(true);
        	}
        	else{
        		  var confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
                  if(this.ui.orderTotalQty < 1){
                      confirmationMsg = iscI18n.translate('addItems.WarningMessage_Cancel');
                  }
                  iscModal.showConfirmationMessage(confirmationMsg).then(
                      function(callBackAction){
                          //
                          if(callBackAction === 'YES'){
                              iscWizard.closeWizard();
                          }
                      },
                      function(callBackAction){
                          //      Do Nothing
                          
                      });
        	}
          
            //iscWizard.closeWizard();
        },
        /**
         *@iscdoc uimethod
         *@viewname store.views.order.item-search.item-search
         *@methodname uiOpenProductSearch
         *@description Onclick handler function for search icon in scan field.Opens dirty popup if screen is dirty
         * and based on action selected opens search product wizard page or stays in the same screen.
         *@param {String} searchTxt - Input to search for matching products.
         */
        uiOpenProductSearch: function(searchText){
            if(iscCore.isVoid(searchText)){
                iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
            }
            else{
                iscWizard.gotoCustomPage('productSearch',{input: searchText},{});
            }
        },
        /**
         *@iscdoc uimethod
         *@viewname store.views.order.item-search.item-search
         *@methodname uiSearchProductGetNextRecords
         *@description Callback handler function of continuous scroll as user scrolls product search results.
         *@param {String} searchTxt - Input to search for matching products.
         */
        uiSearchProductGetNextRecords: function(){
            if((this.ui.productSearchPageNo + 1) <= this.model.searchProductsResult.CatalogSearch.TotalPages){
                this.ui.productSearchPageNo++;
                this.searchProduct("Next");
            }
        },
       /**
        *@iscdoc uimethod
        *@viewname store.views.order.item-search.item-search
        *@methodname uiNextPageActionValidator
        *@description Determines if mashup call is in progress as user scrolls product search results.
        *@return {Boolean} -True if mashup call is in progress, false otherwise.
        */
        uiNextPageActionValidator: function(){
            if(!this.ui.searchInProgress){
                // mashup call not in progress. call next page handler
                return true;
            }
            else if(this.ui.searchInProgress){
                //mashup call in progress 
                return false;
            }
        },
       /**
        *@iscdoc uimethod
        *@viewname store.views.order.item-search.item-search
        *@methodname getOrderDetails
        *@description Read the order model stored at wizard and updates the total no of products for minicart.
        */
        getOrderDetails: function(){
            var orderModel = iscWizard.getWizardModel('orderModel');
            if(!iscCore.isVoid(orderModel)){
                this.model.orderDetails = orderModel;
                this.ui.orderTotalQty = orderModel.Order.OrderLines.TotalNumberOfRecords;
            }
        },
       /**
        *@iscdoc uimethod
        *@viewname store.views.order.item-search.item-search
        *@methodname searchProduct
        *@description Invokes the searchProduct mashup using input passed and paints the search results.
        *@action {String} action - Attribute used to check if mashup is invoked during continuous scroll.
        *@input {String} input - Search text.
        */
        searchProduct: function(action,input){
            if(action === 'Next'){
                // continuous scroll. hence input will be old search input value.
                input = this.model.searchCatalogIndexInput.CatalogSearch.Terms.Term.Value;
            }
            this.ui.searchInput = input;
            if(!iscCore.isVoid(input)){
                this.setSearchCatalogIndexInput(input);
                if(action === 'newSearch'){
                    this.model.searchProductsResult = {};
                    this.ui.productSearchPageNo = 1;
                }
                this.model.searchCatalogIndexInput.CatalogSearch.PageNumber = this.ui.productSearchPageNo;
                this.ui.searchInProgress = true;
                iscMashup.callMashup(this,"searchProducts",this.model.searchCatalogIndexInput,{}).then(function(data){
                            var output = iscMashup.getMashupOutput(data,'searchProducts');
                            this.handleSearchCatalogIndex(output);
                    }.bind(this),angular.noop);
            }
            else{
                iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
            }
        },
       /**
        *@iscdoc uimethod
        *@viewname store.views.order.item-search.item-search
        *@methodname setSearchCatalogIndexInput
        *@description Updates the search product mashup input object using the input.
        *@input {String} input - Search text.
        */
        setSearchCatalogIndexInput: function(input){
              this.model.searchCatalogIndexInput.CatalogSearch = {
                 PageSize :this.ui.pageSize,
                  Terms:{
                     Term:{
                        Value: input
                     }
                  }
              };
              var orderModel = iscWizard.getWizardModel("orderModel");
              if(!iscCore.isVoid(orderModel)){
                  var customerId = iscCore.getValueFromJsonPath(orderModel,"Order.BillToID");
                  if(!iscCore.isVoid(customerId)){
                      this.model.searchCatalogIndexInput.CatalogSearch.Item = {
                          CustomerInformation:{
                              CustomerID: customerId
                          }
                      };
                  }
              }
            },
           /**
            *@iscdoc uimethod
            *@viewname store.views.order.item-search.item-search
            *@methodname handleSearchCatalogIndex
            *@description SearchCatalogIndex mashup success callback handler function.If data is present then paints search
            * results else displays message.
            *@input {Object} output - SearchCatalogIndex mashup output object.
            */
            handleSearchCatalogIndex: function(output){
               this.ui.searchInProgress = false;
               this.getOrderDetails();
               var itemList = output.CatalogSearch.ItemList.Item;
               this.ui.productSearchText = output.SearchText;
               this.ui.focusScanField = true;
                if(iscCore.isVoid(itemList) && iscCore.isVoid(this.model.searchProductsResult)){
                    // if item list from api output is empty and searchProductsResult model is blank
                    this.ui.noProductsFound = true;
                  this.ui.noOfSearchResults = 0;
                }
                else{
                    this.ui.showSearchResults = true;
                    this.ui.noProductsFound = false;
                    this.ui.noOfSearchResults += itemList.length;
                    // if empty, then set model with api output
                    if(iscCore.isVoid(this.model.searchProductsResult)){
                        this.model.searchProductsResult =  output;
                    }
                    else if(!iscCore.isVoid(itemList)){
                        // if itemlist not empty, and  searchProductResult product also not empty, then
                        // continuous scrolling is performed in ui. hence append items to search results.
                        for(var i = 0;i < itemList.length; i++){
                        // TODO: move below code to model.srvc appendToModel() and use here.
                            this.model.searchProductsResult.CatalogSearch.ItemList.Item.push(itemList[i]);
                        }
                    }
                }
            },
            /**
             *@iscdoc method
             *@viewname store.views.order.item-search.item-search
             *@methodname handleWizardBack
             *@description Onclick handler for the wizard back button.Displays screen dirty check popup if
             *screen is dirty,opens previous page of wizard otherwise.
             */
            handleWizardBack:function(){
                var isFirstPage = iscWizard.isFirstPage();
                if(isFirstPage){
                    this.uiCancel();
                    return true;
                }
                else{
                    return false;
                }
            },
            /**
             *@iscdoc method
             *@viewname store.views.order.item-search.item-search
             *@methodname handleWizardExit
             *@description Onclick handler for the wizard cancel button.Displays screen dirty check popup if
             *screen is dirty,closes the wizard otherwise.
             */
			handleWizardExit:function(){
				var confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
				if(this.ui.orderTotalQty < 1){
						confirmationMsg = iscI18n.translate('addItems.WarningMessage_Cancel');
				}
				iscModal.showConfirmationMessage(confirmationMsg).then(
					function(callBackAction){
							//
							if(callBackAction === 'YES'){
									iscWizard.exitWizard();
							}
					},
					function(callBackAction){
							//      Do Nothing

					});
				return true;
			}
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.order.list.global-order-list
 *@package store.views.order.list
 *@class global-order-list
 *@description Displays list of orders searched from global order lookup
 *
 */
angular.module('store').controller('store.views.order.list.global-order-list',
  ['$animate','$scope','$filter','$rootScope','iscScreen','iscState','iscWizard','iscStateParams','iscMashup','iscModal','iscOrder','iscObjectUtility','iscAppContext','iscReturn','iscResourcePermission','iscI18n','iscRule',
	function($animate,$scope,$filter,$rootScope,iscScreen,iscState,iscWizard,iscStateParams,iscMashup,iscModal,iscOrder,iscObjectUtility,iscAppContext,iscReturn,iscResourcePermission,iscI18n,iscRule) {
	  
	  iscScreen.initializeScreen($scope,{
            model:{
            	/**
		           *@description This model contains the initial getOrderList api input.
		           */
            	getOrderListApiInput:{},
            	/**
		           *@description This model contains the getOrderList api output.
		           */
                "orderList":{}
            },
            mashupRefs:[
                        /**
                         *@description This mashup is used to get all the orders matching the order number by invoking getOrderList API.
                         */
                        {
                        	 mashupRefId: 'getOrderListByOrderNo',
                             mashupId: 'store.views.order.list.getOrderListByOrderNo'

                        },
                        /**
                         *@description This mashup gets all the sales orders matching filter criteria using getOrderList API.
                         */
            			{
            				 mashupRefId: 'getOrderListByFilterCriteria',
                             mashupId: 'store.views.order.list.getOrderListByFilterCriteria'
            			},
	        			 {
	                        /**
	                        *@description Calls getOrderList API to fetch maximum 50 orders of the current customer sorted by descending createts
	                        */
	                            mashupRefId: 'getItemThumbnails',
	                            mashupId: 'store.views.common.getItemThumbnails'
	
	                        }
                        
                       ],
            ui:{
                /**
				*@property {String}  selectedOrderLineKey - contains the order haeder key of selected order in the list page.
				*/
                selectedOrderHeaderKey : "",
                /**
				*@property {Number}  orderShownCount - pageSize of the Order list for continuous scrolling.
				*/
                orderShownCount: 10,
                /**
				*@property {Number}  numOfOrders - number of orders matching the OrderNo/filter criteria.
				*/
                numOfOrders : -1,
                /**
				*@property {String}  refineResults - In Order list screen, we will fetch a fixed number of records (20). If actually there are more records this attribute will be set to Y and a message will be shown at the end, to refine the search criteria.
				*/
                refineResults:"N",
                getFilterFromContext : false
            },
			
         /**
         * @description method to initialize the controller and search for orders using the input viz OrderNo/Advance Search Criteria to the page.
         */
         initialize: function(){
        	 
        	 var mashupArray = [];
        	 
        	 if(!iscCore.isVoid(iscStateParams.params) && iscStateParams.params.callAPI != "N" && !iscCore.isVoid(iscStateParams.params.input)){
        			 
				 this.model.getOrderListApiInput.Order = iscStateParams.params.input.Order;
	    		 var orderListInput =  this.model.getOrderListApiInput;
	    		 //if coming from back, use the saved filter. otherwise reset the order list filter
	    		 if(iscStateParams.options && iscStateParams.options.backButtonClicked){
	    			 var orderListFilter = iscAppContext.getFromContext("orderListFilter");
	    			 if(!iscCore.isVoid(orderListFilter) && orderListFilter.input){
	    				 orderListInput = orderListFilter.input;
	    				 this.ui.getFilterFromContext = true;
	    			 }
	    		 }else{
	    			 iscAppContext.removeFromContext("orderListFilter");
	    		 }
	    		 
	    		 mashupArray.push(iscMashup.getMashupRefObj(this,'getOrderListByFilterCriteria',orderListInput));
	    		 iscMashup.callMashups(this,mashupArray,{}).then(this.processOrderList.bind(this),angular.noop);
            		 
        		 
			 } else {
				 this.ui.numOfOrders = 0;
				 this.model.orderList = {};
			 }

         },
         
         /**
			 *@description callback handler for init APIs invoked in initialize() method.
			 *@param {Object} response - Controller data of init api calls.
			 */	
         processOrderList: function(response) {
        	 
        	 var apiOutput = iscMashup.getMashupOutput(response,"getOrderListByFilterCriteria");
        	 this.ui.numOfOrders =  Number(apiOutput.OrderList.TotalNumberOfRecords);
        	 this.model.orderList = apiOutput;
        	 this.ui.selectedOrderHeaderKey=apiOutput.OrderList.Order[0].OrderHeaderKey;
        	 
         },
         
         uiGetCssClassByOrderStatus:function(order) {
        	 return iscOrder.getCssClassByOrderStatus(order.MaxOrderStatus);
         },
         
         uiSetDisplayStatus:function(order){
        	 order.DisplayStatus =  iscOrder.getDisplayStatus(order);
         },
 		 
 		 /**
		*@description This method opens the Cart details/Order summary depending whether Order is a Draft Order or confirmed order respectively.
		*@param {Object} order - Order details model.
	 */	
		uiViewOrderDetails : function(order) {
			iscOrder.viewOrderFromList(order,true);
		},
		
        /**
         * @description Validates if User has permission for modifying the order viz Order Capture permission and accordingly hides/shoes the View Products button for thr order
         * @param order - Order details model
         * @returns {Boolean} - If true view products button is hidden as user doesn't have permission for Order Capture/modifying the order
         */
        uiToggleViewProductsButton :function(order) {
        	
        	if(!iscCore.isVoid(order) && "Y" == order.DraftOrderFlag && !iscResourcePermission.hasPermission("WSC000031")) {
        		return true;
        	} else {
        		return false;
        	}
        	
        },
		
		 /**
		*@description This method is sets the selected order header key into a property selectedOrderHeaderKey.
		*@param {Object} orderHeaderKey - selected order header key
	 */	
		uiSelectOrder: function(order) {
			 if(iscRule.isRuleEnabled('ShowItemImage') && iscCore.isVoid(order.ItemThumbnails)){
	    		   var getItemThumbnailsInput = {OrderLine:{OrderHeaderKey:order.OrderHeaderKey}};
	    		   iscMashup.callMashup(this,'getItemThumbnails',getItemThumbnailsInput,{}).then(function(data){
             		var output = iscMashup.getMashupOutput(data,'getItemThumbnails');
             		order.ItemThumbnails = output;
             		this.ui.selectedOrderHeaderKey = order.OrderHeaderKey;
             	}.bind(this),angular.noop);
	    	   }else{
	    		   this.ui.selectedOrderHeaderKey = order.OrderHeaderKey;
	    	   }
		},
		
		/**
		 *@description Shows next set of orders when the order panel is scrolled.
		 * In Order list screen, we will fetch a fixed number of records (20). If actually there are more records we set refineResults = Y to display 
		 * a message will be shown at the end, to refine the search criteria.
		 */
  		
  		uiGetOrderListNext: function(){
  			
  			if(this.ui.orderShownCount == this.model.orderList.OrderList.Order.length) {
  				this.ui.refineResults = 'Y';
  			} else if(this.ui.orderShownCount <= this.model.orderList.OrderList.Order.length){
	          this.ui.orderShownCount+=5;
	        }
        },
        
        /**
		 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
		 */
        
        uiOrderListScrollActionValidator : function(){
        	return true;
        },
        
        /**
		*@description This method prepares the input of order model to be passed to Add Products to Return view/screen. 
		*@param {Object} order - Order details model.
	 */	
        getInputForOrderDetails: function(order) {
        	var orderModel = {};
        	orderModel.Order = {};
        	
        	orderModel.Order.EnterpriseCode = order.EnterpriseCode;
        	orderModel.Order.OrderHeaderKey = order.OrderHeaderKey;
        	orderModel.Order.AppContextInfo = {};
        	orderModel.Order.AppContextInfo.Channel = order.EntryType;
        	
        	return orderModel;
        },
        
        /**
		*@description This method invokes getOrderList API with order filter criteria as input to get all orders matching the filter criteria. 
		*@param {Object} order - Order Search Criteria model.
	 */	
        uiApplyFilterOnOrderList : function(orderListSearchCriteria) {
        	iscMashup.callMashup(this,'getOrderListByFilterCriteria',orderListSearchCriteria,{}).then(this.handleOrderFilterResult.bind(this),angular.noop);
        },
        
        /**
		*@description This method sets the response of getOrderList API to orderList model and resets the numOfOrders 
		*@param {Object} response - mashup response model
	 */	
        handleOrderFilterResult : function(response) {
        	
         var apiOutput = iscMashup.getMashupOutput(response,"getOrderListByFilterCriteria");
       	 this.ui.numOfOrders =  Number(apiOutput.OrderList.TotalNumberOfRecords);
       	if(this.ui.numOfOrders > 0) {
       		this.model.orderList = iscOrder.stampDisplayStatusOnOrderList(apiOutput);
       	 } else {
       		this.model.orderList = apiOutput;
       	 }
         this.ui.refineResults = 'N';
        	
        },
        
        /**
         * @description This method is invoked on click of cancel button
         */
        uiCancel : function(){
        	iscState.goToState('/home',{},{});
         }
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.order.modification.edit-order-details
 *@package store.views.order.modification
 *@class edit-order-details
 *@description Displays the edit screen to modify the order
 *
 */

   angular.module('store').controller('store.views.order.modification.edit-order-details',
		  ['$scope','$rootScope','iscScreen','iscWizard','$timeout','$filter','$locale','iscMashup','iscResourcePermission','iscModal','iscI18n','iscAppContext','iscOrder',
			function($scope,$rootScope,iscScreen,iscWizard,$timeout,$filter,$locale,iscMashup,iscResourcePermission,iscModal,iscI18n,iscAppContext,iscOrder) {				
				iscWizard.initializeWizardPage($scope,{
					  
				      model:{
				    	  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.modification.edit-order-details
				           *@name orderLineList
				           *@description This model contains the getCompleteOrderLineList api output.
				           */
				    	  "orderLineList" : {} ,
				    	  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.modification.edit-order-details
				           *@name orderEditModel
				           *@description This is order capture wizard model containing the order information.
				           */
			    		  "orderEditModel" : {},
			    		  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.modification.edit-order-details
				           *@name giftModel
				           *@description This model contains the order level gift information.
				           */
			    		  "giftModel" : {},
			    		  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.modification.edit-order-details
				           *@name couponInput
				           *@description This model contains the translateBarcode api input used when item is scanned.
				           */
			    		  "couponInput":{
			    			  "couponID" :""
			    		  },
			    		  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.modification.edit-order-details
				           *@name scanItemInput
				           *@description This model contains the translateBarcode api input used when coupon is scanned.
				           */
			    		  "scanItemInput":{
			    			  "itemID":""
			    		  },
			    		  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.modification.edit-order-details
				           *@name getRuleDetails_ChargeShipLines
				           *@description This model contains the getRuleDetails api output for CHARGE_SHIP_LINES_AT_STORE.
				           */
						"getRuleDetails_ChargeShipLines":{},
						
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.modification.edit-order-details
				           *@name getRuleDetails_OrderAge
				           *@description This model contains the getRuleDetails api output for WSC_ORDER_AGE.
				           */
						
						"getRuleDetails_OrderAge":{}
						
				      },
                        
				      /**
				       *MashupRefs
				       *array containing the list of mashups referred in this controller
				       */
				      
				  		mashupRefs : [
					        
					        
				  			/*{
				  				
				  				*//**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.getCompleteOrderLineList
									*@mashuprefid store.views.order.modification.getCompleteOrderLineList
									*@modelname orderLineList
									*@description This mashup is used to get the list of OrderLines.
									*//*
				  				 mashupRefId: 'store.views.order.modification.getCompleteOrderLineList',
						         mashupId: 'store.views.order.modification.getCompleteOrderLineList',
						         modelName: "orderLineList"
						       
				  			},*/
				  			 
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.getCompleteOrderDetails
									*@mashuprefid store.views.order.modification.getCompleteOrderDetails
									*@modelname getCompleteOrderDetails
									*@description This mashup is used to get order details.
									*/
				  				
				  				 mashupRefId: 'store.views.order.modification.getCompleteOrderDetails',
						         mashupId: 'store.views.order.modification.getCompleteOrderDetails',
						         modelName: 'getCompleteOrderDetails'
				  			},
				  			{
				  			 /**
						        *@iscdoc mashup
								*@viewname store.views.order.modification.edit-order-details
								*@mashupid wsc_paymentCapture_getRuleDetails_ChargeShipLines
								*@mashuprefid getRuleDetails_ChargeShipLines
								*@modelname getRuleDetails_ChargeShipLines
								*@description This mashup is used to get rule details of the Rule 'CHARGE_SHIP_LINES_AT_STORE' for the Store's Enterprise.
								*/
					            	mashupRefId: 'getRuleDetails_ChargeShipLines',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_ChargeShipLines',
					            	modelName : 'getRuleDetails_ChargeShipLines'
					        },
							{
								/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.changeQty.newLineChangeOrder
									*@mashuprefid store.views.order.modification.changeQty.newLineChangeOrder
									*@description This mashup calls change order with pending changes when there is an increase or decrease in ordered quantity.
									*/
									mashupRefId: 'store.views.order.modification.changeQty.newLineChangeOrder',
									mashupId:'store.views.order.modification.changeQty.newLineChangeOrder'
							},
							{
							/**
						        *@iscdoc mashup
								*@viewname store.views.order.modification.edit-order-details
								*@mashupid store.views.order.modification.changeQty.modifyFulfillmentOptions
								*@mashuprefid store.views.order.modification.changeQty.modifyFulfillmentOptions
								*@description This mashup calls change order with pending changes when there is an increase or decrease in ordered quantity.
								*/
								mashupRefId: 'store.views.order.modification.changeQty.modifyFulfillmentOptions',
								mashupId:'store.views.order.modification.changeQty.modifyFulfillmentOptions'
							},
					        {
					        	
					        	/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid wsc_paymentCapture_getRuleDetails_ChargeShipLines
									*@mashuprefid getRuleDetails_OrderAge
									*@modelname getRuleDetails_OrderAge
									*@description This mashup is used to get rule details of the Rule 'WSC_ORDER_AGE' for the Store's Enterprise.
									*/
						            	mashupRefId: 'getRuleDetails_OrderAge',
						            	mashupId: 'store.views.order.modification.getRuleDetails_OrderAge',
						            	modelName : 'getRuleDetails_OrderAge'
						            		
					        	
					        	
					        }, 
					        {
					        	
					        	/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.getRuleDetails_EditOrderAfterSchedule
									*@mashuprefid getRuleDetails_EditOrderAfterSchedule
									*@modelname getRuleDetails_EditOrderAfterSchedule
									*@description This mashup is used to get rule details of the Rule 'WSC_ALLOW_ORDER_MODIFICATION_POST_RELEASE' for the Store's Enterprise.
									*/
						            	mashupRefId: 'getRuleDetails_EditOrderAfterSchedule',
						            	mashupId: 'store.views.order.modification.getRuleDetails_EditOrderAfterSchedule',
						            	modelName : 'getRuleDetails_EditOrderAfterSchedule'
						            		
					        	
					        	
					        },				  			 
				  			{  
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.ovp_modifyFulfillmentOptions
									*@mashuprefid store.views.order.modification.ovp_modifyFulfillmentOptions
									*@description This mashup is used to call modifyFulfillmentOptions when price is overridden for a product.
									*/
				  				mashupRefId: 'store.views.order.modification.ovp_modifyFulfillmentOptions',
				  				mashupId: 'store.views.order.modification.ovp_modifyFulfillmentOptions'
				  				
				  			},
				  			
				  			{   /**
						        *@iscdoc mashup
								*@viewname store.views.order.modification.edit-order-details
								*@mashupid store.views.order.modification.customer_modifyFulfillmentOptions
								*@mashuprefid store.views.order.modification.customer_modifyFulfillmentOptions
								*@description This mashup is used to call modifyFulfillmentOptions when customer is identified or order address is changed in customer panel.
								*/
				  				mashupRefId:'store.views.order.modification.customer_modifyFulfillmentOptions',
				  				mashupId:'store.views.order.modification.customer_modifyFulfillmentOptions'
				  			},
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.getItemAvailabilityForStore
									*@mashuprefid store.views.order.modification.getItemAvailabilityForStore
									*@description This mashup is used to check availability of the product when quantity is edited or ShipTo address of order line is changed.
									*/
				  				mashupRefId:'store.views.order.modification.getItemAvailabilityForStore',
				  				mashupId:'store.views.order.modification.getItemAvailabilityForStore'
				  			},
							  {
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.getItemAvailabilityForStore
									*@mashuprefid store.views.order.modification.getItemAvailabilityForStore
									*@description This mashup is used to check availability of the product when quantity is edited or ShipTo address of order line is changed.
									*/
				  				mashupRefId:'store.views.order.modification.getItemAvailabilityForChangedQty',
				  				mashupId:'store.views.order.modification.getItemAvailabilityForChangedQty'
				  			},
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.modifyFulfillmentOptions
									*@mashuprefid store.views.order.modification.modifyFulfillmentOptions
									*@description This mashup is used to call modifyFulfillmentOptions api when coupon is removed,store is selected for a pickup line and delivery method is changed.
									*/
				  				mashupRefId:'store.views.order.modification.modifyFulfillmentOptions',
				  				mashupId:'store.views.order.modification.modifyFulfillmentOptions'
				  				
				  			},
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.changeOrderForNewLines
									*@mashuprefid store.views.order.modification.changeOrderForNewLines
									*@description This mashup is used to call changeOrder api when delivery method is changed for new line.
									*/
				  				mashupRefId:'store.views.order.modification.changeOrderForNewLines',
				  				mashupId:'store.views.order.modification.changeOrderForNewLines'
				  				
				  			},
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.translateBarcodeForCoupon
									*@mashuprefid store.views.order.modification.translateBarcodeForCoupon
									*@description This mashup is used to call translateBarcode api when coupon is scanned.
									*/
				  				mashupRefId:'store.views.order.modification.translateBarcodeForCoupon',
				  				mashupId:'store.views.order.modification.translateBarcodeForCoupon'	
				  			},
				  			
				  			{   
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.changeOrderForGift
									*@mashuprefid store.views.order.modification.changeOrderForGift
									*@description This mashup is used to call changeOrder api to add/edit/delete gift information either at order/orderline level.
									*/
				  				mashupRefId:'store.views.order.modification.changeOrderForGift',
				  				mashupId:'store.views.order.modification.changeOrderForGift'
				  				
				  			},
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid vc_modifyFulfillmentOptionsForDeletion
									*@mashuprefid vc_modifyFulfillmentOptionsForDeletion
									*@description This mashup is used to call modifyFulfillmentOptions api to delete a order line.
									*/
				  				mashupRefId:'vc_modifyFulfillmentOptionsForDeletion',
				  				mashupId:'vc_modifyFulfillmentOptionsForDeletion'
				  				
				  			},
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.getCompleteOrderLineList_CheckAvailability
									*@mashuprefid store.views.order.modification.getCompleteOrderLineList_CheckAvailability
									*@description This mashup is used to call getCompleteOrderLineList to get total number of order lines to validate whether the order needs to be reserved.
									*/
				  				mashupRefId:'store.views.order.modification.getCompleteOrderLineList_CheckAvailability',
				  				mashupId:'store.views.order.modification.getCompleteOrderLineList_CheckAvailability' 
				  				
				  			},
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid vc_updateSettledQtyOnAllLines
									*@mashuprefid vc_updateSettledQtyOnAllLines
									*@description This mashup is used to call changeOrder to update SettledQuantity on non-settled lines in case of orders in mixed mode, which is having settled and non-settled lines.
									*/
				  				mashupRefId:'vc_updateSettledQtyOnAllLines',
				  				mashupId:'vc_updateSettledQtyOnAllLines' 
				  				
				  			},
				  			
				            {

				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid vc_getCompleteItemList
									*@mashuprefid vc_getCompleteItemList
									*@description This mashup is used to call getCompleteItemList when a carry product is scanned.
									*/
				            	mashupRefId: 'vc_getCompleteItemList',
				            	mashupId: 'vc_getCompleteItemList'
				            },
							
							{

				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.changeOrderSave
									*@mashuprefid store.views.order.modification.changeOrderSave
									*@description This mashup is used to call getCompleteItemList when a carry product is scanned.
									*/
				            	mashupRefId: 'store.views.order.modification.changeOrderSave',
				            	mashupId: 'store.views.order.modification.changeOrderSave'
				            },
							
							{

				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.resetOrderPendingChanges
									*@mashuprefid store.views.order.modification.resetOrderPendingChanges
									*@description This mashup is used to discard all the pending changes of the order.
									*/
				            	mashupRefId: 'store.views.order.modification.resetOrderPendingChanges',
				            	mashupId: 'store.views.order.modification.resetOrderPendingChanges'
				            },
				            
                            {
				            	
				            	/**
							        *@iscdoc mashup
									*@viewname store.views.order.modification.edit-order-details
									*@mashupid store.views.order.modification.changeOrderToApplyPendingChanges
									*@mashuprefid store.views.order.modification.changeOrderToApplyPendingChanges
									*@description This mashup is used to call changeOrder to Apply pending changes
									*/
				            	mashupRefId: 'store.views.order.modification.changeOrderToApplyPendingChanges',
				            	mashupId: 'store.views.order.modification.changeOrderToApplyPendingChanges'
				            	
				            },
				            
							{
								/**
							    *@iscdoc mashup
								*@viewname store.views.order.modification.cancelorderline
								*@mashupid store.views.order.modification.cancelNewOrderLines
								*@mashuprefid store.views.order.modification.cancelNewOrderLines
								*@description Cancels the newly added order line on the edit order page.
								*/
							
								mashupRefId: 'store.views.order.modification.cancelNewOrderLines',
								mashupId: 'store.views.order.modification.cancelNewOrderLines'
							},
							{
								/**
							    *@iscdoc mashup
								*@viewname store.views.order.modification.cancelorderline
								*@mashupid store.views.order.modification.cancelOrderLines
								*@mashuprefid store.views.order.modification.cancelOrderLines
								*@description Cancels the newly added order line on the edit order page.
								*/
							
								mashupRefId: 'store.views.order.modification.cancelOrderLines',
								mashupId: 'store.views.order.modification.cancelOrderLines'
							}
				          

				  		],
				  		
			            ui:{
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Boolean}  showCouponScanField - true if coupon scan fields needs to be shown, false otherwise.
			    			 */
			            	showCouponScanField: false,
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {String} isOrderGift - Y if the order is Gift.
			    			 */
			            	isOrderGift:'',
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Boolean} oLineQtyEditResourcePermission - true/false based on resource permission for editing order line quantity.
			    			 */
			            	oLineQtyEditResourcePermission :false,
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Boolean} oLineChangeFulfillmentOptionsPermission - true/false based on resource permission for editing order line fulfillment options like change delivery method, change pick up store and change line address.
			    			 */
			            	oLineChangeFulfillmentOptionsPermission : false,
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Number} oLineShownCount - pageSize of the Order line list for continuous scrolling.
			    			 */
			            	oLineShownCount: 5,
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {String} orderHeaderKeyToEdit - OrderHeaderKey of the order that is to be edited. This key is passed from the Order Summary page.
			    			 */
							orderHeaderKeyToEdit: "",
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Number} orderLinesCountWizardLoad - The number of order lines associated with the order when the Edit Order page is loaded for the first time from the Order Summary page.
			    			 */
							orderLinesCountWizardLoad: 0,
							
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Number} orderAgeInDays - this attribute is used to store the order age in ui.
			    			 */
							
							orderAgeInDays: 0,
							
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {String} isRefund - this flag indicates if there is a refund after order modification.
			    			 */
							isRefund : 'N',
							
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Number} diffAmount - stores the difference in order total after modification.
			    			 */
							
							diffAmount: '',
							
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Number} newOrderTotal - stores the new price after order modification.
			    			 */
							
							newOrderTotal:'',
							
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {String} editOrderLockTemplate - The template HTML file used to show the lock icon on the Edit Order page
			    			 */
							editOrderLockTemplate:'store/views/order/modification/edit-order-locked.tpl.html',
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {String} deletedOrderLineKey - OrderLineKey of the order line that is deleted on the Edit Order page
			    			 */
							deletedOrderLineKey:'',
							
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Boolean} showPaymentButton - this flag indicates whether payment button needs to be shown.
			    			 */
							
							showPaymentButton :false,
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Object} orderlineModel - this object stores the order line that need to be modified during delivery method change.
			    			 */
							orderlineModel:{},
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Boolean} chagePickupStore - flag to indicate if it's change pick up store flow.
			    			 */
							chagePickupStore : false,
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Boolean} saveOrderBeforeUnschedule - this flag indicates whether pending changes need to be saved before unscheduling the order or not.
			    			 */
							saveOrderBeforeUnschedule:false,
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			    			 *@property {Boolean} applyCouponResourcePermission - true/false based on resource permission for applying coupon to order.
			    			 */
			            	applyCouponResourcePermission :false,
							/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.modification.edit-order-details
			            	 *@property {Integer} activeTabIndex - index of the tab that is active in mobile
			    			 */
							activeTabIndex: -1
			            },
			            
				            /**
							 *@iscdoc viewinit
							 *@viewname store.views.order.modification.edit-order-details
							 *@method initialize
							 *@description Initializes the cart details screen with getCompleteOrderDetails and getCompleteOrderLineList api calls.
							 */
				  		    initialize : function(){
				  		    $rootScope.$showBackButtonForStates = true;
				  			this.ui.orderHeaderKeyToEdit = iscWizard.getWizardModel("orderHeaderKey");
				  			this.model.giftModel = iscWizard.getWizardModel("giftOptionsForOrderModel");
				  			if(!iscCore.isVoid(this.model.giftModel)){
				  				this.ui.isOrderGift = this.model.giftModel.giftFlag;
				  			}
				  			
				  			if(iscResourcePermission.hasPermission("WSC000032")){
				  				this.ui.oLineQtyEditResourcePermission=true;
							}
				  			if(iscResourcePermission.hasPermission("WSC000050")){
				  				this.ui.oLineChangeFulfillmentOptionsPermission=true;
							}	
				  			
				        	var mashupArray = [];
				        	//mashupArray.push(iscMashup.getMashupRefObj(this,'store.views.order.modification.getCompleteOrderLineList',{"OrderLine" : { "OrderHeaderKey" : this.ui.orderHeaderKeyToEdit}}));
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'store.views.order.modification.getCompleteOrderDetails', {"Order" : { "OrderHeaderKey" : this.ui.orderHeaderKeyToEdit}}));
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'getRuleDetails_ChargeShipLines', {}));
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'getRuleDetails_OrderAge', {}));
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'getRuleDetails_EditOrderAfterSchedule', {}));				        	
				        	
				        	iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				  			},
				  		
				  			 /**
							 *@iscdoc method
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname handleInitApiCalls
							 *@description callback handler for init api calls getCompleteOrderDetails and getCompleteOrderLineList.
							 *@param {Object} data - Controller data of init api calls.
							 */	
                              handleInitApiCalls : function (data){
					  			
					  			//var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.getCompleteOrderLineList");
								var orderDetails = iscMashup.getMashupOutput(data,"store.views.order.modification.getCompleteOrderDetails");
								iscWizard.setWizardModel("orderModel",orderDetails);
								iscWizard.setWizardModel("isOrgRoleNode",orderDetails.Order.isOrgRoleNode);

								/*OrderModificationModel*/
					        	var OrderModificationModel = iscWizard.getWizardModel("OrderModificationModel");
					        	if(!iscCore.isVoid(OrderModificationModel)) {
					        		if(OrderModificationModel.Order.OrderHasPendingChanges == 'N' && orderDetails.Order.HasPendingChanges === "N"){
					        		 this.ui.showPaymentButton = true;
					        		}
								}
					        	
					        	
								var orderAgeFromRule = iscMashup.getMashupOutput(data,"store.views.order.modification.getRuleDetails_OrderAge");
								this.ui.orderAgeInDays = iscOrder.getOrderAge(orderDetails.Order.OrderDate);
								var orderLinesCountWizardLoad = iscWizard.getWizardModel("orderLinesCountWizardLoad");
								if(!orderLinesCountWizardLoad) {
									iscWizard.setWizardModel("orderLinesCountWizardLoad",orderDetails.Order.OrderLines.TotalNumberOfRecords);
								}
								this.ui.orderLinesCountWizardLoad = parseInt(iscWizard.getWizardModel("orderLinesCountWizardLoad"),10);
								
								var oldOrderModel = {};
								oldOrderModel.OverallTotals={};
								if(!iscCore.isVoid(orderDetails) && orderDetails.Order.HasPendingChanges === "Y"){
									
									oldOrderModel.OverallTotals = orderDetails.Order.OldOrder.OverallTotals;
									iscWizard.setWizardModel("orderPricingModel",oldOrderModel);
								}else{
									
									oldOrderModel.OverallTotals = orderDetails.Order.OverallTotals;
									iscWizard.setWizardModel("orderPricingModel",oldOrderModel);
								}
								
								this.setOrderTotalAfterModificationMsg(oldOrderModel,orderDetails);
								
					  			var orderLines = []; 
					 	        orderLines = orderDetails.Order.OrderLines.OrderLine;
					 	        
					 			if(!iscCore.isVoid(orderLines)){
					 				
					 				for(var k= 0; k<orderLines.length ; k++){
					 					orderLines[k].OrderLineTranQuantity.OrderedQty = $filter('number')(orderLines[k].OrderLineTranQuantity.OrderedQty);    
					 					orderLines[k].OrderedQty = $filter('number')(orderLines[k].OrderedQty);
										orderLines[k].LineSeqNumber = orderLines[k].LineSeqNo.split('.')[0];
										this.uiSetDisplayStatus(orderLines[k]);
									}
					 			}
					 			
					 			this.model.orderLineList.OrderLineList = {};
					 			this.model.orderLineList.OrderLineList.TotalNumberOfRecords = orderDetails.Order.OrderLines.TotalNumberOfRecords;
					 			this.model.orderLineList.OrderLineList.OrderLine = [];
					 			this.model.orderLineList.OrderLineList.OrderLine = orderDetails.Order.OrderLines.OrderLine;
					  		  },
				  		  
					  		  
					  		/**
								 *@iscdoc uimethod
								 *@viewname store.views.order.modification.edit-order-details
								 *@methodname uiOnQuantityFieldFocus
								 *@description This is a onFocus event handler of quantity field.
								 *@param {Object} qtyField - quantity field as JSON object. 
								 *@param {Object} orderlineModel - orderLine data as JSON object. 
								 */
					  		  
					  		   setOrderTotalAfterModificationMsg : function(oldOrderModel,orderDetails){
					  			  
					  			 
					  			 var oldTotal =  oldOrderModel.OverallTotals.GrandTotal;
					  			 var newTotal =  orderDetails.Order.OverallTotals.GrandTotal;
					  			 
					  			 if (typeof oldTotal == "string")
					  				oldTotal = parseFloat(oldTotal,10);
					  			 
					  			  if(typeof newTotal == "string")
					  				newTotal =  parseFloat(newTotal,10);

					  			 this.ui.newOrderTotal = newTotal;
					  		     if(oldTotal > newTotal){
					  		    	 /* refund scenario */
					  		    	 this.ui.isRefund = 'Y';
					  		    	 this.ui.diffAmount = oldTotal - newTotal;
					  		    	 
					  		     }
					  		     else {
					  		    	 /*charge scenario */
					  		    	 this.ui.isRefund = 'N';
					  		    	 this.ui.diffAmount = newTotal -oldTotal;
					  		    	 
					  		     }
					  		   },
				  			/**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname uiOnQuantityFieldFocus
							 *@description This is a onFocus event handler of quantity field.
							 *@param {Object} qtyField - quantity field as JSON object. 
							 *@param {Object} orderlineModel - orderLine data as JSON object. 
							 */
				  			uiOnQuantityFieldFocus :function (qtyField,orderLineModel) {
				  				if($scope.editOrderDetails.$valid)
				  				var formats = $locale.NUMBER_FORMATS;
					  			var oldQuantity = orderLineModel.OrderLineTranQuantity.OrderedQty;
					  			if(!iscCore.isVoid(oldQuantity)){
					  				oldQuantity=oldQuantity.replace(formats.GROUP_SEP, '');		
					  			}
					  			if(orderLineModel.showQtyUpdate !=='Y'){
					  				qtyField.oldQty = oldQuantity;
					  			}
				  				
				  		    },
				  			
				  		  /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname uiCancel
							 *@description This method handles on click of cancel button in cart details screen.
							 */
			              uiCancel : function(){
			            	var orderDetails = this.model.getCompleteOrderDetails;
							var messageToShow = iscI18n.translate('editorderdetails.MSG_CloseWithNoPendingChanges');
							if(!iscCore.isVoid(orderDetails) && orderDetails.Order.HasPendingChanges === "Y"){
								messageToShow = iscI18n.translate('editorderdetails.MSG_OrderHasPendingChanges');
							}
							var that = this;
			            	iscModal.showConfirmationMessage(messageToShow).then(
								function(callBackAction){
									if(callBackAction === 'YES'){
										if(!iscCore.isVoid(orderDetails) && orderDetails.Order.HasPendingChanges === "Y"){
											var resetOrderInput = {"Order" : {"OrderHeaderKey" : that.ui.orderHeaderKeyToEdit}};
											
											iscMashup.callMashup(that,"store.views.order.modification.resetOrderPendingChanges",resetOrderInput,{}).then(that.handleOrderResetChanges.bind(that),angular.noop);
										} else {
											iscWizard.closeWizard();
										}
									}
			       				},
			  					function(callBackAction){
			       				});
			              },

							handleOrderResetChanges: function() {
								iscWizard.closeWizard();
							},
			            
			              /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname uiGetItemDetailsForScan
							 *@description This method handles scanning of a carry item by calling getCompleteItemList api to get product details and subsequently modifyFulfillmentOptions api to add the order line.
							 *@param {String} barCodeData - BarCode data of the scanned product. 
							 */ 
			            uiGetItemDetailsForScan: function(barCodeData){
			            	
			            	 var maxOrderAge = 0;
	            	         var dateDiffInDays = 0;
	            	         maxOrderAge = this.model.getRuleDetails_OrderAge.Rules.RuleSetValue;
	            	         dateDiffInDays = iscOrder.getOrderAge(this.model.getCompleteOrderDetails.Order.OrderDate);
	            	         
		            			 if (dateDiffInDays > maxOrderAge) {
		            				 iscModal.showErrorMessage(iscI18n.translate('orderModification.orderAgeErrorMsg',{orderAge:maxOrderAge}));
		            			 }
		            			 
		            			 else{
					            		if(!iscCore.isVoid(barCodeData)){
					            			
					            			var isOrgRoleNode = iscWizard.getWizardModel("isOrgRoleNode");
						            		var getCompleteItemDetailsApiInput = {'Item':{ 'BarCode' :{'BarCodeData': barCodeData}}};
						                	getCompleteItemDetailsApiInput.Item.OrderHeaderKey = this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
						                	getCompleteItemDetailsApiInput.Item.IsOrgRoleNode =  isOrgRoleNode;
						                	getCompleteItemDetailsApiInput.Item.DraftOrderFlag = this.model.getCompleteOrderDetails.Order.DraftOrderFlag;
						                	getCompleteItemDetailsApiInput.Item.ShipNode = iscAppContext.getFromContext('storeName');
						                	iscMashup.callMashup(this,"vc_getCompleteItemList",getCompleteItemDetailsApiInput,{}).then(this.handleItemScan.bind(this),angular.noop);
						            	}
						            	else{
						            		iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.MSG_InvalidBarCodeData'));
										    }
					            	}
		            		
			            	
			            	
			            },
			            
			            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname uiOpenProductSearch
				  		 *@description Onclick handler function for search icon in scan field.Opens dirty popup if screen is dirty
				  		 * and based on action selected opens search product wizard page or stays in the same screen.
						 *@param {String} searchTxt - Input to search for matching products.
				  		 */
		            uiOpenProductSearch: function(searchTxt){
		            	
		            	 var dateDiffInDays = 0;
            	         maxOrderAge = this.model.getRuleDetails_OrderAge.Rules.RuleSetValue;
            	         dateDiffInDays = iscOrder.getOrderAge(this.model.getCompleteOrderDetails.Order.OrderDate);
            	         
            	         if (dateDiffInDays > maxOrderAge) {
            				 iscModal.showErrorMessage(iscI18n.translate('orderModification.orderAgeErrorMsg',{orderAge:dateDiffInDays}));
            			 }
            	         else{
		            	var that = this;
		            	var openProductSearch = true;
		            	if(this.ui.isScreenDirty){
		            		iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
		            			if(iscCore.isBooleanTrue(action)){
		            				// action is yes. check search text and if valid, open search page.
		            				if(!iscCore.isVoid(searchTxt)){
					            		var pageInput = {
						            			input: searchTxt
						            	};
						            	iscWizard.gotoCustomPage('productSearch',pageInput,{wizardPageCssClass:"fullscreen-modal"});
					            	}
					            	else{
					            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
					            	}
		            			}
		            			else{
		            				// action is no. so clear search text.
		            				that.model.searchInput = '';
		            			}
		            		});
		            	}
		            	else{
		            		if(!iscCore.isVoid(searchTxt)){
			            		var pageInput = {
				            			input: searchTxt,
				            			searchContext : 'scanInStore'
				            	};
				            	//iscWizard.gotoCustomPage('productSearch',pageInput,{wizardPageCssClass:"fullscreen-modal"});
				            	iscWizard.gotoCustomPage('addItems',pageInput,{wizardPageCssClass:"fullscreen-modal"});
			            	}
			            	else{
			            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
			            	}
		            	}
            	         }
		            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleItemScan
						 *@description callback handler for getCompleteItemList api call.
						 *@param {Object} data - Controller data of getCompleteItemList api call.
						 */	
			            handleItemScan: function(data){
			            	
			            	var apiOutput = iscMashup.getMashupOutput(data,"vc_getCompleteItemList");
			    			if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.Order.OrderLines)){
			    				if(!(this.model.orderLineList.OrderLineList.TotalNumberOfRecords =='0')){
			    					iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
			    				}
			    				else{
			    					this.model.orderLineList.OrderLineList.OrderLine = [];
			    					this.model.orderLineList.OrderLineList.OrderLine = apiOutput.Order.OrderLines.OrderLine;
			    					this.model.orderLineList.OrderLineList.TotalNumberOfRecords =  apiOutput.Order.OrderLines.TotalNumberOfRecords;
			    				}
			 			    	this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
			 			    	this.setOrderTotalAfterModificationMsg(iscWizard.getWizardModel("orderPricingModel"),this.model.getCompleteOrderDetails);
			 			    	this.ui.oLineShownCount = this.model.orderLineList.OrderLineList.OrderLine.length;
			 			    	$timeout(function(){
			 		            	var objDiv = document.getElementById("orderLinesHolder");
			 		            	objDiv.scrollTop = objDiv.scrollHeight;
			 		            }, 0);
			    			}
			    			else {
			    				var pageInput = {
				            			input: this.model.scanItemInput.itemID,
				            			searchContext : 'scanInStore'
				            	};
				            	iscWizard.gotoCustomPage('addItems',pageInput,{wizardPageCssClass:"fullscreen-modal"});
				            	
			    			}
			                this.model.scanItemInput.itemID ='';
			                $scope.editOrderDetails.$setPristine();
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uihandleScreenDirty
						 *@description This method is called on click of Continue to payment button when the screen is dirty.
						 */ 	
			            uihandleScreenDirty: function(){
			            	iscModal.showErrorMessage(iscI18n.translate('globals.MSG_SCREEN_ERRORS')); 
			            }, 
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleWizardBack
						 *@description This method handles the on click of back  in wizard.
						 */ 	
			            
						handleWizardBack:function(){
							var isFirstPage = iscWizard.isFirstPage();
							var isDirty = $scope.editOrderDetails.$dirty;
							var orderDetails = this.model.getCompleteOrderDetails;
							
							if(isDirty || (!iscCore.isVoid(orderDetails) && orderDetails.Order.HasPendingChanges === "Y")){
								var confirmationMsg = null;
								if(isFirstPage){
									confirmationMsg = iscI18n.translate('editorderdetails.MSG_OrderHasPendingChanges');
									var that = this;
									
									iscModal.showConfirmationMessage(confirmationMsg).then(
											function(callBackAction){
												if(callBackAction === 'YES'){
													if(!iscCore.isVoid(orderDetails) && orderDetails.Order.HasPendingChanges === "Y"){
														var resetOrderInput = {"Order" : {"OrderHeaderKey" : that.ui.orderHeaderKeyToEdit}};
														iscMashup.callMashup(that,"store.views.order.modification.resetOrderPendingChanges",resetOrderInput,{}).then(that.handleOrderResetChanges.bind(that),angular.noop);
													} else {
														iscWizard.closeWizard();
													}
												}
						       				});
								}
								else{
									iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
			            			if(iscCore.isBooleanTrue(action)){
			            				iscWizard.gotoPreviousPage(true);
			            			}
			            		});
								}
								return true;
							}else if(isFirstPage){
								confirmationMsg = iscI18n.translate('editorderdetails.MSG_CloseWithNoPendingChanges');
								iscModal.showConfirmationMessage(confirmationMsg).then(
										function(callBackAction){
											if(callBackAction === 'YES'){
												iscWizard.closeWizard();
											}
					       				});
								return true;
							}
							else{
								return false;
							}
						},
						
						/**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleWizardExit
						 *@description This method handles the on click of cancel button in wizard.
						 */ 
						
						handleWizardExit:function(){
							var confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
							
							iscModal.showConfirmationMessage(confirmationMsg).then(
								function(callBackAction){
										//
										if(callBackAction === 'YES'){
												iscWizard.exitWizard();
										}
								},
								function(callBackAction){
										//      Do Nothing

								});
							return true;						
						},
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiOpenConfirmationForGiftDelete
						 *@description Shows confirmation dialog when Remove Gift button is clicked.On Conformation,removeGiftOptionsForOrder method is called.
						 */ 
			            
			            uiOpenConfirmationForGiftDelete : function(){
			            	var that = this;
			            	iscModal.showConfirmationMessage("viewcartdetails.LABEL_GiftDeleteConfirmation").then(function(action){
								that.removeGiftOptionsForOrder(action);
							});
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiConfirmDeletion
						 *@description Shows confirmation dialog before deleting order line.On Conformation,deleteOrderLine method is called.
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */ 
			            
			            uiConfirmDeletion : function(orderLineModel){
			            	var that = this;
							var cancelOrderLineModalInput = {
								modalInput: function(){
									return {
										orderLine : orderLineModel,
										orderHeaderKey: that.model.getCompleteOrderDetails.Order.OrderHeaderKey
									};
				            	}
				            };
							
							// Open Confirmation pop-up for new line and cancel orderline pop-up for existing line
							if(orderLineModel.LineSeqNumber > this.ui.orderLinesCountWizardLoad) {
								this.ui.deletedOrderLineKey = orderLineModel.OrderLineKey;
								iscModal.showConfirmationMessage(iscI18n.translate('miniCart.LABEL_Delete_line')).then(function(action){
			            			if(iscCore.isBooleanTrue(action)){
										var apiInput = {};
										apiInput.Order = {};
										apiInput.Order.OrderHeaderKey = that.model.getCompleteOrderDetails.Order.OrderHeaderKey;
										apiInput.Order.OrderLines = {};
										apiInput.Order.OrderLines.OrderLine = {};
										apiInput.Order.OrderLines.OrderLine.OrderLineKey = orderLineModel.OrderLineKey;
									   
										iscMashup.callMashup(that,'store.views.order.modification.cancelNewOrderLines',apiInput,{}).then(that.cancelNewOrderLineAPICallBack.bind(that),that.cancelOrderLineAPIErrorCallBack.bind(that));
									}
								});
							} else {
								iscModal.openModal('store.views.order.cancel.cancelorderline',cancelOrderLineModalInput).then(function(callBackData){
									if(callBackData.cancelOrderLineAPIOutput.cancelOrderLineAPISuccess) {
										var apiOutput = callBackData.cancelOrderLineAPIOutput.order;
										if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.Order.OrderLines)){
											if(!(this.model.orderLineList.OrderLineList.TotalNumberOfRecords =='0')){
												iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
											}
											this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
											this.setOrderTotalAfterModificationMsg(iscWizard.getWizardModel("orderPricingModel"),this.model.getCompleteOrderDetails);
											this.ui.oLineShownCount = this.model.orderLineList.OrderLineList.OrderLine.length;
											$timeout(function(){
												var objDiv = document.getElementById("orderLinesHolder");
												objDiv.scrollTop = objDiv.scrollHeight;
											}, 0);
										}
										
									}
								}.bind(this),
								angular.noop);
							}
			            },
						cancelNewOrderLineAPICallBack : function(response) {
							var apiOutput = iscMashup.getMashupOutput(response,"store.views.order.modification.cancelNewOrderLines");
							if(!iscCore.isVoid(apiOutput)) {
								if(!(this.model.orderLineList.OrderLineList.TotalNumberOfRecords =='0')){
									iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
								}
								this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
								this.setOrderTotalAfterModificationMsg(iscWizard.getWizardModel("orderPricingModel"),this.model.getCompleteOrderDetails);
								this.ui.oLineShownCount = this.model.orderLineList.OrderLineList.OrderLine.length;
								$timeout(function(){
									var objDiv = document.getElementById("orderLinesHolder");
									objDiv.scrollTop = objDiv.scrollHeight;
								}, 0);
							}
							for(var k= 0; k<this.model.orderLineList.OrderLineList.OrderLine.length ; k++){
								if(this.model.orderLineList.OrderLineList.OrderLine[k].OrderLineKey === this.ui.deletedOrderLineKey){
									this.model.orderLineList.OrderLineList.OrderLine.splice(k,1);
									this.model.orderLineList.OrderLineList.TotalNumberOfRecords -= 1;
									 break;
								}
							}
							
						},
						cancelOrderLineAPICallBack : function(response) {
							var apiOutput = iscMashup.getMashupOutput(response,"store.views.order.modification.cancelOrderLines");
							if(!iscCore.isVoid(apiOutput)) {
								if(!(this.model.orderLineList.OrderLineList.TotalNumberOfRecords =='0')){
									iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
								}
								this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
								this.setOrderTotalAfterModificationMsg(iscWizard.getWizardModel("orderPricingModel"),this.model.getCompleteOrderDetails);
								this.ui.oLineShownCount = this.model.orderLineList.OrderLineList.OrderLine.length;
								$timeout(function(){
									var objDiv = document.getElementById("orderLinesHolder");
									objDiv.scrollTop = objDiv.scrollHeight;
								}, 0);
							}
							for(var k= 0; k<this.model.orderLineList.OrderLineList.OrderLine.length ; k++){
								if(this.model.orderLineList.OrderLineList.OrderLine[k].OrderLineKey === this.ui.deletedOrderLineKey){
									this.model.orderLineList.OrderLineList.OrderLine.splice(k,1);
									this.model.orderLineList.OrderLineList.TotalNumberOfRecords -= 1;
									 break;
								}
							}
							
						},
						
						cancelOrderLineAPIErrorCallBack: function(response) {
							var errorMsg = response.Errors.Error[0].ErrorDescription;
							var errorCode = response.Errors.Error[0].ErrorCode;
							if(iscI18n.hasKey("apierror."+errorCode)){
								errorMsg = iscI18n.translate("apierror."+errorCode);
								iscModal.showErrorMessage(errorMsg,null,null);				
							}
							else{
								iscModal.showErrorMessage(errorMsg,null,null);
							}
						},
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname deleteOrderLine
						 *@description Deletes order line by calling modifyFulfillmentOptions api.
						 *@param {String} action - action is the response of a confirmation dialog to delete order line. 
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */ 
			            
			            deleteOrderLine : function(action,orderLineModel){
			            	if(action === 'YES'){
				            	var apiInput ={'Order':{'OrderHeaderKey':this.model.getCompleteOrderDetails.Order.OrderHeaderKey,'OrderLines':[{'OrderLine':{'Action':'REMOVE','OrderLineKey' : orderLineModel.OrderLineKey}}]}}; 
				            	iscMashup.callMashup(this,"vc_modifyFulfillmentOptionsForDeletion",apiInput,{}).then(this.updateOrderLineList.bind(this),angular.noop);
			            	}
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname updateOrderLineList
						 *@description Call back handler of modifyFulfillmentOptions api when order line is deleted.It Updates Order Header and Order line list data.
						 *@param {Object} data - Controller data of modifyFulfillmentOptions api call.
						 */ 
			            
			            updateOrderLineList : function(data){
			            	var apiOutput = iscMashup.getMashupOutput(data,"vc_modifyFulfillmentOptionsForDeletion");
			            	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
						    this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
						    var alertMessage = iscI18n.translate("viewcartdetails.aria_deleteOrderLineSuccessMessage");
							iscModal.showA11YAlertMessage(alertMessage);
							
							if(this.model.orderLineList.OrderLineList.TotalNumberOfRecords == 0){
								this.model.giftModel = {};
			            		iscWizard.setWizardModel("giftOptionsForOrderModel",{});
			            		this.ui.isOrderGift = '';
							}
							
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname removeGiftOptionsForOrder
						 *@description Removes Gift options for Order by calling changeOrder api.
						 *@param {String} action - action is the response of a confirmation dialog to remove gift options for order. 
						 */ 
			            
			            removeGiftOptionsForOrder : function(action){
			            	if(action === 'YES'){
			            		var orderLineList = this.model.orderLineList.OrderLineList.OrderLine;
			            		/* update the wizard model data */
			            		this.model.giftModel = {};
			            		iscWizard.setWizardModel("giftOptionsForOrderModel",{});
			            		this.ui.isOrderGift = '';
			            		var apiInput =iscOrder.prepareChangeOrderInputForGiftRemoval(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderLineList);
			            		iscMashup.callMashup(this,"store.views.order.modification.changeOrderForGift",apiInput,{}).then(this.updateGiftMessageRemovalForOrder.bind(this),angular.noop);
			            	}
			            },
			           
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiOpenGiftOptionsForOrder
						 *@description Opens Gift options popup for order when Apply Gift Options button is clicked.
						 */  
						uiOpenGiftOptionsForOrder : function(){
			               
			               var that = this;	
			               var isAnyLineGift = iscOrder.checkIfAnyOrderlineIsGift(this.model.orderLineList);
			          	   if(isAnyLineGift){
			          		   iscModal.showConfirmationMessage("viewcartdetails.LABEL_GiftOrderConfirmation").then(function(action){
										that.overRideGiftOptions(action);
									});
			          	   }else{
			          		   this.overRideGiftOptions('YES');
			          	   }
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiOpenGiftOptionsForOrderLine
						 *@description Opens Gift options popup for order line on click of 'Make this product a gift' link.
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */
			            
			            uiOpenGiftOptionsForOrderLine : function(orderlineModel){
			            	
			        	var that = this;
			       		var giftOptionsInput = null;
			       		if(orderlineModel.GiftFlag == "Y"){
			                    
			       			var giftInstructionObj =iscOrder.getGiftInstructionForOrderLine(orderlineModel);
			       			var giftMessage = null;
			       			if(giftInstructionObj !== null){
			       			  giftMessage = giftInstructionObj.InstructionText;
			       			}
			       			
			       			var giftRecipient =null;
			       			if(orderlineModel.PersonInfoMarkFor && orderlineModel.PersonInfoMarkFor.FirstName){
			       				giftRecipient = orderlineModel.PersonInfoMarkFor.FirstName;
				       		}
			       			
			       			 giftOptionsInput = {
			               			gift:{
			               				giftFlag:"Y",
			               				giftWrap: orderlineModel.ItemDetails.PrimaryInformation.AllowGiftWrap,
			               				giftRecipient : giftRecipient,
			               				giftMessage : giftMessage, 
			               				giftWrapChecked: orderlineModel.GiftWrap,
			               				showRemoveGift:'Y'
			              			}
			               	};
			       		}else{
			       			
			       			 giftOptionsInput = {
			               			gift:{
			               				giftWrap: orderlineModel.ItemDetails.PrimaryInformation.AllowGiftWrap,
			               				giftWrapChecked: 'N'
			             			}
			               	};
			       		}
			       		
				       	var giftOptionsModalInput = {
				       			modalInput: function(){
				       				return giftOptionsInput;
				       			}
				       	};
			       	
				       	iscModal.openModal('store.views.common.gift.giftoptions',giftOptionsModalInput,{})
								.then (function(callBackData){
									if(callBackData.data !== null && callBackData.data !== undefined){
										that.applyGiftOptionsForOrderLine.call(that,callBackData.data,orderlineModel);
									}
									},
									angular.noop);
			       
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname overRideGiftOptions.
						 *@description Opens Gift options popup for Order overriding the existing gift options information at order line level .
						 *@param {String} action - action is the response of a confirmation dialog to override gift options. 
						 */
			            
			            overRideGiftOptions : function(action){
			            	if(action === 'YES'){
			            	   var that = this;	
			            	   this.model.giftModel = iscWizard.getWizardModel("giftOptionsForOrderModel");
			            		var giftOptionsInput = {};
			            		giftOptionsInput.gift = {};
			            		
			            		if(!iscCore.isVoid(this.model.giftModel)){
			            			
			            			giftOptionsInput.gift.giftRecipient = this.model.giftModel.giftRecipient;
			            			giftOptionsInput.gift.giftMessage =   this.model.giftModel.giftMessage;
			            			giftOptionsInput.gift.giftWrapChecked = this.model.giftModel.giftWrapChecked
			            		}
			            		
			                	var giftOptionsModalInput = {
			                			modalInput: function(){
			                				return giftOptionsInput;
			                			}
			                	};
			                	
			                	iscModal.openModal('store.views.common.gift.giftoptions',giftOptionsModalInput,{})
			     					.then(function(callBackData){
			    						if(callBackData !== null && callBackData.data !== null && callBackData.data !== undefined){
			    							that.applyGiftOptionsForOrder.call(that,callBackData.data);
			    						}
			       					},
			       					angular.noop);
			                }
			            	},
			            	
			            	 /**
							 *@iscdoc method
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname applyGiftOptionsForOrder.
							 *@description Calls changeOrder api to save data captured in gift options popup.
							 *@param {Object} data - JSON object containing data captured in gift options popup. 
							 */
			            	
			            	applyGiftOptionsForOrder : function(data){
			                	var orderLineList =[];
			                	orderLineList = this.model.orderLineList.OrderLineList.OrderLine;
			            		/* update the wizard model data */
			            		this.model.giftModel = data;
			            		iscWizard.setWizardModel("giftOptionsForOrderModel",data);
			            		this.ui.isOrderGift = data.giftFlag;
			            		var apiInput =iscOrder.prepareChangeOrderInputForGift(data,this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderLineList);
			            		iscMashup.callMashup(this,"store.views.order.modification.changeOrderForGift",apiInput,{}).then(this.updateOrderWithGiftMessage.bind(this),angular.noop);
			            	},
			            
			            	/**
							 *@iscdoc method
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname applyGiftOptionsForOrderLine.
							 *@description Calls changeOrder api to save data captured in gift options popup.
							 *@param {Object} data - JSON object containing data captured in gift options popup. 
							 *@param {Object} orderlineModel - orderLine data as JSON object.  
							 */
			            	
			            applyGiftOptionsForOrderLine : function(data,orderlineModel){
			            	
			            	var orderLineList =[];
			                orderLineList[0] = orderlineModel;
			            	if((!iscCore.isVoid(data.removeGift))&&(data.removeGift === 'Y')){
			            		var apiInput =iscOrder.prepareChangeOrderInputForGiftRemoval(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderLineList);
			            		apiInput.Order.OrderLines.OrderLine[0].Instructions = {};	
			            		apiInput.Order.OrderLines.OrderLine[0].Instructions.Reset = 'Y';
			            		iscMashup.callMashup(this,"store.views.order.modification.changeOrderForGift",apiInput,{}).then(this.updateOrderLineAfterGiftRemoval.bind(this),angular.noop);
			            	}else{
			            		 var apiInput =iscOrder.prepareChangeOrderInputForGift(data,this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderLineList);
			                     iscMashup.callMashup(this,"store.views.order.modification.changeOrderForGift",apiInput,{}).then(this.updateOrderLineWithGiftMessage.bind(this),angular.noop);    	
			            	}
			            	
			        	},
			            
			        	/**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname updateOrderLineAfterGiftRemoval.
						 *@description Updates the order line once the gift options are removed.
						 *@param {Object} data - JSON object containing changeOrder api output. 
						 */
			        	
			        	updateOrderLineAfterGiftRemoval : function(data){
			        		var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.changeOrderForGift");
			        		iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
			        		
			        		if(this.model.orderLineList.OrderLineList.OrderLine.length === 1){
			        			this.model.giftModel = {};
				        		iscWizard.setWizardModel("giftOptionsForOrderModel",{});
				        		this.ui.isOrderGift = '';
				                }
			        		
			        	},
			        	
			        	/**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname updateOrderLineWithGiftMessage.
						 *@description Updates the order line with gift data.
						 *@param {Object} data - JSON object containing changeOrder api output. 
						 */
			        	
			            updateOrderLineWithGiftMessage : function(data){
			            	var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.changeOrderForGift");
			            	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname updateOrderWithGiftMessage.
						 *@description Updates the order with gift data.
						 *@param {Object} data - JSON object containing changeOrder api output. 
						 */
			            
			            updateOrderWithGiftMessage : function(data){
			            	var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.changeOrderForGift");
			            	
			            	if((!iscCore.isVoid(apiOutput.Order.OrderLines)) && (!iscCore.isVoid(apiOutput.Order.OrderLines.OrderLine))){
			            		if(this.model.orderLineList.OrderLineList.OrderLine.length === apiOutput.Order.OrderLines.OrderLine.length){
			            			this.replaceCompleteOrderLineList(apiOutput);
			            		}else{
			            			iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);	
			            		}
			            	}
			            	
			            	this.ui.isOrderGift = 'Y';
			            },
			           
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname updateGiftMessageRemovalForOrder.
						 *@description Updates the order once the gift options are removed.
						 *@param {Object} data - JSON object containing changeOrder api output. 
						 */
			            
			           updateGiftMessageRemovalForOrder : function(data){
			            	var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.changeOrderForGift");
			            	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
			            	//this.replaceCompleteOrderLineList(apiOutput);
			            	this.ui.isOrderGift = '';
			            },
			            
			            /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname replaceCompleteOrderLineList.
						 *@description Updates the orderLineList model with the latest order line list.
						 *@param {Object} apiOutput - JSON object containing changeOrder api output. 
						 */
			            
			            replaceCompleteOrderLineList : function(apiOutput){
			            	if((!iscCore.isVoid(apiOutput.Order.OrderLines)) && (!iscCore.isVoid(apiOutput.Order.OrderLines.OrderLine))){
			            		delete this.model.orderLineList.OrderLineList["OrderLine"];
			                	this.model.orderLineList.OrderLineList.OrderLine = [];
			                	this.model.orderLineList.OrderLineList.OrderLine = apiOutput.Order.OrderLines.OrderLine;	
			            	}
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiCouponApplied
						 *@description This method is used to update order details once a coupon is added or removed
						 *@param {Object} orderDetails - order model that apply coupon directive returns. 
						 */ 
			            uiCouponApplied:function(orderDetails){		        	
				        	this.model.getCompleteOrderDetails = orderDetails;
				        	$scope.editOrderDetails.$setPristine();
							/*var alertMessage = iscI18n.translate("viewcartdetails.aria_applyCouponSuccessMessage");
							iscModal.showA11YAlertMessage(alertMessage);*/
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiValidateQuantityAndUpdate.
						 *@description Validates order line quantity change and calls getItemAvailabilityForStore api to check the Item availability .
						 *@param {Object} qtyField - quantity field as JSON object. 
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */
			            
				  		uiValidateQuantityAndUpdate : function(qtyField,orderlineModel){
				  			
				  			var formats = $locale.NUMBER_FORMATS;
				  			var newQuantity = orderlineModel.OrderLineTranQuantity.OrderedQty;
				  			newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
				  			orderlineModel.OrderLineTranQuantity.OrderedQty = newQuantity;
				  			if(qtyField.oldQty !== newQuantity){
				  				qtyField.oldQty = newQuantity ;
								if (typeof newQuantity == "string")
									newQuantity = parseInt(newQuantity,10);
								if (newQuantity === 0 ) {
									iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.MSG_InvalidQty')); 
									orderlineModel.OrderLineTranQuantity.OrderedQty = orderlineModel.OrderedQty;
									orderlineModel.showQtyUpdate='N';
								}
								else if(newQuantity < orderlineModel.OrderedQty){
									if(newQuantity <= orderlineModel.AvailableQtyForCancelAndStopDelivery){
										this.handleChangeQuantity(orderlineModel,"decreaseQty");
									}
									else{
										iscModal.showErrorMessage(iscI18n.translate('orderModification.MSG_QuantityCannotBeChanged'));
										orderlineModel.OrderLineTranQuantity.OrderedQty = orderlineModel.OrderedQty;
										orderlineModel.showQtyUpdate='N';
									}
								}
								else if(newQuantity > orderlineModel.OrderedQty){
									this.handleChangeQuantity(orderlineModel,"increaseQty");
								}
				  			}
				  		},
						/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleIncreaseQuantity.
						 *@description Checks for item availability for the increased  quantity and if available,updates the order with pending changes.
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */
						 handleChangeQuantity: function(orderlineModel, action){
							 // check item availability,call change order with pending changes only if item is available.
							 var getItemAvailabilityForStoreInput = this.getItemAvailabilityForStoreApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel);
							 var that = this;
							 iscMashup.callMashup(this,"store.views.order.modification.getItemAvailabilityForChangedQty",getItemAvailabilityForStoreInput,{}).then(function(data){
								 that.handleItemAvailabilityForQtyChange(data,orderlineModel, action);
							 },angular.noop);
									 
						 },
						/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleItemAvailabilityForQtyIncrease.
						 *@description If product is not available,then throws error and if product is available invokes change order with pending changes.
						 *@param {Object} data - output of getItemAvailabilityForStore mashup.
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */
						 handleItemAvailabilityForQtyChange: function(data,orderlineModel, action){
							 var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.getItemAvailabilityForChangedQty");
							 if(!iscCore.isVoid(apiOutput.Promise)){
								if(apiOutput.Promise.IsItemQtyAvailable === "N"){
									iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.OrderLineQtyChangeError'));
									/* reset the quantity field */
									var orderLineKey = apiOutput.Promise.OrderLineKey;
									var orderLineList = []; 
									orderLineList = this.model.orderLineList.OrderLineList.OrderLine;
									for(var j=0; j<orderLineList.length; j++){
										
											if(orderLineList[j].OrderLineKey == orderLineKey){
												orderLineList[j].OrderLineTranQuantity.OrderedQty = orderLineList[j].OrderedQty;
												orderLineList[j].showQtyUpdate ='N';
												break;
											}
									}
								}
								 else{
									// item is available, call change order.									
									var modifyFulfillmentOptionsInput = this.getChangeOrderWithPendingChangesInput(orderlineModel,action,apiOutput);
									if(orderlineModel.LineSeqNumber > this.ui.orderLinesCountWizardLoad) {
										iscMashup.callMashup(this,"store.views.order.modification.changeQty.newLineChangeOrder",modifyFulfillmentOptionsInput,{}).then(this.handleOrderLineQtyChangeForNewLine.bind(this),angular.noop);
									}else{
										iscMashup.callMashup(this,"store.views.order.modification.changeQty.modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleOrderLineQtyChange.bind(this),angular.noop);
									}
								}	
							 }													  
						 },
						/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname getChangeOrderWithPendingChangesInput.
						 *@description Prepares input model for change order mashup with pending changes.
						 *@param {Object} orderlineModel - orderLine data as JSON object.
						 *@param {String} action - indicates ui action.
						 */
						 getChangeOrderWithPendingChangesInput: function(orderlineModel,action,getItemAvailabilityForStoreOutput){
							 var noteText = '';
							 var note = '';
							 var  modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
							 modifyFulfillmentOptionsInput.Order.PendingChanges = {
										'RecordPendingChanges':'Y'
									};
							 
							 
							if(orderlineModel.DeliveryMethod =='SHP'){
								modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].EarliestShipDate = getItemAvailabilityForStoreOutput.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability.EarliestShipDate;
							}
							
							if(orderlineModel.DeliveryMethod =='PICK'){
								modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ReqShipDate = getItemAvailabilityForStoreOutput.Promise.PromiseLines.PromiseLine[0].Availabilities.Availability.ProductAvailDate;
							}
							
							if(action === "decreaseQty"){
								noteText = iscI18n.translate('orderModification.MSG_QuantityDecreased',
		            							{itemId: orderlineModel.ItemDetails.ItemID});
							 	note = iscOrder.addNote(noteText,"YCD_DECREASE_LINE_QTY");
							}
							else if(action === "increaseQty"){
								noteText = iscI18n.translate('orderModification.MSG_QuantityIncreased',
		            									{itemId: orderlineModel.ItemDetails.ItemID});
								note = iscOrder.addNote(noteText,"YCD_INCREASE_LINE_QTY");
							}	
							
							
							 modifyFulfillmentOptionsInput.Order.Notes = [];
							 modifyFulfillmentOptionsInput.Order.Notes.push(note);
							 modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
					  		 modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.OrderedQty = orderlineModel.OrderLineTranQuantity.OrderedQty;
							 return modifyFulfillmentOptionsInput;
						 },
				  		/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiShowUpdateButton.
						 *@description Shows/hides Update button for quantity field based on the validity of the edited quantity.
						 *@param {Object} qtyField - quantity field as JSON object. 
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */
				  		
				  		uiShowUpdateButton : function(qtyField,orderlineModel){
				  						
				  						var formats = $locale.NUMBER_FORMATS;
							  			var newQuantity = orderlineModel.OrderLineTranQuantity.OrderedQty;
							  			
							  			if(!iscCore.isVoid(newQuantity))
							  				newQuantity = newQuantity.replace(formats.GROUP_SEP, '');
							  		
							  				
							  			
							  			if((!iscCore.isVoid(newQuantity)) && qtyField.oldQty !== newQuantity)
							  				orderlineModel.showQtyUpdate ='Y';
							  			else
							  				orderlineModel.showQtyUpdate ='N';
				  			
				  		},
				  		
				  		/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiHideUpdateButton.
						 *@description hides Update button for quantity field.
						 *@param {Object} orderlineModel - orderLine data as JSON object. 
						 */
				  		
				  		uiHideUpdateButton : function(orderlineModel){
				  			orderlineModel.showQtyUpdate ='N';
				  		},
				  		/**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname getItemAvailabilityForStoreApiInput.
						 *@description utility to prepare getItemAvailabilityForStore api input.
						 *@param {String} orderHeaderKey - unique identifier for order. 
						 *@param {String} orderlineModel - orderLine data as JSON object. 
						 *@returns {Object} json object. 
						 */
				  		getItemAvailabilityForStoreApiInput : function(orderHeaderKey,orderlineModel){
				  			var getItemAvailabilityForStoreInput = {'Promise':
													                  {'OrderHeaderKey':orderHeaderKey,
													                   'OrderLineKey':	orderlineModel.OrderLineKey,
													                   'PromiseLines':
													                       {
													                       'PromiseLine':
													                              [ 
													                                {'ItemID':orderlineModel.ItemDetails.ItemID,
													                                 'UnitOfMeasure' : orderlineModel.ItemDetails.UnitOfMeasure,
														                             'RequiredQty': orderlineModel.OrderLineTranQuantity.OrderedQty,
														                             'Quantity':orderlineModel.OrderLineTranQuantity.OrderedQty,
														                             'OrderLine':
														                                {
														                                   'OrderLineKey':orderlineModel.OrderLineKey,
															                               'DeliveryMethod':orderlineModel.DeliveryMethod 
														                                }
													                               }
													                              ] 
													                       }
													                   }
													                }; 

							if(orderlineModel.DeliveryMethod === "SHP"){
								getItemAvailabilityForStoreInput.Promise.ComputeShpAvl = "Y";	
							}
							
							else if(orderlineModel.DeliveryMethod === "PICK"){
								getItemAvailabilityForStoreInput.Promise.ComputePickupAvl = "Y";	
							    getItemAvailabilityForStoreInput.Promise.ShipNode =  orderlineModel.Shipnode.ShipNode;
							}
							else if(orderlineModel.DeliveryMethod === "CARRY"){
							getItemAvailabilityForStoreInput.Promise.ComputeCarryAvl = "Y";
							getItemAvailabilityForStoreInput.Promise.ShipNode =  orderlineModel.Shipnode.ShipNode;
							}
				  			
							return getItemAvailabilityForStoreInput;
				  		},
				  		
				  		/**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiGetOrderLineListNext.
						 *@description Shows next set of order lines when order lines panel is scrolled.
						 */
				  		
				  		uiGetOrderLineListNext: function(){
			            	    if(this.ui.oLineShownCount <= this.model.orderLineList.OrderLineList.OrderLine.length){
				                  this.ui.oLineShownCount+=5;
				                }
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiOLineScrollActionValidator 
						 *@description Validates if next page action should be performed by checking whther api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
						 */
			            
			            uiOLineScrollActionValidator : function(){
			            	return true;
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiCheckDirtyStateBeforePayment
						 *@description Onclick event handler for 'Save' button.Checks the edit order details screen for dirty state.
						 */
			            uiCheckDirtyStateBeforePayment : function (){
			            	
			            	/* Check whether the screen is dirty before navigating to payment screen*/
			            	 
			            	 var isDirty = $scope.editOrderDetails.$dirty;
			            	 if(isDirty){
			            		 var that = this;
			            		 iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
				            			if(iscCore.isBooleanTrue(action)){
				            				that.uiSavePendingChanges();
				            			}
			            	 });
			            	 }else{
			            		 this.uiSavePendingChanges();
			            	 }		
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiValidateOrderBeforePayment
						 *@description Handles 'Continue to Payment' button when screen is not dirty.Validates the order for Shipping address when shipping lines are present.
						 */
			            
			             uiValidateOrderBeforePayment : function(){
			            	 
			            	/* check whether all the lines are carry lines*/  
			            	 
	            		    var orderDetailsModel = {};
	            		    orderDetailsModel.Order= {};
	            		    orderDetailsModel.Order.OrderLines = {};
	            		    orderDetailsModel.Order.OrderLines.OrderLine = this.model.orderLineList.OrderLineList.OrderLine;
	            		   
	            		    if(iscOrder.orderHasOnlyCarryLines(orderDetailsModel)){
	            		    	
	            		    	iscMashup.callMashup(this,"store.views.order.modification.changeOrderToApplyPendingChanges",{"Order" : { "OrderHeaderKey" : this.model.getCompleteOrderDetails.Order.OrderHeaderKey}},{}).then(this.showPendingChangesSuccess.bind(this),angular.noop);
	            		    }
	            		    else{
	            		    	
	            		    	
			            	 var isShippingLinePresent = iscOrder.checkIfOrderHasShipLines(this.model.orderLineList.OrderLineList.OrderLine);
			            	 
			             	/* validate whether all the lines have ship to address*/
			            	 var isShippingLinePresent = iscOrder.checkIfOrderHasShipLines(this.model.orderLineList.OrderLineList.OrderLine);
			            	 var checkAvailability = true;
			            	 if(isShippingLinePresent){
			            		 var orderEditModel = this.model.getCompleteOrderDetails;
			                	 if(iscCore.isVoid(orderEditModel.Order.PersonInfoShipTo)){
			                		 iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.NoShipToAddressOline')); 
			                		 checkAvailability = false;
			            	 }
			            	 }
			            	     if(checkAvailability){
			            	     	if(!iscOrder.orderHasMixedSettledLines(this.model.orderLineList.OrderLineList.OrderLine)){
			            	     		var apiInput = {};
				                 		apiInput.Order= {};
				                 		apiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
				                 		/*iscMashup.callMashup(this,"store.views.order.modification.changeOrderToApplyPendingChanges",{"Order" : { "OrderHeaderKey" : this.model.getCompleteOrderDetails.Order.OrderHeaderKey}},{}).then(this.handleSavePendingChanges.bind(this));	
				                 		iscMashup.callMashup(this,"store.views.order.modification.getCompleteOrderLineList_CheckAvailability",apiInput,{}).then(this.goToPaymentPage.bind(this)); */
				                 		
				                 		var changeOrderMashupRefObj = iscMashup.getMashupRefObj(this,"store.views.order.modification.changeOrderToApplyPendingChanges",apiInput);
			            	    		var computeAvailabilityMashupRefObj = iscMashup.getMashupRefObj(this,"store.views.order.modification.getCompleteOrderLineList_CheckAvailability",apiInput);
			            	    		
				                 		var mashupRefList = [changeOrderMashupRefObj,computeAvailabilityMashupRefObj];
		            					iscMashup.callMashups(this,mashupRefList,{}).then(this.handleSavePendingChanges.bind(this),angular.noop);
			            	     	}
			            	    	else {
			            	    		var computeAvailabilityApiInput = {};
				                 		computeAvailabilityApiInput.Order= {};
				                 		computeAvailabilityApiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
				                 		var updateSettledQtyOnAllLinesApiInput = {};
				                 		updateSettledQtyOnAllLinesApiInput.Order= {};
				                 		updateSettledQtyOnAllLinesApiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
				                 		updateSettledQtyOnAllLinesApiInput.Order.OrderLines = {};
				                 		updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine = [];
				                 		for(var i= 0; i<this.model.orderLineList.OrderLineList.OrderLine.length; i++){
				                 			var orderline = this.model.orderLineList.OrderLineList.OrderLine[i];
											if(orderline.OrderLineTranQuantity && orderline.OrderLineTranQuantity.OrderedQty 
												&& orderline.OrderLineTranQuantity.SettledQuantity && orderline.OrderLineTranQuantity.OrderedQty != orderline.OrderLineTranQuantity.SettledQuantity){
												var lengthOfInputOrderLines = updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine.length;
												updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines] = {};
												updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineKey = orderline.OrderLineKey;
												updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineTranQuantity = {};
												updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineTranQuantity.SettledQuantity = orderline.OrderLineTranQuantity.OrderedQty;
											 }
										}
				                 		
				                 		var changeOrderMashupRefObj = iscMashup.getMashupRefObj(this,"store.views.order.modification.changeOrderToApplyPendingChanges",{"Order" : { "OrderHeaderKey" : this.model.getCompleteOrderDetails.Order.OrderHeaderKey}});
			            	    		var updateSettledQtyOnAllLinesMashupRefObj = iscMashup.getMashupRefObj(this,"vc_updateSettledQtyOnAllLines",updateSettledQtyOnAllLinesApiInput);
			            	    		var computeAvailabilityMashupRefObj = iscMashup.getMashupRefObj(this,"store.views.order.modification.getCompleteOrderLineList_CheckAvailability",computeAvailabilityApiInput);
			            	    		var mashupRefList = [changeOrderMashupRefObj,updateSettledQtyOnAllLinesMashupRefObj,computeAvailabilityMashupRefObj];
		            					iscMashup.callMashups(this,mashupRefList,{}).then(this.handleSavePendingChanges.bind(this),angular.noop);
			            	    	}
			            	     }
			            		 
			              }
			             }  
	            		    ,
				            /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname uiSavePendingChangesBeforeChangeDeliveryMethod
							 *@description Saves any pending changes before opening the change delivery method pop up in case of order lines beyond scheduled status.
							 */
				            
				             uiSavePendingChangesBeforeChangeDeliveryMethod : function(){
				            	 
				            	/* check whether all the lines are carry lines*/  
				            	 
		            		    var orderDetailsModel = {};
		            		    orderDetailsModel.Order= {};
		            		    orderDetailsModel.Order.OrderLines = {};
		            		    orderDetailsModel.Order.OrderLines.OrderLine = this.model.orderLineList.OrderLineList.OrderLine;
		            		   
		            		    if(iscOrder.orderHasOnlyCarryLines(orderDetailsModel)){
		            		    	
		            		    	iscMashup.callMashup(this,"store.views.order.modification.changeOrderToApplyPendingChanges",{"Order" : { "OrderHeaderKey" : this.model.getCompleteOrderDetails.Order.OrderHeaderKey}},{}).then(this.showPendingChangesSuccess.bind(this),angular.noop);
		            		    }
		            		    else{
		            		    	
		            		    	
				            	 var isShippingLinePresent = iscOrder.checkIfOrderHasShipLines(this.model.orderLineList.OrderLineList.OrderLine);
				            	 
				             	/* validate whether all the lines have ship to address*/
				            	 var isShippingLinePresent = iscOrder.checkIfOrderHasShipLines(this.model.orderLineList.OrderLineList.OrderLine);
				            	 var checkAvailability = true;
				            	 if(isShippingLinePresent){
				            		 var orderEditModel = this.model.getCompleteOrderDetails;
				                	 if(iscCore.isVoid(orderEditModel.Order.PersonInfoShipTo)){
				                		 iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.NoShipToAddressOline')); 
				                		 checkAvailability = false;
				            	 }
				            	 }
				            	     if(checkAvailability){
				            	     	if(!iscOrder.orderHasMixedSettledLines(this.model.orderLineList.OrderLineList.OrderLine)){
				            	     		var apiInput = {};
					                 		apiInput.Order= {};
					                 		apiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
					                 		/*iscMashup.callMashup(this,"store.views.order.modification.changeOrderToApplyPendingChanges",{"Order" : { "OrderHeaderKey" : this.model.getCompleteOrderDetails.Order.OrderHeaderKey}},{}).then(this.handleSavePendingChanges.bind(this));	
					                 		iscMashup.callMashup(this,"store.views.order.modification.getCompleteOrderLineList_CheckAvailability",apiInput,{}).then(this.goToPaymentPage.bind(this)); */
					                 		
					                 		var changeOrderMashupRefObj = iscMashup.getMashupRefObj(this,"store.views.order.modification.changeOrderToApplyPendingChanges",apiInput);
				            	    		var computeAvailabilityMashupRefObj = iscMashup.getMashupRefObj(this,"store.views.order.modification.getCompleteOrderLineList_CheckAvailability",apiInput);
				            	    		
					                 		var mashupRefList = [changeOrderMashupRefObj,computeAvailabilityMashupRefObj];
			            					iscMashup.callMashups(this,mashupRefList,{}).then(this.handleSavePendingChangesBeforeChangeDeliveryMethod.bind(this),angular.noop);
				            	     	}
				            	    	else {
				            	    		var computeAvailabilityApiInput = {};
					                 		computeAvailabilityApiInput.Order= {};
					                 		computeAvailabilityApiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
					                 		var updateSettledQtyOnAllLinesApiInput = {};
					                 		updateSettledQtyOnAllLinesApiInput.Order= {};
					                 		updateSettledQtyOnAllLinesApiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
					                 		updateSettledQtyOnAllLinesApiInput.Order.OrderLines = {};
					                 		updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine = [];
					                 		for(var i= 0; i<this.model.orderLineList.OrderLineList.OrderLine.length; i++){
					                 			var orderline = this.model.orderLineList.OrderLineList.OrderLine[i];
												if(orderline.OrderLineTranQuantity && orderline.OrderLineTranQuantity.OrderedQty 
													&& orderline.OrderLineTranQuantity.SettledQuantity && orderline.OrderLineTranQuantity.OrderedQty != orderline.OrderLineTranQuantity.SettledQuantity){
													var lengthOfInputOrderLines = updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine.length;
													updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines] = {};
													updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineKey = orderline.OrderLineKey;
													updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineTranQuantity = {};
													updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineTranQuantity.SettledQuantity = orderline.OrderLineTranQuantity.OrderedQty;
												 }
											}
					                 		
					                 		var changeOrderMashupRefObj = iscMashup.getMashupRefObj(this,"store.views.order.modification.changeOrderToApplyPendingChanges",{"Order" : { "OrderHeaderKey" : this.model.getCompleteOrderDetails.Order.OrderHeaderKey}});
				            	    		var updateSettledQtyOnAllLinesMashupRefObj = iscMashup.getMashupRefObj(this,"vc_updateSettledQtyOnAllLines",updateSettledQtyOnAllLinesApiInput);
				            	    		var computeAvailabilityMashupRefObj = iscMashup.getMashupRefObj(this,"store.views.order.modification.getCompleteOrderLineList_CheckAvailability",computeAvailabilityApiInput);
				            	    		var mashupRefList = [changeOrderMashupRefObj,updateSettledQtyOnAllLinesMashupRefObj,computeAvailabilityMashupRefObj];
			            					iscMashup.callMashups(this,mashupRefList,{}).then(this.handleSavePendingChangesBeforeChangeDeliveryMethod.bind(this),angular.noop);
				            	    	}
				            	     }
				            		 
				              }
				             },
			              /**
							 *@iscdoc method
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname goToPaymentPage
							 *@description Callback handler for getCompleteOrderLineList api whose custom mashup checks the availbility of all order lines.If all the lines are available,Payment screen is shown. 
							 *@param {Object} data - JSON object containing getCompleteOrderLineList api output.
						  */
			              
			              goToPaymentPage : function(data){
			            	 var output = iscMashup.getMashupOutput(data,"store.views.order.modification.getCompleteOrderLineList_CheckAvailability");
			             	 if(output.OrderLineList.IsAnyLineUnAvailable == "N"){
			             		 iscWizard.gotoCustomPage('paymentCapture',{},{});;
			             	 }
			             	 else{
			             		 iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.UnAvailbleLines'));
			             	 }
			              },
                        
			              /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname uiGetItemDetails
							 *@description Opens product details screen.
							 *@param {String} itemId - one of the unique identifier of a product.  
							 *@param {String} uom - one of the unique identifier of a product.  
						  */
			              
			            uiGetItemDetails:function(itemId,uom){
			  				if(!iscCore.isVoid(itemId)){
			  					var pageInput = {
			  							input: itemId
			  					};
			  			        iscWizard.gotoCustomPage('addItems',pageInput,{});
			  				}
			  		    },
			  		  
			  		  /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiAddOrEditAddress
						 *@description Opens Address capture popup for Adding or Editing Order/OrderLine shippping address.
						 *@param {String} mode - Specifies whether the address needs to be added or edited.
						 *@param {Object} orderlineModel - orderLine data as JSON object.    
					  */
			  		    
			  		  uiAddOrEditAddress : function(mode,orderlineModel){
			 			   var that = this;
			 			   var popupInput = {};
			 			   popupInput.Mode = mode;
			 			  
			 			   popupInput.Context = "showDefaultshipto";
			 			   if(mode == "Edit"){
			 				  if(!iscCore.isVoid(orderlineModel.PersonInfoShipTo)){
			 					 popupInput.PersonInfo = angular.copy(orderlineModel.PersonInfoShipTo);     
			 				  }else{
			 					 popupInput.PersonInfo = angular.copy(this.model.getCompleteOrderDetails.Order.PersonInfoShipTo);   
			 				  }
			 			   }
			 			   
			 			   if(!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo){
			 				  popupInput.hideShipaddress = true;
			 			   }else {
			 				  if(mode=='Add'){
			 					 popupInput.PersonInfo ={};
			 				  }
			 					 popupInput.PersonInfo.IsDefaultShippingAddress='N';
			 			   }
			 			  
			 			   var addressPopUpInput = {
			 					 modalInput: function(){
			          				return popupInput;
			          			}   
			 					   
			 			   };
			 			   
			 			 iscModal.openModal('store.views.common.orderaddress.orderaddresspopup',addressPopUpInput,{})
								.then(function(callBackData){
			          			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
			          				that.onAddressAdditionOrEdit.call(that,callBackData.data,orderlineModel);
			          			}		            			
			     				},
								angular.noop);
			 		     },
			 		  
			 		    /**
							 *@iscdoc method
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname onAddressAdditionOrEdit
							 *@description Call back handler of address capture popup,which calls getItemAvailabilityForStore api for captured address to check the availability of the product.
							 *@param {Object} data - data captured in address capture popup.
							 *@param {Object} orderlineModel - orderLine data as JSON object.    
						  */
			 		     
			 		  onAddressAdditionOrEdit : function(data,orderlineModel){
			 			    
			 			    var personInfo = angular.copy(data);
			 			    
			 			   delete personInfo.IsDefaultShippingAddress;
			 			   delete personInfo.IsDefaultBillingAddress;
			 			   
			 			    var modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
				  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
				  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.OrderedQty = orderlineModel.OrderLineTranQuantity.OrderedQty;
				  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = {};
				  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = personInfo;
				  			
				  			/* check if the order has ship to address*/
				  			if((!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo) || (data.IsDefaultShippingAddress === 'Y')){
				  				modifyFulfillmentOptionsInput.Order.PersonInfoShipTo  =  personInfo;
				  				if(!this.model.getCompleteOrderDetails.Order.BillToID){
				  				modifyFulfillmentOptionsInput.Order.CustomerFirstName =  personInfo.FirstName;
				      	        modifyFulfillmentOptionsInput.Order.CustomerLastName  =  personInfo.LastName;
				      	        modifyFulfillmentOptionsInput.Order.CustomerEMailID   =  personInfo.EMailID;
				      	        modifyFulfillmentOptionsInput.Order.CustomerZipCode   =  personInfo.ZipCode;
				  				}
				  			}
			               /* getItemAvailabilityForStore API Input*/
				  			
				  			var getItemAvailabilityForStoreInput = this.getItemAvailabilityForStoreApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel);
				  			getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine[0].ShipToAddress = personInfo;
				  			getItemAvailabilityForStoreInput.Promise.modifyFulfillmentOptionsInput =modifyFulfillmentOptionsInput ;
				  			iscMashup.callMashup(this,"store.views.order.modification.getItemAvailabilityForStore",getItemAvailabilityForStoreInput,{}).then(this.handleShippingLineAddress.bind(this),angular.noop);
				  			
			 		  },
			 		   
			 		 /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiIdentifyCustomerPopup
						 *@description Opens identify customer popup.
						 *@param {Object} orderlineModel - orderLine data as JSON object.    
					  */
			 		  
			  		   uiIdentifyCustomerPopup:function(orderlineModel){
			  			var customerInput = {};
			  			var that = this;
			  			customerInput.Mode = "Identify";
			  			var customerPopupInput = {
			          			modalInput: function(){
			          				return customerInput;
			          			}
			          	};
			  			
						iscModal.openModal('store.views.common.customer.customerpopup',customerPopupInput,{})
								.then(function(callBackData){
			        			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
			        				that.onCustomerIdentification.call(that,callBackData.data);
			        			}		            			
			   				},
								angular.noop);	
			  		  },
			  		  
			  		 /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname onCustomerIdentification
						 *@description call back handler of identify customer popup.It calls modifyFulfillmentOptions to save the customer information on order.
						 *@param {Object} customerInfo - data passed from identify customer popup .    
					  */
			  		  
			          onCustomerIdentification: function(customerInfo){
			        	  var customerModel = customerInfo.customerModel;
			        	  
			        	   var modifyFulfillmentOptionsInput  = {};
			          	   modifyFulfillmentOptionsInput.Order ={};
			          	   modifyFulfillmentOptionsInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
			          	   modifyFulfillmentOptionsInput.Order.BillToID = customerModel.Customer.CustomerID; 
			          	   if(!iscCore.isVoid(customerInfo.addressSelected)){
			          		 modifyFulfillmentOptionsInput.Order.PersonInfoShipTo={}
				  			 modifyFulfillmentOptionsInput.Order.PersonInfoShipTo = angular.copy(customerInfo.addressSelected.PersonInfo);
			          	   }
			          	   
			          	   
			      	       if(customerModel.Customer.CustomerType === '02' || (customerModel.Customer.CustomerContactList &&  customerModel.Customer.CustomerContactList.CustomerContact && customerModel.Customer.CustomerContactList.CustomerContact.length === 1)){
			  				modifyFulfillmentOptionsInput.Order.CustomerContactID =  customerModel.Customer.CustomerContactList.CustomerContact[0].CustomerContactID;
			  				modifyFulfillmentOptionsInput.Order.CustomerFirstName =  customerModel.Customer.CustomerContactList.CustomerContact[0].FirstName;
			     	    	modifyFulfillmentOptionsInput.Order.CustomerLastName  =  customerModel.Customer.CustomerContactList.CustomerContact[0].LastName;
			     	    	modifyFulfillmentOptionsInput.Order.CustomerEMailID   =  customerModel.Customer.CustomerContactList.CustomerContact[0].EMailID;
			     	    	
			     	    	if(!iscCore.isVoid(customerInfo.addressSelected)){
			     	    		modifyFulfillmentOptionsInput.Order.CustomerZipCode   =  customerInfo.addressSelected.PersonInfo.ZipCode;
				          	   }
			      	       }
			          	 
			      	      iscMashup.callMashup(this,"store.views.order.modification.customer_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleModifyFulfillmentOptionsForCustomer.bind(this),angular.noop);  
			          },
			          
			          /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiEditAddressInCustomerPanel
						 *@description Opens address capture popup when Edit link is clicked in customer panel 
						 *@param {Object} customerInfo - data passed from identify customer popup .    
					  */
			          
			          uiEditAddressInCustomerPanel: function(){
			        	  var that = this;
			   		      var popupInput = {};
			   		      popupInput.Mode = 'Edit';
			   			  popupInput.PersonInfo = angular.copy(this.model.getCompleteOrderDetails.Order.PersonInfoShipTo);   
			   			  popupInput.hideShipaddress = true;
			   		      var addressPopUpInput = {
			   				 modalInput: function(){
			        				return popupInput;
			        			}   
			   		      };
			   		      var maxOrderStatus = this.model.getCompleteOrderDetails.Order.MaxOrderStatus;
			   		      //Do not allow changing of the order address if any orderline has a status of scheduled or greater.
			        	  if(!iscCore.isVoid(maxOrderStatus)) {
			        		  if(maxOrderStatus.indexOf(".") > 0){
			        			  maxOrderStatus = maxOrderStatus.substring(0,maxOrderStatus.indexOf("."));
			        		  }
			        		  if(maxOrderStatus>=1500){
			        			  //iscModal.showErrorMessage(iscI18n.translate('orderModification.MSG_NoOrderAddressChange'));
			        			  iscModal.showInfoMessage(iscI18n.translate('orderModification.MSG_NoOrderAddressChange'));
			        			  return;
			        		  }
			        	  }
			   		   
				   		  iscModal.openModal('store.views.common.orderaddress.orderaddresspopup',addressPopUpInput,{})
				   				.then(function(callBackData){
				        			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
				        				that.handleEditAddressInCustomerPanel.call(that,callBackData.data);
				        			}		            			
				   				},
				   				angular.noop);
			          },
			     		
			     		 /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleEditAddressInCustomerPanel
						 *@description Call back handler for order address popup opened in customer panel.this method calls modifyFulfillmentOptions api is called to save the new address.
						 *@param {Object} newAddress - data passed from identify order address popup .    
					     */
			     		
			     		handleEditAddressInCustomerPanel: function(newAddress){
			     		   
			               var personInfo = angular.copy(newAddress);
			 			   delete personInfo.IsDefaultShippingAddress;
			 			    
			     		   var modifyFulfillmentOptionsInput  = {};
			           	   modifyFulfillmentOptionsInput.Order ={};
			           	   modifyFulfillmentOptionsInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
			           	   modifyFulfillmentOptionsInput.Order.PersonInfoShipTo={}
			           	   modifyFulfillmentOptionsInput.Order.PersonInfoShipTo = personInfo;
			           	  
			           	   if(!this.model.getCompleteOrderDetails.Order.BillToID){
			     	       modifyFulfillmentOptionsInput.Order.CustomerFirstName =   personInfo.FirstName;
			     	       modifyFulfillmentOptionsInput.Order.CustomerLastName  =   personInfo.LastName;
			     	       modifyFulfillmentOptionsInput.Order.CustomerEMailID   =   personInfo.EMailID;
			     	       modifyFulfillmentOptionsInput.Order.CustomerZipCode   =   personInfo.ZipCode;
			           	   }
			            	  iscMashup.callMashup(this,"store.views.order.modification.customer_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleModifyFulfillmentOptionsForCustomer.bind(this),angular.noop);  
			     		},
			     		
			     		 /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiOpenOverridePriceModal
						 *@description onclick handler function for override price icon
						 *@param {Object} orderlineModel - orderLine data as JSON object.    
					     */	
			  		  uiOpenOverridePriceModal: function(orderlineModel){
			          	var that = this;
			          	var ovpInput = {};
			          	ovpInput.price = {};
			          	ovpInput.price.listPrice =  orderlineModel.LinePriceInfo.ListPrice;
			          	ovpInput.price.unitPrice =  orderlineModel.LinePriceInfo.UnitPrice;
			          	ovpInput.price.Currency = this.model.getCompleteOrderDetails.Order.PriceInfo.Currency;
			          	
			          	var priceOverrideInput = {
			          			modalInput: function(){
			          				return ovpInput;
			          			}
			          	};
			          	
			          	iscModal.openModal('store.views.common.priceoverride.priceoverride',priceOverrideInput,{})
								.then(function(callBackData){
			          			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
			          				that.onPriceOverride.call(that,callBackData.data,orderlineModel);
			          			}		            			
			     				},
								angular.noop);	
			          },
			          
			          /**
			           * @iscdoc method
			           * @viewname store.views.order.modification.edit-order-details
			           * @methodname onPriceOverride
			           * @description callback handler function for price override popup.saves the overridden price against item.
			           *@param {Object} data - data sent from override price popup.
					   *@param {Object} orderlineModel - orderLine data as JSON object.  
			           */
			          onPriceOverride: function(data,orderlineModel){
			  			var modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
			  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo = {};
			  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo.ListPrice = orderlineModel.LinePriceInfo.ListPrice;
			  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo.UnitPrice = data.newprice;
			  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo.IsPriceLocked = 'Y';
			         	iscOrder.addPriceOverrideDefaultNote(modifyFulfillmentOptionsInput,data.reason);
			         	iscMashup.callMashup(this,"store.views.order.modification.ovp_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handlePriceOverrideApiCall.bind(this),angular.noop);
			          },
			          
			          /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handlePriceOverrideApiCall
						 *@description Call back handler of modifyFulfillmentOptions api when unit price of product is overridden.
						 *@param {Object} data - modifyFulfillmentOptions api output. 
						 */
			          
			          handlePriceOverrideApiCall : function(data){
			        	  var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.ovp_modifyFulfillmentOptions");  
                          this.handleModifyFulfillmentOptionsApiOutput(apiOutput);
			          },
			          
			          /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleModifyFulfillmentOptionsForCustomer
						 *@description Call back handler of modifyFulfillmentOptions api when customer is identified or order address is changed in customer panel.
						 *@param {Object} data - modifyFulfillmentOptions api output.
						 */
			          
			          handleModifyFulfillmentOptionsForCustomer : function(data){
			        	  var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.customer_modifyFulfillmentOptions");  
                          this.handleModifyFulfillmentOptionsApiOutput(apiOutput);
			          },
			          
			          /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleModifyFulfillmentOptionsOutput
						 *@description Call back handler of modifyFulfillmentOptions api when coupon is removed,store is selected for a pickup line and delivery method is changed.
						 *@param {Object} data - modifyFulfillmentOptions api output.
						 */
			          
			          handleModifyFulfillmentOptionsOutput : function(data){
			        	  var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.modifyFulfillmentOptions");  
                          this.handleModifyFulfillmentOptionsApiOutput(apiOutput);
                          this.model.couponInput.couponID ="";
			          },
			          
			          //store.views.order.modification.changeOrderForNewLines
			          /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleChangeOrderForNewLinesOutput
						 *@description Call back handler of changeOrderForNewLines api when delivery method is changed for new line.
						 *@param {Object} data - changeOrder api output.
						 */
			          
			          handleChangeOrderForNewLinesOutput : function(data){
			        	  var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.changeOrderForNewLines");  
			        	  this.handleModifyFulfillmentOptionsApiOutput(apiOutput);
			          },
			          
			          /**
						 *@iscdoc method
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleModifyFulfillmentOptionsApiOutput
						 *@description Utility which updates orderLineList,getCompleteOrderDetails models when modifyFulfillmentOptions api is called.
						 *@param {Object} apiOutput - modifyFulfillmentOptions api output.
						 */
			          
				  	        handleModifyFulfillmentOptionsApiOutput : function (apiOutput){
				  	        	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
		  	    			    this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
		  	    			    this.setOrderTotalAfterModificationMsg(iscWizard.getWizardModel("orderPricingModel"),this.model.getCompleteOrderDetails);
				  	        },
				  	          
				  	      /**
							 *@iscdoc method
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname handleOrderLineQtyChange
							 *@description Call back handler of getItemAvailabilityForStore api.
							 *@param {Object} data - getItemAvailabilityForStore api output.
							 */
				  	        
				  	        handleOrderLineQtyChange : function(data){
				  	        	this.handleItemAvailabilityAndOrderModification(data);
								var alertMessage = iscI18n.translate("viewcartdetails.aria_updateOrderLineQtySuccessMessage");
								iscModal.showA11YAlertMessage(alertMessage);
				  	        },
					  	      /**
							 *@iscdoc method
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname handleOrderLineQtyChangeForNewLine
							 *@description Call back handler of changeOrder api.
							 *@param {Object} data - getItemAvailabilityForStore api output.
							 */
				  	        
				  	      handleOrderLineQtyChangeForNewLine : function(data){
				  	        	this.handleItemAvailabilityAndOrderModificationForNewLine(data);
								var alertMessage = iscI18n.translate("viewcartdetails.aria_updateOrderLineQtySuccessMessage");
								iscModal.showA11YAlertMessage(alertMessage);
				  	        },
				  	      //
				  	      /**
							 *@iscdoc method
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname handleShippingLineAddress
							 *@description Call back handler of getItemAvailabilityForStore api when shipping line is address is added/modified.
							 *@param {Object} data - getItemAvailabilityForStore api output.
							 */
				  	        
				  	      handleShippingLineAddress : function(data){
				  	    	this.handleItemAvailabilityAndOrderModification(data);  
				  	      },
				  	      
				  	      /**
							 *@iscdoc method
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname handleItemAvailabilityAndOrderModification
							 *@description Call back handler of getItemAvailabilityForStore api.
							 *@param {Object} data - getItemAvailabilityForStore api output.
							 */
				  	        
				  	        handleItemAvailabilityAndOrderModification : function(data){								 
								var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.changeQty.modifyFulfillmentOptions");  	

								iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
								this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
								if(iscCore.isVoid(this.model.getCompleteOrderDetails.PromotionsApplied)){
									this.ui.showCouponScanField = false;
								}
								this.setOrderTotalAfterModificationMsg(iscWizard.getWizardModel("orderPricingModel"),this.model.getCompleteOrderDetails);
								$scope.editOrderDetails.$setPristine();
				  	        },
				  	        //
					  	      /**
							 *@iscdoc method
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname handleItemAvailabilityAndOrderModificationForNewLine
							 *@description Call back handler of changeOrder api for new line.
							 *@param {Object} data - getItemAvailabilityForStore api output.
							 */
				  	        
				  	      handleItemAvailabilityAndOrderModificationForNewLine : function(data){								 
								var apiOutput = iscMashup.getMashupOutput(data,"store.views.order.modification.changeQty.newLineChangeOrder");  	

								iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
								this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
								if(iscCore.isVoid(this.model.getCompleteOrderDetails.PromotionsApplied)){
									this.ui.showCouponScanField = false;
								}
								this.setOrderTotalAfterModificationMsg(iscWizard.getWizardModel("orderPricingModel"),this.model.getCompleteOrderDetails);
								$scope.editOrderDetails.$setPristine();
				  	        },
				  	      /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname uiOpenStoreSearch
							 *@description onclick handler function for store address link.It opens Store search popup.
							 *@param {Object} orderlineModel - orderLine data as JSON object.    
						     */	
				            uiOpenStoreSearch: function(orderlineModel){
				            	var that = this;
				            	var currentStoreAddress = iscAppContext.getFromContext('storeAddress').ShipNodePersonInfo;
				            	var editOrderRule = this.model.getRuleDetails_EditOrderAfterSchedule.Rules.RuleSetValue;

				            	if(orderlineModel.MaxLineStatus >= "1500" && orderlineModel.MaxLineStatus < "3700"){
				            		if(editOrderRule == 'Y'){
					            		iscModal.showConfirmationMessage("orderModification.MSG_ConfirmSaveAndUnschedule").then(function(action){
											//that.overRideGiftOptions(action);
					            			if(action === 'YES'){
					            				if(that.model.getCompleteOrderDetails.Order.HasPendingChanges === "Y"){
					            					that.ui.saveOrderBeforeUnschedule = true;
					            				}
					            				that.ui.chagePickupStore = true;
					            				that.ui.orderlineModel = orderlineModel;
					            				that.uiSavePendingChangesBeforeChangeDeliveryMethod();
					            			}else{
					            				return;
					            			}
					            		});
				            		}else{
					            		iscModal.showErrorMessage(iscI18n.translate('orderModification.MSG_CannotModifyLine'));
					            		return;
				            		}
				            	}else if(orderlineModel.MaxLineStatus >= "3700"){
				            		iscModal.showErrorMessage(iscI18n.translate('orderModification.MSG_CannotModifyLine'));
				            		return;
				            	}else{
		            				that.ui.orderlineModel = orderlineModel;
		            				that.openStoreSearchAfterSavingPendingChanges();
				            	}
				            },
					  	      /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname openStoreSearchAfterSavingPendingChanges
							 *@description It opens Store search popup after saving the pending changes.
						     */	
				            openStoreSearchAfterSavingPendingChanges : function(){
				            	var that = this;
				            	if(that.ui.saveOrderBeforeUnschedule == true){
				       				that.ui.saveOrderBeforeUnschedule = false;
				       			}				            	
				            	var storeSearchModalInput = {
				            			modalInput: function(){
				            				return {
				            					inputData : {callingMode : "CARTDETAILS",orderLine : that.ui.orderlineModel}		
		            						};
        								}
        						};
				            	iscModal.openModal('store.views.common.storesearch.storesearch',storeSearchModalInput,{})
				            			 .then(function(callBackData){
				            				 that.afterStoreSelection.call(that,callBackData.data,that.ui.orderlineModel);
				            			 },angular.noop);
				            	
				            },				            
				            uiValidateQuantity : function(validationResponseObj, angularErrorObject, modelValue, viewValue){
				            	
				            	/* check if the DataType Validation is successful */
				            	
				            	if(!iscCore.isVoid(angularErrorObject) && angularErrorObject.iscDatatypeValidator)
				            		return validationResponseObj;
				            	else
				            	var isQty_a_Number = !isNaN(viewValue);
				            	if(!iscCore.isBooleanTrue(isQty_a_Number)){
				            		validationResponseObj.booleanResponse = !isNaN(viewValue);
					            	validationResponseObj.errorMesssage = iscI18n.translate("globals.ERROR_invalid_input");
		            			}
				            	
				            	return validationResponseObj;
				            },
				            
				            
				            /**
					           * @iscdoc method
					           * @viewname store.views.order.modification.edit-order-details
					           * @methodname afterStoreSelection
					           * @description Callback handler function of store selection popup. Sets ship node for pickup lines
					           * @param {Object} data - data sent from override store selection popup.
							   * @param {Object} orderlineModel - orderLine data as JSON object.  
					           */
				            afterStoreSelection: function(data,orderlineModel){
					  			var  modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
			    	  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ShipNode = data.selectedStore.ShipNode;
			    	  			iscMashup.callMashup(this,"store.views.order.modification.modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleModifyFulfillmentOptionsOutput.bind(this),angular.noop);
				            },
				            
				            /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname uiChangeDeliveryMethod
							 *@description onclick handler function for change delivery method icon.It opens fulfillment options popup.
							 *@param {Object} orderlineModel - orderLine data as JSON object.    
						     */	
				            
				            uiChangeDeliveryMethod : function(orderlineModel){
				            	
				            	var that = this;
				            	var editOrderRule = this.model.getRuleDetails_EditOrderAfterSchedule.Rules.RuleSetValue;
				            	
				            	if(orderlineModel.MaxLineStatus >= "1500" && orderlineModel.MaxLineStatus < "3700"){
				            		if(editOrderRule == 'Y'){
					            		iscModal.showConfirmationMessage("orderModification.MSG_ConfirmSaveAndUnschedule").then(function(action){
											//that.overRideGiftOptions(action);
					            			if(action === 'YES'){
					            				if(that.model.getCompleteOrderDetails.Order.HasPendingChanges === "Y"){				            					
					            					that.ui.saveOrderBeforeUnschedule = true;
					            				}
				            					that.ui.orderlineModel = orderlineModel;
				            					that.uiSavePendingChangesBeforeChangeDeliveryMethod();
					            			}else{
					            				return;
					            			}
										});				            		
				            		}else{
					            		iscModal.showErrorMessage(iscI18n.translate('orderModification.MSG_CannotModifyLine'));
					            		return;
				            		}
				            	}else if(orderlineModel.MaxLineStatus >= "3700"){
				            		iscModal.showErrorMessage(iscI18n.translate('orderModification.MSG_CannotModifyLine'));
				            		return;
				            	}else{
				            		that.ui.orderlineModel = orderlineModel;
				            		that.uiChangeDeliveryMethodForUnscheduledLines();
				            	}
				            },
				            /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname uiChangeDeliveryMethodForUnscheduledLines
							 *@description Method to open the change delivery method popup for unscheduled order lines.
						     */	
				            uiChangeDeliveryMethodForUnscheduledLines : function(){
				            	var that = this;
				            	var newOrderLine = false;
				            	
				            	if(that.ui.orderlineModel.LineSeqNumber > that.ui.orderLinesCountWizardLoad){
				            		newOrderLine = true;
				            	}
				            	var changeDeliveryModalInput = {
		            					modalInput: function ()
							 				{
							  				return {	
							  					inputData : {
							  							OrderHeaderKey : that.model.getCompleteOrderDetails.Order.OrderHeaderKey,
							  							DraftOrderFlag :  that.model.getCompleteOrderDetails.Order.DraftOrderFlag,
							  							orderLine : that.ui.orderlineModel,
							  							newOrderLine : newOrderLine,
							  							orderPersonInfoShipTo : that.model.getCompleteOrderDetails.Order.PersonInfoShipTo
							  								}
						  						};
			  								}
		            					};
		            	
						            	iscModal.openModal('store.views.common.fulfillment.fulfillmentoptions',changeDeliveryModalInput,{})
				            			 .then(function(callBackData){
				            				 	that.handleDeliveryMethodChange.call(that,callBackData.data,that.ui.orderlineModel);
				            			 },angular.noop);
					            	//}
				            },
				            /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.comments.comments
							 *@methodname uiPostComment
							 *@description Handles the scenario when 'post comment' button is clicked on the modal.
							 */
							uiAddComments : function(){
								
								var that = this;
								var orderEditModel = angular.copy(this.model.getCompleteOrderDetails);   
								var commentsModalInput = {
						       			modalInput: function(){
						       				return orderEditModel;
						       			}
						       	};
								
								iscModal.openModal('store.views.order.comments.comments',commentsModalInput,{})
		            			 .then(function(callBackData){
		            				 that.model.getCompleteOrderDetails.Order.Notes.NumberOfNotes = callBackData.NoteList.TotalNumberOfRecords;
							},angular.noop);
								
								
							
								
								
							},	
							
							/**
							   * @iscdoc method
							   * @viewname store.views.order.modification.edit-order-details
							   * @methodname uiChangeVariation
							   * @description On click handler for change Variation link for a variant item.
							   * @param {Object} orderLine - current status of the order line.  
							   */
							
							uiChangeVariation: function(orderLine){
				            	var that = this;
								var orderModel = iscWizard.getWizardModel("orderModel");
								if(this.ui.isScreenDirty){
									iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
										if(iscCore.isBooleanTrue(action)){
											// TODO: action is yes. call change order with pending changes to save.											
										}
										else{
											// action is no. so clear search text.
											that.model.searchInput = '';
										}
									});
								}
								else{
									if(!iscCore.isVoid(orderLine)){
										var changeVariationInput = {};
										changeVariationInput.OrderLine = orderLine;
										var pageInput = {
												input: changeVariationInput,
												searchContext : 'changeVariation'
										};
										//iscWizard.gotoCustomPage('productSearch',pageInput,{wizardPageCssClass:"fullscreen-modal"});
										iscWizard.gotoCustomPage('addItems',pageInput,{wizardPageCssClass:"fullscreen-modal"});
									}
									else{
										iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
									}
								}
				            },
							 /**
							   * @iscdoc method
							   * @viewname store.views.order.modification.edit-order-details
							   * @methodname uiGetCssClassByOrderLineStatus
							   * @description Gets the CSS class to be applied for an order line based on the line status
							   * @param {String} orderLineStatus - current status of the order line.  
							   */
							uiGetCssClassByOrderLineStatus:function(orderLineStatus) {
								return iscOrder.getCssClassByOrderStatus(orderLineStatus);
							},
							
							 /**
							   * @iscdoc method
							   * @viewname store.views.order.modification.edit-order-details
							   * @methodname uiSetDisplayStatus
							   * @description Sets the current status of the order line. 
							   * @param {Object} orderLine - orderLine data as JSON object.  
							   */
							uiSetDisplayStatus:function(orderLine){
								orderLine.DisplayStatus = iscOrder.getLineDisplayStatus(orderLine);
							},
				            /**
					           * @iscdoc method
					           * @viewname store.views.order.modification.edit-order-details
					           * @methodname handleDeliveryMethodChange
					           * @description Callback handler function of fulfillmentoptions popup. 
					           * @param {Object} data - data sent from override fulfillmentoptions popup.
							   * @param {Object} orderlineModel - orderLine data as JSON object.  
					           */
				            handleDeliveryMethodChange : function(data,orderlineModel){
				            	
				            	var newDelMethod = data.newDelMethod
					  			var  modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
			    	  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].DeliveryMethod = newDelMethod;
			    	  			
				            	if(newDelMethod == "PICK"){
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ShipNode = data.selectedStore.ShipNode;
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.SettledQuantity = "0";
				            		if(!iscCore.isVoid(data.selectedStore.Availability.AvailableDate)){
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ReqShipDate = data.selectedStore.Availability.AvailableDate;
				    	  			}
				            	}else if (newDelMethod == "SHP"){
				            		/* If charge shipping lines at store rule is not turned on, set SettledQuantity as 0 */
				            		if(this.model.getRuleDetails_ChargeShipLines && this.model.getRuleDetails_ChargeShipLines.Rules && this.model.getRuleDetails_ChargeShipLines.Rules.RuleSetValue == 'N'){
		            					modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.SettledQuantity = "0";
		            				}
				            		if(!iscCore.isVoid(data.EarliestShipDate)){
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].EarliestShipDate = data.EarliestShipDate;
				            		}
				            		
				            		if(!iscCore.isVoid(data.personInfoShipTo)){
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = {};
				            	
				            		
				            		/* check if the order has ship to address*/
				    	  			if((!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo) || (data.personInfoShipTo.IsDefaultShippingAddress === 'Y')){
				    	  				modifyFulfillmentOptionsInput.Order.PersonInfoShipTo  =  data.personInfoShipTo;
				    	  				if(!this.model.getCompleteOrderDetails.Order.BillToID){
				    	  				modifyFulfillmentOptionsInput.Order.CustomerFirstName =  data.personInfoShipTo.FirstName;
				    	      	        modifyFulfillmentOptionsInput.Order.CustomerLastName  =  data.personInfoShipTo.LastName;
				    	      	        modifyFulfillmentOptionsInput.Order.CustomerEMailID   =  data.personInfoShipTo.EMailID;
				    	      	        modifyFulfillmentOptionsInput.Order.CustomerZipCode   =  data.personInfoShipTo.ZipCode;
				    	  				}
				    	  			}
				    	  			
				            		 delete data.personInfoShipTo.IsDefaultShippingAddress;
				       			     delete data.personInfoShipTo.IsDefaultBillingAddress;
				      			    
				    	  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = data.personInfoShipTo;
				    	  			
				    	  			/* check if the order has ship to address*/
				    	  			if(!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo){
				    	  				modifyFulfillmentOptionsInput.Order.PersonInfoShipTo  =  data.personInfoShipTo;
				    	  			}
				            		}
				            		if(!iscCore.isVoid(data.selectedCarrier)){
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].CarrierServiceCode =data.selectedCarrier.CarrierServiceCode;
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates = {};
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate = [];
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[0] = {};
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[0].CommittedDate = data.selectedCarrier.DeliveryStartDate;
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[0].DateTypeId ="MIN_DELIVERY";
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[1] = {};
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[1].CommittedDate = data.selectedCarrier.DeliveryEndDate;
					            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[1].DateTypeId ="MAX_DELIVERY";
				            		}
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ShipNode = "";
				            	}else if(newDelMethod == "CARRY"){
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ShipNode = iscAppContext.getFromContext("storeName");
				            		if(orderlineModel.OrderLineTranQuantity.SettledQuantity === "0"){
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
				            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.SettledQuantity = "0";
				            		}
				            	}
				            	/* Stamp MarkForKey @ OrderLine If PersonInfoMarkFor element is present*/
				            	if((!iscCore.isVoid(orderlineModel.PersonInfoMarkFor)) && (!iscCore.isVoid(orderlineModel.PersonInfoMarkFor.PersonInfoKey))){
				            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].MarkForKey = orderlineModel.PersonInfoMarkFor.PersonInfoKey;
				            	}
				            	if(orderlineModel.LineSeqNumber > this.ui.orderLinesCountWizardLoad && orderlineModel.MaxLineStatus < "1500"){
				            		iscMashup.callMashup(this,"store.views.order.modification.changeOrderForNewLines",modifyFulfillmentOptionsInput,{}).then(this.handleChangeOrderForNewLinesOutput.bind(this),angular.noop);
				            	}else{
				            		iscMashup.callMashup(this,"store.views.order.modification.modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleModifyFulfillmentOptionsOutput.bind(this),angular.noop);
				            	}
				            },
				            
				            /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname uiSavePendingChanges
							 *@description This method is called to save the pending changes on Order .
							 */
				           uiSavePendingChanges : function(){
				        	   
				            	if(this.model.getCompleteOrderDetails.Order.HasPendingChanges === "Y"){
				            		//call changeOrder to save pending changes
				            		this.uiValidateOrderBeforePayment();
				            		//iscMashup.callMashup(this,"store.views.order.modification.changeOrderToApplyPendingChanges",{"Order" : { "OrderHeaderKey" : this.model.getCompleteOrderDetails.Order.OrderHeaderKey}},{}).then(this.handleSavePendingChanges.bind(this),angular.noop);
				            		
				            	}else{
				            		//No changes to save message
				            		var nochangeToSaveMsg = iscI18n.translate('orderModification.MSG_NoModificationsToSave');
				            		iscModal.showInfoMessage(nochangeToSaveMsg,{});
				            	}
				            },
				            
				            
				            /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.modification.edit-order-details
							 *@methodname handleSavePendingChanges
							 *@description Call back handler for changeOrder api call to save the pending changes .
							 */
				            
				           handleSavePendingChanges : function(data){
				        	   
				        	   var output = iscMashup.getMashupOutput(data,"store.views.order.modification.getCompleteOrderLineList_CheckAvailability");
				             	 if(output.OrderLineList.IsAnyLineUnAvailable == "N"){
				             		this.showPendingChangesSuccess(); 
						       			
				             	 }
				             	 else{
				             		 iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.UnAvailbleLines'));
				             	 }
				             	 
			            	
			            },
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname handleSavePendingChangesBeforeChangeDeliveryMethod
						 *@description Call back handler for changeOrder api call to save the pending changes .
						 */
			            
			            handleSavePendingChangesBeforeChangeDeliveryMethod : function(data){
			        	   
			        	   var output = iscMashup.getMashupOutput(data,"store.views.order.modification.getCompleteOrderLineList_CheckAvailability");
			             	 if(output.OrderLineList.IsAnyLineUnAvailable == "N"){
			             		 if(this.ui.chagePickupStore == true){
			             			this.ui.chagePickupStore = false;
			             			 this.openStoreSearchAfterSavingPendingChanges();
			             		 }else{
			             			this.openChageDeliveryMethodPopup();
			             		 }			             		 
			             	 }
			             	 else{
			             		 iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.UnAvailbleLines'));
			             	 }
			           },
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname openChageDeliveryMethodPopup
						 *@description This method is called to call the function to open the change delivery method popup and reset the flag to indicate save is needed .
						 */
			            
			           openChageDeliveryMethodPopup : function(){
			       			var that = this;
			       			if(this.ui.saveOrderBeforeUnschedule == true){
			       				this.ui.saveOrderBeforeUnschedule = false;
			       			}
		       				this.uiChangeDeliveryMethodForUnscheduledLines();
			            },
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname showPendingChangesSuccess
						 *@description This method is called to show success message on save success .
						 */
			            
			            showPendingChangesSuccess : function(){
			            	
			            	var messageOption = { 
			    					options: { 
			    						
			    						action:[
			    						  {
			    						    actionName:"OK",
			    						    actionLabel:"orderModification.ACTION_ProceedToPayment"
			    						  }
			    						]
			    					},
			    					
			    					
			    				};
				       			
				       			if(this.ui.isRefund === 'Y'){
				       				messageOption.options.action[0].actionLabel="orderModification.ACTION_ProceedToRefund";
				       				var message = iscI18n.translate('orderModification.MSG_ProceedToRefund');
				       			}else{
				       				var message = iscI18n.translate('orderModification.MSG_ProceedToPayment');
				       			}
				       			
				       			var that = this;
				       			if(this.ui.saveOrderBeforeUnschedule == true){
				       				this.ui.saveOrderBeforeUnschedule = false;
				       			}else{
				    				iscModal.showSuccessMessage(message, messageOption).then(
			    							function(callBackData){
			    								iscWizard.gotoCustomPage('paymentCapture',{},{});;
						       				}); 
				       			}
			            },
			            
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiGoToPaymentPage
						 *@description this method checks whether the order line is delivery line.
						 */
			            
			            uiIsDeliveryLine:function(orderLine){
			            	return (orderLine.DeliveryMethod == 'DEL'?true:false);  
			            },
			            
			            
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.modification.edit-order-details
						 *@methodname uiGoToPaymentPage
						 *@description this method takes the user to payment screen .
						 */
			            
			            uiGoToPaymentPage : function(){
			            	iscWizard.gotoCustomPage('paymentCapture',{},{});;
			            }
				    });
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.order.order-summary.order-summary
 *@package store.views.order
 *@class order-summary
 *@description Displays order summary .
 *
 */

angular.module('store').controller('store.views.order.order-summary.order-summary',
		  ['$scope','$rootScope','$filter','iscScreen','iscMashup','iscResourcePermission','iscState','iscStateParams','iscPrint','iscModal','iscOrder','iscPayment','iscPaymentinput','$timeout','iscI18n','iscAppContext',
			function($scope,$rootScope,$filter,iscScreen,iscMashup,iscResourcePermission,iscState,iscStateParams,iscPrint,iscModal,iscOrder,iscPayment,iscPaymentinput,$timeout,iscI18n,iscAppContext) {				
				iscScreen.initializeScreen($scope,{
					 

				      model:{
				    	  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.order-summary.order-summary
				           *@name orderLineList
				           *@description This model contains the getCompleteOrderLineList api output.
				           */
				    	  "orderLineList" : {} ,
				    	  /**
				           *@iscdoc model
				  		   *@viewname store.views.order.order-summary.order-summary
				           *@name orderModel
				           *@description This is order capture wizard model containing the order information.
				           */
				    	  "orderModel" : {},
						  /**
						   *@iscdoc model
				  		   *@viewname store.views.order.order-summary.order-summary
				           *@description This model contains payment information of return order.
				           */
				    	  "paymentSummary":{},
				    	  /**
						   *@iscdoc model
				  		   *@viewname store.views.order.order-summary.order-summary
				           *@description This model contains payment types for the store.
				           */
				    	  "getPaymentTypeList":{},
				    	  /**
						   *@iscdoc model
				  		   *@viewname store.views.order.order-summary.order-summary
				           *@description This model contains payment card types for the store.
				           */
				    	  "getPaymentCardTypeList":{}
				    	 
				      },
				     
				  		mashupRefs : [
				  		  
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.order-summary.order-summary
									*@mashupid ordersummary_getCompleteOrderLineList
									*@mashuprefid ordersummary_getCompleteOrderLineList
									*@modelname orderLineList
									*@description This mashup is used to get the list of OrderLines.
									*/
				  				 mashupRefId: 'ordersummary_getCompleteOrderLineList',
						         mashupId: 'ordersummary_getCompleteOrderLineList',
						         modelName: "orderLineList"
				  			},
				  			
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.order-summary.order-summary
									*@mashupid ordersummary_getCompleteOrderDetails
									*@mashuprefid ordersummary_getCompleteOrderDetails
									*@modelname getCompleteOrderDetails
									*@description This mashup is used to get order details.
									*/
				  				 mashupRefId: 'ordersummary_getCompleteOrderDetails',
						         mashupId: 'ordersummary_getCompleteOrderDetails',
						         modelName: 'getCompleteOrderDetails'
				  			},
				  			
				  			
				  			
				  			{
				  				/**
							        *@iscdoc mashup
									*@viewname store.views.order.order-summary.order-summary
									*@mashupid ordersummary_prints
									*@mashuprefid ordersummary_prints
									*@description This mashup is used to print order summary.
									*/
				  				 mashupRefId: 'ordersummary_prints',
						         mashupId: 'ordersummary_prints'
				  			},
							
							{
								/**
								 *@iscdoc mashup
								 *@viewname store.views.order.order-summary.order-summary
								 *@mashupid orderSummary_sendEmail
								 *@mashuprefid orderSummary_sendEmail
								 *@description Used to send the order receipt to the email address mentioned by the user.
								*/
								mashupRefId: 'orderSummary_sendEmail',
								mashupId: 'orderSummary_sendEmail',
							},
							{
								/**
								*@iscdoc mashup
								*@viewname store.views.order.order-summary.order-summary
								*@description Used to get list of payment types for the current store.
								*/
								mashupRefId: 'getPaymentTypeList',
								mashupId: 'wsc_paymentCapture_getPaymentTypeList',
								modelName : 'getPaymentTypeList'
							},
							{
								/**
								*@iscdoc mashup
								*@viewname store.views.order.order-summary.order-summary
								*@description Used to get list of payment card types (credit card types) for the current store.
								*/
								mashupRefId: 'getPaymentCardTypeList',
								mashupId: 'wsc_paymentCapture_getRuleDetails_PaymentCardTypeConfLevel',
								modelName : 'getPaymentCardTypeList'
							}
				  			
				  		],
				  		
				  		
			            ui:{
			            	/**
			    			 *@iscdoc uiattr
			    			 *@viewname store.views.order.order-summary.order-summary
			    			 *@property {Number} oLineShownCount - pageSize of the Order line list for continuous scrolling.
			    			 */
			            	oLineShownCount: 5,
							/**
							 *@iscdoc uiattr
			    			 *@viewname store.views.order.order-summary.order-summary
			    			 *@property {Boolean} cancelOrderAPISuccess - flag to indicate if order cancel process was a success
			    			 */
							cancelOrderAPISuccess: false,
							/**
							 *@iscdoc uiattr
			    			 *@viewname store.views.order.order-summary.order-summary
			    			 *@property {String} cancelledOrderNumber - Order Number of the cancelled order
			    			 */
							cancelledOrderNumber: "",
							/**
							 *@iscdoc uiattr
			    			 *@viewname store.views.order.order-summary.order-summary
			    			 *@property {String} emailid - Email address to send the receipt to
			    			 */
							emailid: "",
							/**
							 *@iscdoc uiattr
			    			 *@viewname store.views.order.order-summary.order-summary
			    			 *@property {Boolean} showEmailError - flag to display email error
			    			 */
			            	showEmailError:false,
							/**
							 *@iscdoc uiattr
			    			 *@viewname store.views.order.order-summary.order-summary
			    			 *@property {Boolean} hasOnlyCarryLines - flag to indicate if order as only carry lines
			    			 */
			            	hasOnlyCarryLines:false,
			            	/**
							 *@iscdoc uiattr
			    			 *@viewname store.views.order.order-summary.order-summary
			    			 *@property {Boolean} emailSent - flag to display email sent message
			    			 */
			            	
			            	hasOnlyDelLines:false,
			            	
			            	emailSent:false,
							
							emailForm: {},
			            	
			            	showBackLink : "N",
			            	
			            	statusColor:"",
			            	displayStatus:"",
							orderLockedTemplate:'store/views/order/order-summary/order-locked.tpl.html',
							currentLoginId:"",
							/**
							 *@iscdoc uiattr
			    			 *@viewname store.views.order.order-summary.order-summary
			    			 *@property {Integer} activeTabIndex - index of the tab that is active in mobile
			    			 */
							activeTabIndex: -1
			            	
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.order-summary.order-summary
						 *@methodname uiGetOrderLineListNext.
						 *@description Shows next set of order lines when order lines panel is scrolled.
						 */
			          
			            uiGetOrderLineListNext: function(){
			            	
		            	    if(this.ui.oLineShownCount <= this.model.orderLineList.OrderLineList.OrderLine.length){
			                  this.ui.oLineShownCount+=5;
			                }
		                },
			            
		                /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.order-summary.order-summary
						 *@methodname uiClose.
						 *@description Closes Order summary screen. 
						 */
		                
			            uiClose : function(){
			              iscState.goToPreviousState();
			                
			            },
			            
			            /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.order-summary.order-summary
						 *@methodname uiShowHome.
						 *@description This method opens the home screen. 
						 */
			            
			    		uiShowHome : function(){
			    			iscState.goToState('/home',{},{});
			    		},
			    		
			    		 /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.order-summary.order-summary
						 *@methodname uiOLineScrollActionValidator
						 *@description Validates if next page action should be performed by checking whther api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
						 */
			    		 uiOLineScrollActionValidator : function(){
			             	return true;
			             },
			            
			             /**
							 *@iscdoc uimethod
							 *@viewname store.views.order.order-summary.order-summary
							 *@methodname uiPrintSummary
							 *@description Calls StoreOrderSummary_94 service.
							 */
			             
			            uiPrintSummary : function(){
							var inputObj = {};
		             		inputObj.Order={};
		             		var model= this.model.getCompleteOrderDetails.Order;
		             		inputObj.Order.OrderHeaderKey = model.OrderHeaderKey;
		             		inputObj.Order.ShipNode = model.SellerOrganizationCode;
		            		inputObj.Order.Currency = model.PriceInfo.Currency;
		            		inputObj.Order.OrganizationCode = model.EnterpriseCode;
		             		iscMashup.callMashup(this,"ordersummary_prints",inputObj,{}).then(this.printCallBackHandler.bind(this),angular.noop);
				  	   },
					   
						/**
						 *@iscdoc viewinit
						 *@viewname store.views.order.order-summary.order-summary
						 *@method initialize
						 *@description Initializes the order summary screen with getCompleteOrderDetails and getCompleteOrderLineList api calls.
						 */
				  	   
				  		initialize : function()
						{
				  			this.model.orderModel = iscStateParams.params.orderInput;
							this.ui.currentLoginId = iscAppContext.getFromContext('currentLoginID')
				  			
				  			if(iscStateParams.params.showBackLink) {
				  				this.ui.showBackLink = "Y";
				  			}
				        	var mashupArray = [];
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'ordersummary_getCompleteOrderLineList',{"OrderLine" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey}}));
			        	    mashupArray.push(iscMashup.getMashupRefObj(this,'ordersummary_getCompleteOrderDetails',{"Order" : { "OrderHeaderKey" : this.model.orderModel.Order.OrderHeaderKey}}));
							mashupArray.push(iscMashup.getMashupRefObj(this,"getPaymentTypeList",iscPaymentinput.getPaymentTypeListInput(this.model.orderModel)));
							mashupArray.push(iscMashup.getMashupRefObj(this,"getPaymentCardTypeList",iscPaymentinput.getPaymentCardTypeListInput(this.model.orderModel)));
							//mashupArray.push(iscMashup.getMashupRefObj(this,'getNoteList', {"Note" : { "TableKey" : this.model.orderModel.Order.OrderHeaderKey}}));
							
				        	iscMashup.callMashups(this,mashupArray,{}).then(function(data){
								var output = iscMashup.getMashupOutput(data,'ordersummary_getCompleteOrderDetails');
								this.ui.statusColor = this.uiGetCssClassByOrderStatus(this.model.getCompleteOrderDetails.Order.MaxOrderStatus);
								this.ui.displayStatus = iscOrder.getDisplayStatus(this.model.getCompleteOrderDetails.Order);
								
								this.setPaymentDetails(output);
								this.setFlagForCancel(output);
								if(!iscCore.isVoid(output.Order.CustomerEMailID)){
									this.ui.emailid = output.Order.CustomerEMailID;
								}
								
								var orderLines_output = iscMashup.getMashupOutput(data,'ordersummary_getCompleteOrderLineList');
								var olList = orderLines_output.OrderLineList.OrderLine;
								for(var i = 0;i < olList.length; i++){
									if(olList[i].DeliveryMethod == "CARRY"){
										this.ui.hasOnlyCarryLines = true;
									}else{
										this.ui.hasOnlyCarryLines = false;
										break;
									}
								}
								
								for(var i = 0;i < olList.length; i++){
									if(olList[i].DeliveryMethod == "DEL"){
										this.ui.hasOnlyDelLines = true;
									}else{
										this.ui.hasOnlyDelLines = false;
										break;
									}
								}
								
							}.bind(this),angular.noop);
						},
						
				         uiGetCssClassByOrderStatus:function(orderStatus) {
				        	 return iscOrder.getCssClassByOrderStatus(orderStatus);
				         },
						
				         /*uiGetDisplayStatus:function(order){
				        	 return iscOrder.getDisplayStatus(order);
				         },*/
				         
				         uiSetDisplayStatus:function(orderLine){
				        	 orderLine.DisplayStatus = iscOrder.getLineDisplayStatus(orderLine);
				         },
				         
						setFlagForCancel: function(output){
							output.Order.IsCancellationAllowed = 'Y';
							output.Order.IsAppeasementAllowed = 'Y';
							if(output.Order.MaxOrderStatus == '9000'){//checking upfront if complete order is cancelled
								output.Order.IsCancellationAllowed = 'N';
								output.Order.IsAppeasementAllowed = 'N';
								return;
							}
							var olList = this.model.orderLineList.OrderLineList.OrderLine;
							for(var i = 0;i < olList.length; i++){
								if(olList[i].OrderedQty > 0){//should consider only non-cancelled lines for AvailableQtyForCancelAndStopDelivery
									if(olList[i].OrderLineTranQuantity.AvailableQtyForCancelAndStopDelivery > 0){
										continue;
									}else{
										output.Order.IsCancellationAllowed = 'N';
										break;
									}
								}
								
							}
						},
						
						 /**
						 *@iscdoc uimethod
						 *@viewname store.views.order.comments.comments
						 *@methodname uiPostComment
						 *@description Handles the scenario when 'post comment' button is clicked on the modal.
						 */
						uiAddComments : function(){
							
							var that = this;
							var orderModel = angular.copy(this.model.getCompleteOrderDetails);   
							var commentsModalInput = {
					       			modalInput: function(){
					       				return orderModel;
					       			}
					       	};
							
							iscModal.openModal('store.views.order.comments.comments',commentsModalInput,{})
	            			 .then(function(callBackData){
	            				 that.model.getCompleteOrderDetails.Order.Notes.NumberOfNotes = callBackData.NoteList.TotalNumberOfRecords;
						},angular.noop);
						},	
						
						/**
						 *@iscdoc method
						 *@viewname store.views.order.order-summary.order-summary
						 *@methodname getPaymentDetails
						 *@description Sets the data to be shown in the payment method panel. 
						 *@param {Object} output - Output of getCompleteOrderDetails mashup. 
						 */
						setPaymentDetails : function(output) {
							var paymentMethodOrder = output;
							var orderPaymentMethodsToShow = iscPayment.prepareSuccessMessagePopupData(paymentMethodOrder,this.model.getPaymentTypeList.PaymentTypeList,this.model.getPaymentCardTypeList.PaymentCardTypeList);
				  			this.model.paymentSummary.paymentDetails = orderPaymentMethodsToShow.paymentDetails;
				  			this.model.paymentSummary.paymentMethodsAvailable= orderPaymentMethodsToShow.paymentMethodsAvailable;
						},
				  				
						/**
						 *@iscdoc method
						 *@viewname store.views.order.order-summary.order-summary
						 *@methodname printCallBackHandler
						 *@description Call back handler for StoreOrderSummary_94 service. 
						 *@param {Object} data - Output of StoreOrderSummary_94 service. 
						 */
						printCallBackHandler : function(data){
							var output = iscMashup.getMashupOutput(data,"ordersummary_prints");
							iscPrint.printHtmlOutput(output);
						},
						
						/**
						 *@iscdoc viewinit
						 *@viewname store.views.order.order-summary.order-summary
						 *@method uiCancelOrderSuccessHandler
						 *@param {Object} response - Output from the cancelOrder API
						 *@description Handles successful cancellation of order by refreshing the page with updated order data.
						 */
						uiCancelOrderSuccessHandler: function(taskOutput) {
							if(taskOutput && taskOutput.taskAPIOutput.cancelOrderAPISuccess) {
								this.ui.cancelledOrderNumber = taskOutput.taskAPIOutput.cancelledOrderNumber;
								this.ui.cancelOrderAPISuccess = true;
								this.updateOrderAfterCancellation(taskOutput.taskAPIOutput.order);
								//this.initialize();
							}
						},
						
						
						updateOrderAfterCancellation:function(cancelOrderDetails) {
							
							if(cancelOrderDetails) {
								
								this.model.getCompleteOrderDetails = cancelOrderDetails;
								this.ui.statusColor = this.uiGetCssClassByOrderStatus(this.model.getCompleteOrderDetails.Order.MaxOrderStatus);
								this.ui.displayStatus = iscOrder.getDisplayStatus(this.model.getCompleteOrderDetails.Order);
								this.mergeOrderLineList(cancelOrderDetails);
								this.setFlagForCancel(cancelOrderDetails);
								if(!iscCore.isVoid(cancelOrderDetails.Order.CustomerEMailID)){
									this.ui.emailid = cancelOrderDetails.Order.CustomerEMailID;
								}
								
							}
						},
						
						mergeOrderLineList:function(orderDetails) {
							
							if(!iscCore.isVoid(orderDetails) && !iscCore.isVoid(orderDetails.Order) && !iscCore.isVoid(orderDetails.Order.OrderLineList)) {
					  			
					  			var numOfOrderLines = $filter('number')(orderDetails.Order.OrderLineList.TotalNumberOfRecords);
								if(!isNaN(numOfOrderLines) && numOfOrderLines > 0) {
									for(var j=0;j<orderDetails.Order.OrderLineList.OrderLine.length;j++) {
										
										var updatedOrderLine = orderDetails.Order.OrderLineList.OrderLine[j];
										
										if(!iscCore.isVoid(this.model.orderLineList) && !iscCore.isVoid(this.model.orderLineList.OrderLineList)) {
								  			
								  			var numOfOrderLines = $filter('number')(this.model.orderLineList.OrderLineList.TotalNumberOfRecords);
											if(!isNaN(numOfOrderLines) && numOfOrderLines > 0) {
												for(var k=0;k<this.model.orderLineList.OrderLineList.OrderLine.length;k++) {
													
													var currentOrderLine = this.model.orderLineList.OrderLineList.OrderLine[k];
													
													if(currentOrderLine.OrderLineKey == updatedOrderLine.OrderLineKey) {
														
														currentOrderLine.MaxLineStatus = updatedOrderLine.MaxLineStatus;
														currentOrderLine.OrderLineTranQuantity = updatedOrderLine.OrderLineTranQuantity;
														currentOrderLine.MaxLineStatusDesc = updatedOrderLine.MaxLineStatusDesc;
														currentOrderLine.OrderedQty = updatedOrderLine.OrderedQty;
														currentOrderLine.MultipleStatusesExist = updatedOrderLine.MultipleStatusesExist;
														currentOrderLine.Status = updatedOrderLine.Status;
														
														this.uiSetDisplayStatus(currentOrderLine);
														
													}
													
												}
											}
										}
									}
								}
							}
						},
						
						/**
						 *@description This method calls the email service
						 *@param {Object} emailForm - ui email form for validation
						 *@param {String} emailID - email id to which the email should be sent.
						 */ 
						uiSendEmail:function(){
							var that = this;
							$timeout(function () {
								that.ui.emailForm.$setDirty();
								if(iscCore.isVoid(that.ui.emailid) || !that.ui.emailForm.$valid){
									that.ui.showEmailError=true;
									document.getElementById('ordersummary_emailId').focus();
									 
								}else if(that.ui.emailForm.$valid){
									var inputObj = {};
									inputObj.Order={};
									var model= that.model.getCompleteOrderDetails.Order;
									inputObj.Order.OrderHeaderKey = model.OrderHeaderKey;
									inputObj.Order.ShipNode = model.SellerOrganizationCode;
									inputObj.Order.Currency = model.PriceInfo.Currency;
									inputObj.Order.OrganizationCode = model.EnterpriseCode;
									inputObj.Order.ToEmailID = that.ui.emailid;
									iscMashup.callMashup(that,"orderSummary_sendEmail",inputObj,{}).then(that.emailCallBackHandler.bind(that),angular.noop);
								}
							},10);							
						},
				  	      
						/**
						 *@description This method reset the email flags
						 */
						uiResetEmailFlags : function(){
							var emailInputText = document.getElementById("ordersummary_emailId").value;
				  	    	if(!iscCore.isVoid((emailInputText))){
				  	    		this.ui.emailSent=false;
					  	    	this.ui.showEmailError=false;
				  	    	}
				  	      },
						
						/**
				  	     * @description This method is the call back handler of email service. It displays email sent message
				  	     */
						emailCallBackHandler : function(data){
							var output = iscMashup.getMashupOutput(data,"orderSummary_sendEmail");
				            if(output) {
								this.ui.emailSent = true;
							}
						},
						/**
				  	     * @description Opens the edit order page to perform additional actions on the order
						 */
						uiEditOrder : function() {
							//if(this.model.getCompleteOrderDetails.Order.MaxOrderStatus >= 3700 || this.model.getCompleteOrderDetails.Order.MaxOrderStatus.indexOf('1100.7777') === 0) {
							if(this.model.getCompleteOrderDetails.Order.MaxOrderStatus >= 3700 || this.ui.hasOnlyCarryLines == true) {
								iscModal.showErrorMessage(iscI18n.translate('editorderdetails.MSG_EditNotAllowed'));
							} else {
								if(this.model.getCompleteOrderDetails.Order.HasPendingChanges === "Y" && this.ui.currentLoginId != this.model.getCompleteOrderDetails.Order.PendingChangesUserID ) {
									iscModal.showWarningMessage(iscI18n.translate('editorderdetails.WarningMessage_OrderLockedByAnotherUser',{"pendingChangesUserId":this.model.getCompleteOrderDetails.Order.PendingChangesUserID}));
								} else {
									iscState.goToState('ordermodification',{action:'EDITORDER',orderHeaderKey:this.model.getCompleteOrderDetails.Order.OrderHeaderKey},{});
								}
							}
						},
                        uiShowCustomerProfile:function(){
                            var customerInput = {
                                action:'customerdetails',
                                input:{
                                    Customer:{
                                        CustomerID:this.model.getCompleteOrderDetails.Order.BillToID,
                                        OrganizationCode:this.model.getCompleteOrderDetails.Order.EnterpriseCode
                                    }
                                }
                            };
                            iscState.goToState("customerprofilewizard",customerInput,{});
                        }
				 });
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.order.payment.order-capture-payment
 *@package store.views.order.payment
 *@class order-capture-payment
 *@description Displays the capture payment screen in order capture flow.
 *
 */
	angular.module('store').controller('store.views.order.payment.order-capture-payment',
	  ['$animate','$scope','$rootScope','iscScreen','iscWizard','$location','$filter','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscObjectUtility','iscPayment','iscPaymentinput','iscOrder',
		function($animate,$scope,$rootScope,iscScreen,iscWizard,$location,$filter,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscObjectUtility,iscPayment,iscPaymentinput,iscOrder) {			
			iscWizard.initializeWizardPage($scope,{
					/**
				       *ModelList
				       *Models that hold data
				       * 
				       */
					model:{
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name getCountryList
				           *@description This model contains the getCommonCodeList api output to get list of countries.
				           */
						"getCountryList":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name getCurrencyList
				           *@description This model contains the getCurrency api output.
				           */
						"getCurrencyList":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name getRulesDetails_ReatTimeAuth
				           *@description This model contains the getRuleDetails api output for WSC_STORE_REAL_TIME_AUTHORIZATION.
				           */
						"getRulesDetails_ReatTimeAuth":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name getRulesDetails_PaymentAttrEncrypt
				           *@description This model contains the getRuleDetails api output for ENCRYPT_ADDNL_ATTRIBUTES_CREDIT_CARD_PAYMENT_TYPE_GROUP.
				           */
						"getRulesDetails_PaymentAttrEncrypt":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name getRulesDetails_CreditCardName
				           *@description This model contains the getRuleDetails api output for WSC_STORE_USE_CREDIT_CARD_NAME.
				           */
						"getRuleDetails_CCName":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name getRuleDetails_ChargeShipLines
				           *@description This model contains the getRuleDetails api output for CHARGE_SHIP_LINES_AT_STORE.
				           */
						"getRuleDetails_ChargeShipLines":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name getRuleDetails_PostponePickupPayment
				           *@description This model contains the getRuleDetails api output for POSTPONE_PMNT_PROSSESSING_TILL_PICKUP.
				           */
						"getRuleDetails_PostponePickupPayment":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name getPaymentTypeList
				           *@description This model contains the getPaymentTypeList api output.
				           */
						"getPaymentTypeList":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name getPaymentCardTypeList
				           *@description This model contains the getPaymentCardTypeList api output to get the list of credit card types.
				           */
						"getPaymentCardTypeList":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name getCompleteOrderDetails
				           *@description This model contains the getCompleteOrderDetails api output.
				           */
						"getCompleteOrderDetails":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name capturePayment
				           *@description This model contains the capturePayment api output.
				           */
						"capturePayment":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.order.payment.order-capture-payment
				           *@name newPaymentMethods
				           *@description This model contains the payment attributes.
				           */
						"newPaymentMethods":{}
					},
					 /**
				       *MashupRefs
				       *array containing the list of mashups referred in this controller
				       */
					mashupRefs:[
								{
								/**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_common_getCountryList
								*@mashuprefid getCountryList
								*@modelname getCountryList
								*@description This mashup is used to get list of countries.
								*/
					            	mashupRefId: 'getCountryList',
					            	mashupId: 'wsc_common_getCountryList',
					            	modelName : 'getCountryList'
					            },
					            {
								/**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_common_getCurrencyList
								*@mashuprefid getCurrencyList
								*@modelname getCurrencyList
								*@description This mashup is used to get list of currencies.
								*/
					            	mashupRefId: 'getCurrencyList',
					            	mashupId: 'wsc_paymentCapture_getCurrencyList',
					            	modelName : 'getCurrencyList'
					            },
					            {
								/**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_RealTimeAuthorization
								*@mashuprefid getRulesDetails_ReatTimeAuth
								*@modelname getRulesDetails_ReatTimeAuth
								*@description This mashup is used to get rule details of the Rule 'WSC_STORE_REAL_TIME_AUTHORIZATION' for the Store's Enterprise.
								*/
					            	mashupRefId: 'getRulesDetails_ReatTimeAuth',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_RealTimeAuthorization',
					            	modelName : 'getRulesDetails_ReatTimeAuth'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentCapture_getRulesDetails_PaymentAttrEncrypt
								*@mashuprefid getRulesDetails_PaymentAttrEncrypt
								*@modelname getRulesDetails_PaymentAttrEncrypt
								*@description This mashup is used to get rule details of the Hub Rule 'ENCRYPT_ADDNL_ATTRIBUTES_CREDIT_CARD_PAYMENT_TYPE_GROUP'.
								*/
					            	mashupRefId: 'getRulesDetails_PaymentAttrEncrypt',
					            	mashupId: 'wsc_paymentCapture_getRulesDetails_PaymentAttrEncrypt',
					            	modelName : 'getRulesDetails_PaymentAttrEncrypt'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_CCName
								*@mashuprefid getRuleDetails_CCName
								*@modelname getRuleDetails_CCName
								*@description This mashup is used to get rule details of the Rule 'WSC_STORE_USE_CREDIT_CARD_NAME' for the Store's Enterprise.
								*/
					            	mashupRefId: 'getRuleDetails_CCName',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_CCName',
					            	modelName : 'getRuleDetails_CCName'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_ChargeShipLines
								*@mashuprefid getRuleDetails_ChargeShipLines
								*@modelname getRuleDetails_ChargeShipLines
								*@description This mashup is used to get rule details of the Rule 'CHARGE_SHIP_LINES_AT_STORE' for the Store's Enterprise.
								*/
					            	mashupRefId: 'getRuleDetails_ChargeShipLines',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_ChargeShipLines',
					            	modelName : 'getRuleDetails_ChargeShipLines'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_PostponePickupPayment
								*@mashuprefid getRuleDetails_PostponePickupPayment
								*@modelname getRuleDetails_PostponePickupPayment
								*@description This mashup is used to get rule details of the Rule 'POSTPONE_PMNT_PROSSESSING_TILL_PICKUP' for the Store's Enterprise.
								*/
					            	mashupRefId: 'getRuleDetails_PostponePickupPayment',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_PostponePickupPayment',
					            	modelName : 'getRuleDetails_PostponePickupPayment'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentCapture_getPaymentTypeList
								*@mashuprefid getPaymentTypeList
								*@modelname getPaymentTypeList
								*@description This mashup is used to get list of payment types for the current Store.
								*/
					            	mashupRefId: 'getPaymentTypeList',
					            	mashupId: 'wsc_paymentCapture_getPaymentTypeList',
					            	modelName : 'getPaymentTypeList'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_PaymentCardTypeConfLevel
								*@mashuprefid getPaymentCardTypeList
								*@modelname getPaymentCardTypeList
								*@description This mashup is used to get list of payment card types (credit card types) for the current Store.
								*/
					            	mashupRefId: 'getPaymentCardTypeList',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_PaymentCardTypeConfLevel',
					            	modelName : 'getPaymentCardTypeList'
					            },
					            {
								/**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentConfirmation_getCompleteOrderDetails
								*@mashuprefid getCompleteOrderDetails
								*@modelname getCompleteOrderDetails
								*@description This mashup is used to get complete order details for the order.
								*/
					            	mashupRefId: 'getCompleteOrderDetails',
					            	mashupId: 'wsc_paymentConfirmation_getCompleteOrderDetails',
					            	modelName : 'getCompleteOrderDetails'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentConfirmation_capturePayment
								*@mashuprefid capturePayment
								*@modelname capturePayment
								*@description This mashup is used to capture payment details on the order for capturePayment API call.
								*/
					            	mashupRefId: 'capturePayment',
					            	mashupId: 'wsc_paymentConfirmation_capturePayment',
					            	modelName : 'capturePayment'
					            },
					            {
								/**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentConfirmation_capturePayment
								*@mashuprefid deletePayment
								*@modelname capturePayment
								*@description This mashup is used to delete a payment method from the order.
								*/
					            	mashupRefId: 'deletePayment',
					            	mashupId: 'wsc_paymentConfirmation_capturePayment',
					            	modelName : 'capturePayment'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_paymentConfirmation_capturePayment
								*@mashuprefid resumePayment
								*@modelname capturePayment
								*@description This mashup is used to resume a suspended payment method on the order.
								*/
					            	mashupRefId: 'resumePayment',
					            	mashupId: 'wsc_paymentConfirmation_capturePayment',
					            	modelName : 'capturePayment'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.order.payment.order-capture-payment
								*@mashupid wsc_orderCapture_oneClickCapturePayConfirm
								*@mashuprefid oneClickCapturePayConfirm
								*@modelname oneClickCapturePayConfirm
								*@description This mashup is called on click of Pay button to capture, process payment and confirm the order.
								*/
					            	mashupRefId: 'oneClickCapturePayConfirm',
					            	mashupId: 'wsc_orderCapture_oneClickCapturePayConfirm',
					            	modelName : 'oneClickCapturePayConfirm'
					            }
					            
		            ],
		            ui:{
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {String}  orderBillToKey - BillToKey on the order.
						*/
		            	orderBillToKey : "",
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {String}  orderShipToKey - ShipToKey on the order.
						*/
		            	orderShipToKey : "",
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {String}  orderHeaderKey - OrderHeaderKey of the order.
						*/
		            	orderHeaderKey : "",
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Object} wizardOrderModel - Order model object on the wizard.
						*/
		            	wizardOrderModel: "",
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {String} orderCurrency - Order currency.
						*/
		            	orderCurrency:"",
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Object} personInfo - temporary PersonInfo model object for capturing address.
						*/
		            	personInfo:{},
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean} initcomplete - Boolean value to track completion of initialization or re-initialization (after save) for the screen.
						*/
		            	initcomplete:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean} reInitPadss - Boolean value to track completion of initialization or re-initialization for the PADSS directive.
						*/
		            	reInitPadss:'N',
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Object} custDefaultPersonInfo - Customer default billing address model object, if available, for capturing billing address on payment.
						*/
		            	custDefaultPersonInfo : {},
		            	actionClicked:'',
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Number}  remainingAmount - Calculate and store remaining amount to add payment for on the order.
						*/
		            	remainingAmount:0,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean}  orderHasAnyCarryLines - Boolean value to track if order has any Carry lines.
						*/
		            	orderHasAnyCarryLines:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean}  orderHasAnyShippingLines - Boolean value to track if order has any Shipping lines.
						*/
		            	orderHasAnyShippingLines:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean}  orderHasAnyPickupLines - Boolean value to track if order has any Pickup lines.
						*/
		            	orderHasAnyPickupLines:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean}  realTimeAuthEnabled - Boolean value to track if real time authorization is turned on for the current Store.
						*/
		            	realTimeAuthEnabled:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean}  ccNameRuleEnabled - Boolean value to track if 'Use single field for Credit Card Name' rule is turned on for the current Store.
						*/
		            	ccNameRuleEnabled:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean}  encryptEnabled - Boolean value to track if 'Encrypt additional attributes of the payment' rule is turned on for HUB.
						*/
		            	encryptEnabled:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean}  chargeShpLinesAtStoreRuleEnabled - Boolean value to track if 'Charge Ship To Home Order Lines At Store' rule is turned on for the current Store.
						*/
		            	chargeShpLinesAtStoreRuleEnabled:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean}  postponePaymentForPickupAtStoreRuleEnabled - Boolean value to track if 'Postpone Payment processing until pickup' rule is turned on for the current Store.
						*/
		            	postponePaymentForPickupAtStoreRuleEnabled:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Boolean}  isInitDataReady - This is to track whether data initialization was complete.
						*/
		            	isInitDataReady:false,
		            	
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {Number}  refundAmount -  Calculate and store refund amount in confirmed order.
						*/
		            	
		            	refundAmount :0,
		            	
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {String}  refundAmount -  Calculate and store refund amount in confirmed order.
						*/
		            	
		            	screentitle : "payment.TITLE_CapturePayment",
		            	
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.order.payment.order-capture-payment
						 *@property {String}  refundAmount -  Calculate and store refund amount in confirmed order.
						*/
		            	
		            	paymentAction : "Pay",
		            },
		            //Screen intialization
		            /**
					 * @iscdoc viewinit
					 * @viewname store.views.order.payment.order-capture-payment
					 * @method initialize
					 * @description This method calls getInitDetails method to get all initialization details for the current screen.
					 */
		            initialize: function(){		
		            	this.model.newPaymentMethods.newPaymentMethod = [];
		            	var pageInput = iscWizard.getWizardPageInput();
		            	this.ui.wizardOrderModel = iscWizard.getWizardModel("orderModel");
		            	this.ui.orderHeaderKey = this.ui.wizardOrderModel.Order.OrderHeaderKey;
		            	this.getInitDetails(this.ui.orderHeaderKey, this.ui.wizardOrderModel);
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.order.payment.order-capture-payment
					 *@methodname getInitDetails
					 *@description This method calls all init mashups to get the details of the payment types, card types, currency list, country list, relevant rules and 
					 * 				current order details and initializes the model objects for all.
					 */
		            getInitDetails : function(orderHeaderKey, wizardOrderModel){
		            	var getCountryListMashupRefObj = iscMashup.getMashupRefObj(this,"getCountryList",iscPaymentinput.getCountryListInput(wizardOrderModel));
		            	var getCurrencyListMashupRefObj = iscMashup.getMashupRefObj(this,"getCurrencyList",iscPaymentinput.getCurrencyListInput(wizardOrderModel));
		            	var ruleDetailsMashupRefObj = iscMashup.getMashupRefObj(this,"getRulesDetails_ReatTimeAuth",iscPaymentinput.getRuleDetailsInput(wizardOrderModel));
		            	var ruleDetailsEncryptMashupRefObj = iscMashup.getMashupRefObj(this,"getRulesDetails_PaymentAttrEncrypt",iscPaymentinput.getRuleDetailsInput(wizardOrderModel));
		            	var ruleDetailsCCNameMashupRefObj = iscMashup.getMashupRefObj(this,"getRuleDetails_CCName",iscPaymentinput.getRuleDetailsInput(wizardOrderModel));
		            	var ruleDetailsChargeShpLinesMashupRefObj = iscMashup.getMashupRefObj(this,"getRuleDetails_ChargeShipLines",iscPaymentinput.getRuleDetailsInput(wizardOrderModel));
		            	var ruleDetailsPostponePickupPaymentMashupRefObj = iscMashup.getMashupRefObj(this,"getRuleDetails_PostponePickupPayment",iscPaymentinput.getRuleDetailsInput(wizardOrderModel));
		            	var getPaymentTypeListMashupRefObj = iscMashup.getMashupRefObj(this,"getPaymentTypeList",iscPaymentinput.getPaymentTypeListInput(wizardOrderModel));
		            	var getPaymentCardTypeListMashupRefObj = iscMashup.getMashupRefObj(this,"getPaymentCardTypeList",iscPaymentinput.getPaymentCardTypeListInput(wizardOrderModel));
		            	var getCompleteOrderDetailsMashupRefObj = iscMashup.getMashupRefObj(this,"getCompleteOrderDetails",iscPaymentinput.getCompleteOrderDetailsInput(orderHeaderKey));
		            	var mashupRefList = [getCountryListMashupRefObj,getCurrencyListMashupRefObj,ruleDetailsMashupRefObj,ruleDetailsEncryptMashupRefObj,ruleDetailsCCNameMashupRefObj,
		            							ruleDetailsChargeShpLinesMashupRefObj,ruleDetailsPostponePickupPaymentMashupRefObj,getPaymentTypeListMashupRefObj,getPaymentCardTypeListMashupRefObj,getCompleteOrderDetailsMashupRefObj];
		            	iscMashup.callMashups(this,mashupRefList,{}).then(this.onSuccessOfInitDetails.bind(this),angular.noop);		
		            },
		            
		            //Mashup Input Preparation Methods Start
		            /**
					 *@iscdoc method
					 *@viewname store.views.order.payment.order-capture-payment
					 *@methodname getCapturePaymentInput
					 *@description This method calls prepares input model object for capturePayment API call for capturing the payment details on the order.
					 */
		            getCapturePaymentInput : function(){
		            	var apiInput = {};
		            	apiInput.Order = {};
		            	apiInput.Order.OrderHeaderKey = this.ui.wizardOrderModel.Order.OrderHeaderKey;
		            	
		            	//prepare payment method
		            	apiInput.Order.PaymentMethods = {};
		            	apiInput.Order.PaymentMethods.PaymentMethod = [];
		            	var totalOrderPaymentCounter = 0;
		            	for(var p=0; p < this.model.newPaymentMethods.newPaymentMethod.length; p++){
		            		apiInput.Order.PaymentMethods.PaymentMethod[p] = {};
		            		var newPaymentMethodObj = this.model.newPaymentMethods.newPaymentMethod[p];
		            		if(!newPaymentMethodObj.PaymentTypeGroup && (newPaymentMethodObj.PaymentType && newPaymentMethodObj.PaymentType.PaymentTypeGroup) ){
			            		newPaymentMethodObj.PaymentTypeGroup = newPaymentMethodObj.PaymentType.PaymentTypeGroup;
			            		newPaymentMethodObj.PaymentType = newPaymentMethodObj.PaymentType.PaymentType;
			            	}
			            	apiInput.Order.PaymentMethods.PaymentMethod[p].PaymentType = newPaymentMethodObj.PaymentType;
			            	apiInput.Order.PaymentMethods.PaymentMethod[p].PaymentTypeGroup = newPaymentMethodObj.PaymentTypeGroup;
			            	apiInput.Order.PaymentMethods.PaymentMethod[p].RequestedAmount = newPaymentMethodObj.RequestedAmount;
			            	if(newPaymentMethodObj.NoProcessingRequired){
			            		apiInput.Order.PaymentMethods.PaymentMethod[p].NoProcessingRequired = newPaymentMethodObj.NoProcessingRequired;
			            	}
			            	if(!this.ui.orderHasAnyCarryLines && !(this.ui.orderHasAnyShippingLines && this.ui.chargeShpLinesAtStoreRuleEnabled)){
		            			apiInput.Order.PaymentMethods.PaymentMethod[p].Operation = "Manage";
		            		}
		            		else{
				            	if(!newPaymentMethodObj.Operation){
				            		apiInput.Order.PaymentMethods.PaymentMethod[p].Operation = 'Manage';
				            	}
				            	else {
				            		apiInput.Order.PaymentMethods.PaymentMethod[p].Operation = angular.copy(newPaymentMethodObj.Operation);
				            	}
		            		}
			            	var paymentMethodObjectForInput = iscPaymentinput.prepareCapturePaymentInputForPaymentMethod(newPaymentMethodObj,this.ui.realTimeAuthEnabled,this.ui.ccNameRuleEnabled,false);
			            	apiInput.Order.PaymentMethods.PaymentMethod[p] = angular.extend(apiInput.Order.PaymentMethods.PaymentMethod[p],paymentMethodObjectForInput);
			            	totalOrderPaymentCounter++;
		            	}
		            	if(this.model.getCompleteOrderDetails.Order.PaymentMethods && this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod){
			            	for(var sp=0; sp < this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod.length; sp++){
			            		var newPaymentMethodObj = this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod[sp];
			            		var paymentMethodObjectForInput = iscPaymentinput.prepareCapturePaymentInputForSavedPaymentMethod(newPaymentMethodObj,this.ui.realTimeAuthEnabled,this.ui.ccNameRuleEnabled,false);
				            	if(!iscObjectUtility.isEmpty(paymentMethodObjectForInput)){
				            		if(newPaymentMethodObj.NoProcessingRequired){
					            		paymentMethodObjectForInput.NoProcessingRequired = newPaymentMethodObj.NoProcessingRequired;
					            	}
				            		if(!this.ui.orderHasAnyCarryLines && !(this.ui.orderHasAnyShippingLines && this.ui.chargeShpLinesAtStoreRuleEnabled)){
		            					paymentMethodObjectForInput.Operation = "Manage";
				            		}
				            		else{
					            		if(!newPaymentMethodObj.Operation){
					            			paymentMethodObjectForInput.Operation = "Manage";
					            		}
					            		else {
					            			paymentMethodObjectForInput.Operation = angular.copy(newPaymentMethodObj.Operation);
					            		}
				            		}
				            		var orderPaymentCounter = totalOrderPaymentCounter;
				            		totalOrderPaymentCounter++;
				            		apiInput.Order.PaymentMethods.PaymentMethod[orderPaymentCounter] = paymentMethodObjectForInput;
				            	}
			            	}
		            	}
		            	
		            	return apiInput;
		            },
		            //Mashup Input prepare methods END
		            
		            //Action methods START
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uiOneClickCapturePayConfirm
			  		 *@description This method is called on click of Pay button in the Capture Payment screen. It prepares the input by capturing all the payment details and calls the 
			  		 *				'wsc_orderCapture_oneClickCapturePayConfirm' mashup (mashupRef : 'oneClickCapturePayConfirm'). Before preparing the input and calling the mashups, it
			  		 *				validates if enough payment methods have been added to capture funds for the Order. If validation fails, it throws an error message.
			  		 */
		            uiOneClickCapturePayConfirm : function(){
		            		
            			var remainingAmountToAuth = this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth;
            			var addedAmount = 0;
            			if(this.model.getCompleteOrderDetails.Order.PaymentMethods && this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod){
	            			for(var sp=0; sp < this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod.length; sp++){
	            				var newPaymentMethodObj = this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod[sp];
	            				var requestedAmount = newPaymentMethodObj.RequestedAmount;
	            				var maxChargeLimit = newPaymentMethodObj.MaxChargeLimit;
	            				addedAmount += parseFloat(requestedAmount) - parseFloat(maxChargeLimit);
	            			}
            			}
            			for(var p=0; p < this.model.newPaymentMethods.newPaymentMethod.length; p++){
            				var newPaymentMethodObj = this.model.newPaymentMethods.newPaymentMethod[p];
            				var requestedAmount = newPaymentMethodObj.RequestedAmount;
            				addedAmount += parseFloat(requestedAmount);
            			}
	            			
	            		if(iscObjectUtility.isGreaterThanZero(parseFloat(remainingAmountToAuth) - parseFloat(addedAmount))){
	            			iscModal.showErrorMessage(iscI18n.translate('payment.INSUFFICIENT_PAYMENT'));
		            	}
		            	else {
			            	//** To do server side processing ** //
			            	var capturePaymentInput = this.getCapturePaymentInput();
			            	capturePaymentInput.Order.BillToKey = this.model.getCompleteOrderDetails.Order.BillToKey ? this.model.getCompleteOrderDetails.Order.BillToKey : "";
			            	capturePaymentInput.Order.ShipToKey = this.model.getCompleteOrderDetails.Order.ShipToKey ? this.model.getCompleteOrderDetails.Order.ShipToKey : "";
			            	capturePaymentInput.Order.BillToID = this.model.getCompleteOrderDetails.Order.BillToID ? this.model.getCompleteOrderDetails.Order.BillToID : "";
			            	capturePaymentInput.Order.EnterpriseCode = this.model.getCompleteOrderDetails.Order.EnterpriseCode;
			            	capturePaymentInput.Order.CustomerContactID = this.model.getCompleteOrderDetails.Order.CustomerContactID ? this.model.getCompleteOrderDetails.Order.CustomerContactID : "";
			            	capturePaymentInput.Order.PaymentTypeList = this.model.getPaymentTypeList.PaymentTypeList;
			            	if(iscOrder.orderHasOnlyCarryLines(this.model.getCompleteOrderDetails)){
			            		capturePaymentInput.Order.HasOnlyCarryLines = 'Y';
			            	}
			            	iscMashup.callMashup(this,"oneClickCapturePayConfirm",capturePaymentInput,{}).then(this.onSuccessOfPayment.bind(this),this.onFailurePayment.bind(this));
		            	}
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uiExpandPayment
			  		 *@description This method is called on click of Edit link for a payment method panel in the Capture Payment screen. It opens the payment panel with all the fields which can be edited.
			  		 */
		            uiExpandPayment : function(paymentMethod){
		            	paymentMethod.expandPaymentMethodDetails();
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uiCollapsePayment
			  		 *@description This method is called on click of Collapse link for a payment method panel in the Capture Payment screen. It collapses the payment panel hiding all the fields which can be edited.
			  		 */
		            uiCollapsePayment : function(paymentMethod){
		            	paymentMethod.collapsePaymentMethodDetails();
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uiRemovePaymentPanel
			  		 *@description This method is called on click of Remove link for a new payment method in the Capture Payment screen. It deletes the corresponding new payment method panel.
			  		 */
		            uiRemovePaymentPanel : function(index){
		            	var deleteConfMsg = "payment.LABEL_Delete_Payment";
		            	var pendingRequestedAmount = this.model.newPaymentMethods.newPaymentMethod[index].RequestedAmount;
		            	var that = this;
		            	iscModal.showConfirmationMessage(deleteConfMsg).then(function(action){
		            				if(iscCore.isBooleanTrue(action)){
										that.model.newPaymentMethods.newPaymentMethod.splice(index,1);
						            	if(parseFloat(pendingRequestedAmount) > 0){
						            		var newRemainingAmount = parseFloat(pendingRequestedAmount) + parseFloat(that.ui.remainingAmount);
						            		that.ui.remainingAmount = newRemainingAmount.toFixed(2);
						            	}
		            				}
								});
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uiAddNewPaymentPanel
			  		 *@description This method is called on click of 'Add Payment Method' link in the Capture Payment screen. It adds new payment method panel.
			  		 */
		            uiAddNewPaymentPanel : function(){
		            	var paymentPanelLength = this.model.newPaymentMethods.newPaymentMethod.length;
		            	var newPaymentMethodObj = this.getNewPaymentMethodObject();
		            	var finalRemainingAmount = 0;
		            	if(this.ui.remainingAmount > 0){
		            		finalRemainingAmount = finalRemainingAmount + parseFloat(this.ui.remainingAmount);
		            	}
		            	if(finalRemainingAmount > 0){
		            		newPaymentMethodObj.RequestedAmount = finalRemainingAmount.toFixed(2).toString();
		            		this.ui.remainingAmount = 0;
		            	}
		            	else{
		            		newPaymentMethodObj.RequestedAmount = "0";
		            	}
						
						this.model.newPaymentMethods.newPaymentMethod[paymentPanelLength] = newPaymentMethodObj;
						this.ui.actionClicked = '';
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uiCancel
			  		 *@description This method is called on click of 'Cancel' button in the Capture Payment screen. It shows a confirmation message before closing the order capture flow.
			  		 */
		            uiCancel : function(){
		            	
		            	if($scope.paymentCaptureForm.$dirty){
		            
		            		iscModal.showConfirmationMessage(iscI18n.translate('payment.MSG_DirtyCheckMessage')).then(
									function(callBackAction){
				            			//
										if(callBackAction === 'YES'){
											iscWizard.closeWizard();
										}
				       				},
				  					function(callBackAction){
				            			//		Do Nothing
				  						
				       				});
		            	}
		            	else {
		            		iscModal.showConfirmationMessage(iscI18n.translate('order.WarningMessage_Cancel')).then(
									function(callBackAction){
				            			//
										if(callBackAction === 'YES'){
											iscWizard.closeWizard();
										}
				       				},
				  					function(callBackAction){
				            			//		Do Nothing
				  						
				       				});
		            	}
		            	
		            	
		            	//iscWizard.closeWizard();
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uiRemovePayment
			  		 *@description This method is called on click of Remove link for an already payment method on the order in the Capture Payment screen. It deletes the corresponding saved payment method from the order
			  		 *				by making a server API call.
			  		 */
		            uiRemovePayment : function(paymentMethod){
		            	var deleteConfMsg = "payment.LABEL_Delete_Payment";
		            	var that = this;
		            	iscModal.showConfirmationMessage(deleteConfMsg).then(function(action){
            				if(iscCore.isBooleanTrue(action)){
				            	var apiInput = {};
				            	apiInput.CapturePayment = {};
				            	apiInput.CapturePayment.OrderHeaderKey = that.ui.wizardOrderModel.Order.OrderHeaderKey;
				            	apiInput.CapturePayment.PaymentMethods = {};
				            	apiInput.CapturePayment.PaymentMethods.PaymentMethod = {};
				            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.PaymentKey = paymentMethod.PaymentKey;
				            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.Operation = "Delete";
				            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.IsCorrection = "N";
				            	var mashupRefList = [];
				            	mashupRefList = [iscMashup.getMashupRefObj(that,"deletePayment",apiInput)];
				            	var pendingRequestedAmount = paymentMethod.RequestedAmount;
				            	var chargedAmount = paymentMethod.TotalCharged;
				            	var authorizedAmount = paymentMethod.TotalAuthorized;
				            	if(parseFloat(pendingRequestedAmount) > 0){
				            		var newRemainingAmount = parseFloat(pendingRequestedAmount) + parseFloat(that.ui.remainingAmount);
				            		that.ui.remainingAmount = newRemainingAmount.toFixed(2);
				            	}
				            	if(parseFloat(chargedAmount) > 0 || parseFloat(authorizedAmount) > 0){
				            		if(parseFloat(chargedAmount) > 0){
				            			var finalRemainingAmount = parseFloat(that.ui.remainingAmount) - parseFloat(chargedAmount);
				            			that.ui.remainingAmount = finalRemainingAmount.toFixed(2);
				            		}
				            		else if(parseFloat(authorizedAmount) > 0){
				            			var finalRemainingAmount = parseFloat(that.ui.remainingAmount) - parseFloat(authorizedAmount);
				            			that.ui.remainingAmount = finalRemainingAmount.toFixed(2);
				            		}
				            	}
				            	
					            iscMashup.callMashups(that,mashupRefList,{}).then(that.onSuccessOfSavePayment.bind(that),angular.noop);
            				}
		            	});
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uiResumePayment
			  		 *@description This method is called on click of Resume link for an already payment method on the order, which is in Suspended state, in the Capture Payment screen. 
			  		 *				It resumes the corresponding saved payment method on the order by making a server API call to reset the Suspension status.
			  		 */
		            uiResumePayment : function(paymentMethod){
		            	var apiInput = {};
		            	apiInput.CapturePayment = {};
		            	apiInput.CapturePayment.OrderHeaderKey = this.ui.wizardOrderModel.Order.OrderHeaderKey;
		            	apiInput.CapturePayment.PaymentMethods = {};
		            	apiInput.CapturePayment.PaymentMethods.PaymentMethod = {};
		            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.PaymentKey = paymentMethod.PaymentKey;
		            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.ResetSuspensionStatus = "Y";
		            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.RequestedAmount = "0";
		            	var mashupRefList = [];
		            	mashupRefList = [iscMashup.getMashupRefObj(this,"resumePayment",apiInput)];
		            	this.ui.resumePaymentKey = paymentMethod.PaymentKey;
			            iscMashup.callMashups(this,mashupRefList,{}).then(this.onSuccessOfSavePayment.bind(this),angular.noop);
		            },
		            uiSavePayment : function(){
		            	var mashupRefList = [];
			            var capturePaymentMashupRefObj = iscMashup.getMashupRefObj(this,"capturePayment",this.getCapturePaymentInput());
			            mashupRefList = [capturePaymentMashupRefObj];
			            	
			            iscMashup.callMashups(this,mashupRefList,{}).then(this.onSuccessOfSavePayment.bind(this),angular.noop);
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uiFinishWizard
			  		 *@description This method is called on click on View Order Summayr button on the success popup when payment capture and processing is successful to go to Order Summary screen.
			  		 */
		            uiFinishWizard : function(){
		               iscWizard.finishWizard();
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uihandleScreenInvalid
			  		 *@description This method is called on click of Pay button in the Capture Payment screen, if there are any validation errors on the fields.
			  		 */
		            uihandleScreenInvalid : function(){
		            	this.ui.actionClicked = 'pay';
		            	$scope.$broadcast('callVerifyAddress',{'callingScreeen':'order-capture-payment'});
		            	iscModal.showErrorMessage(iscI18n.translate('payment.MSG_SCREEN_ERRORS'));
		            },
		             /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.order.payment.order-capture-payment		 
			  		 *@methodname uiDoNothing
			  		 *@description This method is handler method for enter button click to prevent form submit on click on enter on any of the screen fields.
			  		 */
					uiDoNothing:function(){
						return;
					},
		            //Action methods END
		            
		            //Mashup Success/Failure Handler Methods START
					/**
					 *@iscdoc method
					 *@viewname store.views.order.payment.order-capture-payment
					 *@methodname onSuccessOfInitDetails
					 *@description callback handler for init mashups call which initializes all the model objects.
					 *
					 */
		            onSuccessOfInitDetails : function(data){
		            	var mashupRef = data.MashupRefs.MashupRef;
		            	var newPaymentMethodObj = {};
		            	if(mashupRef !== null && mashupRef !== undefined){
		            		var len = mashupRef.length;
		            		for(var i = 0; i < len; i++){
		            			var mashupRefObj = mashupRef[i];
		            			if(mashupRefObj.mashupRefId === 'getRulesDetails_ReatTimeAuth'){
		            				this.model.getRulesDetails_ReatTimeAuth = mashupRefObj.Output;
		            				if(this.model.getRulesDetails_ReatTimeAuth && this.model.getRulesDetails_ReatTimeAuth.Rules && this.model.getRulesDetails_ReatTimeAuth.Rules.RuleSetValue == '02'){
		            					this.ui.realTimeAuthEnabled = true;
		            				}
		            				else {
		            					this.ui.realTimeAuthEnabled = false;
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getRuleDetails_ChargeShipLines'){
		            				this.model.getRuleDetails_ChargeShipLines = mashupRefObj.Output;
		            				if(this.model.getRuleDetails_ChargeShipLines && this.model.getRuleDetails_ChargeShipLines.Rules && this.model.getRuleDetails_ChargeShipLines.Rules.RuleSetValue == 'Y'){
		            					this.ui.chargeShpLinesAtStoreRuleEnabled = true;
		            				}
		            				else {
		            					this.ui.chargeShpLinesAtStoreRuleEnabled = false;
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getRuleDetails_PostponePickupPayment'){
		            				this.model.getRuleDetails_PostponePickupPayment = mashupRefObj.Output;
		            				if(this.model.getRuleDetails_PostponePickupPayment && this.model.getRuleDetails_PostponePickupPayment.Rules && this.model.getRuleDetails_PostponePickupPayment.Rules.RuleSetValue == 'Y'){
		            					this.ui.postponePaymentForPickupAtStoreRuleEnabled = true;
		            				}
		            				else {
		            					this.ui.postponePaymentForPickupAtStoreRuleEnabled = false;
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getRuleDetails_CCName'){
		            				this.model.getRuleDetails_CCName = mashupRefObj.Output;
		            				if(this.model.getRuleDetails_CCName && this.model.getRuleDetails_CCName.Rules && this.model.getRuleDetails_CCName.Rules.RuleSetValue == 'Y'){
		            					this.ui.ccNameRuleEnabled = true;
		            				}
		            				else {
		            					this.ui.ccNameRuleEnabled = false;
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getRulesDetails_PaymentAttrEncrypt'){
		            				this.model.getRulesDetails_PaymentAttrEncrypt = mashupRefObj.Output;
		            				if(this.model.getRulesDetails_PaymentAttrEncrypt && this.model.getRulesDetails_PaymentAttrEncrypt.Rules && this.model.getRulesDetails_PaymentAttrEncrypt.Rules.RuleSetValue == 'Y'){
		            					this.ui.encryptEnabled = true;
		            				}
		            				else {
		            					this.ui.encryptEnabled = false;
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getCompleteOrderDetails'){
		            				this.model.getCompleteOrderDetails = mashupRefObj.Output;
		            				this.ui.orderShipToKey = mashupRefObj.Output.Order.ShipToKey;
		            				if(mashupRefObj.Output.Order.BillToKey){
		            					this.ui.orderBillToKey = mashupRefObj.Output.Order.BillToKey;
		            				}
		            				if(iscOrder.orderHasAnyCarryLines(this.model.getCompleteOrderDetails)){
		            					this.ui.orderHasAnyCarryLines = true;
		            				}
		            				if(iscOrder.orderHasAnyShippingLines(this.model.getCompleteOrderDetails)){
		            					this.ui.orderHasAnyShippingLines = true;
		            				}
		            				if(iscOrder.orderHasAnyPickupLines(this.model.getCompleteOrderDetails)){
		            					this.ui.orderHasAnyPickupLines = true;
		            				}
		            				this.ui.orderHeaderKey = mashupRefObj.Output.Order.OrderHeaderKey;
		            				this.ui.orderCurrency = this.model.getCompleteOrderDetails.Order.PriceInfo.Currency;
		            				if(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth > 0){
		            					var paymentPanelLength = this.model.newPaymentMethods.newPaymentMethod.length;
		            					newPaymentMethodObj.RequestedAmount = iscPayment.calculateRemainingAmountToAdd(this.model.getCompleteOrderDetails, null);
		            					if(this.model.getCurrencyList.CurrencyList){
			            					for(var j = 0; j < this.model.getCurrencyList.CurrencyList.Currency.length; j++){
				            					var currency = this.model.getCurrencyList.CurrencyList.Currency[j];
				            					var currencyType = currency.Currency;
				            					if(this.ui.orderCurrency === currencyType){
				            						newPaymentMethodObj.CustomerAccountCurrency = this.model.getCurrencyList.CurrencyList.Currency[j];
				            					}
				            				}
			            				}
			            				if(this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo && this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo.PersonInfo){
		            						this.ui.custDefaultPersonInfo = this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo.PersonInfo;
		            						newPaymentMethodObj.PersonInfoBillTo = this.ui.custDefaultPersonInfo;
		            					}
		            					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerFirstName) && iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerLastName)){
		            						newPaymentMethodObj.FirstName = this.model.getCompleteOrderDetails.Order.CustomerFirstName;
											newPaymentMethodObj.LastName = this.model.getCompleteOrderDetails.Order.CustomerLastName;
											newPaymentMethodObj.CreditCardName = iscPayment.getFormattedName(newPaymentMethodObj.FirstName,newPaymentMethodObj.LastName);
		            					}
		            				}
		            				if(this.ui.orderShipToKey != "" && this.ui.orderBillToKey && this.ui.orderShipToKey === this.ui.orderBillToKey){
		            					newPaymentMethodObj.useShpAddressForBill = 'Y';
		            				}
		            				else {
			        					newPaymentMethodObj.useShpAddressForBill = 'N';
			        				}
		            				if(this.model.getCompleteOrderDetails.Order.PersonInfoBillTo){
		            					//do nothing
		            				}
		            				else if(this.model.getCompleteOrderDetails.Order.BillToID
		            						&& this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo && this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo.PersonInfo){
		            							//do nothing
		            				}
		            				else {
		            					this.model.getCompleteOrderDetails.Order.PersonInfoBillTo = {};
		            					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerFirstName) && iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerLastName)){
		            						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.FirstName = this.model.getCompleteOrderDetails.Order.CustomerFirstName;
											this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.LastName = this.model.getCompleteOrderDetails.Order.CustomerLastName;
		            					}
		            					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerPhoneNo)){
		            						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.DayPhone = this.model.getCompleteOrderDetails.Order.CustomerPhoneNo;
		            					}
		            					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerEMailID)){
		            						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.EMailID = this.model.getCompleteOrderDetails.Order.CustomerEMailID;
		            					}
		            				}
		            				
		            				this.ui.initcomplete = true;
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getPaymentTypeList'){
		            				this.model.getPaymentTypeList = mashupRefObj.Output;
		            				var paymentTypeFound = false;
		            				//set CREDIT_CARD as default to load
		            				for(var j = 0; j < this.model.getPaymentTypeList.PaymentTypeList.PaymentType.length; j++){
		            					var paymentTypeDef = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[j];
		            					var paymentType = paymentTypeDef.PaymentType;
		            					var paymentTypeGroup = paymentTypeDef.PaymentTypeGroup;
		            					if(paymentTypeGroup === 'CREDIT_CARD'){
		            						newPaymentMethodObj.PaymentType = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[j];
		            						paymentTypeFound = true;
		            						break;
		            					}
		            				}
		            				if(!paymentTypeFound){
		            					newPaymentMethodObj.PaymentType = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[0];
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getPaymentCardTypeList'){
		            				this.model.getPaymentCardTypeList = mashupRefObj.Output;
		            				if(this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType && this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType.length > 0){
		            					newPaymentMethodObj.CardType = this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType[0];
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getCountryList'){
		            				this.model.getCountryList = mashupRefObj.Output;
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getCurrencyList'){
		            				this.model.getCurrencyList = mashupRefObj.Output;
		            				if(this.orderCurrency && this.orderCurrency != ""){
		            					for(var k = 0; k < this.model.getCurrencyList.CurrencyList.Currency.length; k++){
			            					var currency = this.model.getCurrencyList.CurrencyList.Currency[k];
			            					var currencyType = currency.Currency;
			            					if(this.ui.orderCurrency === currencyType){
					            				newPaymentMethodObj.CustomerAccountCurrency = this.model.getCurrencyList.CurrencyList.Currency[k];
			            					}
			            				}
		            				}
		            				else{
			            				newPaymentMethodObj.CustomerAccountCurrency = this.model.getCurrencyList.CurrencyList.Currency[0];
		            				}
		            			}
		            		}
		            	}	
		            	if(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth > 0){
		            		if(this.model.getCompleteOrderDetails.Order.PaymentMethods && this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod 
		            		&& this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod && this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod.length  > 0){
		            			this.ui.remainingAmount = iscPayment.calculateRemainingAmountToAdd(this.model.getCompleteOrderDetails, null);
		            		}
		            		else {
		            			this.model.newPaymentMethods.newPaymentMethod[0] = newPaymentMethodObj;
		            		}
		            	}else 
		            		{
		            		if(this.model.getCompleteOrderDetails.Order.DraftOrderFlag =='N'){
		            			
		            			this.ui.refundAmount = 0- parseFloat(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth,10);
		            			if(this.ui.refundAmount > 0){
		            				this.ui.screentitle = "payment.TITLE_Refund";
		            			    this.ui.paymentAction ="Refund";
		            			}
		            		}
		            		
		            	}
		            	this.ui.isInitDataReady = true;
		            	
		            	if(this.model.getCompleteOrderDetails.Order.DraftOrderFlag =='N' && this.ui.refundAmount == 0 && this.ui.remainingAmount == 0){
		            		 this.ui.paymentAction ="Nochange";
		            	}
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.order.payment.order-capture-payment
					 *@methodname onFailurePayment
					 *@description failure handler for any kind of mashup or ajax call errors on mashup call when Pay button is clicked on the Capture Payment screen.
					 *				On any kind of error, it shows an error message popup with details of the errors found.
					 *
					 */
		            onFailurePayment : function(data){
		            	this.ui.actionClicked = '';
		            	if(data.Errors && data.Errors.Error){
		            		for(var i=0; i < data.Errors.Error.length; i ++){
		            			if(data.Errors.Error[i] && data.Errors.Error[i].ErrorCode && data.Errors.Error[i].ErrorCode === "YFS10210"){
		            				break;
		            			}
		            		}
		            	}

		            	if(data.Errors.OrderDetails && data.Errors.OrderDetails.Order && data.Errors.OrderDetails.Order.length > 0){
		            		this.model.getCompleteOrderDetails.Order = data.Errors.OrderDetails.Order[0];
		            	}
		            	this.model.newPaymentMethods = {};
						this.model.newPaymentMethods.newPaymentMethod = [];
						if(parseFloat(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth) > 0){
							var newPaymentMethodObj = this.getNewPaymentMethodObject();
							this.model.newPaymentMethods.newPaymentMethod[0] = newPaymentMethodObj;
						}
		            	var messageOption = { 
	    					options: { 
	    						headerText: "payment.LABEL_PaymentFailure"
	    					},
	    					settings : {
	    						contentTemplate : "./store/views/order/payment/payment-error-content.tpl.html"
	    					},
	    					data : {
	    						contentData : {
	    							errors : data.Errors ? data.Errors : {}
	    						}
	    					}
	    				};
	    				var message = iscI18n.translate('payment.MESSAGE_PaymentFailure');
	    				iscModal.showErrorMessage(message, messageOption);
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.order.payment.order-capture-payment
					 *@methodname onSuccessOfPayment
					 *@description callback handler for mashup call when Pay button is clicked on the Capture Payment screen.
					 *				On any kind of error, it shows an error message popup with details of the errors found.
					 *				If no errors found, it shows success message popup with payment details and a button to go to Order Summary screen.
					 *
					 */
		            onSuccessOfPayment : function(data){
		            	this.ui.actionClicked = '';
		            	var mashupRef = data.MashupRefs.MashupRef;
		            	if(mashupRef !== null && mashupRef !== undefined){
		            		var len = mashupRef.length;
		            		for(var i = 0; i < len; i++){
		            			var mashupRefObj = mashupRef[i];
		            			if(mashupRefObj.mashupRefId === "oneClickCapturePayConfirm"){
		            				var errorFound = mashupRefObj.Output.Order.ErrorFound;
		            				if(errorFound === 'Y'){
		            					if(mashupRefObj.Output.Order.ErrorInAddress && mashupRefObj.Output.Order.ErrorInAddress === 'Y'){
		            						$scope.$broadcast('callVerifyAddress',{'callingScreeen':'order-capture-payment'});
		            					}
		            					else{
		            						var customerDefaultBillTo = angular.copy(this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo);
		            						var shippingAddressList = angular.copy(this.model.getCompleteOrderDetails.Order.ShippingAddressList);
		            						this.model.getCompleteOrderDetails = mashupRefObj.Output;
		            						if(!this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo && customerDefaultBillTo){
		            							this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo = customerDefaultBillTo;
		            						}
		            						if(!this.model.getCompleteOrderDetails.Order.ShippingAddressList && shippingAddressList){
		            							this.model.getCompleteOrderDetails.Order.ShippingAddressList = shippingAddressList;
		            						}
			            					this.model.newPaymentMethods = {};
			            					this.model.newPaymentMethods.newPaymentMethod = [];
			            					var remainingAmountToAuth = mashupRefObj.Output.Order.ChargeTransactionDetails.RemainingAmountToAuth;
			            					if(parseFloat(remainingAmountToAuth) > 0){
			            						//update remaining amount with AwaitingChargeInterfaceAmount and AwaitingAuthInterfaceAmount for Suspended payment methods
			            						this.ui.remainingAmount = angular.copy(remainingAmountToAuth);
			            						var suspendAwaitAmt = iscPayment.getAwtAuthNChrgAmtOnSuspndedPmts(mashupRefObj.Output.Order.PaymentMethods,this.model.getCompleteOrderDetails.Order.DocumentType);
			            						if(suspendAwaitAmt > 0){
			            							this.ui.remainingAmount = parseFloat(this.ui.remainingAmount) + parseFloat(suspendAwaitAmt);
			            							this.ui.remainingAmount = (this.ui.remainingAmount).toFixed(2);
			            						}
			            					}
									        var messageOption = { 
						    					options: { 
						    						headerText: "payment.LABEL_PaymentFailure"
						    					},
						    					settings : {
						    						contentTemplate : "./store/views/order/payment/payment-error-content.tpl.html"
						    					}
						    				};
						    				var message = iscI18n.translate('payment.MESSAGE_PaymentFailure');
						    				iscModal.showErrorMessage(message, messageOption);
		            					}
		            					
			            			}
			            			else {
			            				var customerDefaultBillTo = angular.copy(this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo);
	            						var shippingAddressList = angular.copy(this.model.getCompleteOrderDetails.Order.ShippingAddressList);
	            						this.model.getCompleteOrderDetails = mashupRefObj.Output;
	            						if(!this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo && customerDefaultBillTo){
	            							this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo = customerDefaultBillTo;
	            						}
	            						if(!this.model.getCompleteOrderDetails.Order.ShippingAddressList && shippingAddressList){
	            							this.model.getCompleteOrderDetails.Order.ShippingAddressList = shippingAddressList;
	            						}
			            				this.model.newPaymentMethods = {};
			            				this.model.newPaymentMethods.newPaymentMethod = [];
			            				var draftOrderFlag = mashupRefObj.Output.Order.DraftOrderFlag;
			            				if(draftOrderFlag === "N"){
			            					callConfirmDraftOrder = false;
			            					
			            					if(this.ui.paymentAction == 'Refund'|| this.ui.paymentAction == 'Nochange'){
			            						iscWizard.finishWizard();	    
			            					}else{
			            						
							       			var modalContentData = iscPayment.prepareSuccessMessagePopupData(this.model.getCompleteOrderDetails,this.model.getPaymentTypeList.PaymentTypeList,this.model.getPaymentCardTypeList.PaymentCardTypeList,this.ui.realTimeAuthEnabled);
							       			var messageOption = { 
						    					options: { 
						    						headerText: "payment.LABEL_PaymentSuccess",
						    						action:[
						    						  {
						    						    actionName:"OK",
						    						    actionLabel:"payment.ACTION_ViewOrderSummary"
						    						  }
						    						]
						    					},
						    					settings : {
						    						contentTemplate : "./store/views/order/payment/payment-success-content.tpl.html"
						    					},
						    					data : {
						    						contentData : modalContentData
						    					}
						    				};
						    				var message = iscI18n.translate('payment.MESSAGE_PaymentSUCCESS');
						    				iscModal.showSuccessMessage(message, messageOption).then(
						    							function(callBackData){
									            			iscWizard.finishWizard();	            			
									       				},
									       				function(callBackData){
									            			iscWizard.finishWizard();	            			
									       				}); 
			            					//iscWizard.finishWizard();
			            					}
						    				
			            				}
			            				else {
			            					var remainingAmountToAuth = mashupRefObj.Output.Order.ChargeTransactionDetails.RemainingAmountToAuth;
			            					if(parseFloat(remainingAmountToAuth) > 0){
			            						callConfirmDraftOrder = false;
			            						//update remaining amount with AwaitingChargeInterfaceAmount and AwaitingAuthInterfaceAmount for Suspended payment methods
			            						this.ui.remainingAmount = angular.copy(remainingAmountToAuth);
			            						var suspendAwaitAmt = iscPayment.getAwtAuthNChrgAmtOnSuspndedPmts(mashupRefObj.Output.Order.PaymentMethods,this.model.getCompleteOrderDetails.Order.DocumentType);
			            						if(suspendAwaitAmt > 0){
			            							this.ui.remainingAmount = parseFloat(this.ui.remainingAmount) + parseFloat(suspendAwaitAmt);
			            							this.ui.remainingAmount = (this.ui.remainingAmount).toFixed(2);
			            						}
			            						iscModal.showErrorMessage(iscI18n.translate('payment.INSUFFICIENT_PAYMENT'));
			            					}
			            					else {
								  				var messageOption = { 
							    					options: { 
							    						headerText: "payment.LABEL_PaymentFailure"
							    					},
							    					settings : {
							    						contentTemplate : "./store/views/order/payment/payment-error-content.tpl.html"
							    					},
							    					data : {
							    						contentData : {
							    							errors : data.Errors ? data.Errors : {}
							    						}
							    					}
							    				};
							    				var message = iscI18n.translate('payment.MESSAGE_PaymentFailure');
							    				iscModal.showErrorMessage(message, messageOption);
			            					}
			            				}
			            			}
		            			}
		            		}
		            	}		           
		            },
		            onSuccessOfSavePayment : function(data){
		            	var mashupRef = data.MashupRefs.MashupRef;
		            	if(mashupRef !== null && mashupRef !== undefined){
		            		var len = mashupRef.length;
		            		for(var i = 0; i < len; i++){
		            			var mashupRefObj = mashupRef[i];
		            			if(mashupRefObj.mashupRefId === 'capturePayment'){
		            				this.ui.initcomplete=false;
		            				this.ui.reInitPadss='Y';
		            				var shippingAddressList = angular.copy(this.model.getCompleteOrderDetails.Order.ShippingAddressList);
		            				this.model.getCompleteOrderDetails = mashupRefObj.Output;
		            				this.model.getCompleteOrderDetails.Order.ShippingAddressList = shippingAddressList;
		            				this.ui.orderShipToKey = mashupRefObj.Output.Order.ShipToKey;
		            				if(mashupRefObj.Output.Order.BillToKey != undefined){
		            					this.ui.orderBillToKey = mashupRefObj.Output.Order.BillToKey;
		            				}
		            				this.model.newPaymentMethods = {};
		            				this.model.newPaymentMethods.newPaymentMethod = [];
		            				var newPaymentMethodObj = {};
		            				if(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth > 0){
		            					newPaymentMethodObj = this.getNewPaymentMethodObject();
										this.model.newPaymentMethods.newPaymentMethod[0] = newPaymentMethodObj;
									}
		            				else{
		            					this.model.newPaymentMethods = {};
		            					this.model.newPaymentMethods.newPaymentMethod = [];
		            				}
		            				
		            				this.ui.initcomplete=true;
		            			}
		            			else if (mashupRefObj.mashupRefId === 'deletePayment' || mashupRefObj.mashupRefId === 'resumePayment'){		            				
		            				var getCompleteOrderDetailsMashupRefObj = iscMashup.getMashupRefObj(this,"getCompleteOrderDetails",iscPaymentinput.getCompleteOrderDetailsInput(mashupRefObj.Output.Order.OrderHeaderKey));
					            	var mashupRefList = [getCompleteOrderDetailsMashupRefObj];
					            	iscMashup.callMashups(this,mashupRefList,{}).then(this.onSuccessOfOrderDetails.bind(this),angular.noop);
		            			}
		            		}
		            	}
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.order.payment.order-capture-payment
					 *@methodname onSuccessOfOrderDetails
					 *@description callback handler for mashup call to re-initializes getCompleteOrderDetails model object when any saved payment method is deleted or resumed.
					 *
					 */
		            onSuccessOfOrderDetails : function(data){
		            	var mashupRef = data.MashupRefs.MashupRef;
		            	if(mashupRef !== null && mashupRef !== undefined){
		            		var len = mashupRef.length;
		            		for(var i = 0; i < len; i++){
		            			var mashupRefObj = mashupRef[i];
		            			if(mashupRefObj.mashupRefId === 'getCompleteOrderDetails'){
		            				this.initScreenDetails(mashupRefObj.Output);
		            				if(this.ui.resumePaymentKey){
		            					var paymentMethod = iscPayment.getPaymentMethodForKey(this.model.getCompleteOrderDetails, this.ui.resumePaymentKey);
		            					if(paymentMethod && !iscPayment.isPaymentMethodSuspended(paymentMethod,this.model.getCompleteOrderDetails.Order.DocumentType)){
		            						var resumedAmount = paymentMethod.MaxChargeLimit;
		            						var finalResumedAmount = 0;
		            						var chargedAmount = paymentMethod.TotalCharged;
		            						var authorizedAmount = paymentMethod.TotalAuthorized;
		            						if(parseFloat(chargedAmount) > 0 || parseFloat(authorizedAmount) > 0){
							            		if(parseFloat(chargedAmount) > 0){
							            			finalResumedAmount = parseFloat(resumedAmount) - parseFloat(chargedAmount);
							            		}
							            		else if(parseFloat(authorizedAmount) > 0){
							            			 finalResumedAmount = parseFloat(resumedAmount) - parseFloat(authorizedAmount);
							            		}
							            	}
							            	else {
							            		finalResumedAmount = resumedAmount;
							            	}
							            	if(parseFloat(finalResumedAmount) > 0){
							            		var newRemainingAmount = parseFloat(this.ui.remainingAmount) - parseFloat(finalResumedAmount);
							            		this.ui.remainingAmount = newRemainingAmount.toFixed(2);
							            	}
		            					}
		            					this.ui.resumePaymentKey = null;
		            				}
		            				this.ui.remainingAmount = iscPayment.calculateRemainingAmountToAdd(this.model.getCompleteOrderDetails, this.model.newPaymentMethods.newPaymentMethod);
		            			}
		            		}
		            	}
		            },
		            //Mashup Success/Failure Handler Methods END
		            
		            //Other methods	
		            /**
					 *@iscdoc method
					 *@viewname store.views.order.payment.order-capture-payment
					 *@methodname getNewPaymentMethodObject
					 *@description gets new PaymentMethod model object to initalize a new Payment Method panel in the Capture Payment screen.
					 *				By default, it sets the default selected Payment Type as the first payment type belonging to the Payment type gourp "CREDIT_CARD".
					 *				If no credit card type payment types are available, then it defaults the selected payment type to the first in the list.
					 *
					 */
		            getNewPaymentMethodObject : function(){
		            	var newPaymentMethodObj = {};
    					newPaymentMethodObj.RequestedAmount = this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth;
						if(this.model.getCurrencyList.CurrencyList){
							if(this.ui.orderCurrency && this.ui.orderCurrency != ""){
								for(var j = 0; j < this.model.getCurrencyList.CurrencyList.Currency.length; j++){
									var currency = this.model.getCurrencyList.CurrencyList.Currency[j];
									var currencyType = currency.Currency;
									if(this.ui.orderCurrency === currencyType){
										newPaymentMethodObj.CustomerAccountCurrency = this.model.getCurrencyList.CurrencyList.Currency[j];
									}
								}
							}
							else {
								newPaymentMethodObj.CustomerAccountCurrency = this.model.getCurrencyList.CurrencyList.Currency[0];
							}
						}
						if(this.model.getCompleteOrderDetails.Order.PersonInfoBillTo && !iscObjectUtility.isEmpty(this.model.getCompleteOrderDetails.Order.PersonInfoBillTo)){
							newPaymentMethodObj.PersonInfoBillTo = angular.copy(this.model.getCompleteOrderDetails.Order.PersonInfoBillTo);
						}
						else if(this.ui.custDefaultPersonInfo){
							newPaymentMethodObj.PersonInfoBillTo = angular.copy(this.ui.custDefaultPersonInfo);
						}
						if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerFirstName) && iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerLastName)){
    						newPaymentMethodObj.FirstName = this.model.getCompleteOrderDetails.Order.CustomerFirstName;
							newPaymentMethodObj.LastName = this.model.getCompleteOrderDetails.Order.CustomerLastName;
							newPaymentMethodObj.CreditCardName = iscPayment.getFormattedName(newPaymentMethodObj.FirstName,newPaymentMethodObj.LastName);
    					}
						if(this.model.getPaymentTypeList.PaymentTypeList){
							var paymentTypeFound = false;
							for(var j = 0; j < this.model.getPaymentTypeList.PaymentTypeList.PaymentType.length; j++){
								var paymentTypeDef = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[j];
								var paymentType = paymentTypeDef.PaymentType;
								var paymentTypeGroup = paymentTypeDef.PaymentTypeGroup;
								if(paymentTypeGroup === 'CREDIT_CARD'){
									newPaymentMethodObj.PaymentType = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[j];
									paymentTypeFound = true;
									break;
								}
							}
							if(!paymentTypeFound){
								newPaymentMethodObj.PaymentType = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[0];
							}
						}
        				if(this.ui.orderShipToKey != "" && this.ui.orderBillToKey && this.ui.orderShipToKey === this.ui.orderBillToKey){
        					newPaymentMethodObj.useShpAddressForBill = 'Y';
        				}
        				else {
        					newPaymentMethodObj.useShpAddressForBill = 'N';
        				}
						if(this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType && this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType.length > 0){
        					newPaymentMethodObj.CardType = this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType[0];
        				}
						return newPaymentMethodObj;
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.order.payment.order-capture-payment
					 *@methodname getTotalAmountAlreadyAdded
					 *@description gets amount value for which payment details are already added, including the saved and new payment methods on order.
					 *
					 */
		            getTotalAmountAlreadyAdded : function(){
		            	var totalAmount = 0;
		            	for(var p=0; p < this.model.newPaymentMethods.newPaymentMethod.length; p++){
		            		var paymentMethod = this.model.newPaymentMethods.newPaymentMethod[p];
		            		var requestedAmount = paymentMethod.RequestedAmount;
		            		totalAmount = parseFloat(totalAmount) + parseFloat(requestedAmount);
		            	}
		            	if(this.model.getCompleteOrderDetails.Order.PaymentMethods && this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod
		            	&& this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod.length >0){
		            		for(var p=0; p < this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod.length; p++){
			            		var paymentMethod = this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod[p];
			            		var requestedAmount = paymentMethod.RequestedAmount;
			            		totalAmount = parseFloat(totalAmount) + parseFloat(requestedAmount);
			            	}
		            	}
		            	return totalAmount;
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.order.payment.order-capture-payment
					 *@methodname initScreenDetails
					 *@description called by callback handler for mashup call to re-initializes getCompleteOrderDetails model object when any saved payment method is deleted or resumed.
					 *
					 */
		            initScreenDetails : function(orderModel){
		            	var newPaymentMethodObj = {};
        				this.model.getCompleteOrderDetails = angular.copy(orderModel);
        				this.ui.orderShipToKey = orderModel.Order.ShipToKey;
        				if(orderModel.Order.BillToKey){
        					this.ui.orderBillToKey = orderModel.Order.BillToKey;
        				}
        				/**if(parseFloat(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth) > 0){
        					if(this.model.newPaymentMethods && this.model.newPaymentMethods.newPaymentMethod 
        					&& this.model.newPaymentMethods.newPaymentMethod.length && this.model.newPaymentMethods.newPaymentMethod.length > 0){
        						var requestedAmount = this.model.newPaymentMethods.newPaymentMethod[this.model.newPaymentMethods.newPaymentMethod.length-1].RequestedAmount;
        						var pendingRequestedAmount = parseFloat(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth) - parseFloat(this.getTotalAmountAlreadyAdded());
        						if(pendingRequestedAmount > 0 ){
        							var newRequestedAmount = (requestedAmount + pendingRequestedAmount).toFixed(2);
        							this.model.newPaymentMethods.newPaymentMethod[this.model.newPaymentMethods.newPaymentMethod.length-1].RequestedAmount = newRequestedAmount.toString();
        						}
        					}
        					else {
        						newPaymentMethodObj = this.getNewPaymentMethodObject();
        						this.model.newPaymentMethods.newPaymentMethod[0] = newPaymentMethodObj;
        						this.ui.remainingAmount = this.ui.remainingAmount - newPaymentMethodObj.RequestedAmount;
        					}
        				} **/
        				if(!this.model.getCompleteOrderDetails.Order.PersonInfoBillTo
        				&& !(this.model.getCompleteOrderDetails.Order.BillToID
        						&& this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo && this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo.PersonInfo)){
        					this.model.getCompleteOrderDetails.Order.PersonInfoBillTo = {};
        					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerFirstName) && iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerLastName)){
        						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.FirstName = this.model.getCompleteOrderDetails.Order.CustomerFirstName;
								this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.LastName = this.model.getCompleteOrderDetails.Order.CustomerLastName;
        					}
        					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerPhoneNo)){
        						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.DayPhone = this.model.getCompleteOrderDetails.Order.CustomerPhoneNo;
        					}
        					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerEMailID)){
        						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.EMailID = this.model.getCompleteOrderDetails.Order.CustomerEMailID;
        					}
        				}
        				
        				this.ui.initcomplete = true;

		            },
		            uiIsPaymentRequired : function(){
		            	return (this.model.getCompleteOrderDetails && this.model.getCompleteOrderDetails.Order) ? iscObjectUtility.isGreaterThanZero(this.model.getCompleteOrderDetails.Order.OverallTotals.GrandTotal) : false;
		            },
					handleWizardBack:function(){
						console.log("Screen is dirty");
						var that = this;
						if($scope.paymentCaptureForm.$dirty){
		            		iscModal.showConfirmationMessage("globals.MSG_BackClickDirtyMessage").then(function(actionName){if(actionName==="YES"){
		            			
		            			if(that.model.getCompleteOrderDetails.Order.DraftOrderFlag =='N'){
		            			var OrderModificationModel = {};
		            			OrderModificationModel.Order = {};
		            			OrderModificationModel.Order.OrderHasPendingChanges = 'N';
		            			iscWizard.setWizardModel("OrderModificationModel",OrderModificationModel);
		            			}
		            			
		            			iscWizard.gotoPreviousPage(true)}},function(){});
		            	}
		            	else {
		            		if(this.model.getCompleteOrderDetails.Order.DraftOrderFlag =='N'){
		            			var OrderModificationModel = {};
		            			OrderModificationModel.Order = {};
		            			OrderModificationModel.Order.OrderHasPendingChanges = 'N';
		            			iscWizard.setWizardModel("OrderModificationModel",OrderModificationModel);
		            		}
		            		iscWizard.gotoPreviousPage(true);
		            	}
						return true;	
					},
					handleWizardExit:function(){
						var confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
						
						iscModal.showConfirmationMessage(confirmationMsg).then(
							function(callBackAction){
									//
									if(callBackAction === 'YES'){
											iscWizard.exitWizard();
									}
							},
							function(callBackAction){
									//      Do Nothing

							});
						return true;						
					}
		            
				});
		}
	]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.receiving.notes.shipment-notes
 *@package store.views.receiving.notes
 *@class shipment-notes
 *@description Controller used for handling shipment notes popup 
 *  
 */


angular.module('store').controller('store.views.receiving.notes.shipment-notes',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscModal','iscI18n',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscModal,iscI18n) {
		
	iscScreen.initializeModalScreen($scope,{
	
		model:{
			   /**
				*@iscdoc model
				*@viewname store.views.receiving.notes.shipment-notes
				*@name noteList
				*@description Holds the output data of getNoteList api. This is used to list the notes in the UI
				*/
				"noteList":{}
	  		},

	  		mashupRefs : [
	  		
	  				{
			  		  /**
	  				   *@iscdoc mashup
	  		   			*@viewname store.views.receiving.notes.shipment-notes
	  		   			*@mashupid store.views.receiving.notes.getNoteList
			   			*@mashuprefid getNoteList
			   			*@modelname noteList
	  		   			*@description Fetches notes for a shipment
	  		   			*/
	  		  		
						mashupRefId: 'getNoteList',
						mashupId: 'store.views.receiving.notes.getNoteList',
						modelName : 'noteList'								
					},
					
					{
						/**
		  				   *@iscdoc mashup
		  		   			*@viewname store.views.receiving.notes.shipment-notes
		  		   			*@mashupid store.views.receiving.notes.changeShipment
				   			*@mashuprefid changeShipment
		  		   			*@description adds a note to a shipment
		  		   			*/
						
						mashupRefId: 'changeShipment',
						mashupId: 'store.views.receiving.notes.changeShipment'
						
					}
					
				],
				
				
				ui:{
					
				},
				
				/**
				 *@iscdoc viewinit
				 *@viewname store.views.receiving.notes.shipment-notes
				 *@method initialize
				 *@description Initializes the shipment notes modal by calling the getNoteList mashup.
				 */
				initialize : function(){
					var getNoteListInput = {};
					getNoteListInput.Note = {};
					getNoteListInput.Note.TableKey = modalInput.Shipment.ShipmentKey;
					iscMashup.callMashup(this,'getNoteList',getNoteListInput,{});
				},
				
				/**
				 *@iscdoc uimethod
				 *@viewname store.views.receiving.notes.shipment-notes
				 *@methodname uiClose
				 *@description Handles the scenario when 'Cancel' button is clicked on the modal.
				 */
				uiClose : function () {
					$uibModalInstance.close(this.model.noteList);
				},
				
				/**
				 *@iscdoc uimethod
				 *@viewname store.views.receiving.notes.shipment-notes
				 *@methodname uiPostComment
				 *@description Handles the scenario when 'Add' button is clicked on the modal.
				 */
				uiPostNote : function(noteAPIInput){
					var changeShipmentInput = {};
					changeShipmentInput.Shipment = {};
					changeShipmentInput.Shipment.ShipmentKey = modalInput.Shipment.ShipmentKey;
					changeShipmentInput.Shipment.Notes = noteAPIInput ;
					var mashupArray = [];
					mashupArray.push(iscMashup.getMashupRefObj(this,'changeShipment',changeShipmentInput));
					mashupArray.push(iscMashup.getMashupRefObj(this,'getNoteList', {"Note" : { "TableKey" : modalInput.Shipment.ShipmentKey}}));
					iscMashup.callMashups(this,mashupArray,{}).then(this.handlechangeShipment.bind(this),this.changeShipmentAPIErrorCallBack.bind(this));
				},
				
				
				/**
				 *@iscdoc method
				 *@viewname store.views.receiving.notes.shipment-notes
				 *@methodname handlechangeShipment
				 *@description call Back handler of changeShipment API call.
				 */
				
				handlechangeShipment : function(data){
					$scope.$broadcast('clearNoteFields');
				},
				
				
				/**
				 *@iscdoc method
				 *@viewname store.views.receiving.notes.shipment-notes
				 *@methodname changeShipmentAPIErrorCallBack
				 *@description error call Back handler of changeShipment API call.
				 */
				
				changeShipmentAPIErrorCallBack: function(response) {
					var errorMsg = response.Errors.Error[0].ErrorDescription;
		  			var errorCode = response.Errors.Error[0].ErrorCode;
		  			if(iscI18n.hasKey("apierror."+errorCode)){
		  				errorMsg = iscI18n.translate("apierror."+errorCode);
		  				iscModal.showErrorMessage(errorMsg,null,null);				
		  			}
		  			else{
		  				iscModal.showErrorMessage(errorMsg,null,null);
		  			}
					$uibModalInstance.dismiss(response);
				}
				
	  		  
	}
	
	);
	
	}
]);

	
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').controller('store.views.receiving.receive-shipment.receive-shipment-finish',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscState',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams,iscState) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  		},
  		
			initialize : function(){
			  // If return order has no lines and exchange order is confirmed, move to Order summary for exchange order instead of return summary
			  if(iscWizard.getWizardAction()==="FINISH"){
			    var orderInput = iscWizard.getWizardModel("receivedShipment");
		    	iscState.goToState('receiveSummary',{input:orderInput},{});
			  }
			  else if(iscWizard.getWizardAction()==="CLOSE"){
			    iscState.goToPreviousState();
			  }
			  
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').controller('store.views.receiving.receive-shipment.receive-shipment-init',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
						{
							 mashupRefId: 'getShipmentDetailsForReceiving',
						    mashupId: 'store.views.receiving.getShipmentDetailsForReceiving'
						
						}
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  		},
  		
			initialize : function(){
				if(iscStateParams.params.action==="receiveShipment"){
					this.validateShipmentForReceiving("receiveShipment",iscStateParams.params);
				}
			},
			
			
			validateShipmentForReceiving:function(stateName,stateParams) {
				
				var apiInput = {Shipment:{ShipmentKey:stateParams.input.Shipment.ShipmentKey}};
				iscMashup.callMashup(this,"getShipmentDetailsForReceiving",apiInput,{}).then(this.processShipmentDetailsForReceiving.bind(this,stateName),angular.noop);
			},
			
			processShipmentDetailsForReceiving:function(stateName, response) {
				
				 /**
				  * If ShipmentContainrized = Y, check for CaseContentEntryRequiredFlag....
				  * If CaseContentEntryRequiredFlag = Y, then no autoReceive 
				  */
				 var apiOutput = iscMashup.getMashupOutput(response,"getShipmentDetailsForReceiving");
				 iscStateParams.params.input = apiOutput;
				 iscWizard.gotoCustomPage('receiveShipment',iscStateParams.params,{});
				
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.receiving.receive-shipment.receive-shipment
 *@package store.views.receiving.receive-shipment
 *@class receive-shipment
 *@description Displays list of shipment containers/products to be received
 *
 */
angular.module('store').controller('store.views.receiving.receive-shipment.receive-shipment',
  ['$animate','$scope','$q','$filter','$rootScope','$timeout','iscScreen','iscState','iscWizard','$locale','iscStateParams','iscAppContext','iscMashup','iscModal','iscOrder','iscScrollUtility','iscObjectUtility','iscReturn','iscResourcePermission','iscI18n','iscRule'/*,'toastr'*/,
	function($animate,$scope,$q,$filter,$rootScope,$timeout,iscScreen,iscState,iscWizard,$locale,iscStateParams,iscAppContext,iscMashup,iscModal,iscOrder,iscScrollUtility,iscObjectUtility,iscReturn,iscResourcePermission,iscI18n,iscRule/*,toastr*/) {
	  
	  iscWizard.initializeWizardPage($scope,{
            model:{
            	/**
            	 * @description This model contains shipment details to be received.
            	 */
            	"shipmentDetails" : {},
            	/**
            	 * @description This model contains shipment line product details when isShipmentContainerized is false 
            	 */
            	"shipmentLineList":{},
            	/**
            	 * @description This model contains shipment container details when isShipmentContainerized is true 
            	 */
            	"shipmentContainerList":{},
            	/**
            	 * @description This model contains scanned barcode data
            	 */
            	"scanInput":{barCodeData:''}
            },
            mashupRefs:[
                        
							/*{
								 mashupRefId: 'getReceiptListByShipmentKey',
							    mashupId: 'store.views.receiving.getReceiptListByShipmentKey'
							
							},*/
							/**
			            	 * @description This mashup is used to fetch shipment container list based on receiving ShipmentKey
			            	 */
							{
								 mashupRefId: 'getReceivingShipmentContainerList',
							    mashupId: 'store.views.receiving.getReceivingShipmentContainerList'
							
							},
							/**
			            	 * @description This mashup is used to fetch shipment line product list based on receiving ShipmentKey
			            	 */
							{
								 mashupRefId: 'getReceivingShipmentLineList',
							    mashupId: 'store.views.receiving.getReceivingShipmentLineList'
							
							},
							/**
			            	 * @description This mashup is used to translate product barcode data and update the receiving quantity of the product if its eligible for receiving
			            	 */
							{
								 mashupRefId: 'translateBarCodeForProductReceiving',
								 mashupId: 'store.views.receiving.translateBarCodeForProductReceiving'
							},
							/**
			            	 * @description This mashup is used to search product based input search data and update the receiving quantity of the product if its eligible for receiving
			            	 */
							{
								 mashupRefId: 'searchAndReceiveShipmentByItemId',
								 mashupId: 'store.views.receiving.getItemListForReceiving'
							},
							/**
			            	 * @description This mashup is used to fetch shipment products which are not yet received
			            	 */
							{
								 mashupRefId: 'getNotReceivedItems',
							    mashupId: 'store.views.receiving.getNotReceivedItems'
							
							},
							/**
			            	 * @description This mashup is used to fetch shipment containers which are not yet received
			            	 */
							{
								 mashupRefId: 'getNotReceivedContainers',
							    mashupId: 'store.views.receiving.getNotReceivedContainers'
							
							},
							/**
			            	 * @description This mashup is used to unreceive good received quantity for a shipment line
			            	 */
							{
								 mashupRefId: 'unreceiveShipmentLine',
								 mashupId: 'store.views.receiving.unreceiveShipmentLine'
							},
							/**
			            	 * @description This mashup is used to update received good quantity for a shipment line
			            	 */
							{
								mashupRefId: 'receiveShipmentLine',
								mashupId: 'store.views.receiving.receiveShipmentLine'
							},
							/**
			            	 * @description This mashup is used to record received damage quantity for a shipment line
			            	 */
							{
								mashupRefId: 'recordDamageForShipmentLine',
								mashupId: 'store.views.receiving.unreceiveAndReceiveShipmentLine'
							},
							/**
			            	 * @description This mashup is used to translate container scm barcode data and update the receiving quantity of the container if its eligible for receiving
			            	 */
							{
								 mashupRefId: 'translateBarCodeForContainerReceiving',
								 mashupId: 'store.views.receiving.translateBarCodeForContainerReceiving'
							},
							/**
			            	 * @description This mashup is used to search container scm based input search data and update the receiving quantity of the container if its eligible for receiving
			            	 */
							{
								 mashupRefId: 'searchAndReceiveShipmentByContainer',
								 mashupId: 'store.views.receiving.searchAndReceiveShipmentByContainer'
							},
							/**
			            	 * @description This mashup is used to update received good quantity for a shipment container
			            	 */
							{
								mashupRefId: 'receiveContainer',
								mashupId: 'store.views.receiving.receiveContainer'
							},
							/**
			            	 * @description This mashup is used to unreceive received good quantity of a shipment container
			            	 */
							{
								mashupRefId: 'unreceiveContainer',
								mashupId: 'store.views.receiving.unreceiveContainer'
							}
                       ],
            ui:{
              
            	/**
				*@property {String}  screenType - contains type of screen RECEIVE_SHIPMENT/RECEIVE_SUMMARY to be used in receive-shipment.header.tpl.html 
				*/
            	screenType:"RECEIVE_SHIPMENT",
            	/**
				*@property {Object}  searchAndScannerLiteralKeys - contains bundle keys for scan textfield and search icon labels depending on isShipmentContainerized flag
				*/
            	searchAndScannerLiteralKeys : {
            		scanFieldLabelKey:"",
                	searchIconLabelKey:""
            	},
            	/**
				*@property {Object}  receivedItemLineIndex - denotes the scanned shipment line index.
				*/
            	receivedItemLineIndex:1,
            	/**
				*@property {boolean}  isReceivingAllowed - contains true if receiving is allowed for shipment else false.
				*/
            	isReceivingAllowed:true,
            	/**
				*@property {String}  autoReceiveError - contains translated auto receive error message
				*/
            	autoReceiveError:"",
            	/**
				*@property {boolean}  isShipmentContainerized - contains true if shipment has containers else false if shipment has products
				*/
            	isShipmentContainerized:false,
            	/**
				*@property {boolean}  hasPermissionToReceiveWithoutScan - contains true if user has permission to receive full shipment without scan else false.
				*/
            	hasPermissionToReceiveWithoutScan:false,
            	/**
				*@property {String}  lastReceivedItemId - contains the last received ItemId either by scan or search 
				*/
            	lastReceivedItemId:"",
            	/**
				*@property {boolean}  isAutoReceive - if true shipment product/container must be auto received based on the input passed to the screen and if false do nothing
				*/
            	isAutoReceive:false,
            	/**
				*@property {boolean}  showReceiveMsg - if true success message is shown when received quantity is updated for product/container
				*/
            	showReceiveMsg:false,
            	/**
				*@property {String}  receiveMsgBundleKey - contains message bundle key to be shown on successfully updation of received quantity for product/container
				*/
            	receiveMsgBundleKey:"",
            	/**
				*@property {String}  shipmentLineCount - contains the shipment line count
				*/
            	shipmentLineCount:"0",
            	/**
				*@property {String}  shipmentContainerCount - contains the shipment container count
				*/
            	shipmentContainerCount:"0",
            	/**
				*@property {Number}  shipmentLineShownCount - denotes the number of shipment lines to be shown on load of the screen.
				*/
            	shipmentLineShownCount:10,
            	/**
				*@property {Number}  packagesShownCount - denotes the number of shipment containers to be shown on load of the screen.
				*/
            	packagesShownCount:10,
            	/**
				*@property {Object}  currentlySelectedShipmentLine - contains the currently selected shipment line JSON model object.
				*/
            	currentlySelectedShipmentLine:"",
            	/**
				*@property {Object}  currentlySelectedContainer - contains the currently selected shipment container JSON model object
				*/
            	currentlySelectedContainer:"",
            	/**
				*@property {Object}  defaultDispCode - contains default disposition code value.
				*/
            	defaultDispCode:"",
            	/**
				*@property {String}  shpStatusBundleKey - contains shipment status bundle key.
				*/
            	shpStatusBundleKey : '',
            	/**
				*@property {String}  shipmentPreviewTemplate - contains the path to shipment preview html to be displayed in lower resolutions.
				*/
            	shipmentPreviewTemplate:'store/views/receiving/receive-shipment/receive-shipment-popover-preview.tpl.html',
				/**
				*@property {String}  shipmentNoteCount - Number of notes associated with the shipment.
				*/
				shipmentNoteCount : '0'
            },
			
         /**
         * @description method to initialize the controller and display list of containers/products to be received
         */
         initialize: function(){
        	 
        	 $rootScope.$showBackButtonForStates = true;
        	 
        	 if(iscResourcePermission.hasPermission("WSC000045")){
        		 this.ui.hasPermissionToReceiveWithoutScan = true;
        	 }
        	 
        	 var pageInput = iscWizard.getWizardPageInput();
        	 
        	 if(!iscCore.isVoid(pageInput) && !iscCore.isVoid(pageInput.input)){
        		 
        		 console.log("Auto Receive Entity : ",pageInput.autoReceive);
    			 
				 this.model.shipmentDetails.Shipment = pageInput.input.Shipment;
				 if(pageInput.input.Shipment.Notes.Note)
					this.ui.shipmentNoteCount = pageInput.input.Shipment.Notes.NumberOfNotes;
				 this.processShipmentDetails(this.model.shipmentDetails.Shipment);
				 if(this.ui.isReceivingAllowed) {
					 
					 this.setSearchAndScannerLiterals(this.model.shipmentDetails.Shipment.ShipmentContainerizedFlag);
					 
					 var initMashupName = this.ui.isShipmentContainerized ? 'getReceivingShipmentContainerList' : 'getReceivingShipmentLineList';
					 var initMashupInput = this.ui.isShipmentContainerized ? {Container:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}} : {ShipmentLine:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
		        	 
					 
		        	 if(!iscCore.isVoid(pageInput.autoReceive) && !iscCore.isVoid(pageInput.autoReceive.AutoReceiveEntity) 
							 && !iscCore.isVoid(pageInput.autoReceive.TranslatedEntityValue) 
							 && ( ("PRODUCT" == pageInput.autoReceive.AutoReceiveEntity && !this.ui.isShipmentContainerized)
							 || ("PACKAGE" == pageInput.autoReceive.AutoReceiveEntity && this.ui.isShipmentContainerized) )) {
						 
						 this.ui.isAutoReceive = true;
						 var autoReceiveMashupName = this.ui.isShipmentContainerized ? 'searchAndReceiveShipmentByContainer' : 'searchAndReceiveShipmentByItemId';
						 var autoReceiveMashupInput = this.ui.isShipmentContainerized ? {Container:{ContainerScm:pageInput.autoReceive.TranslatedEntityValue, ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, DocumentType:this.model.shipmentDetails.Shipment.DocumentType}} : {Item:{ItemID:pageInput.autoReceive.TranslatedEntityValue, QuantityToReceive:pageInput.autoReceive.AutoReceiveProductQuantity,ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, DocumentType:this.model.shipmentDetails.Shipment.DocumentType}};
						 
						 var initMashupDetails = {mashup:initMashupName, input:initMashupInput, autoReceiveEntityValue:pageInput.autoReceive.TranslatedEntityValue};
						 iscMashup.callMashup(this,autoReceiveMashupName,autoReceiveMashupInput,{}).then(this.onAutoReceiveSuccess.bind(this,initMashupDetails), this.onAutoReceiveError.bind(this,initMashupDetails));
						 //mashupArray.push(iscMashup.getMashupRefObj(this,autoReceiveMashupName, autoReceiveMashupInput));
						 
					 } else {
						 
						 iscMashup.callMashup(this,initMashupName,initMashupInput,{}).then(this.handleInitApiCalls.bind(this,""),angular.noop);
						 //mashupArray.push(iscMashup.getMashupRefObj(this,initMashupName, mashupInput));
						 
					 }
		        	 
				 } else {
					 console.log("Shipment cannot be received !");
				 }
				 
        	 }
        	  
         },
         
         /**
          * @description Callback handler for auto receive init APIs invoked in initialize() method. This method invokes mashups to load shipment containers/products
          * @param {Object} initMashupDetails - contains next set of mashups to be invoked in JSON format
          * @param {Object} response - mashup response JSON object
          */
         onAutoReceiveSuccess:function(initMashupDetails,response) {
        	 
        	 var autoReceiveResponse = response;
        	 iscMashup.callMashup(this,initMashupDetails.mashup,initMashupDetails.input,{}).then(this.handleInitApiCalls.bind(this, autoReceiveResponse),angular.noop);
        	
         },
         
         /**
          * @description Callback handler for auto receive init APIs invoked in initialize() method. This method is invoked when auto receive mashup throws error.
          * Auto receieve error is saved and we proceed to load the shipment products/containers
          * @param {Object} initMashupDetails - contains next set of mashups to be invoked in JSON format
          * @param {Object} errors - mashup error JSON object
          */
         onAutoReceiveError:function(initMashupDetails, errors) {
        	 
        	 if(!iscCore.isVoid(errors) && !iscCore.isVoid(errors.Errors) && !iscCore.isVoid(errors.Errors.Error) && !iscCore.isVoid(errors.Errors.Error.length > 0)) {
      			
      			var error = errors.Errors.Error[0];
      			var errorCode = error.ErrorCode;
      			
      			if("OMP10080" == errorCode) {
      				this.ui.autoReceiveError = iscI18n.translate("apierror."+errorCode, {itemId:initMashupDetails.autoReceiveEntityValue}); 
      			} else {
      				this.ui.autoReceiveError = error.ErrorDescription;
      			} 
      			
      		} else {
      			
      			if(this.ui.isShipmentContainerized) {
        			this.ui.autoReceiveError = iscI18n.translate("MSG_FailedToAutoReceivePackage", {containerScm:initMashupDetails.autoReceiveEntityValue});
        		} else {
        			this.ui.autoReceiveError = iscI18n.translate("MSG_FailedToAutoReceiveProduct", {itemId:initMashupDetails.autoReceiveEntityValue});
        		}
      			
      		}
        	 
        	 iscMashup.callMashup(this,initMashupDetails.mashup,initMashupDetails.input,{}).then(this.handleInitApiCalls.bind(this, ""),angular.noop);
         },
         
         /**
          * @description Callback handler for getReceivingShipmentLineList/getReceivingShipmentContainerList APIs. Initializes the appropriate model object depending on which mashup was invoked.
          * @param {Object} autoReceiveResponse - contains response JSON object if auto receive API was invoked 
          * @param {Object} response - mashup response JSON object
          */
         handleInitApiCalls:function(autoReceiveResponse, response) {
        	 
        	 if(this.ui.isShipmentContainerized) {
        		 this.model.shipmentContainerList = iscMashup.getMashupOutput(response,"getReceivingShipmentContainerList");
        		 this.ui.shipmentContainerCount = this.model.shipmentContainerList.Containers.TotalNumberOfRecords;
        		 this.ui.currentlySelectedContainer = this.model.shipmentContainerList.Containers.Container[0];
        		 //this.ui.currentlySelectedContainer._receivingShowEditState = true;
        	 } else {
        		 this.model.shipmentLineList = iscMashup.getMashupOutput(response,"getReceivingShipmentLineList");
        		 this.ui.shipmentLineCount = this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords;
        		 this.ui.currentlySelectedShipmentLine = this.model.shipmentLineList.ShipmentLines.ShipmentLine[0];
        	 }
        	 
        	 if(this.ui.autoReceiveError) {
    			 iscModal.showErrorMessage(this.ui.autoReceiveError);
    			 this.ui.autoReceiveError = "";
    		 } else if(this.ui.isAutoReceive && autoReceiveResponse) {
        		 
        		 if(this.ui.isShipmentContainerized) {
        			 this.handleProductSearchAndReceive('searchAndReceiveShipmentByContainer', autoReceiveResponse);
        		 } else {
        			 this.handleProductSearchAndReceive('searchAndReceiveShipmentByItemId', autoReceiveResponse);
        		 }
        	 }
        	 
         },
         
         /**
          * @description initializes variables (isReceivingAllowed, isShipmentContainerized, shpStatusBundleKey) depending on shipment details.
          * @param {Object} shipment - shipment details JSON object
          */
         processShipmentDetails:function(shipment) {
        	 
        	 if(!iscCore.isVoid(shipment)) {
        		 
        		 if(!iscCore.isVoid(shipment.ReceivingAllowed) && "N" == shipment.ReceivingAllowed || "Y" == shipment.ReceiptClosed) {
            		 this.ui.isReceivingAllowed = false;
    			 } else {
    				 this.ui.isReceivingAllowed = true;
    			 }
        		 
        		 var defDispContextParam = "";
        		 //var caseContentEntryReqdParam = "", caseContentEntryReqd='';
					if("0005" == shipment.DocumentType) {
						defDispContextParam = "defaultDispositionCodePO";
						//caseContentEntryReqdParam = "caseContentEntryRequiredForPO";
					} else if("0006" == shipment.DocumentType) {
						defDispContextParam = "defaultDispositionCodeTO";
						//caseContentEntryReqdParam = "caseContentEntryRequiredForTO";
					}
					
        		 this.ui.defaultDispCode = iscAppContext.getFromContext(defDispContextParam);
        		 //caseContentEntryReqd = iscAppContext.getFromContext(caseContentEntryReqdParam);
        		 
        		 if ("03" == shipment.ShipmentContainerizedFlag && shipment.CaseContentEntryRequired == 'N'){
        			 this.ui.isShipmentContainerized = true;
        		 }else{
        			 this.ui.isShipmentContainerized = false;
        		 }
        		 
        		 if(this.model.shipmentDetails.Shipment.Status) {
        			 this.ui.shpStatusBundleKey = "instorereceiving.LABEL_"+ this.model.shipmentDetails.Shipment.Status.replace(/\./g, "_");
        		 }
        		 
        		 
        		 /*if("01" == shipment.ShipmentContainerizedFlag || "02" == shipment.ShipmentContainerizedFlag) {
            		 this.ui.isShipmentContainerized = false;
            	 } else if ("03" == shipment.ShipmentContainerizedFlag) {
            		 this.ui.isShipmentContainerized = true;
            	 }*/
        	 }
        	 
         },
         
         /**
          * @description sets bundle keys scan textfield hint text and search icon label depending on isShipmentContainerized flag
          */
         setSearchAndScannerLiterals:function() {
        	 
        	 if(!this.ui.isShipmentContainerized) {
        		 this.ui.searchAndScannerLiteralKeys.scanFieldLabelKey = "globals.LABEL_ScanProductCode";
        		 this.ui.searchAndScannerLiteralKeys.searchIconLabelKey = "globals.ACTION_Search_product";
        	 } else  {
        		 this.ui.searchAndScannerLiteralKeys.scanFieldLabelKey = "globals.LABEL_ScanPackageId";
        		 this.ui.searchAndScannerLiteralKeys.searchIconLabelKey = "globals.ACTION_Search_Package";
        	 }
        	 
         },
         
         /**
          * @description This method performs dirty checking before launching related tasks.
          * @param {String} taskId - taskId value configured in receive-shipment-wizard-config.js
          */
         uiBeforeOpeningRelatedTask:function(taskId) {
        	 
        	var deferred = $q.defer();
        	 
        	var isDirty = $scope.receiveShipment.$dirty;
         	if(isDirty) {
         		iscModal.showConfirmationMessage(iscI18n.translate('globals.MSG_Screen_dirty')).then(function(action){
         			if(iscCore.isBooleanTrue(action)){
         				deferred.resolve(true);
         			} else {
         				deferred.reject(false);
         			}
         		});
         	} else {
         		deferred.resolve(true);
         	}
         	
         	return deferred.promise;
         	
         },
         
         /**
          * @description This method returns formatted quantity bundle key for a container depending on if its received as good or damaged. 
          * @param {String} isContainerReceived - if Y, container is received either good or damaged. If N, container is yet to be received
          * @param {String} isRecvAsDamaged - If Y, container is received as damaged. If N, received as good.
          */
         uiGetContainerQuantityLabel:function(isContainerReceived, isRecvAsDamaged) {
        	 var quantityLabelKey = "instorereceiving.LABEL_", options = "";
        	 
        	 if("Y" == isContainerReceived) {
        		 if("Y" == isRecvAsDamaged) {
        			 quantityLabelKey += "Damaged";
        		 }else{
        			 quantityLabelKey += "Received";
        		 }
        	 } else {
        		 quantityLabelKey += "Receive";
        		 options = {count:"1"};
        	 }
        	 
        	 return iscI18n.translate(quantityLabelKey, options);
        	 
         },
         
         /**
          * @description onClick handler for Close button. Performs dirty checking and displays warning message on existing the receiving screen. 
          */
         uiCancel : function(){
           if(this.ui.isReceivingAllowed){
        		var isDirty = $scope.receiveShipment.$dirty;
            	if(isDirty) {
            		iscModal.showConfirmationMessage(iscI18n.translate('globals.MSG_Screen_dirty')).then(function(action){
            			if(iscCore.isBooleanTrue(action)){
            				//iscState.goToState('/home',{},{});
            				iscWizard.closeWizard();
            			}
            		});
            	} else {
            		
            		iscModal.showConfirmationMessage(iscI18n.translate('instorereceiving.WarningMessage_Cancel')).then(function(action){
            			if(iscCore.isBooleanTrue(action)){
            				//iscState.goToState('/home',{},{});
            				iscWizard.closeWizard();
            			}
            		});
            		
            	}
        	}else{
        		iscState.goToState('/home',{},{});
        	}
        	
 		 },	
 		 
 		  /**
          * @description onClick handler for back button. Performs dirty checking and displays warning message on existing the receiving screen. 
          */
 		handleWizardBack:function() {
			var isDirty = $scope.receiveShipment.$dirty;
			if(this.ui.isReceivingAllowed && isDirty){
				iscModal.showConfirmationMessage(iscI18n.translate('globals.MSG_Screen_dirty')).then(function(action){
        			if(iscCore.isBooleanTrue(action)){
        				iscWizard.gotoPreviousPage(true);
        			}
        		});
			} else{
				
				iscModal.showConfirmationMessage(iscI18n.translate('instorereceiving.WarningMessage_Cancel')).then(function(action){
        			if(iscCore.isBooleanTrue(action)){
        				iscWizard.gotoPreviousPage(true);
        			}
        		});
			}
			
			return true;
 			
 		},
         
 		/**
 		 *@description Shows next set of shipment lines when shipment lines panel is scrolled.
 		 */
   		
 		uiGetShipmentLineListNext: function(){
 		    if(this.ui.shipmentLineShownCount <= this.model.shipmentLineList.ShipmentLines.ShipmentLine.length){
 	          this.ui.shipmentLineShownCount+=5;
 	        }
         },
         
         /**
 		 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
 		 */
         
         uiShipmentLineScrollActionValidator : function(){
         	return true;
         },
 		 
         /**
  		 *@description onClick handler on click of Continue button. Performs dirty checking and invokes appropriate API for  fetching the not received products/containers of shipment.
  		 */
          
 		 uiHandleReceiveShipment:function() {
 			
 			 var that = this;
 			var isDirty = $scope.receiveShipment.$dirty;
        	if(isDirty) {
        		iscModal.showConfirmationMessage(iscI18n.translate('globals.MSG_Screen_dirty')).then(function(action){
        			if(iscCore.isBooleanTrue(action)){
        				that.handleReceiveShipment();
        			}
        		});
        	} else {
        		this.handleReceiveShipment();
        	}
        	
         },
         
         /**
   		 *@description Invokes appropriate API for fetching the not received products/containers of shipment.
   		 */
         handleReceiveShipment:function() {
        	 
        	 var apiInput = {ShipmentLine:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, DocumentType:this.model.shipmentDetails.Shipment.DocumentType}};
        	var mashupId = 'getNotReceivedItems';
        	if(this.ui.isShipmentContainerized){
        		apiInput = {Container:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, DocumentType:this.model.shipmentDetails.Shipment.DocumentType}};
        		mashupId = 'getNotReceivedContainers';
        	}        	
        	iscMashup.callMashup(this,mashupId,apiInput,{}).then(this.handleNotReceivedAPI.bind(this, mashupId),angular.noop);
         },
 		 
         /**
          * @description Callback handler for mashup invoked in handleReceiveShipment() method. If remaining items/containers count is more than zero(0), receive later popup is launched.
          * @param {String} mashupId - mashupId invoked in handleReceiveShipment() method
          * @param {Object} response - mashup response JSON object
          */
		handleNotReceivedAPI : function(mashupId, response){
        	/* var mashupId = 'getNotReceivedItems';
        	 if(this.ui.isShipmentContainerized){
        		 mashupId = 'getNotReceivedContainers';
        	 }*/
        	 var apiOutput = iscMashup.getMashupOutput(response, mashupId);
        	 var countRemainingItems = 0;
        	 if(this.ui.isShipmentContainerized){
        		 countRemainingItems = apiOutput.Containers.TotalNumberOfRecords;
        	 }else{
        		 countRemainingItems = apiOutput.ShipmentLines.TotalNumberOfRecords;
        	 }
        	 
        	 if(parseInt(countRemainingItems)>0){
        		 this.openReceiveLaterShipmentPopup(apiOutput);
        	 }else{
        		this.gotoSummary();
        	 }
         },
         
         /**
          * @description This method used to navigate to receive shipment summary state.
          */
         gotoSummary:function(){
        	 var pageInput = {"ShipmentKey": this.model.shipmentDetails.Shipment.ShipmentKey};
	  			iscState.goToState("receivingShipmentSummary", pageInput, {});
         },
         
         /**
          * @description This method is used to translate scanned barcode data. Invokes mashup if barcode data is valid else throws error.
          * @param {String} barCodeData - scanned barcode data
          */
 		uiTranslateBarCode:function(barCodeData) {
       	 
       	 if(!iscCore.isVoid(barCodeData)) {
       		 
       		 var input = {BarCode:{BarCodeData:barCodeData, ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, DocumentType:this.model.shipmentDetails.Shipment.DocumentType}};
       		 var mashupName = this.ui.isShipmentContainerized ? 'translateBarCodeForContainerReceiving' : 'translateBarCodeForProductReceiving';
       		 iscMashup.callMashup(this,mashupName,input,{}).then(this.handleBarCodeTranslation.bind(this, mashupName), this.handleReceivingAPIErrors.bind(this, mashupName, barCodeData));
       		 
       	 } else {
       		 var msgBundleKey = this.ui.isShipmentContainerized ? 'globals.MSG_InvalidPackageBarCodeData'  : 'globals.MSG_InvalidProductBarCodeData';
       		 iscModal.showErrorMessage(iscI18n.translate(msgBundleKey));
       	 }
       	 
        },
        
        /**
         * @description Error callback handler for product/container receiving either by scan or search
         * @param {String} mashupName - mashup name which threw error
         * @param {String} itemId - scanned or searched itemId
         * @param {String} errors - mashup errors JSON object
         */
        handleReceivingAPIErrors:function(mashupName, itemId, errors) {
        	
        	 if(!iscCore.isVoid(errors) && !iscCore.isVoid(errors.Errors) && !iscCore.isVoid(errors.Errors.Error) && !iscCore.isVoid(errors.Errors.Error.length > 0)) {
     			
     			var error = errors.Errors.Error[0];
     			var errorCode = error.ErrorCode;
     			var options = "", errorBundleKey="";
     			
     			if("OMP10008" == errorCode) {
     				errorBundleKey = "apierror.ApiError_ProductNotPartOfShipment";
     			} else if("OMP10080" == errorCode) {
     				options = {itemId:itemId}; 
     				errorBundleKey = "apierror."+errorCode;
     			} else {
     				errorBundleKey = "apierror."+errorCode;
     			}
     			
     			console.log("Receiving failed due - ",error.ErrorDescription);
     			
     			iscModal.showErrorMessage(iscI18n.translate(errorBundleKey, options));
     			
     		}
        	
        },
        
        /**
         * @description Success callback handler for product/container receiving using barcode translation
         * @param {String} mashupName - mashup name which was invoked based on isShipmentContainerized flag
         * @param {String} response - mashup response JSON object
         */
        handleBarCodeTranslation:function(mashupName,response) {
       	 
       	 var apiOutput = iscMashup.getMashupOutput(response, mashupName);
       	 if(mashupName == 'translateBarCodeForProductReceiving'){
       		 if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.BarCode) && !iscCore.isVoid(apiOutput.BarCode.ItemList) && !iscCore.isVoid(apiOutput.BarCode.ItemList.ShipmentLine)) {
       			 
       			 var updatedShipmentLine = {ShipmentLine:apiOutput.BarCode.ItemList.ShipmentLine};
           		 this.updateShipmentLineListAfterReceiving(updatedShipmentLine);
           		 this.highlightLastReceivedProduct(updatedShipmentLine.ShipmentLine, "SCAN");
           	 }
       	 }else if(mashupName == 'translateBarCodeForContainerReceiving'){
       		 
       		var updatedContainer,action;
       		if(apiOutput.BarCode.Receipt){
       			updatedContainer = apiOutput.BarCode.Receipt.Container;
       			action = 'RECEIVED';
       		}else{
       			updatedContainer = apiOutput.BarCode.Container;
       			action = 'ALREADY_RECEIVED';
       		}
       		this.updateContainerAfterReceiving(updatedContainer);
       		this.highlightLastReceivedContainer(updatedContainer,action);
       		
       	 }
       	 
       //Defect 527239
       	if(apiOutput && apiOutput.BarCode && apiOutput.BarCode.ShipmentStatus) {
			this.ui.shpStatusBundleKey = "instorereceiving.LABEL_"+ apiOutput.BarCode.ShipmentStatus.replace(/\./g, "_");
		 }
       	
       	 this.resetBarCodeData();
       	 
        },
        
        /**
         * @description onClick handler on cick of Search icon.This method invokes appropriate mashup for searching product/container and updates the receiving quantity.
         * @param {String} searchData - user entered search data
         */
        uiSearchById:function(searchData) {
       	 
       	 if(!iscCore.isVoid(searchData)) {
       		 
       		 var input = this.ui.isShipmentContainerized ?  {Container:{ContainerScm:searchData, ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, DocumentType:this.model.shipmentDetails.Shipment.DocumentType}} : {Item:{ItemID:searchData, ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, DocumentType:this.model.shipmentDetails.Shipment.DocumentType}};
       		 var mashupName = this.ui.isShipmentContainerized ? 'searchAndReceiveShipmentByContainer' : 'searchAndReceiveShipmentByItemId';
       		 iscMashup.callMashup(this,mashupName,input,{}).then(this.handleProductSearchAndReceive.bind(this, mashupName), this.handleReceivingAPIErrors.bind(this, mashupName, searchData));
       		 
       	 } else {
       		 var msgBundleKey = this.ui.isShipmentContainerized ? 'globals.MSG_InvalidPackageBarCodeData'  : 'globals.MSG_InvalidProductBarCodeData';
       		 iscModal.showErrorMessage(iscI18n.translate(msgBundleKey));
       	 }
        },
        
        /**
         * @description Success callback handler for product/container receiving using search 
         *@param {String} mashupName - mashup name which was invoked based on isShipmentContainerized flag
         * @param {String} response - mashup response JSON object
         */
        handleProductSearchAndReceive:function(mashupName, response) {
       	 
       	 var apiOutput = iscMashup.getMashupOutput(response, mashupName);
       	if(mashupName == 'searchAndReceiveShipmentByItemId'){
	       	 if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.ItemList) && !iscCore.isVoid(apiOutput.ItemList.ShipmentLine)) {
	       		 
	       		 //Defect 527239
	       		if(apiOutput.ItemList.ShipmentStatus) {
	       			this.ui.shpStatusBundleKey = "instorereceiving.LABEL_"+ apiOutput.ItemList.ShipmentStatus.replace(/\./g, "_");
	       		}
	       		 
	       		 var updatedShipmentLine = {ShipmentLine:apiOutput.ItemList.ShipmentLine};
	       		 this.updateShipmentLineListAfterReceiving(updatedShipmentLine);
	       		 this.highlightLastReceivedProduct(updatedShipmentLine.ShipmentLine,"SEARCH");
	       	 }
       	}else if(mashupName == 'searchAndReceiveShipmentByContainer'){
       		
       		//Defect 527239
       		if(apiOutput.Containers.ShipmentStatus) {
       			this.ui.shpStatusBundleKey = "instorereceiving.LABEL_"+ apiOutput.Containers.ShipmentStatus.replace(/\./g, "_");
       		}
       		
       		var updatedContainer,action;
       		if(apiOutput.Containers.Receipt){
       			updatedContainer = apiOutput.Containers.Receipt.Container;
       			action = 'RECEIVED';
       		}else{
       			updatedContainer = apiOutput.Containers.Container[0];
       			action = 'ALREADY_RECEIVED';
       		}
       		this.updateContainerAfterReceiving(updatedContainer);
       		this.highlightLastReceivedContainer(updatedContainer,action);
       	}
       	
       	 this.resetBarCodeData();
        },
        
        /**
         * @description This method is used to reset barcode/search data
         */
        resetBarCodeData:function() {
       	 this.model.scanInput.barCodeData = "";
        },
        
        /**
         * @description This method is used to update the shipment line list model after receiving quantity is updated for product
         * @param {Object} updatedShipmentLine - shipment line model 
         */
        updateShipmentLineListAfterReceiving:function(updatedShipmentLine) {
       	
       	 if(!iscCore.isVoid(this.model.shipmentLineList) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords)) {
       		 
       		 var numOfShipmentLines = $filter('number')(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords);
       		 for(var i=0;i<numOfShipmentLines;i++) {
       			 
       			 var shipmentLine = this.model.shipmentLineList.ShipmentLines.ShipmentLine[i];
       			 this.ui.receivedItemLineIndex++;
       			 if(!iscCore.isVoid(shipmentLine) && shipmentLine.ShipmentLineKey == updatedShipmentLine.ShipmentLine.ShipmentLineKey) {
       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].DamagedReceivedQty = $filter('number') (updatedShipmentLine.ShipmentLine.DamagedReceivedQty);
       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].GoodReceivedQty = $filter('number') (updatedShipmentLine.ShipmentLine.GoodReceivedQty);
       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].ReceivedQuantity = $filter('number') (updatedShipmentLine.ShipmentLine.ReceivedQuantity);
       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].DisplayReceivedQuantity = $filter('number') (updatedShipmentLine.ShipmentLine.ReceivedQuantity);
       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].EditableReceivedQuantity = $filter('number') (updatedShipmentLine.ShipmentLine.ReceivedQuantity);
       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].ReceiptLines =updatedShipmentLine.ShipmentLine.ReceiptLines;
       				break;
       			 }
       		 }
       	 }
        },
        
        /**
         * @description This method is used to highlight the last received shipment line product/container. 
         * @param {Object} shipmentLine - shipment line model to be highlighted
         * @param {Object} action - denotes SCAN/SEARCH 
         */
        highlightLastReceivedProduct:function(shipmentLine, action) {
        	if(this.ui.shipmentLineShownCount < this.ui.receivedItemLineIndex){
				this.ui.shipmentLineShownCount = this.ui.receivedItemLineIndex;
			}
        	var that = this;
			$timeout(function(){
					iscScrollUtility.scrollToElementWIthOffset(document.getElementById('listHolder'), document.getElementById(shipmentLine.ShipmentLineKey), 0, 100);
				}, 0);
			this.ui.receivedItemLineIndex = 1;
			if("SCAN" == action || "SEARCH" == action) {
				this.ui.showReceiveMsg = 'Y';
				this.ui.lastReceivedItemId = shipmentLine.ItemID;
				this.ui.receiveMsgBundleKey = "instorereceiving.MSG_ItemReceived";
			} else if("EDIT" == action){
				this.ui.showReceiveMsg = 'Y';
				this.ui.lastReceivedItemId = shipmentLine.ItemID;
				this.ui.receiveMsgBundleKey = "instorereceiving.MSG_ItemReceivedQuantityUpdated";
			}
			this.uiShowEditButtons(shipmentLine);
        },
        
        /**
         * @description This method computes if a shipment line is completely received without damage.
         * @param {Object} shipmentLine - shipment line model 	
         */
        uiIsShipmentLineCompletelyReceivedWithoutDamage:function(shipmentLine) {
       	 
       	 var isLineReceivedCompletelyWithoutDamage = true;
       	 
       	 var receivedQty = $filter('number')(shipmentLine.DisplayReceivedQuantity);
       	 var actualQuantity = $filter('number')(shipmentLine.Quantity);
       	 var damagedQuantity = $filter('number')(shipmentLine.DamagedReceivedQty);
       	 
       	 if(Number(damagedQuantity) > 0 ) {
       		 isLineReceivedCompletelyWithoutDamage = false
       	 } else if(Number(receivedQty) >= Number(actualQuantity)) {
   			 isLineReceivedCompletelyWithoutDamage = true
       	 } else {
       		 isLineReceivedCompletelyWithoutDamage = false;
       	 }
       	 
       	 return isLineReceivedCompletelyWithoutDamage;
       	 
        },
        
        /**
         * @description This method computes if a shipment line is completely missing
         * @param {Object} shipmentLine - shipment line model 	
         */
        uiIsCompleteLineMissing: function(shipmentLine){
        	return false;
        	//since receipt will always be open in this screen, items will never be marked as missing here.
        	/*var receivedQty = $filter('number')(shipmentLine.DisplayReceivedQuantity);
        	if(this.ui.isReceiptClosed && Number(receivedQty) == 0){
        		return true;
        	}else{
        		return false;
        	}*/
        },
        
        /** @description onClick handler on selecting a shipment line product/container on receiving screen
        * @param {Object} shipmentLine - shipment line model 	
        */
        uiShowEditButtons:function(shipmentLine) {
        	this.ui.currentlySelectedShipmentLine = shipmentLine;
        },
        
        /** @description This method is used to launch receive later shipment popup
         * @param {Object} apiOutput - shipment model with no received product/container details	
         */
         openReceiveLaterShipmentPopup:function(apiOutput) {
        	 var that = this;
        	 var popupInput = {};
	  			popupInput.shipmentDetails = this.model.shipmentDetails;
	  			popupInput.isShipmentContainerized = this.ui.isShipmentContainerized;
	  			popupInput.apiOutput = apiOutput;
	  			
				var receiveCompleteShipment = {
					 modalInput: function(){
		      			return popupInput;
		      		}   
				   
				};
				   
				iscModal.openModal('store.views.receiving.receive-shipment.common.receive-later.receive-later',receiveCompleteShipment,{}).then(function(callBackData){
					if(callBackData.data !== null && callBackData.data !== undefined){
						console.log("callBackData.data - ",callBackData.data);
					}
					that.gotoSummary();
				},angular.noop);
         },
        
        /**
			 *@description This is a onFocus event handler of quantity field.
			 *@param {Object} qtyField - quantity field as JSON object. 
			 *@param {Object} shipmentLineModel - shipment line data as JSON object. 
			 */
			uiOnQuantityFieldFocus :function (qtyField,shipmentLineModel) {
				if($scope.receiveShipment.$valid)
				var formats = $locale.NUMBER_FORMATS;
	  			var oldQuantity = shipmentLineModel.EditableReceivedQuantity;
	  			if(!iscCore.isVoid(oldQuantity)){
	  				oldQuantity=oldQuantity.replace(formats.GROUP_SEP, '');		
	  			}
	  			if(shipmentLineModel.showQtyUpdate !=='Y'){
	  				qtyField.oldQty = oldQuantity;
	  			}
				
		    },
		    
		    /**
		     *@description This is a custom validator method for received quantity field
			 *@param {Object} validationResponseObj - default data type validation response JSON object
			 *@param {Object} angularErrorObject - datatype validation error JSON object
			 *@param {Object} modelValue - quantity field value
			 *@param {Object} viewValue - quantity value inputted in textfield
		     */
		    uiValidateQuantity : function(validationResponseObj, angularErrorObject, modelValue, viewValue){
           	
           	/* check if the DataType Validation is successful */
           	
           	if(!iscCore.isVoid(angularErrorObject) && angularErrorObject.iscDatatypeValidator)
           		return validationResponseObj;
           	else
           	var isQty_a_Number = !isNaN(viewValue);
           	if(!iscCore.isBooleanTrue(isQty_a_Number) || iscCore.isVoid(viewValue)){
           		validationResponseObj.booleanResponse = !isNaN(viewValue) && !iscCore.isVoid(viewValue);
	            	validationResponseObj.errorMesssage = iscI18n.translate("globals.ERROR_invalid_input");
   			}
           	
           	return validationResponseObj;
           },
           
           /**
			 *@description Shows/hides Update button for quantity field based on the validity of the edited quantity.
			 *@param {Object} qtyField - quantity field as JSON object. 
			 *@param {Object} shipmentLineModel - shipmentLine data as JSON object. 
			 */
	  		
	  		uiShowUpdateButton : function(qtyField,shipmentLineModel){
	  						
	  						var formats = $locale.NUMBER_FORMATS;
				  			var newQuantity = shipmentLineModel.EditableReceivedQuantity;
				  			if(newQuantity)
				  				newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
				  			if((!iscCore.isVoid(newQuantity)) && qtyField.oldQty !== newQuantity && Number(shipmentLineModel.ReceivedQuantity) != Number(shipmentLineModel.EditableReceivedQuantity))
				  				shipmentLineModel.showQtyUpdate ='Y';
				  			else
				  				shipmentLineModel.showQtyUpdate ='N';
	  			
	  		},
	  		
	  		/**
			 *@description hides Update button for quantity field.
			 *@param {Object} shipmentLineModel - shipmentLine data as JSON object. 
			 */
	  		
	  		uiHideUpdateButton : function(shipmentLineModel){
	  			shipmentLineModel.showQtyUpdate ='N';
	  		},
	  		
	  	  /**
			 *@description Validates shipment line received quantity change and calls receiveOrder/unreceiveOrder api to update product received quantity .
			 *@param {Object} qtyField - quantity field as JSON object. 
			 *@param {Object} shipmentLineModel - shipmentLine data as JSON object. 
			 */
           
	  			uiValidateQuantityAndUpdate : function(qtyField,shipmentLineModel){
	  				
	  				
	  			var that = this;
	  			var formats = $locale.NUMBER_FORMATS;
	  			var newQuantity = shipmentLineModel.EditableReceivedQuantity;
	  			if(newQuantity) {
	  				newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
	  			}
	  			shipmentLineModel.EditableReceivedQuantity = newQuantity;
	  			if(!iscCore.isVoid(newQuantity) && qtyField.oldQty !== newQuantity && Number(shipmentLineModel.EditableReceivedQuantity) != Number(shipmentLineModel.DisplayReceivedQuantity)){
	  				
	  				qtyField.oldQty = newQuantity ;
	  				
		  			if (typeof newQuantity == "string") {
		  				newQuantity = parseInt(newQuantity,10);
		  			}
		  			
		  			var receivedDamagedQty = Number(shipmentLineModel.DamagedReceivedQty);
		  			var editedReceivedQty = Number(shipmentLineModel.EditableReceivedQuantity);
		  			var receivedGoodQty = Number(shipmentLineModel.GoodReceivedQty);
		  			var actualReceivedQty = Number(shipmentLineModel.DisplayReceivedQuantity);
		  			var shipmentQty = Number(shipmentLineModel.Quantity);
		  			var mashupName = "", mashupInput = "", action = "", throwError = false ,toBeReceivedGoodQty = 0, unreceiveQty = 0;
		  			
		  			if(receivedDamagedQty > 0) {
		  				
		  				if(receivedGoodQty == 0) {
		  					
		  					if(editedReceivedQty == 0 || editedReceivedQty < receivedDamagedQty) {
		  						throwError = true;
		  					} else {
		  						
		  						//DamagedQty > 0, GoodQty = 0, editedQty > 0
			  					toBeReceivedGoodQty = editedReceivedQty - receivedDamagedQty;
			  					action = "receiveQuantity";
		  						
		  					}
		  					
		  				} else {
		  					
		  					//DamagedQty > 0, GoodQty > 0, editedQty > 0
		  					
		  					// Receive more quantity
		  					if(editedReceivedQty > actualReceivedQty) {
		  						toBeReceivedGoodQty = (editedReceivedQty - actualReceivedQty);
		  						action = "receiveQuantity";
		  					} else {
		  						
		  						var deltaReceivedQty = actualReceivedQty - editedReceivedQty;
		  						
		  						if(deltaReceivedQty > receivedGoodQty) {
		  							throwError = true;
		  						} else {
		  							action = "unReceiveQuantity";
		  							unreceiveQty = deltaReceivedQty;
		  						}

		  					}
		  					
		  				}

		  				
		  				
		  			} else {
		  				
		  				if(editedReceivedQty > 0) {
		  					
		  					
		  					if(editedReceivedQty > actualReceivedQty) {
		  						
		  						//receiving more good quantity 
		  						action = "receiveQuantity";
		  						toBeReceivedGoodQty = editedReceivedQty - actualReceivedQty;
		  					} else {
		  						
		  						//unreceive difference good quantity
		  						action = "unReceiveQuantity";
		  						unreceiveQty = actualReceivedQty - editedReceivedQty;
		  					}
		  					
		  				} else {
		  					
		  					//Unreceive all received good quantity
		  					action = "unReceiveQuantity";
		  					unreceiveQty = actualReceivedQty;
		  					
		  				}
		  				
		  			}
		  			
		  			
		  			
		  			if(!throwError) {
		  				
		  				if("receiveQuantity" == action) {
		  					mashupName = "receiveShipmentLine";
		  	  				mashupInput = this.getReceiveShipmentLineInput(toBeReceivedGoodQty, shipmentLineModel);
		  				} else if("unReceiveQuantity" == action) {
			  				mashupName = "unreceiveShipmentLine";
			  				mashupInput = this.getUnReceiveShipmentLineInput(unreceiveQty,shipmentLineModel);
			  			}
		  			
		  				iscMashup.callMashup(this,mashupName,mashupInput,{}).then(
		  				
		  						this.handleReceivedQuantityUpdate.bind(this, mashupName), 
		  				
		  						function(errors) {
		  							shipmentLineModel.EditableReceivedQuantity = shipmentLineModel.DisplayReceivedQuantity;
		  							$scope.receiveShipment.$setPristine();
		  							that.handleReceivingAPIErrors(mashupName, shipmentLineModel.ItemID, errors)
		  						}
		  						
		  				);
		  				shipmentLineModel.showQtyUpdate='N';
		  				
		  			} else {
		  				
		  				
		  				var copyShipmentLineModel = angular.copy(shipmentLineModel);
		  				copyShipmentLineModel.showUndoDamageQtyError = "instorereceiving.MSG_DamageQuantityCannotBeUnreceived";
						this.uiRecordDamageForShipmentLine(copyShipmentLineModel);
						shipmentLineModel.EditableReceivedQuantity = shipmentLineModel.DisplayReceivedQuantity;
						shipmentLineModel.showQtyUpdate='N';
						$scope.receiveShipment.$setPristine();
		  				
		  			}
			    	
			    	
	  			}
	  			
	  		},
	  		
	  		/**
	  		 * @description This method prepares input for receiveOrder API
	  		 * @param {String} toBeReceivedQty - received quantity to be updated
	  		 * @param {Object} shipmentLine - shipmentLine model
	  		 */
	  		getReceiveShipmentLineInput:function(toBeReceivedQty, shipmentLine) {
	  			
	  			var contextParamName = "";
					if("0005" == shipmentLine.DocumentType) {
						contextParamName = "defaultDispositionCodePO";
					} else if("0006" == shipmentLine.DocumentType) {
						contextParamName = "defaultDispositionCodeTO";
					}
					
  				var receiveShipmentLineInput = {Receipt:{ShipmentKey:shipmentLine.ShipmentKey,DocumentType:shipmentLine.DocumentType,ReceiptLines:{ReceiptLine:{}},ShipmentLine:shipmentLine}};
  				receiveShipmentLineInput.Receipt.ReceiptLines.ReceiptLine = {ItemID:shipmentLine.ItemID, ShipmentLineKey: shipmentLine.ShipmentLineKey, 
  																UnitOfMeasure: shipmentLine.UnitOfMeasure, Quantity:toBeReceivedQty, DispositionCode:iscAppContext.getFromContext(contextParamName)};
	  			
  				return receiveShipmentLineInput;
	  			
	  		},
	  		
	  		/**
	  		 * @description This method prepares input for unreceiveOrder API
	  		 * @param {String} unreceiveQty - quantity to be unreceived
	  		 * @param {Object} shipmentLine - shipmentLine model
	  		 */
	  		getUnReceiveShipmentLineInput:function(unreceiveQty, shipmentLine) {
	  			return {Receipt:{ShipmentLine:shipmentLine,ReceiptLines:{ReceiptLine:{Quantity:unreceiveQty}},ReturnUpdatedShipmentLine:"Y"}};
	  		},
	  		
	  		
	  		/**
	  		 * @description callback handler after updating the receieved quantity. This method updates shipmentLineList model with the updated shipment line details.
	  		 * @param {String} mashupName - mashup name invoked for updating received quantity
	  		 * @param {Object} response - mashup response JSON object
	  		 */
	  		handleReceivedQuantityUpdate:function(mashupName, response) {
	  			
	  			var apiOutput = iscMashup.getMashupOutput(response, mashupName);
	  			
	  	       	 if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.Receipt) && !iscCore.isVoid(apiOutput.Receipt.ReceiptLines) && !iscCore.isVoid(apiOutput.Receipt.ReceiptLines.ReceiptLine)
	  	       		&& !iscCore.isVoid(apiOutput.Receipt.ReceiptLines.ReceiptLine.length > 0)) {
	  	       		 
	  	       		 //Defect 527239
	  	       		 if(apiOutput.Receipt.ShipmentStatus) {
	  	       		this.ui.shpStatusBundleKey = "instorereceiving.LABEL_"+ apiOutput.Receipt.ShipmentStatus.replace(/\./g, "_"); 
	  	       		 }
	  	       		 
	  	       		 
	  	       		 var updatedShipmentLine = {ShipmentLine:apiOutput.Receipt.ReceiptLines.ReceiptLine[0].ShipmentLine};
	  	       		 this.updateShipmentLineListAfterReceiving(updatedShipmentLine);
	  	       		 this.highlightLastReceivedProduct(updatedShipmentLine.ShipmentLine,"EDIT");
	  	       		 $scope.receiveShipment.$setPristine();
	  	       	 }
	  			
	  		},
         
	  		/**
	  		 * @description This method is used to launch record damage popup for selected shipment line
	  		 * @param {Object} shipmentLine - shipmentLine model JSON object
	  		 */
	  		uiRecordDamageForShipmentLine:function(shipmentLine) {
	  			
	  			var popupInput = {};
	  			var that = this;
	  			popupInput.ShipmentLine = shipmentLine;
	  			popupInput.shipment = this.model.shipmentDetails;
	  			
	  			var recordDamage = {
					 modalInput: function(){
		      			return popupInput;
		      		}   
				   
				};
				   
				iscModal.openModal('store.views.receiving.receive-shipment.common.record-damage.record-damage',recordDamage,{}).then(function(callBackData){
					if(callBackData.data !== null && callBackData.data !== undefined){
						console.log("callBackData.data - ",callBackData.data);
						if("NOUPDATE" != callBackData.data) {
							that.postRecordDamage(callBackData.data);
						}
					}
					
					//Defect 527239
					if(callBackData.shipmentStatus) {
						that.ui.shpStatusBundleKey = "instorereceiving.LABEL_"+ callBackData.shipmentStatus.replace(/\./g, "_");
					}
					
				},angular.noop);
	  			
	  			
	  		},
	  		
	  		/**
	  		 * @description Callback method for record damage popup. This method updates shipmentLineList model with updated shipment line details after recording damage and highlights the shipment line
	  		 * @param {Object} shipmentLine - shipmentLine model JSON object
	  		 */
	  		postRecordDamage:function(shipmentLine) {
	  			
	  			 this.updateShipmentLineListAfterReceiving(shipmentLine);
	       		 this.highlightLastReceivedProduct(shipmentLine.ShipmentLine, "RECORD-DAMAGE");
	  		},
	  		
	  		/**
	  		 * @description Callback handler for receive full shipment popup. This method used to open Receive shipment summary screen after completing receiving the shipment
	  		 * @param {Object} taskOutput - output from related task as JSON object
	  		 */
	  		uiReceiveAllSuccessHandler:function(taskOutput) {
	  			
	  			console.log("Receive All - ",taskOutput);
	  			var pageInput = {"ShipmentKey": taskOutput.taskAPIOutput.ShipmentKey};
	  			iscState.goToState("receivingShipmentSummary", pageInput, {});
	  		},
	  		
	  		/**
	  		 * @description This method is launch view container popup
	  		 * @param {Object} container - container details model
	  		 */
	  		uiShowContainerDetails:function(container){
	        	 
    			var popupInput = {ShipmentContainerKey:container.ShipmentContainerKey};
    			var containerDetailsPopupInput = {
    					 modalInput: function(){
    		      			return popupInput;
    		      		}   
    				   
    				};
    			
    			iscModal.openModal('store.views.receiving.receive-shipment.common.view-container.view-container',containerDetailsPopupInput,{});
	        	 
	         },
	         
	         /**
		  		 * @description This method is used to completely receive a shipment container
		  		 * @param {Object} container - container model
		  		 */ 
	         uiReceiveContainer:function(container){
	        	 var apiInput = {Receipt:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, 
	        		 					  DocumentType:this.model.shipmentDetails.Shipment.DocumentType,
	        		 					  DispositionCode:this.ui.defaultDispCode,
	        		 					  CaseId:container.ContainerScm,
	        		 					 ShipmentContainerKey:container.ShipmentContainerKey}};
	         	iscMashup.callMashup(this,'receiveContainer',apiInput,{}).then(this.handleReceiveContainerMashupOutput.bind(this,'receiveContainer'),angular.noop);
	         },
	         
	         /**
		  		 * @description This method is used to undo received quantity of a shipment container
		  		 * @param {Object} container - container model
		  		 */
	         uiUndoReceiveAction:function(container){
	        	 var apiInput = {Receipt:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, 
					  DocumentType:this.model.shipmentDetails.Shipment.DocumentType,
					  CaseId:container.ContainerScm,
					  ShipmentContainerKey:container.ShipmentContainerKey}};
	        	 iscMashup.callMashup(this,'unreceiveContainer',apiInput,{}).then(this.handleReceiveContainerMashupOutput.bind(this,'unreceiveContainer'),angular.noop);
	         },
	         
	         /**
		  		 * @description Callback handler invoked by mashups used for updating receive quantity of container
		  		 * @param {Object} mashupId - mashupId used to updated shipment container received quantity
		  		 * @param {Object} response - mashup response JSON object 
		  		 */
	         handleReceiveContainerMashupOutput: function(mashupId, response){
	        	 var apiOutput = iscMashup.getMashupOutput(response,mashupId);
	        	 
	        	 var container,action;
	        	 if(mashupId == 'receiveContainer'){
	        		 
	        		//Defect 527239
	        		 if(apiOutput.Receipt.ShipmentStatus) {
	        			 this.ui.shpStatusBundleKey = "instorereceiving.LABEL_"+ apiOutput.Receipt.ShipmentStatus.replace(/\./g, "_");
	        		 }
	        		 
	        		 container = apiOutput.Receipt.Container;
	        		 action='RECEIVED';
	        	 }else if(mashupId == 'unreceiveContainer'){
	        		 container = apiOutput.Container;
	        		 action='UNRECEIVED';
	        	 }
	        	 this.updateContainerAfterReceiving(container);
	       		 this.highlightLastReceivedContainer(container,action);
	        	 
	         },
	         
	         /**
		  		 * @description This method is used to update shipmentContainer details model after updating received qunatity of shipment container
		  		 * @param {Object} updatedContainer - container details model
		  		 */
	         updateContainerAfterReceiving:function(updatedContainer) {
	            	
	           	 if(!iscCore.isVoid(this.model.shipmentContainerList) && !iscCore.isVoid(this.model.shipmentContainerList.Containers) 
	           			 && !iscCore.isVoid(this.model.shipmentContainerList.Containers.Container)) {
	           		 
	           		 for(var i=0;i<this.model.shipmentContainerList.Containers.Container.length;i++) {
	           			 
	           			 var container = this.model.shipmentContainerList.Containers.Container[i];
	           			 this.ui.receivedItemLineIndex++;
	           			 if(!iscCore.isVoid(updatedContainer) && container.ShipmentContainerKey == updatedContainer.ShipmentContainerKey) {
	           				 container.IsReceived = updatedContainer.IsReceived;
	           				 container.ReceivedAsDamaged = updatedContainer.ReceivedAsDamaged;
	           				 break;
	           			 }
	           		 }
	           	 }
	          },
	          
	          /**
		  		 * @description This method is used to highlight the last updated container panel 
		  		 * @param {Object} updatedContainer - container details model
		  		 * @param {Object} action - action performed for updating the container
		  		 */
	          highlightLastReceivedContainer:function(updatedContainer,action) {
		         	if(this.ui.shipmentLineShownCount < this.ui.receivedItemLineIndex){
		 				this.ui.shipmentLineShownCount = this.ui.receivedItemLineIndex;
		 			}
		         	var that = this;
		 			$timeout(function(){
		 					iscScrollUtility.scrollToElementWIthOffset(document.getElementById('listHolder'), document.getElementById(updatedContainer.ShipmentContainerKey), 0, 0);
		 				}, 0);
		 			this.ui.receivedItemLineIndex = 1;
		 			this.ui.showReceiveMsg = 'Y';
		 			this.ui.lastReceivedItemId = updatedContainer.ContainerScm;
		 			//this.ui.receiveMsgBundleKey = "instorereceiving.MSG_ContainerReceived";
		 			if("RECEIVED" == action) {
		 				this.ui.receiveMsgBundleKey = "instorereceiving.MSG_ContainerReceived";
		 			} else if("UNRECEIVED" == action){
		 				this.ui.receiveMsgBundleKey = "instorereceiving.MSG_ContainerUnreceived";
		 			}else if("ALREADY_RECEIVED" == action){
		 				this.ui.receiveMsgBundleKey = "instorereceiving.MSG_ContainerAlreadyReceived";
		 			}else if("RECEIVED_AS_DAMAGED" == action){
		 				this.ui.showReceiveMsg = 'N';
		 				this.ui.receiveMsgBundleKey = '';
		 			}
		 			this.uiShowEditButtonsForContainer(updatedContainer);
		         },
		         /**
			  		 * @description This method is used to set currently selected container model
			  		 * @param {Object} container - container details model
			  		 */
		         uiShowEditButtonsForContainer:function(container) {
		        	 this.ui.currentlySelectedContainer = container;
		           },
		           
		           
		           /**
			  		 * @description This method is used to launch record damage popup.
			  		 * @param {Object} container - container details model
			  		 */
		           uiRecordDamageAction:function(container){
		        	   var that = this;
		        	   var popupInput = {};
			  			var that = this;
			  			popupInput.container = container;
			  			popupInput.isShipmentContainerized = this.ui.isShipmentContainerized;
			  			popupInput.shipment = this.model.shipmentDetails;
			  			
			  			var recordDamage = {
							 modalInput: function(){
				      			return popupInput;
				      		}   
						   
						};
						   
						iscModal.openModal('store.views.receiving.receive-shipment.common.record-damage.record-damage',recordDamage,{}).then(function(callBackData){
							if(callBackData.data !== null && callBackData.data !== undefined){
								//console.log("callBackData.data - ",callBackData.data);
								if(callBackData.data.container){
									 that.updateContainerAfterReceiving(callBackData.data.container);
						       		 that.highlightLastReceivedContainer(callBackData.data.container,'RECEIVED_AS_DAMAGED');
								}
								
								/*if("NOUPDATE" != callBackData.data) {
									that.recordDamageForShipmentLine(callBackData.data,callBackData.ShipmentLine);
								}*/
							}
							
							//Defect 527239
							if(callBackData.shipmentStatus) {
								that.ui.shpStatusBundleKey = "instorereceiving.LABEL_"+ callBackData.shipmentStatus.replace(/\./g, "_");
							}
						},angular.noop);
		           },
				   
			    /**
				 *@description Opens the modal window to add new note to a the shipment and display existing shipment notes.
				 */
				uiAddNote : function(){
					var that = this;
					var shipmentModel = angular.copy(this.model.shipmentDetails);   
					var notesModalInput = {
							modalInput: function(){
								return shipmentModel;
							}
					};
					
					iscModal.openModal('store.views.receiving.notes.shipment-notes',notesModalInput,{})
					 .then(function(callBackData){
						 that.ui.shipmentNoteCount = callBackData.NoteList.TotalNumberOfRecords;
					},angular.noop);
				}
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.receiving.receiving-shipment-list.receiving-shipment-list
 *@package store.views.receiving.receiving-shipment-list
 *@class receiving-shipment-list
 *@description Provides a list of shipments for the selected fulfillment method. The different groups of shipment statuses are displayed under respective tabs.
 */

angular.module("store").controller("store.views.receiving.receiving-shipment-list.receiving-shipment-list", [
	"$scope", "iscScreen", "iscI18n", "iscMashup", "iscState", "iscStateParams", "iscAppInfo", "iscAppContext", "amAddFilter", "amSubtractFilter",
	function($scope, iscScreen, iscI18n, iscMashup, iscState, iscStateParams, iscAppInfo, iscAppContext, amAddFilter, amSubtractFilter) {
		iscScreen.initializeScreen($scope, {
			model: {
				/**
				 *@description This model contains the getReturnDispositionList api output.
				 */
				"returnDispositionList": {},
				/**
				 *@description This model contains the getShipmentList api output for incoming shipments.
				 */
				"incomingShipments": {},
				/**
				 *@description This model contains the getReceiptList api output for received shipments.
				 */
				"receivedShipments": {},
				/**
				 *@description This model contains the getShipmentList api output for delayed shipments.
				 */
				"delayedShipments": {},
				/**
				 *@description This model contains the getReceiptList api output for damaged shipments.
				 */
				"damagedShipments": {}
			},
			mashupRefs: [
			/**
			 *@description This mashup is used to get all the return disposition codes configured for the organization by invoking getReturnDispositionList API.
			 */
			{
				mashupRefId: "common_getReturnDispositionList",
				mashupId: "common_getReturnDispositionList",
				modelName: "returnDispositionList"
			},
			/**
			 *@description This mashup is used to get all the incoming shipments for the store by invoking getShipmentList API. Hybrid pagination is implemented to fetch 30 records and display 10 records at a time on the UI.
			 */
			{
				mashupRefId: "receivingShipmentList_getShipmentList_incoming",
				mashupId: "receivingShipmentList_getShipmentList_incoming",
				modelName: "incomingShipments",
				isPaginated: true,
				pageSize: 30,
				append: true,
				appendPath: "Shipments.Shipment"
			},
			/**
			 *@description This mashup is used to get all the received shipments for the store by invoking getReceiptList API. Hybrid pagination is implemented to fetch 30 records and display 10 records at a time on the UI.
			 */
			{
				mashupRefId: "receivingShipmentList_getReceiptList_received",
				mashupId: "receivingShipmentList_getReceiptList_received",
				modelName: "receivedShipments",
				isPaginated: true,
				pageSize: 30,
				append: true,
				appendPath: "ReceiptList.Receipt"
			},
			/**
			 *@description This mashup is used to get all the delayed shipments for the store by invoking getShipmentList API. Hybrid pagination is implemented to fetch 30 records and display 10 records at a time on the UI.
			 */
			{
				mashupRefId: "receivingShipmentList_getShipmentList_delayed",
				mashupId: "receivingShipmentList_getShipmentList_delayed",
				modelName: "delayedShipments",
				isPaginated: true,
				pageSize: 30,
				append: true,
				appendPath: "Shipments.Shipment"
			},
			/**
			 *@description This mashup is used to get all the damaged shipments for the store by invoking getReceiptList API. Hybrid pagination is implemented to fetch 30 records and display 10 records at a time on the UI.
			 */
			{
				mashupRefId: "receivingShipmentList_getReceiptList_damaged",
				mashupId: "receivingShipmentList_getReceiptList_damaged",
				modelName: "damagedShipments",
				isPaginated: true,
				pageSize: 30,
				append: true,
				appendPath: "ReceiptList.Receipt"
			}],
			ui: {
				/**
				 *@property {Boolean} mashupCallInProgress - flag to identify if any mashup call is in progress.
				 */
				mashupCallInProgress: false,
				/**
				 *@property {Boolean} isInitCall - flag to identify if the mashup call being made is an initialization call to load data on the page for the first time.
				 */
				isInitCall: false,
				/**
				 *@property {Number} uiPageSize - the page size for continuous scrolling.
				 */
				uiPageSize: 10,
				/**
				 *@property {String} selectedTabName - the name of the currently selected tab. Can be one of: incoming, received, delayed or damaged.
				 */
				selectedTabName: "incoming", //received, delayed, damaged
				/**
				 *@property {Number} activeTabIndex - the index of the currently selected tab.
				 */
				activeTabIndex: 0,
				/**
				 *@property {Array} tabList - an array of objects that contain details about tab like: name, display name to be shown as header, title to be shown for shipment date, configuration for filter, flag to identify if the tab is selected and if last page of records have been received for the tab, actual data for the tab, number of records shown and the number of records received from db (hybrid pagination approach).
				 */
				tabList: [{
					name: "incoming",
					displayName: iscI18n.translate("instorereceiving.LABEL_Incoming"),
					shipmentDateLabel: iscI18n.translate("instorereceiving.TITLE_ETA"),
					filterConfig: {}, // This is in the format given by the filter. We always convert it before calling mashup.
					isLastPage: false,
					actualData: {},
					countUIDisplayData: 0,
					countActualData: 0
				}, {
					name: "received",
					displayName: iscI18n.translate("instorereceiving.LABEL_Received"),
					shipmentDateLabel: iscI18n.translate("instorereceiving.TITLE_ReceivedOn"),
					filterConfig: {},
					isLastPage: false,
					actualData: {},
					countUIDisplayData: 0,
					countActualData: 0
				}, {
					name: "delayed",
					displayName: iscI18n.translate("instorereceiving.LABEL_Delayed"),
					shipmentDateLabel: iscI18n.translate("instorereceiving.TITLE_ETA"),
					filterConfig: {},
					isLastPage: false,
					actualData: {},
					countUIDisplayData: 0,
					countActualData: 0
				}, {
					name: "damaged",
					displayName: iscI18n.translate("instorereceiving.LABEL_Damaged"),
					shipmentDateLabel: iscI18n.translate("instorereceiving.TITLE_ReceivedOn"),
					filterConfig: {},
					isLastPage: false,
					actualData: {},
					countUIDisplayData: 0,
					countActualData: 0
				}]
			},
			_fromDateReturnFormat: "YYYY-MM-DDT00:00:00",
			_toDateReturnFormat: "YYYY-MM-DDT23:59:59",
			// private variable to track last clicked line and to set its edit state - "_showEditButton" as false.
			_lastSelectedShipment: null,
			_getDateInRequiredFormatWithTime: function(offsetDays, isEod) {
				var filterToUse = (offsetDays >= 0) ? amAddFilter : amSubtractFilter;
				var reqdDateStr = null;
				if (isEod) {
					reqdDateStr = filterToUse(new Date(), Math.abs(offsetDays), "days").format(this._toDateReturnFormat);
				} else {
					reqdDateStr = filterToUse(new Date(), Math.abs(offsetDays), "days").format(this._fromDateReturnFormat);
				}
				return reqdDateStr;
			},
			_getJsDateObjectFromDateString: function(dateString) {
				// Date object sent and received from the UI always has T00:00:00. So, we will remove the hour component here for consistency else, we get validation errors because maxDate also has hour component as T00:00:00.
				if (dateString != null && dateString.indexOf("T23:59:59") != -1) {
					dateString = dateString.replace("T23:59:59", "T00:00:00");
				}
				var date = new Date((dateString + "Z")); // convert into UTC to ensure FF and IE treat it in the way Chrome assumes it to be wrt UTC.
				var userTimezoneOffset = new Date().getTimezoneOffset()*60000;
				return (new Date(date.getTime() + userTimezoneOffset));
			},
			/**
			 * @description Method to initialize the controller and invoke the mashups required to populate data for the selected tab.
			 */
			initialize: function() {
				// As of today, we can come here from home page. Home page removes "inStoreReceiving_shipmentListConfigData" from context. Thus, if it is null, we can rely on iscStateParams.params else, it is a back scenario and we need to use "inStoreReceiving_shipmentListConfigData".
				var shipmentListConfigData = iscAppContext.getFromContext("inStoreReceiving_shipmentListConfigData")
				if (shipmentListConfigData == null && !iscCore.isVoid(iscStateParams.params)) {
					this.ui.selectedTabName = iscStateParams.params.defaultTab;
				} else if (shipmentListConfigData == null && iscCore.isVoid(iscStateParams.params)) {
					this.ui.selectedTabName = "incoming";
					console.warn("store.views.receiving.receiving-shipment-list.receiving-shipment-list: unexpected scenario. Did not receive input about which tab to select. Selecting 'incoming' by default.");
				}
				this.initializeAllTabFilterConfigWithDefaults();
				// This is not in else if block because we need to set "filterConfig" on each tab.
				if (shipmentListConfigData != null) {
					this.ui.selectedTabName = shipmentListConfigData["selectedTab"];
					var filterConfigByTabName = shipmentListConfigData["filterConfigByTabName"];
					for (var i = 0; i < this.ui.tabList.length; i++) {
						var aTab = this.ui.tabList[i];
						var aTabName = aTab["name"];
						aTab["filterConfig"] = angular.copy(filterConfigByTabName[aTabName]);
					}
				}
				this.ui.isInitCall = true;
				this.uiUpdateSelection(this.ui.selectedTabName);
				var invokeIncomingMashupNonBlocking = false;
				if (this.ui.selectedTabName !== "incoming") {
					invokeIncomingMashupNonBlocking = true;
				}
				this.invokeDispositionCodeListMashup(invokeIncomingMashupNonBlocking);
			},
			/**
			 * @description This method initializes the filters in each tab with their default values.
			 */
			initializeAllTabFilterConfigWithDefaults: function() {
				for (var i = 0; i < this.ui.tabList.length; i++) {
					var aTab = this.ui.tabList[i];
					var aTabName = aTab["name"];
					var aTabFilterConfig = aTab["filterConfig"];
					var defaultFromDate = this._getDateInRequiredFormatWithTime(0, false);
					var defaultToDate = this._getDateInRequiredFormatWithTime(0, true);
					if (aTabName !== "delayed") {
						// There is no default FilterConfig for "delayed". Only default mashupInput.
						if (aTabName === "incoming") {
							// Add "calleeId" to make date range different.
							aTabFilterConfig.calleeId = "shipmentDateFilter_incoming";
							defaultFromDate = this._getDateInRequiredFormatWithTime(0, false);
							defaultToDate = this._getDateInRequiredFormatWithTime(6, true);
						}
						if (iscCore.isVoid(aTabFilterConfig.selectedFromShipmentDate) || iscCore.isVoid(aTabFilterConfig.selectedToShipmentDate)) {
							aTabFilterConfig.selectedFromShipmentDate = defaultFromDate;
							aTabFilterConfig.selectedFromDate = this._getJsDateObjectFromDateString(defaultFromDate);
							aTabFilterConfig.selectedToShipmentDate = defaultToDate;
							aTabFilterConfig.selectedToDate = this._getJsDateObjectFromDateString(defaultToDate);
						}
					}
				}
			},
			/**
			 * @description Method to save the currently selected tab name and information about the filters applied for each tab. This method is invoked before navigating away from the shipment list screen.
			 */
			persistDataInContext: function() {
				var tabConfigJson = {};
				for (var i = 0; i < this.ui.tabList.length; i++) {
					var aTab = this.ui.tabList[i];
					tabConfigJson[aTab["name"]] = angular.copy(aTab["filterConfig"]);
				}
				iscAppContext.addToContext("inStoreReceiving_shipmentListConfigData", {
					"selectedTab": this.ui.selectedTabName,
					"filterConfigByTabName": tabConfigJson
				});
			},
			/**
			 * @description Method to invoke mashup to get the disposition list for damaged items.
			 * @param {Boolean} invokeIncomingMashupNonBlocking - Flag to indicate if incoming tab mashup needs to be invoked in the background.
			 */
			invokeDispositionCodeListMashup: function(invokeIncomingMashupNonBlocking) {
				this.ui.mashupCallInProgress = true;
				var that = this;
				iscMashup.callMashup(this, "common_getReturnDispositionList", {}, {showMask: true}).then(this.invokeMashupForSelectedTab.bind(this, invokeIncomingMashupNonBlocking, "START"),angular.noop);
			},
			/**
			 * @description Method to invoke mashup for the currently selected tab.
			 * @param {Boolean} invokeIncomingMashupNonBlocking - Flag to indicate if incoming tab mashup needs to be invoked as well in the background.
			 * @param {String} pageAction - Pagination related attribute. Pass 'START' to start pagination or 'NEXT' to fetch next page.
			 */
			invokeMashupForSelectedTab: function(invokeIncomingMashupNonBlocking, pageAction) {
				this.ui.mashupCallInProgress = false;
				var mashupRefIdToCall = "";
				var mashupInput = {};
				// get filter criteria for current selected tab from the directive and transform it into input. May need to define methods to do that.
				switch(this.ui.selectedTabName) {
					case "received":
						mashupRefIdToCall = "receivingShipmentList_getReceiptList_received";
						mashupInput = this.addFilterDataToInput("received", this.ui.tabList[1]["filterConfig"]);
						break;
						
					case "delayed":
						mashupRefIdToCall = "receivingShipmentList_getShipmentList_delayed";
						mashupInput = this.addFilterDataToInput("delayed", this.ui.tabList[2]["filterConfig"]);
						break;
						
					case "damaged":
						mashupRefIdToCall = "receivingShipmentList_getReceiptList_damaged";
						mashupInput = this.addFilterDataToInput("damaged", this.ui.tabList[3]["filterConfig"]);
						break;
						
					default: // "incoming" case.
						mashupRefIdToCall = "receivingShipmentList_getShipmentList_incoming";
						mashupInput = this.addFilterDataToInput("incoming", this.ui.tabList[0]["filterConfig"]);
				}
				if (invokeIncomingMashupNonBlocking) {
					var nonBlockingMashupInput = this.addFilterDataToInput("incoming", this.ui.tabList[0]["filterConfig"]);
					iscMashup.callPaginatedMashup(this, "receivingShipmentList_getShipmentList_incoming", nonBlockingMashupInput, "START", {showMask: false}).then(this.handleMashupOutput.bind(this, invokeIncomingMashupNonBlocking),angular.noop);
				}
				// "damaged" can have mashupInput as null to indicate we should not call mashup.
				if (mashupInput != null) {
					this.ui.mashupCallInProgress = true;
					iscMashup.callPaginatedMashup(this, mashupRefIdToCall, mashupInput, pageAction, {showMask: true}).then(this.handleMashupOutput.bind(this),angular.noop);
				}
			},
			/**
			 * @description Method add selections made in filter to the mashup input.
			 * @param {String} tabName - Name of the tab.
			 * @param {Object} currentFilterData - Json object containing all the selections made on the filter for the tabName.
			 * @returns {Object} - The required mashup input.
			 */
			addFilterDataToInput: function(tabName, currentFilterData) {
				var currentFilterData_fromShipmentDate = currentFilterData.selectedFromShipmentDate;
				var currentFilterData_toShipmentDate = currentFilterData.selectedToShipmentDate;
				var currentFilterData_carrier = currentFilterData.selectedShipmentCarrier;
				var currentFilterData_shipmentSource = currentFilterData.selectedShipmentSource;
				var currentFilterData_shipmentType = currentFilterData.selectedShipmentType;
				var defaultComplexQueryElem = {
					"Or": {
						"Exp": [{
							"Name": "DocumentType",
							"Value": "0005"
						}, {
							"Name": "DocumentType",
							"Value": "0006"
						}]
					}
				};
				var mashupInput = {
					"Shipment": {
						"ComplexQuery": defaultComplexQueryElem
					}
				};
				if (tabName == "received" || tabName == "damaged") {
					mashupInput = {
						"Receipt": {
							"Shipment": {},
							"ComplexQuery": defaultComplexQueryElem
						}
					};
					if (tabName === "damaged") {
						mashupInput["Receipt"]["ReceiptLines"] = {
							"ReceiptLine": {
								"ComplexQuery": {
									"Or": {
										"Exp": []
									}
								}
							}
						};
						if (this.model.returnDispositionList.ReturnDispositionList != null && this.model.returnDispositionList.ReturnDispositionList.ReturnDisposition != null && this.model.returnDispositionList.ReturnDispositionList.ReturnDisposition.length > 0) {
							for (var i = 0; i < this.model.returnDispositionList.ReturnDispositionList.ReturnDisposition.length; i++) {
								var aDispositionObj = this.model.returnDispositionList.ReturnDispositionList.ReturnDisposition[i];
								mashupInput.Receipt.ReceiptLines.ReceiptLine.ComplexQuery.Or.Exp.push({
									"Name": "DispositionCode",
									"Value": aDispositionObj["DispositionCode"]
								});
							}
						} else {
							return null;
						}
					}
				}
				mashupInput = this.addFilterDataToInput_dates(tabName, mashupInput, currentFilterData_fromShipmentDate, currentFilterData_toShipmentDate);
				mashupInput = this.addFilterDataToInput_carrier(tabName, mashupInput, currentFilterData_carrier);
				mashupInput = this.addFilterDataToInput_shipmentSource(tabName, mashupInput, currentFilterData_shipmentSource);
				mashupInput = this.addFilterDataToInput_shipmentType(tabName, mashupInput, currentFilterData_shipmentType);
				
				return mashupInput;
			},
			/**
			 * @description Updates the mashup input with date selections made in filter. Called from addFilterDataToInput method.
			 * @param {String} tabName - Name of the tab.
			 * @param {Object} mashupInput - Mashup input.
			 * @param {String} currentFilterData_fromShipmentDate - The selected from shipment date.
			 * @param {String} currentFilterData_toShipmentDate - Selected to shipment date.
			 * @returns {Object} - The updated mashup input.
			 */
			addFilterDataToInput_dates: function(tabName, mashupInput, currentFilterData_fromShipmentDate, currentFilterData_toShipmentDate) {
				if (!iscCore.isVoid(currentFilterData_fromShipmentDate) && !iscCore.isVoid(currentFilterData_toShipmentDate)) {
					if (tabName == "received" || tabName == "damaged") {
						mashupInput["Receipt"]["FromReceiptDate"] = currentFilterData_fromShipmentDate;
						mashupInput["Receipt"]["ToReceiptDate"] = currentFilterData_toShipmentDate;
					} else {
						mashupInput["Shipment"]["FromExpectedDeliveryDate"] = currentFilterData_fromShipmentDate;
						mashupInput["Shipment"]["ToExpectedDeliveryDate"] = currentFilterData_toShipmentDate;
						if (tabName === "delayed") {
							mashupInput["Shipment"]["CustomOnlyConsiderBetweenQryForDates"] = "Y";
							mashupInput["Shipment"]["ExpectedDeliveryDateQryType"] = "BETWEEN";
						}
					}
				} else {
					// Default filters have been removed by user or "delayed" tab is selected.
					if (tabName === "delayed") {
						mashupInput["Shipment"]["ExpectedDeliveryDate"] = this._getDateInRequiredFormatWithTime(0, false);
						mashupInput["Shipment"]["CustomOnlyConsiderBetweenQryForDates"] = "N";
						mashupInput["Shipment"]["ExpectedDeliveryDateQryType"] = "LT";
					}
				}
				return mashupInput;
			},
			/**
			 * @description Updates the mashup input with selected carrier from filter. Called from addFilterDataToInput method.
			 * @param {String} tabName - Name of the tab.
			 * @param {Object} mashupInput - Mashup input.
			 * @param {String} currentFilterData_carrier - Selected carrier.
			 * @returns {Object} - The updated mashup input.
			 */
			addFilterDataToInput_carrier: function(tabName, mashupInput, currentFilterData_carrier) {
				if (!iscCore.isVoid(currentFilterData_carrier)) {
					if (tabName == "received" || tabName == "damaged") {
						mashupInput["Receipt"]["Shipment"]["SCAC"] = currentFilterData_carrier;
					} else {
						mashupInput["Shipment"]["SCAC"] = currentFilterData_carrier;
					}
				}
				return mashupInput;
			},
			/**
			 * @description Updates the mashup input with the selected shipment source from filter. Called from addFilterDataToInput method.
			 * @param {String} tabName - Name of the tab.
			 * @param {Object} mashupInput - Mashup input.
			 * @param {String} currentFilterData_shipmentSource - Selected shipment source.
			 * @returns {Object} - The updated mashup input.
			 */
			addFilterDataToInput_shipmentSource: function(tabName, mashupInput, currentFilterData_shipmentSource) {
				if (!iscCore.isVoid(currentFilterData_shipmentSource) && currentFilterData_shipmentSource !== "ALL") {
					var nodeType = "";
					var documentType = "0005";
					var newComplexQueryElem = {
						"Or": {
							"Exp": [{
								"Name": "DocumentType",
								"Value": documentType
							}]
						}
					};
					if (currentFilterData_shipmentSource === "STORE") {
						documentType = "0006";
						nodeType = "Store";
					} else if (currentFilterData_shipmentSource === "WAREHOUSE") {
						documentType = "0006";
						nodeType = "DC";
					}
					newComplexQueryElem["Or"]["Exp"][0]["Value"] = documentType;
					
					if (tabName == "received" || tabName == "damaged") {
						mashupInput["Receipt"]["Shipment"]["ShipNode"] = {
							"NodeType": nodeType
						};
						mashupInput["Receipt"]["ComplexQuery"] = newComplexQueryElem;
					} else {
						mashupInput["Shipment"]["ShipNode"] = {
							"NodeType": nodeType
						};
						mashupInput["Shipment"]["ComplexQuery"] = newComplexQueryElem;
					}
				}
				return mashupInput;
			},
			/**
			 * @description Updates the mashup input with the selected shipment type from filter. Called from addFilterDataToInput method.
			 * @param {String} tabName - Name of the tab.
			 * @param {Object} mashupInput - Mashup input.
			 * @param {String} currentFilterData_shipmentType - Selected shipment type.
			 * @returns {Object} - The updated mashup input.
			 */
			addFilterDataToInput_shipmentType: function(tabName, mashupInput, currentFilterData_shipmentType) {
				if (!iscCore.isVoid(currentFilterData_shipmentType) && currentFilterData_shipmentType !== "ALL") {
					var qrtTypeVal = (currentFilterData_shipmentType === "SPECIAL_ORDER") ? "NOTNULL" : "ISNULL";
					var shipmentLinesObj = {
						"ShipmentLine": {
							"OrderLine": {
								"ChainedFromOrderHeaderKeyQryType": qrtTypeVal
							}
						}
					};
					
					if (tabName == "received" || tabName == "damaged") {
						mashupInput["Receipt"]["Shipment"]["ShipmentLines"] = shipmentLinesObj;
					} else {
						mashupInput["Shipment"]["ShipmentLines"] = shipmentLinesObj;
					}
				}
				return mashupInput;
			},
			/**
			 * @description Method to handle output of mashup calls made to load data for any of the selected tabs.
			 * @param {Boolean} invokeIncomingMashupNonBlocking - Flag to indicate if incoming tab mashup was invoked in the background.
			 * @param {Object} mashupRefsObj - Mashup ref object.
			 */
			handleMashupOutput: function(invokeIncomingMashupNonBlocking, mashupRefsObj) {
				if (arguments != null && arguments.length == 1) {
					mashupRefsObj = invokeIncomingMashupNonBlocking;
					invokeIncomingMashupNonBlocking = null;
					this.ui.mashupCallInProgress = false;
				}
				if (mashupRefsObj != null && mashupRefsObj.MashupRefs.MashupRef[0]["mashupRefId"] === "receivingShipmentList_getShipmentList_incoming") {
					this.ui.tabList[0]["displayName"] = iscI18n.translate("instorereceiving.LABEL_Incoming_withValue", {"incomingCount": this.model.incomingShipments.Page.Output.Shipments.TotalNumberOfRecords});
				}
				delete this.ui.isInitCall;
				if (!invokeIncomingMashupNonBlocking) {
					for (var i = 0; i < this.ui.tabList.length; i++) {
						var aTab = this.ui.tabList[i];
						if (aTab["name"] === this.ui.selectedTabName) {
							var output = mashupRefsObj.MashupRefs.MashupRef[0]["Output"]["Page"]["Output"];
							var isLastPage = mashupRefsObj.MashupRefs.MashupRef[0]["Output"]["Page"]["IsLastPage"];
							var outputArray = [];
							
							if (isLastPage != null && (isLastPage.toLowerCase() === "y" || isLastPage.toLowerCase() === "true" || isLastPage === true)) {
								aTab["isLastPage"] = true;
							}
							
							if (output["Shipments"] != null && output["Shipments"]["Shipment"] != null) {
								outputArray = output["Shipments"]["Shipment"];
							} else if (output["ReceiptList"] != null && output["ReceiptList"]["Receipt"] != null) {
								outputArray = output["ReceiptList"]["Receipt"];
							}
							if (aTab.countActualData > 0) {
								if (aTab["actualData"] != null && aTab["actualData"]["Shipments"] != null && aTab["actualData"]["Shipments"]["Shipment"] != null) {
									aTab.countActualData = aTab["actualData"]["Shipments"]["Shipment"].length;
								} else if (aTab["actualData"] != null && aTab["actualData"]["ReceiptList"] != null && aTab["actualData"]["ReceiptList"]["Receipt"] != null) {
									aTab.countActualData = aTab["actualData"]["ReceiptList"]["Receipt"].length;
								}
							} else {
								aTab["actualData"] = output;
								aTab.countActualData = outputArray.length;
							}
							if ((aTab.countUIDisplayData + this.ui.uiPageSize) > aTab.countActualData) {
								aTab.countUIDisplayData = aTab.countActualData;
							}  else {
								aTab.countUIDisplayData = aTab.countUIDisplayData + this.ui.uiPageSize;
							}
							break;
						}
					}
				}
			},
			/**
			 * @description Method called to load the next page of shipments on the selected tab. In case all the shipments on the UI are displayed, it invokes the required mashup to get next page of data.
			 */
			uiGetNextShipmentList: function() {
				for (var i = 0; i < this.ui.tabList.length; i++) {
					var aTab = this.ui.tabList[i];
					if (aTab["name"] === this.ui.selectedTabName) {
						if (aTab.countUIDisplayData >= aTab.countActualData && aTab["isLastPage"] === false) {
							this.invokeMashupForSelectedTab(false, "NEXT");
						} else {
							if ((aTab.countUIDisplayData + this.ui.uiPageSize) > aTab.countActualData) {
								aTab.countUIDisplayData = aTab.countActualData;
							}  else {
								aTab.countUIDisplayData = aTab.countUIDisplayData + this.ui.uiPageSize;
							}
						}
						break;
					}
				}
			},
			/**
			 * @description Validate if the next page request should be sent or if has already been made.
			 */
			uiScrollActionValidator: function() {
				return !this.ui.mashupCallInProgress;
			},
			/**
			 * @description Marks the passed tab as currently selected and invokes the required API.
			 * @param {String} selectedTabName - Name of the selected tab.
			 */
			uiUpdateSelection: function(selectedTabName) {
				for (var i = 0; i < this.ui.tabList.length; i++) {
					var aTab = this.ui.tabList[i];
					if (aTab["name"] === selectedTabName) {
						this.ui.activeTabIndex = i;
						this.clearModelAndListData(aTab);
						break;
					}
				}
				this.ui.selectedTabName = selectedTabName;
				if (!this.ui.isInitCall) {
					this.invokeMashupForSelectedTab(false, "START");
				}
			},
			/**
			 * @description Clears all the models and shipment related counters and data for the passed tab.
			 * @param {String} aTab - Name of the tab to clear.
			 */
			clearModelAndListData: function(aTab) {
				this.model["incomingShipments"] = {};
				this.model["receivedShipments"] = {};
				this.model["delayedShipments"] = {};
				this.model["damagedShipments"] = {};
				aTab["isLastPage"] = false;
				aTab["actualData"] = {};
				aTab["countUIDisplayData"] = 0;
				aTab["countActualData"] = 0;
				return aTab;
			},
			/**
			 * @description Method called when the apply button is clicked on filter. It updates the user selections made in filter for the selected tab.
			 * @param {Object} filterData - Json object containing the selections made in the filter.
			 */
			uiOnApplyFilter: function(filterData) {
				for (var i = 0; i < this.ui.tabList.length; i++) {
					var aTab = this.ui.tabList[i];
					if (aTab["name"] === this.ui.selectedTabName) {
						aTab["filterConfig"] = filterData;
						this.clearModelAndListData(aTab);
						break;
					}
				}
				this.invokeMashupForSelectedTab(false, "START");
			},
			/**
			 * @description Loads shipment summary page for the selected shipment key.
			 * @param {String} shipmentKey - Shipment key for the selected shipment.
			 */
			uiNavigateToShipmentSummary: function(shipmentKey) {
				this.persistDataInContext();
				iscState.goToState("receivingShipmentSummary", {
					"ShipmentKey": shipmentKey
				}, {});
			},
			/**
			 * @description Loads receive shipment screen for the selected shipment.
			 * @param {Object} selectedShipment - Currently selected shipment.
			 */
			uiNavigateToReceiveShipment: function(selectedShipment) {
				this.persistDataInContext();
				var shipmentToReceive = {
					"Shipment": {
						"ShipmentKey": selectedShipment["ShipmentKey"],
						"ShipmentContainerizedFlag": selectedShipment["ShipmentContainerizedFlag"]
					}
				};
				iscState.goToState("receive-shipment", {
					"action": "receiveShipment",
					"input": shipmentToReceive,
					"autoReceive": ""
				}, {});
			},
			/**
			 * @description Method to identify if the currently selected shipment should be highlighted.
			 * @param {Object} currentlySelectedShipment - Currently selected shipment.
			 */
			uiShowEditButton: function(currentlySelectedShipment) {
				if (this._lastSelectedShipment != null && currentlySelectedShipment["ShipmentKey"] != this._lastSelectedShipment["ShipmentKey"]) {
					this._lastSelectedShipment._showEditButton = false;
					this._lastSelectedShipment = currentlySelectedShipment;
				} else if (this._lastSelectedShipment == null) {
					this._lastSelectedShipment = currentlySelectedShipment;
				}
				currentlySelectedShipment._showEditButton = true;
			},
			/**
			 * @description Method to return to home page.
			 */
			uiReturnToHomePage: function() {
				// Or put clearing logic in home page.
				iscState.goToState("/home", {}, {});
			},
			/**
			 * @description Method to close shipment list view.
			 */
			uiClose: function() {
				iscState.goToState("/home", {}, {});
			}
		});
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.receiving.receiving-shipment-summary.receiving-shipment-summary
 *@package store.views.receiving.receiving-shipment-summary
 *@class receiving-shipment-summary
 *@description Provides a list of containers or items for the selected shipment.
 */
 
angular.module("store").controller("store.views.receiving.receiving-shipment-summary.receiving-shipment-summary", [
	"$scope", "$filter", "iscScreen", "iscI18n", "iscMashup", "iscState", "iscStateParams", "iscAppInfo", "iscAppContext","iscModal",
	function($scope, $filter, iscScreen, iscI18n, iscMashup, iscState, iscStateParams, iscAppInfo, iscAppContext,iscModal) {
		iscScreen.initializeScreen($scope, {
			model: {
				/**
				 *@description This model contains the getShipmentDetails api output.
				 */
				"shipmentDetails": {},
				/**
				 *@description This model contains the getShipmentLineList api output.
				 */
				"shipmentLineList": {},
				/**
				 *@description This model contains the getShipmentContainerList api output.
				 */
				"shipmentContainerList": {}
			},
			mashupRefs: [
			/**
			 *@description This mashup is used to get the details for the displayed shipment by invoking getShipmentDetails API.
			 */
			{
				mashupRefId: "getShipmentDetails",
				mashupId: "store.views.receiving.getShipmentDetailsForReceiving",
				modelName: "shipmentDetails"
			},
			/**
			 *@description This mashup is used to get the details about lines for the displayed shipment by invoking getShipmentLineList API.
			 */
			{
				mashupRefId: "getShipmentLineList",
				mashupId: "store.views.receiving.getReceivingShipmentLineList",
				modelName: "shipmentLineList"
			},
			/**
			 *@description This mashup is used to get the details about all the containers present in the displayed shipment by invoking getShipmentLineList API.
			 */
			{
				mashupRefId: "getShipmentContainerList",
				mashupId: "store.views.receiving.getReceivingShipmentContainerList",
				modelName: "shipmentContainerList"
			}/*,{
				 mashupRefId: 'getReceiptList',
				 mashupId: 'store.views.receiving.getReceiptListByShipmentKey',
			     modelName: "receiptList"
				
				}*/
			],
			ui: {
				/**
				 *@property {String} screenType - type of the screen.
				 */
				screenType: "RECEIVE_SUMMARY",
				/**
				 *@property {String} shipmentNo - shipment number for the shipment being displayed.
				 */
				shipmentNo: "",
				/**
				 *@property {String} shipmentKey - shipment key for the shipment being displayed.
				 */
				shipmentKey: "",
				/**
				 *@property {Boolean} isShipmentContainerized - flag signifying if the shipment contains containers or loose items.
				 */
				isShipmentContainerized: false,
				/**
				 *@property {Number} shipmentLineCount - total number of lines in the shipment.
				 */
				shipmentLineCount: 0,
				/**
				 *@property {Number} shipmentContainerCount - total number of containers in the shipment.
				 */
				shipmentContainerCount: 0,
				/**
				 *@property {Boolean} isReceiptClosed - is receipt closed for the shipment.
				 */
				isReceiptClosed:false,
				/**
				 *@property {Boolean} isReceivingAllowed - is receiving allowed for the shipment.
				 */
				isReceivingAllowed:false, //this is required for common 
				/**
				 *@property {String} screenTitle - title for the page.
				 */
				screenTitle: iscI18n.translate("instorereceiving.TITLE_Receiving_Shipment_Summary", {"shipmentNo": ""}),
				/**
				 *@property {String} shpStatusBundleKey - bundle key for shipment status.
				 */
				shpStatusBundleKey : '',
				/**
				 *@property {Number} uiPageSize - the page size for continuous scrolling.
				 */
				uiPageSize: 10,
				/**
				 *@property {Number} currentDisplayCount - the number of items or containers displayed on the page.
				 */
				currentDisplayCount: 10,
				/**
				 *@property {String} shipmentPreviewTemplate - template html for the controller.
				 */
            	shipmentPreviewTemplate: 'store/views/receiving/receive-shipment/receive-shipment-popover-preview.tpl.html',
				/**
				*@property {Number}  shipmentNoteCount - Number of notes associated with the shipment.
				*/
				shipmentNoteCount : '0'
			},
			// private variable to track last clicked line and to set its edit state - "_receivingShowEditState" as false.
			_lastSelectedLineOrContainer: null,
			/**
			 * @description Method to initialize the controller and invoke the required mashup.
			 */
			initialize: function() {
				if (!iscCore.isVoid(iscStateParams.params)) {
					//this.ui.shipmentNo = iscStateParams.params.shipmentNo;
					this.ui.shipmentKey = iscStateParams.params.ShipmentKey;
					this.ui.screenTitle = iscI18n.translate("instorereceiving.TITLE_Receiving_Shipment_Summary", {"shipmentNo": this.ui.shipmentNo});
				} else {
					console.error("store.views.receiving.receiving-shipment-summary.receiving-shipment-summary: unexpected scenario. Did not receive input shipmentNumber. Can not proceed!!");
					return;
				}
				this.shipmentDetailsMashup();
			},
			/**
			 * @description Method to invoke the shipment details mashup.
			 */
			shipmentDetailsMashup: function() {
				iscMashup.callMashup(this, "getShipmentDetails", {
					"Shipment": {
						"ShipmentKey": this.ui.shipmentKey
					}
				}, {showMask: true}).then(this.handleDetailsMashupOutput.bind(this),angular.noop);
			},
			/**
			 * @description Method to process the output of the shipment details mashup call. Based on if the shipment contains lose items or containers, appropriate mashup is called to get the details for each item/line.
			 */
			handleDetailsMashupOutput: function() {
				/*var caseContentEntryReqdParam = "", caseContentEntryReqd='';
				if("0005" == this.model.shipmentDetails.Shipment.DocumentType) {
					caseContentEntryReqdParam = "caseContentEntryRequiredForPO";
				} else if("0006" == this.model.shipmentDetails.Shipment.DocumentType) {
					caseContentEntryReqdParam = "caseContentEntryRequiredForTO";
				}
				
				caseContentEntryReqd = iscAppContext.getFromContext(caseContentEntryReqdParam);
				*/
				if(this.model.shipmentDetails.Shipment.Notes.Note)
					this.ui.shipmentNoteCount = this.model.shipmentDetails.Shipment.Notes.NumberOfNotes;
	       		 if ("03" == this.model.shipmentDetails.Shipment.ShipmentContainerizedFlag && this.model.shipmentDetails.Shipment.CaseContentEntryRequired == 'N'){
	       			 this.ui.isShipmentContainerized = true;
	       		 }else{
	       			 this.ui.isShipmentContainerized = false;
	       		 }
	       		 
	       		 if("Y" == this.model.shipmentDetails.Shipment.ReceiptClosed){
	       			this.ui.isReceiptClosed = true;
	       		 }else{
	       			this.ui.isReceiptClosed = false;
	       		 }
	       		  // Defect 567340 
	       		this.ui.shpStatusBundleKey = "shipmentsummary.LABEL_"+ this.model.shipmentDetails.Shipment.Status.replace(/\./g, "_");
	       		
				//var shipmentContainerizedFlag = this.model.shipmentDetails.Shipment.ShipmentContainerizedFlag;
				var mashupRefIdToCall = "getShipmentLineList";
				var mashupInput = {};
				if (this.ui.isShipmentContainerized) {
					//this.ui.isShipmentContainerized = true;
					mashupRefIdToCall = "getShipmentContainerList";
					mashupInput = {
						"Container": {
							"ShipmentKey": this.ui.shipmentKey
						}
					};
					console.log("Calling mashup for containerList");
				} else {
					//this.ui.isShipmentContainerized = false;
					mashupInput = {
						"ShipmentLine": {
							"ShipmentKey": this.ui.shipmentKey
						}
					};
					console.log("Calling mashup for LineList");
				}
				
				//iscMashup.callMashup(this, mashupRefIdToCall, mashupInput, {showMask: true}).then(this.handleListMashupOutput.bind(this));
				
				var mashupArray = [];
				//mashupArray.push(iscMashup.getMashupRefObj(this,'getReceiptList',{Receipt:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}}));
				mashupArray.push(iscMashup.getMashupRefObj(this,mashupRefIdToCall, mashupInput));
		        
		        iscMashup.callMashups(this,mashupArray,{}).then(this.handleListMashupOutput.bind(this),angular.noop);
			},
			/**
			 * @description Method to process the output of the list mashup called.
			 */
			handleListMashupOutput: function() {
				if (this.ui.isShipmentContainerized) {
					this.ui.shipmentContainerCount = this.model.shipmentContainerList.Containers.TotalNumberOfRecords;
					console.log(this.model.shipmentDetails, this.model.shipmentContainerList);
				} else {
					this.ui.shipmentLineCount = this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords;
					console.log(this.model.shipmentDetails, this.model.shipmentLineList);
				}
				
				/*console.log(this.model.receiptList);
				var recList = this.model.receiptList.ReceiptList.Receipt;
				if(recList){
					for(var i = 0;i < recList.length; i++){
		                   if(recList[i].OpenReceiptFlag == 'N'){
		                	   this.ui.isReceiptClosed = true;
		                   }else{
		                	   this.ui.isReceiptClosed = false;
		                	   break; //at least one open receipt is found
		                   }
						}
				}*/
				
			},
			
			/*uiGetShipmentDisplayStatusBundleKey: function(status) {
				var tempStatus = angular.copy(status);
	        	 
	        	 if(!iscCore.isVoid(tempStatus)) {
	        		 tempStatus = tempStatus.replace(/\./g, "_");
	        		 
	        		 return "instorereceiving.LABEL_"+tempStatus;
	        	 }
			},*/
			/**
			 * @description Validate if the next page request should be sent for container list or not.
			 */
			uiScrollActionValidator: function() {
				return true;
			},
			/**
			 * @description Validate if the next page request should be sent for a item list or not.
			 */
			uiShipmentLineScrollActionValidator: function() {
				return true;
			},
			/**
			 * @description Render the next page data for container list on the screen.
			 */
			uiGetNextList: function() {
				this.ui.currentDisplayCount = this.ui.currentDisplayCount + this.ui.uiPageSize;
			},
			/**
			 * @description Render the next page data for item list on the screen.
			 */
			uiGetShipmentLineListNext: function() {
				this.ui.currentDisplayCount = this.ui.currentDisplayCount + this.ui.uiPageSize;
			},
			uiShowEditButtons: function(currentlySelectedLineOrContainer) {
				/*var uniqueKeyAttrName = "ShipmentLineKey";
				if (this.ui.isShipmentContainerized == true) {
					uniqueKeyAttrName = "ShipmentContainerKey";
				}
				if (this._lastSelectedLineOrContainer != null && currentlySelectedLineOrContainer[uniqueKeyAttrName] != this._lastSelectedLineOrContainer[uniqueKeyAttrName]) {
					this._lastSelectedLineOrContainer._receivingShowEditState = false;
					this._lastSelectedLineOrContainer = currentlySelectedLineOrContainer;
				} else if (this._lastSelectedLineOrContainer == null) {
					this._lastSelectedLineOrContainer = currentlySelectedLineOrContainer;
				}
				currentlySelectedLineOrContainer._receivingShowEditState = true;*/
			},
			/**
			 * @description Method to return to home page.
			 */
			uiGotoHome: function() {
				iscState.goToState("/home", {}, {});
			},
			/**
			 * @description Method to display the required label for container quantity.
			 * @param {String} isContainerReceived - Has the container been received.
			 * @param {String} isRecvAsDamaged - If the container has been received as damaged.
			 * @return {String} - The required label.
			 */
			uiGetContainerQuantityLabel:function(isContainerReceived, isRecvAsDamaged) {
	        	 
	        	 var quantityLabelKey = "instorereceiving.LABEL_", options = "";
	        	 
	        	 if("Y" == isContainerReceived) {
	        		 if("Y" == isRecvAsDamaged) {
	        			 quantityLabelKey += "Damaged";
	        		 }else{
	        			 quantityLabelKey += "Received";
	        		 }
	        	 } else {
	        		 if(this.ui.isReceiptClosed){
	        			 quantityLabelKey += "Missing";
	        		 }else{
	        			 quantityLabelKey += "NotReceived";
	        		 }
	        	 }
	        	 
	        	 /*if("N" == isContainerReceived) {
	        		 if(this.ui.isReceiptClosed){
	        			 quantityLabelKey += "Missing";
	        		 }else{
	        			 quantityLabelKey += "NotReceived";
	        		 }
	        		 
	        	 } else if("Y" == isContainerReceived) {
	        		 quantityLabelKey += "Received";
	        	 } else if("D" == isContainerReceived) {
	        		 quantityLabelKey += "Damaged";
	        	 } else if("M" == isContainerReceived) {
	        		 quantityLabelKey += "Missing";
	        	 } */
	        	 
	        	 return iscI18n.translate(quantityLabelKey, options);
	        	 
	         },
			 /**
			 * @description Method to display the details for the container in a popup.
			 * @param {Object} container - Selected container.
			 */
	         uiShowContainerDetails:function(container){
	        	 
    			//var that=this;
    			var popupInput = {ShipmentContainerKey:container.ShipmentContainerKey};
    			var containerDetailsPopupInput = {
    					 modalInput: function(){
    		      			return popupInput;
    		      		}   
    				   
    				};
    			
    			/*iscModal.openModal('store.views.receiving.receive-shipment.common.view-container.view-container',containerDetailsPopupInput,{}).then(function(callBackData){
    				if(callBackData.data !== null && callBackData.data !== undefined){
    					that.stampReturnDisposition.call(that,callBackData.data);
    					//gotoHome();
    				}
    			},
    				undefined);*/
    			iscModal.openModal('store.views.receiving.receive-shipment.common.view-container.view-container',containerDetailsPopupInput,{});
	        	 
	         },
			 /**
			 * @description Method determine if a shipment line has been received completely without damage.
			 * @param {Object} shipmentLine - Shipment line to check.
			 * @return {Boolean} true if the line is received completely without any damage.
			 */
	         uiIsShipmentLineCompletelyReceivedWithoutDamage:function(shipmentLine) {
	           	 
	        	 var isLineReceivedCompletelyWithoutDamage = true;
	           	 
	           	 var receivedQty = $filter('number')(shipmentLine.DisplayReceivedQuantity);
	           	 var actualQuantity = $filter('number')(shipmentLine.Quantity);
	           	 var damagedQuantity = $filter('number')(shipmentLine.DamagedReceivedQty);
	           	 
	           	 if(Number(damagedQuantity) > 0 ) {
	           		 isLineReceivedCompletelyWithoutDamage = false
	           	 } else if(Number(receivedQty) >= Number(actualQuantity)) {
	       			 isLineReceivedCompletelyWithoutDamage = true
	           	 } else{
	           		isLineReceivedCompletelyWithoutDamage = false;
	           	 }

	           	 return isLineReceivedCompletelyWithoutDamage;
	           	 
	            },
	            /**
				 * @description Method determine the entire shipment line is missing.
				 * @param {Object} shipmentLine - Shipment line to check.
				 * @return {Boolean} true if the line is completely missing. false otherwise.
				 */
	            uiIsCompleteLineMissing: function(shipmentLine){
	            	var receivedQty = $filter('number')(shipmentLine.DisplayReceivedQuantity);
	            	if(this.ui.isReceiptClosed && Number(receivedQty) == 0){
	            		return true;
	            	}else{
	            		return false;
	            	}
	            },
				/**
				 *@description Opens the modal window to add new note to a the shipment and display existing shipment notes.
				 */
				uiAddNote : function(){
					var that = this;
					var shipmentModel = angular.copy(this.model.shipmentDetails);   
					var notesModalInput = {
							modalInput: function(){
								return shipmentModel;
							}
					};
					
					iscModal.openModal('store.views.receiving.notes.shipment-notes',notesModalInput,{})
					 .then(function(callBackData){
						 that.ui.shipmentNoteCount = callBackData.NoteList.TotalNumberOfRecords;
					},angular.noop);
				}
		});
	}
]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewinfo
 *@viewname store.views.return.add-exch-item.add-exchange-item
 *@package store.views.return.add-cart
 *@class add-items
 *@description Displays the searched product details along with product availability and 
 *fulfillment details.
 *
 */
	angular.module('store').controller('store.views.return.add-exch-item.add-exchange-item',
	  ['$animate','$scope','$rootScope','iscScreen','iscWizard','$location','$sce','$filter','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscItem',
		function($animate,$scope,$rootScope,iscScreen,iscWizard,$location,$sce,$filter,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscItem) {			
			iscWizard.initializeWizardPage($scope,{
					model:{
					/**
					 *@iscdoc model
					 *@viewname store.views.return.add-exch-item.add-exchange-item
					 *@name getCompleteItemList
					 *@description Stores the getCompleteItemDetails api data from the mashup output.
					 */
						"getCompleteItemList":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@name itemDetails
						 *@description Stores the item details from getCompleteItemDetails mashup output, used in html files.
						 */
						"itemDetails":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@name orderDetails
						 *@description Stores the order details from mashup output.
						 */
						"orderDetails":{},
						
						/**
						 *@iscdoc model
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@name getItemAvailabilityForStore
						 *@description Stores the item availability data from mashup output.
						 */
						"getItemAvailabilityForStore":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@name getRuleDetails
						 *@description Gets the value of YCD_DEFAULT_EXCHANGE_TYPE rule.
						 */
						"getRuleDetails":{}
						
					},
					mashupRefs:[
					            {
							        /**
									   *@iscdoc mashup
									   *@viewname store.views.return.add-exch-item.add-exchange-item
									   *@mashupid additems_getCompleteItemList
									   *@mashuprefid getCompleteItemList
									   *@modelname getCompleteItemList
									   *@description Gets the item details.
									   */
					            	mashupRefId: 'getCompleteItemList',
					            	mashupId: 'additems_getCompleteItemList',
					            	modelName : 'getCompleteItemList'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-exch-item.add-exchange-item
								   *@mashupid addItems_getRelatedItems
								   *@mashuprefid getRelatedItems
								   *@modelname relatedItemDetails
								   *@description Gets the item details of associated items.
								   */
					            	mashupRefId: 'getRelatedItems',
					            	mashupId: 'addItems_getRelatedItems',
					            	modelName : 'relatedItemDetails'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-exch-item.add-exchange-item
								   *@mashupid addItems_createOrder
								   *@mashuprefid createOrder
								   *@modelname orderDetails
								   *@description Creates the order with input
								   */
					            	mashupRefId: 'createOrder',
					            	mashupId: 'exchange_createOrder',
					            	modelName : 'orderDetails'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-exch-item.add-exchange-item
								   *@mashupid addItems_modifyFulfillmentOptions
								   *@mashuprefid modifyFulfillmentOptions
								   *@modelname orderDetails
								   *@description Updates the order with input
								   */
					            	mashupRefId: 'modifyFulfillmentOptions',
					            	mashupId: 'exchange_modifyFulfillmentOptions',
					            	modelName : 'orderDetails'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-exch-item.add-exchange-item
								   *@mashupid addItems_ovp_createOrder
								   *@mashuprefid createOrderWithOvp
								   *@modelname orderDetails
								   *@description Create order using override price resource permission.
								   */
					            	mashupRefId: 'createOrderWithOvp',
					            	mashupId: 'exchange_ovp_createOrder',
					            	modelName : 'orderDetails'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-exch-item.add-exchange-item
								   *@mashupid addItems_ovp_modifyFulfillmentOptions
								   *@mashuprefid modifyFulfillmentOptionsWithOvp
								   *@modelname orderDetails
								   *@description Update order using override price resource permission.
								   */
					            	mashupRefId: 'modifyFulfillmentOptionsWithOvp',
					            	mashupId: 'exchange_ovp_modifyFulfillmentOptions',
					            	modelName : 'orderDetails'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-exch-item.add-exchange-item
								   *@mashupid addItems_getItemAvailabilityForStore
								   *@mashuprefid getItemAvailabilityForStore
								   *@modelname getItemAvailabilityForStore
								   *@description Get item availability for supported delivery methods.
								   */
					            	mashupRefId: 'getItemAvailabilityForStore',
					            	mashupId: 'addItems_getItemAvailabilityForStore',
					            	modelName : 'getItemAvailabilityForStore'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-exch-item.add-exchange-item
								   *@mashupid addItems_getCompleteOrderDetails
								   *@mashuprefid getCompleteOrderDetails
								   *@modelname orderDetails
								   *@description Get Order information.
								   */
					            	mashupRefId: 'getCompleteOrderDetails',
					            	mashupId: 'addItems_getCompleteOrderDetails',
					            	modelName : 'orderDetails'
					            },
					            /**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-exch-item.add-exchange-item
								   *@mashupid exchange_getRuleDetails
								   *@mashuprefid exchange_getRuleDetails
								   *@modelname getRuleDetails
								   *@description Get rule value for YCD_DEFAULT_EXCHANGE_TYPE.
								   */
					            {
					            	mashupRefId: 'exchange_getRuleDetails',
					            	mashupId: 'exchange_getRuleDetails',
					            	modelName : 'getRuleDetails'
					            	
					            },
					            {
					            	 /**
									   *@iscdoc mashup
									   *@viewname store.views.return.add-exch-item.add-exchange-item
									   *@mashupid addItems_getRealTimeItemAvailabilityForStore
									   *@mashuprefid getRealTimeItemAvailabilityForStore
									   *@description Get Order information.
									   */
						            	mashupRefId: 'getRealTimeItemAvailabilityForStore',
						            	mashupId: 'exchange_getRealTimeItemAvailability'
						            	
					            	
					            }
		            ],
		            ui:{
	            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Boolean}  showItemDetails - True if Item details needs to be shown, false otherwise
						 */
		            	showItemDetails: false,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Boolean}  noProductsFound - True if there are no search/scan results, false otherwise
						 */
		            	noProductsFound: false,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Boolean}  showItemDesc - True if item description needs to be shown, false otherwise
						 */
		            	showItemDesc: true,
	            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Boolean}  showRelatedItems - True if related items are to be shown, false otherwise
						 */
		            	showRelatedItems:false,
	            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Integer}  defaultQty - Default product quantity to add to cart.
						 */
		            	defaultQty: 1,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Integer}  orderTotalQty - Total number of products present in the order.
						 */
		            	orderTotalQty: 0,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {String}  deliveryMethod - Delivery method selected in the view.
						 */
		            	deliveryMethod:'',
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {String}  searchInput - Search/scan field input,blank by default.
						 */
		            	searchInput:'',
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {String}  variantItemId - Variant item id used to paint variation item,blank by default.
						 */
		            	variantItemId:'',
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Boolean}  isScreenDirty - True if any action is performed in view,false otherwise
						 */
		            	isScreenDirty: false,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Boolean}  focusScanField - True if focus is to be set on scan field,false otherwise
						 */
		            	focusScanField: false,
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Boolean}  gift.giftOptionsAvailable - True if gift options available icon is to be shown in view,false otherwise
						 */
		            	gift:{
		            		giftOptionsAvailable: true
		            	},
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Object}  priceOverride - Object returned by the override price pop-up on overriding the price.
						 */
		            	priceOverride:{
		            		isPriceOverriden:false,
		            		priceOverrideReason:''
		            	},
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Object}  selectedShipNode - Object used to store details on store selection from store search popup.
						 */
		            	selectedShipNode:{
		            		shipNode:'',
		            		shipNodeDesc:''
		            	},
		            /**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Object}  availability - Object used to set item availability details used to display in view.
						 */
		            	availability:{
		            		//shp ui attributes
		            		itemShpAvailableDate : '',
			            	itemShpAvailableText : '',
			            	itemShpAvailable : false,
			            	itemShpAvailableToday : false,

			            	//pick ui attributes
			            	itemPickAvailable : false,
			            	itemPickAvailableText : '',
			            	itemPickAvailableDate : '',

			            	//carry ui attributes.
			            	itemCarryAvailable : false,
			            	itemCarryAvailableDate : ''
		            	},
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@property {Number} activeTabIndex - Index based on which one of the tabs is opened and made active.
						 */
						activeTabIndex : 0
		            },
		            /**
				  		 *@iscdoc viewinit
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@description Gets the scanned item details, gets order details if order is already created.
				  		 */
		            initialize: function(){
		            	$rootScope.$showBackButtonForStates = false;
		            	var pageInput = iscWizard.getWizardPageInput();
		            	var inputData = pageInput.input;
		            	this.ui.focusScanField = false;
		            	this.getCompleteItemDetails(inputData);
		            	iscWizard.setWizardModel('forReturnReasonPopup',{ExchangeOrderOpened:'Y'});
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname uiCancel
				  		 *@description Cancel button onclick handler for wizard.Shows confirmation message,if yes then closes the wizard.
				  		 */
		            uiCancel : function(){
		            	iscWizard.gotoPreviousPage(true);
		            	
		            	},
            
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname uiOpenProductSearch
				  		 *@description Onclick handler function for search icon in scan field.Opens dirty popup if screen is dirty
				  		 * and based on action selected opens search product wizard page or stays in the same screen.
						 *@param {String} searchTxt - Input to search for matching products.
				  		 */
		            uiOpenProductSearch: function(searchTxt){
		            	var that = this;
		            	var openProductSearch = true;
		            	if(this.ui.isScreenDirty){
		            		iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
		            			if(iscCore.isBooleanTrue(action)){
		            				// action is yes. check search text and if valid, open search page.
		            				if(!iscCore.isVoid(searchTxt)){
					            		var pageInput = {
						            			input: searchTxt
						            	};
						            	iscWizard.gotoCustomPage('productSearch',pageInput,{wizardPageCssClass:"fullscreen-modal"});
					            	}
					            	else{
					            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
					            	}
		            			}
		            			else{
		            				// action is no. so clear search text.
		            				that.model.searchInput = '';
		            			}
		            		});
		            	}
		            	else{
		            		if(!iscCore.isVoid(searchTxt)){
			            		var pageInput = {
				            			input: searchTxt
				            	};
				            	iscWizard.gotoCustomPage('productSearch',pageInput,{wizardPageCssClass:"fullscreen-modal"});
			            	}
			            	else{
			            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
			            	}
		            	}
		            },
		            
			        	
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname uiShowItemDesc
				  		 *@description Onclick handler function for Details tab.Shows product description.
				  		 */
		            uiShowItemDesc: function(){
		            	this.ui.showItemDesc = true;
						this.ui.activeTabIndex = 0;
		            	this.ui.showRelatedItems = false;
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname uiShowRelatedItems
				  		 *@description Onclick handler function for Related Products tab.Shows the product associations.
				  		 */
		            uiShowRelatedItems: function(){
                  // call api if associations are not loaded in ui already.
	                  if(iscCore.isVoid(this.model.relatedItemDetails)){
	                    this.showRelatedItems();
	                  }
	                  else{
	                    this.ui.showItemDesc = false;
						this.ui.activeTabIndex = 1;
						this.ui.showRelatedItems = true;
	                  }
		            },

		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname uiHandleAddToCart
				  		 *@description Onclick handler for addToCart button in view. Adds the product to cart
				  		 *by calling mashup to create order if order is not created, updates the order if order
				  		 *is created.
				  		 */
		            uiHandleAddToCart: function(){
		            	this.ui.focusScanField = false;
		            	var addToCartInput = this.getAddToCartInput();
		            	if(addToCartInput !== -1){
		            		this.saveItemToCart(addToCartInput);
		            	}
		            },
		            
					/**
				  	 *@iscdoc uimethod
					 *@viewname store.views.return.add-exch-item.add-exchange-item
				  	 *@methodname uiOpenItemDetails
				  	 *@description Onclick handler of scan icon in scan field.Opens find products screen with product details.
				  	 *@param {String} itemId - Unique identifier of the item.
				  	 */
// TODO Nimit - shared b/w this and item-additional-details.
					uiOpenItemDetails: function(itemId) {
						var that = this;
						if (iscCore.isVoid(itemId)) {
							iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
						} else if (this.ui.isScreenDirty) {
							iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action) {
								if (iscCore.isBooleanTrue(action)) {
									iscWizard.gotoCustomPage('addItems', {input: itemId}, {removeCurrent: true,wizardPageCssClass:"fullscreen-modal"});
								} else {
									// action is no. so clear search text.
									that.model.searchInput = '';
								}
							});
						} else {
							iscWizard.gotoCustomPage('addItems', {input: itemId}, {removeCurrent: true,wizardPageCssClass:"fullscreen-modal"});
						}
					},
		            
		            /**
					 *@iscdoc method
					 *@viewname store.views.return.add-exch-item.add-exchange-item
					 *@methodname resetUIAttributes
					 *@description reset UI attributes used to display product information in the view.
					 */
		            resetUIAttributes: function() {
		            	this.ui.noProductsFound = false;
	            		this.ui.showItemDesc = true;
						this.ui.activeTabIndex = 0;
	            		this.ui.showRelatedItems = false;
	            		this.ui.defaultQty = 1;
	            		this.ui.priceOverride.isPriceOverriden = false;
	            		this.ui.variantItemId = "";
	            		this.ui.selectedShipNode = {
							"shipNode": "",
		            		"shipNodeDesc": ""
		            	};
						this.model.relatedItemDetails = {};
						
						var retObj = iscItem.getResetAvailabilityObjAndDeliveryMethod();
	            		this.ui.availability = retObj.availability;
						this.ui.deliveryMethod = retObj.deliveryMethod;
		            },

		            /**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname showRelatedItems
				  		 *@description Paints related items by calling mashup to get all associations of the product.
				  		 */
			        showRelatedItems: function(){
						var getRelatedItemsInput = this.getCompleteItemDetailsApiInput(this.model.itemDetails.ItemID, false);
  		            	iscMashup.callMashup(this,'getRelatedItems',getRelatedItemsInput,{}).then(function(){
  		            			this.ui.showItemDesc = false;
								this.ui.activeTabIndex = 1;
		              			this.ui.showRelatedItems = true;
  		            	}.bind(this),angular.noop);
			        },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname getAddToCartInput
				  		 *@description Frames createOrder/updateOrder input object
				  		 *@return {Object} addToCartInput - create/update order mashup input object.
				  		 */
		            getAddToCartInput: function(){
		            	var addToCartInput = {};
		            	addToCartInput.Order = {};
		            	
		            	/* get the wizard exchangeOrder model and read  OrderHeaderKey*/
		            	var exchangeOrderModel = iscWizard.getWizardModel("exchangeOrderModel");
		            	var returnOrderModel = iscWizard.getWizardModel("returnOrder");
		            	
		            	if(!iscCore.isVoid(exchangeOrderModel)){
		            		addToCartInput.Order.OrderHeaderKey =exchangeOrderModel.Order.OrderHeaderKey;
		            		
		            		if(iscCore.isVoid(exchangeOrderModel.Order.BillToID) && !iscCore.isVoid(returnOrderModel.Order.BillToID)){
		            			addToCartInput.Order.BillToID =returnOrderModel.Order.BillToID;
		            			addToCartInput.Order.CustomerContactID = returnOrderModel.Order.CustomerContactID;
		            			addToCartInput.Order.CustomerFirstName = returnOrderModel.Order.CustomerFirstName;
		            			addToCartInput.Order.CustomerLastName = returnOrderModel.Order.CustomerLastName;
		            			addToCartInput.Order.CustomerEMailID = returnOrderModel.Order.CustomerEMailID;
		            		}
		            		
		            		if(iscCore.isVoid(exchangeOrderModel.Order.PersonInfoShipTo) && !iscCore.isVoid(returnOrderModel.Order.PersonInfoShipTo)){
		            			addToCartInput.Order.PersonInfoShipTo =returnOrderModel.Order.PersonInfoShipTo;
		            		}
		            		
		            		if(iscCore.isVoid(exchangeOrderModel.Order.PersonInfoBillTo) && !iscCore.isVoid(returnOrderModel.Order.PersonInfoBillTo)){
		            			addToCartInput.Order.PersonInfoBillTo =returnOrderModel.Order.PersonInfoBillTo;
		            		}
		            		
		            		
		            	}
		            	else{
			            	addToCartInput.Order.ReturnOrderHeaderKeyForExchange =returnOrderModel.Order.OrderHeaderKey;
			            	
			            	if(!iscCore.isVoid(returnOrderModel.Order.PersonInfoShipTo)){
			            		addToCartInput.Order.PersonInfoShipTo =returnOrderModel.Order.PersonInfoShipTo;
			            	}
			            	
			            	if(!iscCore.isVoid(returnOrderModel.Order.PersonInfoBillTo)){
			            		addToCartInput.Order.PersonInfoBillTo =returnOrderModel.Order.PersonInfoBillTo;
			            	}
			            	
			            	if(!iscCore.isVoid(returnOrderModel.Order.BillToID)){
		            			addToCartInput.Order.BillToID =returnOrderModel.Order.BillToID;
		            			addToCartInput.Order.CustomerContactID = returnOrderModel.Order.CustomerContactID;
		            			addToCartInput.Order.CustomerFirstName = returnOrderModel.Order.CustomerFirstName;
		            			addToCartInput.Order.CustomerLastName = returnOrderModel.Order.CustomerLastName;
		            			addToCartInput.Order.CustomerEMailID = returnOrderModel.Order.CustomerEMailID;
		            		}
			            	
			            	addToCartInput.Order.ExchangeType =this.model.getRuleDetails.Rules.RuleSetValue;
			            	addToCartInput.Order.EntryType = iscAppContext.getFromContext('storeEntryType');
			            	addToCartInput.Order.DocumentType = iscAppContext.getFromContext('salesOrderDocType');
		            	}
		            		
		            	
		            	addToCartInput.Order.OrderLines={};
			        		addToCartInput.Order.OrderLines.OrderLine = [{
			        				Item: {
				        				ItemID: this.model.itemDetails.ItemID,
				        				UnitOfMeasure: this.model.itemDetails.UnitOfMeasure
				        			},
				        			OrderLineTranQuantity:{
			        					OrderedQty : this.ui.defaultQty
			        				}
			        		}];
		        		if(this.ui.deliveryMethod != ''){
		        			if(this.ui.deliveryMethod === 'CARRY'){
		        				//TODO: change to carry after enhancement from foundation is obtained.
		        				addToCartInput.Order.OrderLines.OrderLine[0].DeliveryMethod = this.ui.deliveryMethod;
		        			}
		        			else if(this.ui.deliveryMethod === 'PICK'){
		        				if(this.ui.selectedShipNode.shipNode === ""){
		        					//open store search popup.
		        					this.uiOpenStoreSearch('addToCart');
                           			return -1;
		        				}
		        				else{
		        					addToCartInput.Order.OrderLines.OrderLine[0].ShipNode = this.ui.selectedShipNode.shipNode;
		        					addToCartInput.Order.OrderLines.OrderLine[0].DeliveryMethod = this.ui.deliveryMethod;
		        					addToCartInput.Order.OrderLines.OrderLine[0].ReqShipDate  = this.ui.availability.itemPickAvailableDate;
		        				}
		        			}
		        			else if(this.ui.deliveryMethod === 'SHP'){
		        				addToCartInput.Order.OrderLines.OrderLine[0].DeliveryMethod = this.ui.deliveryMethod;
		        				var isAvailabilityRealtimeData =this.model.getCompleteItemList.ItemList.Item[0].Availabilities.IsAvailabilityRealTimeData;
		        				if(isAvailabilityRealtimeData === 'Y'){
		        					addToCartInput.Order.OrderLines.OrderLine[0].EarliestShipDate = this.ui.availability.itemShpAvailableDate;
			        				addToCartInput.Order.OrderLines.OrderLine[0].ReqShipDate = this.ui.availability.itemShpAvailableDate;
		        				}
		        				/*addToCartInput.Order.OrderLines.OrderLine[0].EarliestShipDate = this.ui.availability.itemShpAvailableDate;
		        				addToCartInput.Order.OrderLines.OrderLine[0].ReqShipDate = this.ui.availability.itemShpAvailableDate;*/
		        			}
		        		}
		            return addToCartInput;
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname setPriceOverrideInAddToCartInput
				  		 *@description Sets price override data while adding product to cart.
				  		 *@param {Object} addToCartInput - create/update order mashup input object.
				  		 */
		            setPriceOverrideInAddToCartInput: function(addToCartInput){
		            	addToCartInput.Order.OrderLines.OrderLine[0].LinePriceInfo = {
		            		ListPrice: this.model.itemDetails.ComputedPrice.ListPrice,
		            		UnitPrice: this.model.itemDetails.ComputedPrice.UnitPrice,
		            		IsPriceLocked: 'Y'
		            	};
	        			this.addPriceOverrideDefaultNote(addToCartInput);
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname addPriceOverrideDefaultNote
				  		 *@description Sets default note at ordeline, if price is overriden for the product.
				  		 *@param {Object} addToCartInput - create/update order mashup input object.
				  		 */
		            addPriceOverrideDefaultNote: function(addToCartInput){
		            	var noteText = iscI18n.translate
		            					('addItems.MSG_PriceOverrideReason',
		            					{overrideReason: this.ui.priceOverride.priceOverrideReason});
		            	addToCartInput.Order.OrderLines.OrderLine[0].Notes = [
		            		{
		            			Note:{
		            				NoteText: noteText,
		            				ReasonCode: 'YCD_NEW_ITEM_INFO'
		            			}
		            		}
		            	];
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname saveItemToCart
				  		 *@description Calls createOrder if order is not created,otherwise calls modifyFulfillmentOptions to update 
				  		 *order while adding the product to cart.
				  		 *@param {Object} addToCartInput - create/update order mashup input object.
				  		 */
		            saveItemToCart: function(addToCartInput){
		            	var mashupToCall = 'createOrder';
		            	if(addToCartInput && !iscCore.isVoid(addToCartInput.Order)){
		            		if(this.ui.priceOverride.isPriceOverriden){
			        			this.setPriceOverrideInAddToCartInput(addToCartInput);
		            			if(!iscCore.isVoid(addToCartInput.Order.OrderHeaderKey)){
		            				mashupToCall = "modifyFulfillmentOptionsWithOvp";
		            			}
		            			else{
		            				mashupToCall = "createOrderWithOvp";
		            			}
		            		}
		            		else{
		            			if(!iscCore.isVoid(addToCartInput.Order.OrderHeaderKey)){
		            				mashupToCall = "modifyFulfillmentOptions";
		            			}
		            			else{
		            				mashupToCall = "createOrder";
		            			}
		            		}
		            	}
		            	/* determine whether real time availability needs to be checked */
		            	if((mashupToCall ==='modifyFulfillmentOptions' || mashupToCall ==='createOrder') && (addToCartInput.Order.OrderLines.OrderLine[0].DeliveryMethod === 'SHP') && 
		            			(iscCore.isVoid(addToCartInput.Order.OrderLines.OrderLine[0].EarliestShipDate))){
		            		
		            			var input = this.getItemAvailabilityForStoreApiInput(this.ui.defaultQty);
		            			input.Promise.addToCartInput =addToCartInput ;
		            			input.Promise.mashupToCall = mashupToCall ;
				            	iscMashup.callMashup(this,"getRealTimeItemAvailabilityForStore",input,{}).then(function(data){
				            		var orderModel = data.MashupRefs.MashupRef[0].Output;			            	
					            	iscWizard.setWizardModel("exchangeOrderModel",orderModel);
					            	this.ui.orderTotalQty = orderModel.Order.OrderLines.TotalNumberOfRecords;
					            	this.model.orderDetails = orderModel;
					            	this.ui.focusScanField = false;
					            	this.resetOrderRelatedAttrs();
					            	var returnOrderModel = iscWizard.getWizardModel("returnOrder");
					            	iscWizard.gotoPreviousPage(true);
									
				            	}.bind(this),angular.noop);
		            		
		            	}else{
		            	iscMashup.callMashup(this,mashupToCall,addToCartInput,{}).then(function(data){
							var orderModel = data.MashupRefs.MashupRef[0].Output;			            	
			            	iscWizard.setWizardModel("exchangeOrderModel",orderModel);
			            	this.ui.orderTotalQty = orderModel.Order.OrderLines.TotalNumberOfRecords;
			            	this.model.orderDetails = orderModel;
			            	this.ui.focusScanField = false;
			            	this.resetOrderRelatedAttrs();
			            	var returnOrderModel = iscWizard.getWizardModel("returnOrder");
			            	//addToCartInput.Order.ReturnOrderHeaderKeyForExchange =returnOrderModel.Order.OrderHeaderKey;
			            	//iscWizard.gotoCustomPage('returnsList',{input:returnOrderModel.Order.OrderHeaderKey},{removeCurrent:true});
			            	iscWizard.gotoPreviousPage(true);
		            	}.bind(this),angular.noop);
		            	}
		            },
		            
		            /**
			  		 *@iscdoc method
					 *@viewname store.views.order.add-cart.add-items
			  		 *@methodname getItemAvailabilityForStoreApiInput
			  		 *@description Returns the input object for getItemAvailabilityForStore mashup using the quantity
			  		 *displayed in the view.
			  		 *@param {String} qty - product quantity displayed in view.
			  		 *@return {Object} input - mashup input object.
			  		 */
	            getItemAvailabilityForStoreApiInput: function(qty){
	            	var currentStoreAddress = iscAppContext.getFromContext('storeAddress').ShipNodePersonInfo;
	            	var input = {
                    Promise:{
                       ShipToAddress: currentStoreAddress,
                       PromiseLines:[{
                          PromiseLine:{
                             ItemID: this.model.itemDetails.ItemID,
                             UnitOfMeasure: this.model.itemDetails.UnitOfMeasure,
                             ProductClass: this.model.itemDetails.ProductClass,
                             RequiredQty: qty
                          }
                       }]
                    }
                 };
	            	
	            	 var exchangeOrderModel = iscWizard.getWizardModel("exchangeOrderModel");
	            	 if(!iscCore.isVoid(exchangeOrderModel) && !iscCore.isVoid(exchangeOrderModel.Order.OrderHeaderKey)){
	            		 input.Promise.OrderHeaderKey = exchangeOrderModel.Order.OrderHeaderKey;
	            	 }

	            	return input;
	            },
	            
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname resetOrderRelatedAttrs
				  		 *@description Sets the order related ui attributes to default value after the product is added to cart.
				  		 */
		            resetOrderRelatedAttrs: function(){
		            	this.ui.isScreenDirty = false;
		            	this.ui.priceOverride = {
		            		isPriceOverriden:false,
		            		priceOverrideReason:''
		            	};
		            },
		            
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname getCompleteItemDetails
				  		 *@description Invokes getCompleteItemList mashup and registers the success callback handler for 
				  		 *the mashup.
				  		 *@return {String} itemId - Product unique identifier used to call mashup.
				  		 */
		            getCompleteItemDetails: function(itemId){
		            	if(iscCore.isVoid(itemId)){
		            		iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
		            	}
		            	else{
		            		var getCompleteItemDetailsApiInput = this.getCompleteItemDetailsApiInput(itemId, true);
		            		// setting default page size to be used to call searchproduct if 
		            		// getCompleteItemDetails does not return any result.
		            		getCompleteItemDetailsApiInput.Item.DefaultPageSize = iscAppContext.getFromContext("defaultPageSize");
		            		
		            		var mashupArray = [];
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteItemList', getCompleteItemDetailsApiInput));
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'exchange_getRuleDetails', {"Rules" : { "RuleSetFieldName" : "YCD_DEFAULT_EXCHANGE_TYPE"}}));
				        	
		            		iscMashup.callMashups(this,mashupArray,{}).then(this.handleGetCompleteItemDetails.bind(this),angular.noop);
		            		//iscMashup.callMashup(this,"getCompleteItemList",getCompleteItemDetailsApiInput,{}).then(this.handleGetCompleteItemDetails.bind(this));
		            	}
		            	
		            },
					/**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname handleGetCompleteItemDetails
				  		 *@description Success callbackhandler for getCompleteItemDetails mashup.Displays product details along with availability information,opens product search if
				  		 * search results are present in the output
				  		 *@param {Object} data - mashup output object of getCompleteItemDetails mashup.
				  		 */
		            handleGetCompleteItemDetails: function(data){
		            	var output = iscMashup.getMashupOutput(data,'getCompleteItemList');
		            	var itemDetails = output.ItemList.Item;
		            	//this.ui.focusScanField = true;
						if(!iscWizard.getWizardContext('findProductDone') && iscAppContext.isMobile() && iscWizard.getWizardAction() == 'NEXT') {
							iscWizard.setWizardContext('findProductDone','true');
							this.ui.focusScanField = false;
						} else if(iscWizard.getWizardContext('findProductDone') && iscAppContext.isMobile() && iscWizard.getWizardAction() == 'PREVIOUS') {
							iscWizard.setWizardContext('findProductDone',false);
							this.ui.focusScanField = false;
						} else {
							this.ui.focusScanField = true;
						}
		            	var searchResult = output.ItemList.SearchResult;
	            		
		            	if(iscCore.isVoid(itemDetails) && iscCore.isVoid(searchResult)){
		            		this.ui.noProductsFound = true;
		            		this.ui.showItemDetails = false;
		            	}
		            	else if(!iscCore.isVoid(searchResult)){
	            			// open item search page with results.
	            			iscWizard.gotoCustomPage('productSearch',searchResult,{removeCurrent:true,wizardPageCssClass:"fullscreen-modal"});
	            		}
		            	else{
		            		this.ui.showItemDetails = true;
		            		this.resetUIAttributes();		            		
		            		this.model.itemDetails = this.model.getCompleteItemList.ItemList.Item[0];
		            		if(this.model.itemDetails.PrimaryInformation.KitCode === 'BUNDLE' ||
		            			this.model.itemDetails.PrimaryInformation.KitCode==='PK' || 
		            			this.model.itemDetails.PrimaryInformation.KitCode==='DPK'){
		            			iscModal.showErrorMessage(iscI18n.translate('globals.MSG_Item_not_supported'));
		            			return;
		            		}
		            		if(!iscCore.isVoid(this.model.itemDetails.ClassificationCodes) && 
		            			 !iscCore.isVoid(this.model.itemDetails.ClassificationCodes.Model)){
		            			// show variations for items which is a variant item of variation item(eg:RedJacketM)
		            				this.ui.variantItemId = this.model.itemDetails.ItemID;
		            		}
		            		if(!iscCore.isVoid(this.model.itemDetails.Availabilities)){
		            			var retObj = iscItem.handleItemAvailability(this.model.itemDetails.Availabilities, this.ui.selectedShipNode, this.model.itemDetails.PrimaryInformation.IsShippingAllowed, this.model.itemDetails.PrimaryInformation.IsPickupAllowed);
								this.ui.availability = retObj.availability;
								this.ui.deliveryMethod = retObj.deliveryMethod;
								if (retObj.selectedShipNode != null) {
									this.ui.selectedShipNode = retObj.selectedShipNode;
								}
		            		}
		            	}
		            	
		            	  /* Set YCD_DEFAULT_EXCHANGE_TYPE rule value as wizrd model */
		            	
		            	//var ruleoutput = iscMashup.getMashupOutput(data,'exchange_getRuleDetails');
		            	
		            },
		            
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname handleWizardBack
				  		 *@description Onclick handler for the wizard back button.Displays screen dirty check popup if
				  		 *screen is dirty,opens previous page of wizard otherwise.
				  		 */
						handleWizardBack:function(){
							var isFirstPage = iscWizard.isFirstPage();
							if(this.ui.isScreenDirty){
								if(isFirstPage){
									this.uiCancel();
								}
								else{
									iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
			            			if(iscCore.isBooleanTrue(action)){
			            				iscWizard.gotoPreviousPage(true);
			            			}
			            		});
								}
								return true;
							}
							else if(isFirstPage){
								this.uiCancel();
								return true;
							}
							else{
								return false;
							}
						},
						/**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
				  		 *@methodname handleWizardExit
				  		 *@description Onclick handler for the wizard cancel button.Displays screen dirty check popup if
				  		 *screen is dirty,closes the wizard otherwise.
				  		 */
						handleWizardExit:function(){
							var confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
							if(this.ui.orderTotalQty < 1){
									confirmationMsg = iscI18n.translate('addItems.WarningMessage_Cancel');
							}
							iscModal.showConfirmationMessage(confirmationMsg).then(
								function(callBackAction){
										//
										if(callBackAction === 'YES'){
												iscWizard.exitWizard();
										}
								},
								function(callBackAction){
										//      Do Nothing

								});
							return true;
						},
						
						/**
						 *@iscdoc method
						 *@viewname store.views.return.add-exch-item.add-exchange-item
						 *@methodname getCompleteItemDetailsApiInput
						 *@description Returns the getCompleteItemDetails mashup input object.
						 *@param {String} itemId - Unique identifier of the product
						 *@param {Boolean} sendBarCode - True if barCode data is to be set in mashup input,false otherwise.
						 *
						 */
						getCompleteItemDetailsApiInput: function(itemId, sendBarCode) {
							var getCompleteItemDetailsInput = {
								"Item": {
									"ItemID": itemId
								}
							};
							var orderModel = iscWizard.getWizardModel("orderModel");
							if (!iscCore.isVoid(orderModel)) {
								var customerId = iscCore.getValueFromJsonPath(orderModel,"Order.BillToID");
								if (!iscCore.isVoid(customerId)) {
									getCompleteItemDetailsInput.Item.CustomerInformation = {
										"CustomerID": customerId
									};
								}
							}
							if (sendBarCode) {
								getCompleteItemDetailsInput.Item.BarCode = {
									"BarCodeData": itemId
								};
							}
							return getCompleteItemDetailsInput;
						},
                
                
                        uiShareProductDetails:function(){
				            var that = this;
                            var customerId = "";
                            var returnOrderModel = iscWizard.getWizardModel("returnOrder");
                            if(!iscCore.isVoid(returnOrderModel)){
                                var orderCustomerId = iscCore.getValueFromJsonPath(returnOrderModel,"Order.BillToID");
                                if(!iscCore.isVoid(orderCustomerId)){
                                    customerId = orderCustomerId;
                                }
                            }
							var resolveData = {
			                    modalInput : function(){
			                        return {
			                            ItemDetails:{
			                                ItemID:that.model.itemDetails.ItemID,
			                                UnitOfMeasure:that.model.itemDetails.UnitOfMeasure,
                                            ItemKey : that.model.itemDetails.ItemKey
			                            },
			                            CustomerDetails:{
			                                CustomerID:customerId 
			                            }
			                        }
			                    }
			                };
                            
                            
                            
                            //iscModal.openModal('store.views.customer.customer-profile.product-details',resolveData,{}).then(angular.noop,angular.noop);
			            	iscModal.openModal('store.views.common.product.product-details-share',resolveData,{}).then(angular.noop,angular.noop);
						}

					});
		}
	]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewinfo
 *@viewname store.views.return.add-return-item.add-return-item
 *@package store.views.return.add-return-item
 *@class add-return-item
 *@description Displays the searched product details along with its return price. Allows the user to add the displayed product to a return order
 *
 */
	angular.module('store').controller('store.views.return.add-return-item.add-return-item',
	  ['$animate','$scope','$rootScope', 'iscScreen','iscWizard','$location','$sce','$filter','$timeout','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscReturn',
		function($animate,$scope,$rootScope, iscScreen,iscWizard,$location,$sce,$filter,$timeout,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscReturn) {			
			iscWizard.initializeWizardPage($scope,{
					model:{
						/**
						 *@iscdoc model
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@name getCompleteItemList
						 *@description Stores the output of getCompleteItemList API.  The API output will have only one item record.
						 */
						"getCompleteItemList":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@name itemDetails
						 *@description Stores the item details from getCompleteItemList API output
						 */
						"itemDetails":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@name returnOrder
						 *@description Stores the return order details.
						 */
						"returnOrder":{},
						/**
						 *@iscdoc model
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@name itemPreview
						 *@description Stores the details required to show mini cart preview when item is added to the return 
						 */
						 "itemPreview":{},
						 /**
						 *@iscdoc model
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@name lookupConfig
						 *@description Stores the lookup type PRODUCT that is associated with this page.
						 */
			             "lookupConfig":{LookupType:"PRODUCT"}
					},
					mashupRefs:[
					            {
						        /**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-return-item.add-return-item
								   *@mashupid blindreturns_getCompleteItemList
								   *@mashuprefid getCompleteItemList
								   *@modelname getCompleteItemList
								   *@description Gets the item details.
								   */
					            	mashupRefId: 'getCompleteItemList',
					            	mashupId: 'blindreturns_getCompleteItemList',
					            	modelName : 'getCompleteItemList'
					            },
					            {
					           /**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-return-item.add-return-item
								   *@mashupid blindreturns_createOrder
								   *@mashuprefid createOrder
								   *@modelname returnOrder
								   *@description Calls createOrder API to create a new return order with the current product as one line
								   */
					            	mashupRefId: 'createOrder',
					            	mashupId: 'blindreturns_createOrder',
					            	modelName : 'returnOrder'
					            },
					            {
				            	/**
								   *@iscdoc mashup
								   *@viewname store.views.return.add-return-item.add-return-item
								   *@mashupid blindreturns_changeOrder
								   *@mashuprefid changeOrder
								   *@modelname returnOrder
								   *@description Calls changeOrder API to add the current product as one line
								   */
					            	mashupRefId: 'changeOrder',
					            	mashupId: 'blindreturns_changeOrder',
					            	modelName : 'returnOrder'
					            }
		            ],
		            ui:{
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@property {Boolean}  showItemDetails - True if Item details needs to be shown, false otherwise
						 */
		            	showItemDetails: false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@property {Boolean}  noProductsFound - True if there are no search/scan results, false otherwise
						 */
		            	noProductsFound: false,
		            	/**
		             *@iscdoc uiattr
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@property {Boolean}  showItemDesc - True if item description needs to be shown, false otherwise
						 */
		            	showItemDesc: true,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@property {Integer}  defaultQty - Default product quantity to add to cart.
						 */
		            	defaultQty: 1,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@property {Integer}  orderTotalQty - Total number of lines present in the order. Used for minicart.
						 */
		            	orderTotalQty: 0,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@property {String}  variantItemId - Variant item id used to paint variation item,blank by default.
						 */
		            	variantItemId:'',
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@property {String}  hideSearch - Flag to hide or show the return lookup in the page
						 */
		            	hideSearch:'N',
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.add-return-item.add-return-item
						 *@property {Number} activeTabIndex - Index based on which one of the tabs is opened and made active.
						 */
						activeTabIndex : 0,
                        showProductShare:true
		            },
		            
		            /**
				  		 *@iscdoc viewinit
						 *@viewname store.views.return.add-return-item.add-return-item
				  		 *@description Gets the scanned item details, gets order details if order is already created. Sets parameters for minicart
				  		 */
		            initialize: function(){
		            	var pageInput = iscWizard.getWizardPageInput();
		            	var inputData = pageInput.input;
		            	var callAPI = pageInput.callAPI;
		            	if(callAPI){
		            		//then input is just itemID
		            		this.callGetCompleteItemListWithItemID(inputData);
		            	}else{
		            		this.updateItemDetailsModel(inputData);
		            	}
		            	
		            	iscReturn.setMiniCartParam(this);
		            	 $scope.$on('uiSearchClose',function(event,args){
						 	if (args){
								  $scope.ui.hideSearch = 'N';
						    }  
								   
						 });
		            },
		            
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname uiRenderHtml
			  		 *@description Handles html content if present in product description.
			  		 *@param {String} itemDesc - Product description
			  		 */
		            uiRenderHtml: function(itemDesc){
	            		return $sce.trustAsHtml(itemDesc);
		            },
		            
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname uiHandleSearchResult
			  		 *@description This method opens up a new page depending on what is searched in the return lookup.
			  		 *@param {Object} returnData - Search results
			  		 */
		            uiHandleSearchResult : function(returnData) {
		    			var pageInput = {input:returnData.NextPage.model,callAPI:returnData.NextPage.callAPI};
		    			iscWizard.gotoCustomPage(returnData.NextPage.action,pageInput,{});
		    		},
		            
		    		/**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname uiHandleReviewReturn
			  		 *@description Onclick handler function for review returns button. Opens up Returns List page
			  		 */
		    		uiHandleReviewReturn:function(){
		                iscWizard.gotoCustomPage('returnsList',{input:this.model.returnOrder.Order.OrderHeaderKey},{});
		             },
		             
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname uiOpenItemDetails
			  		 *@description Onclick handler of scan icon in scan field.Opens find products screen with product details.
			  		 *@param {String} itemId - Unique identifier of the item.
			  		 */
		            uiOpenItemDetails: function(itemId){
		            	if(iscCore.isVoid(itemId)){
		                     iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
		                }else{
		            		this.callGetCompleteItemListWithItemID(itemId);
		            	}
		            },
		            
		            /**
			  		 *@iscdoc method
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname callGetCompleteItemListWithItemID
			  		 *@description calls getCompleteItemList mashup to get the item details
			  		 *@param {String} itemId - Unique identifier of the item.
			  		 */
		            callGetCompleteItemListWithItemID: function(itemID){
		            	var getCompItemListInput = {Item:{ItemID:itemID}};
		            	
		            	var returnOrder = iscWizard.getWizardModel("returnOrder");
		            	if(!iscCore.isVoid(returnOrder)){
		            		var customerId = returnOrder.Order.BillToID;
		            		if(!iscCore.isVoid(customerId)){
		            			getCompItemListInput.Item.CustomerInformation = {
		            				CustomerID : customerId
		            			}
		            		}
		            	}
		            	iscMashup.callMashup(this,'getCompleteItemList',getCompItemListInput,{}).then(function(data){
		            		var output = iscMashup.getMashupOutput(data,'getCompleteItemList');
		            		this.updateItemDetailsModel(output);
		            	}.bind(this),angular.noop);
		            },
		            
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.return.add-return-item.add-return-item
				  		 *@methodname uiShowItemDesc
				  		 *@description Onclick handler function for Details tab. Shows product description.
				  		 */
		            uiShowItemDesc: function(){
		            	this.ui.showItemDesc = true;
						this.ui.activeTabIndex = 0;
		            },
		            /**
				  		 *@iscdoc uimethod
						 *@viewname store.views.return.add-return-item.add-return-item
				  		 *@methodname uiHandleAddToCart
				  		 *@description Onclick handler for review return button. Adds the product to the return order
				  		 *by calling mashup to create order if order is not created, updates the order if order
				  		 *is created.
				  		 */
		            uiHandleAddToCart: function(){
		            	var addToCartInput = this.getAddToCartInput();
	            		this.saveItemToCart(addToCartInput);
		            },
		            
		            /**
			  		 *@iscdoc method
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname updateItemDetailsModel
			  		 *@description Updates itemDetails model with getCompleteItemList mashup output
			  		 *@param {Object} output - output of getCompleteItemList mashup
			  		 */
		            updateItemDetailsModel: function(output){
		            	this.model.getCompleteItemList = output;
		            	this.ui.showItemDetails = true;
	            		this.model.itemDetails = output.ItemList.Item[0];
	            		this.ui.headerProductId = output.ItemList.Item[0].ItemID;
	            		
	            		/*if(this.model.itemDetails.PrimaryInformation.KitCode === 'BUNDLE' ||
		            			this.model.itemDetails.PrimaryInformation.KitCode==='PK' || 
		            			this.model.itemDetails.PrimaryInformation.KitCode==='DPK'){
		            			iscModal.showErrorMessage(iscI18n.translate('globals.MSG_Item_not_supported'));
		            			return;
		            		}*/
	            		
	            		if(!iscCore.isVoid(this.model.itemDetails.ClassificationCodes) && 
		            			 !iscCore.isVoid(this.model.itemDetails.ClassificationCodes.Model)){
		            			// show variations for items which is a variant item of variation item(eg:RedJacketM)
		            				this.ui.variantItemId = this.model.itemDetails.ItemID;
		            		}
		            },
		            
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-return-item.add-return-item
				  		 *@methodname getAddToCartInput
				  		 *@description forms the input to createOrder or changeOrder mashup to add the product to the order. 
				  		 */
		            getAddToCartInput: function(){
		            	var addToCartInput = {};
		            	addToCartInput.Order = {};
		            	if(!iscCore.isVoid(this.model.returnOrder)){
		            		addToCartInput.Order.OrderHeaderKey = this.model.returnOrder.Order.OrderHeaderKey;
		            	}else{
		            		addToCartInput.Order.EntryType = iscAppContext.getFromContext('storeEntryType');
		            	}
		            	
		            	addToCartInput.Order.OrderLines={};
			        		addToCartInput.Order.OrderLines.OrderLine = [{
			        				Item: {
				        				ItemID: this.model.itemDetails.ItemID,
				        				UnitOfMeasure: this.model.itemDetails.UnitOfMeasure
				        			},
				        			OrderLineTranQuantity:{
			        					OrderedQty : this.ui.defaultQty
			        				},
			        				LinePriceInfo:{UnitPrice:this.model.itemDetails.ComputedPrice.ReturnPrice}
			        		}];
		            return addToCartInput;
		            },
		            
		            	/**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-return-item.add-return-item
				  		 *@methodname saveItemToCart
				  		 *@description Calls createOrder mashup if order is not created, otherwise calls changeOrder mashup to update 
				  		 *order while adding the product to return.
				  		 *@param {Object} addToCartInput - input to createOrder or changeOrder mashup
				  		 */
		            saveItemToCart: function(addToCartInput){
		            	var mashupToCall = 'createOrder';
		            	if(!iscCore.isVoid(addToCartInput.Order.OrderHeaderKey)){
		            		mashupToCall = 'changeOrder';
		            	}
		            	iscMashup.callMashup(this,mashupToCall,addToCartInput,{}).then(this.handleCreateOrChangeOrder.bind(this),angular.noop);
		            },
		            
		            /**
			  		 *@iscdoc method
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname handleCreateOrChangeOrder
			  		 *@description Updates the returnOrder wizard model and returnOrder model with the output of createOrder or changeOrder mashup
			  		 *order while adding the product to return.
			  		 *@param {Object} data - output of createOrder or changeOrder mashup
			  		 */
		            handleCreateOrChangeOrder : function(data){
		            	var returnOrder = data.MashupRefs.MashupRef[0].Output;			            	
		            	iscWizard.setWizardModel("returnOrder",returnOrder);
		            	this.ui.orderTotalQty = returnOrder.Order.OrderLines.TotalLinesInCart;
		            	this.model.returnOrder = returnOrder;
		            	this.showItemPreview();
						if(this.ui.defaultQty == 1) {
							var alertMessage = iscI18n.translate("returns.aria_cartAdditionSuccessMessage",{cartcount:this.ui.orderTotalQty});
						}
						if(this.ui.defaultQty > 1) {
							var alertMessage = iscI18n.translate("returns.aria_cartAdditionSuccessMessageMultipleProducts",{cartcount:this.ui.orderTotalQty,productsadded:this.ui.defaultQty});
						}
						iscModal.showA11YAlertMessage(alertMessage);
		            },
		            
		            /**
			  		 *@iscdoc method
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname showItemPreview
			  		 *@description Displays item preview when a product is added to the return
			  		 */
		            showItemPreview:function() {
		            	this.model.itemPreview = {};
		            	if(!iscCore.isVoid(this.model.itemDetails) && !iscCore.isVoid(this.model.itemDetails.PrimaryInformation)){
		            		this.model.itemPreview.ImageURL = this.model.itemDetails.PrimaryInformation.ImageURL;
		            		this.model.itemPreview.ItemDetails = {};
		            		this.model.itemPreview.ItemDetails.PrimaryInformation ={};
		            		this.model.itemPreview.ItemDetails.PrimaryInformation.ExtendedDisplayDescription = this.model.itemDetails.PrimaryInformation.ExtendedDisplayDescription;
		            		this.model.itemPreview.ShowTick = false;
		            		this.model.itemPreview.ItemDetails.Quantity = this.ui.defaultQty;
		            		$timeout(function() {
		            			
		            			var itemPreviewSpanWidget = document.getElementById('itemPreviewSpan');
		            			if(!iscCore.isVoid(itemPreviewSpanWidget)) {
		            				//itemPreviewSpanWidget.click();
		            				$scope.$broadcast('itemPreviewSpanClicked',{'data':$scope.ui.defaultQty});
		            			}
		            			
		                	}, 0);
		            	} 
		            	
		            	
		            },
		            
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname uiIncreaseQty
			  		 *@description Increases the default quantity of the product to be added to the return
			  		 */ 
		           uiIncreaseQty : function() {
						this.ui.defaultQty++;
					},
					
					/**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname uiDecreaseQty
			  		 *@description Decreases the quantity of the product to be added to the return
			  		 */ 
					uiDecreaseQty : function() {
						if (this.ui.defaultQty !== 1) {
							this.ui.defaultQty--;
						}
					},
					
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.add-return-item.add-return-item
			  		 *@methodname uiCancel
			  		 *@description Cancel button onclick handler for wizard. Shows confirmation message if return order is already created.
			  		 */
		            uiCancel : function(){
		            	iscReturn.handleWizardExit(this.ui.orderTotalQty);
		            },
		            /**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-return-item.add-return-item
				  		 *@methodname handleWizardBack
				  		 *@description Onclick handler for the wizard back button. Takes back to the previous page. 
				  		 *If the previous page is home page and the return order is created a confirmation message is shown.
				  		 */
						handleWizardBack:function(){
							return iscReturn.handleWizardBack(false,this.ui.orderTotalQty);
						},
						
						/**
				  		 *@iscdoc method
						 *@viewname store.views.return.add-return-item.add-return-item
				  		 *@methodname handleWizardExit
				  		 *@description Onclick handler for the wizard exit. Shows confirmation message if return order is already created.
				  		 */
						handleWizardExit:function(){
							return iscReturn.handleWizardExit(this.ui.orderTotalQty);
						},
                
                
                        uiShareProductDetails:function(){
				            var that = this;
                            var customerId = "";
                            var returnOrderModel = iscWizard.getWizardModel("returnOrder");
                            if(!iscCore.isVoid(returnOrderModel)){
                                var orderCustomerId = iscCore.getValueFromJsonPath(returnOrderModel,"Order.BillToID");
                                if(!iscCore.isVoid(orderCustomerId)){
                                    customerId = orderCustomerId;
                                }
                            }
                            
							var resolveData = {
			                    modalInput : function(){
			                        return {
			                            ItemDetails:{
			                                ItemID:that.model.itemDetails.ItemID,
			                                UnitOfMeasure:that.model.itemDetails.UnitOfMeasure,
                                            ItemKey : that.model.itemDetails.ItemKey
			                            },
			                            CustomerDetails:{
			                                CustomerID:customerId 
			                            }
			                        }
			                    }
			                };
                            
                            
                            
                            //iscModal.openModal('store.views.customer.customer-profile.product-details',resolveData,{}).then(angular.noop,angular.noop);
			            	iscModal.openModal('store.views.common.product.product-details-share',resolveData,{}).then(angular.noop,angular.noop);
						}
                
					});
		}
	]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
 /**
 *@iscdoc viewinfo
 *@viewname store.views.return.customer-details.customer-details
 *@package store.views.return.customer-details
 *@class customer-details
 *@description Shows the customer details along with sales order list
 *
 */
angular.module('store').controller('store.views.return.customer-details.customer-details',
  ['$animate','$timeout','$document','$scope','$rootScope','$filter','iscScreen','iscWizard','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscReturn','iscRule','iscOrder',
	function($animate,$timeout,$document,$scope,$rootScope,$filter,iscScreen,iscWizard,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscReturn,iscRule,iscOrder) {
	  
		  var escapeBinderFn = function(event){
			  if(event.which === 27 && !event.defaultPrevented) {
		           this.ui.showCustomerPreview = false;
		           $document.off("keydown",escapeBinderFn);
		           $scope.$apply();
		         }
	  	 };
  	 
		$scope.$on("$destroy", function () {
		       $document.off("keydown",escapeBinderFn);
			});
  	
		
		iscWizard.initializeWizardPage($scope,{
            model:{
                /**
                 *@iscdoc model
                 *@viewname store.views.return.customer-details.customer-details
                 *@name customerDetails
                 *@description Stores customer details.
                 */
                "customerDetails":{},
                /**
                 *@iscdoc model
                 *@viewname store.views.return.customer-details.customer-details
                 *@name orderList
                 *@description Stores order list of the customer
                 */
                "orderList":{},
                /**
                 *@iscdoc model
                 *@viewname store.views.return.customer-details.customer-details
                 *@name returnOrder
                 *@description Stores the return order details.
                 */
                "returnOrder":{},
                /**
				 *@iscdoc model
				 *@viewname store.views.return.add-return-item.add-return-item
				 *@name lookupConfig
				 *@description Stores the lookup type CUSTOMER that is associated with this page.
				 */
                "lookupConfig":{LookupType:"CUSTOMER"}
            },
            mashupRefs:[{
                /**
                *@iscdoc mashup
                *@viewname store.views.return.customer-details.customer-details
                *@mashupid return_getCustomerOrders
                *@mashuprefid getOrderList
                *@description Calls getOrderList API to fetch maximum 50 orders of the current customer sorted by descending createts
                */
                    mashupRefId: 'getOrderList',
                    mashupId: 'return_getCustomerOrders'

                },
                {
                    /**
                    *@description Calls getOrderList API to fetch maximum 50 orders of the current customer sorted by descending createts
                    */
                        mashupRefId: 'getItemThumbnails',
                        mashupId: 'store.views.common.getItemThumbnails'

                    }],
            ui:{
            	/**
                 *@iscdoc uiattr
                 *@viewname store.views.return.customer-details.customer-details
                 *@property {Integer}  orderTotalQty - Total number of lines present in the order. Used for minicart.
                 */
                 orderTotalQty: '0',
               /**
                *@iscdoc uiattr
                *@viewname store.views.return.customer-details.customer-details
                *@property {Integer} productSearchPageNo - Default page number while showing orders
                */
                searchPageNo: "1",
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.return.customer-details.customer-details
                 *@property {String} pageSize - Default number of order records to be shown while loading next records.
                 */
                 pageSize: 5,
                 /**
                  *@iscdoc uiattr
                  *@viewname store.views.return.customer-details.customer-details
                  *@property {String}  recordShownCount - Total number of order records displayed in the screen
                  */
                  recordShownCount:10,
                 /**
                 *@iscdoc uiattr
                 *@viewname store.views.return.customer-details.customer-details
                 *@property {String}  apiPageSize - Number of records to be fetched by getOrderList API in one call.
                 */
                  apiPageSize:50,
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.customer-details.customer-details
                *@property {String}  noOfSearchResults - Number of search results
                */
                noOfSearchResults: 0,
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.customer-details.customer-details
                *@property {Boolean}  searchInProgress - True if mashup call is still in progress, false otherwise.
                */
                searchInProgress: false,
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.return.customer-details.customer-details
                 *@property {String}  hideSearch - Flag to hide or show the return lookup in the page
                 */
                hideSearch:'N',
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.return.customer-details.customer-details
                 *@property {Boolean}  customerPreviewTemplate -Template to show customer details in mobile
                 */
                customerPreviewTemplate:'store/views/return/customer-details/customer-preview.tpl.html',
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.return.customer-details.customer-details
                 *@property {Boolean}  showCustomerPreview - True in mobile, false otherwise
                 */
                showCustomerPreview:false,
                getFilterFromContext:false
            },
            /**
             *@iscdoc viewinit
             *@viewname store.views.return.customer-details.customer-details
             *@description sets the customer details model and gets order history
             */
            initialize: function(){
                 // this.ui.pageSize = iscAppContext.getFromContext("defaultPageSize");
                  var pageInput = iscWizard.getWizardPageInput();
                  var inputData = pageInput.input;
                  var callAPI = pageInput.callAPI;
                  
                  if(callAPI){
                	  
                  }else{
                	  this.handleGetCustomerDetailsOutput(inputData,false);
                  }
                  iscReturn.setMiniCartParam(this);
                   $scope.$on('uiSearchClose',function(event,args){
					 	if (args){
							  $scope.ui.hideSearch = 'N';
					    }  
							   
					 });
            },
            
            /**
             *@iscdoc uimethod
             *@viewname store.views.return.customer-details.customer-details
             *@description shows the customer preview on click of customer link
             */
            uiShowCustomerPreview:function() {
            	if(!this.ui.showCustomerPreview) {
            		this.ui.showCustomerPreview = true;
            	} else if(this.ui.showCustomerPreview) {
            		this.ui.showCustomerPreview = false;
            		$document.off("keydown",escapeBinderFn);
            	}
    			
             },
             
	        /**
	         *@iscdoc uimethod
	         *@viewname store.views.return.customer-details.customer-details
	         *@methodname uiGetOrderListNext
	         *@description Callback handler function of continuous scroll as user scrolls order list
	         */
    		uiGetOrderListNext: function(){
    		this.ui.recordShownCount=this.ui.recordShownCount+this.ui.pageSize;
        },
        
	       /**
	        *@iscdoc uimethod
	        *@viewname store.views.return.customer-details.customer-details
	        *@methodname uiNextPageActionValidator
	        *@description Determines if mashup call is in progress as user scrolls order list. 
	        *@return {Boolean} -True if mashup call is not in progress, false otherwise. Since this is client only pagination, it will always return true.
	        */
        uiNextPageActionValidator: function(){
        	return true;
        },
        
        	/**
	        *@iscdoc method
	        *@viewname store.views.return.customer-details.customer-details
	        *@methodname handleGetCustomerDetailsOutput
	        *@description updates the customerDetails model and calls getOrderList mashup
	        */
        handleGetCustomerDetailsOutput: function(output){
        	 this.model.customerDetails =  output; 
  			 //this.ui.headerCustomerId = this.model.customerDetails.Customer.CustomerID;
        	 this.ui.headerCustomerId = iscI18n.translate('address.LABEL_Display_name',
        			 {firstname:this.model.customerDetails.Customer.CustomerContactList.CustomerContact[0].FirstName, 
        		 lastname:this.model.customerDetails.Customer.CustomerContactList.CustomerContact[0].LastName});
  			 this.getCustomerOrders();
            },
            
            /**
 	        *@iscdoc method
 	        *@viewname store.views.return.customer-details.customer-details
 	        *@methodname getCustomerOrders
 	        *@description Forms the input and calls getOrderList mashup
 	        */
            getCustomerOrders: function(){
            	 this.model.getOrderListInput ={Order:{BillToID:this.model.customerDetails.Customer.CustomerID}};
            	 
            	 var orderListInput =  this.model.getOrderListInput;
            	//if coming from back, use the saved filter. otherwise reset the order list filter
            	 var wizAction = iscWizard.getWizardAction();
        		 if(wizAction == 'PREVIOUS'){
        			 var orderListFilter = iscAppContext.getFromContext("orderListFilter");
        			 if(!iscCore.isVoid(orderListFilter) && orderListFilter.input){
        				 orderListInput = orderListFilter.input;
        				 this.ui.getFilterFromContext = true;
        			 }
        		 }else{
        			 iscAppContext.removeFromContext("orderListFilter");
        		 }

            	 iscMashup.callMashup(this,'getOrderList',orderListInput,{}).then(function(data){
                		var output = iscMashup.getMashupOutput(data,'getOrderList');
                		this.updateOrderListModel(output);
                	}.bind(this),angular.noop);
            },
            
            /**
  	        *@iscdoc method
  	        *@viewname store.views.return.customer-details.customer-details
  	        *@methodname updateOrderListModel
  	        *@description Updates the orderList with the output of getOrderList mashup
  	        */
            updateOrderListModel: function(orderListOutput){
            	 this.model.orderList = orderListOutput;
            },
            
            /**
   	        *@iscdoc uimethod
   	        *@viewname store.views.return.customer-details.customer-details
   	        *@methodname uiViewOrderDetails
   	        *@description onclick handler of View Order Details button, opens sales order details (add returns to product) page
   	        */   
	       uiViewOrderDetails: function(order){
	    	   var orderModel = {};
		   		orderModel.Order = {};
		   		orderModel.Order.EnterpriseCode = order.EnterpriseCode;
		    	orderModel.Order.OrderHeaderKey = order.OrderHeaderKey;
		    	orderModel.Order.AppContextInfo = {};
		    	orderModel.Order.AppContextInfo.Channel = order.EntryType;
		    	var pageInput = {input:orderModel};
	    	   iscWizard.gotoCustomPage('orderDetails',pageInput,{});
	       },
       	
	       /**
	        *@iscdoc uimethod
	        *@viewname store.views.return.customer-details.customer-details
	        *@methodname uiHandleSearchResult
			  *@description This method opens up a new page depending on what is searched in the return lookup.
			  *@param {Object} returnData - Search results
			  */
	      	uiHandleSearchResult : function(returnData) {
				var pageInput = {input:returnData.NextPage.model,callAPI:returnData.NextPage.callAPI};
				iscWizard.gotoCustomPage(returnData.NextPage.action,pageInput,{});
			},
			
	       /**
	        *@iscdoc uimethod
	        *@viewname store.views.return.customer-details.customer-details
	        *@methodname uiHandleReviewReturn
	        *@description Onclick handler function for review returns button. Opens up Returns List page
	        */
	       uiHandleReviewReturn:function(){
	           iscWizard.gotoCustomPage('returnsList',{input:this.model.returnOrder.Order.OrderHeaderKey},{});
	        },
        
	       /**
	        *@iscdoc uimethod
	        *@viewname store.views.return.customer-details.customer-details
	        *@methodname uiCancel
	        *@description Cancel button onclick handler for wizard. Shows confirmation message if return order is already created.
	        */
	       uiCancel : function(){
		       	iscReturn.handleWizardExit(this.ui.orderTotalQty);
		   },
	   
            /**
             *@iscdoc method
             *@viewname store.views.return.customer-details.customer-details
             *@methodname handleWizardBack
             *@description Onclick handler for the wizard back button. Takes back to the previous page. 
	  		 *If the previous page is home page and the return order is created a confirmation message is shown.
             */
            handleWizardBack:function(){
            	return iscReturn.handleWizardBack(false,this.ui.orderTotalQty);
            },
            /**
             *@iscdoc method
             *@viewname store.views.return.customer-details.customer-details
             *@methodname handleWizardExit
             *@description Onclick handler for the wizard exit. Shows confirmation message if return order is already created.
             */
			handleWizardExit:function(){
				return iscReturn.handleWizardExit(this.ui.orderTotalQty);
			},
			
			/**
	        *@description Calls getOrderList after applying the order filter criteria
	        */
			uiApplyFilterOnOrderList: function(getOrderListInputWithFilter){
	        	 iscMashup.callMashup(this,'getOrderList',getOrderListInputWithFilter,{}).then(function(data){
            		var output = iscMashup.getMashupOutput(data,'getOrderList');
            		var numOfOrders =  $filter('number')(output.OrderList.TotalNumberOfRecords);
                  	if(numOfOrders > 0) {
                  		output = iscOrder.stampDisplayStatusOnOrderList(output);
                  	}
            		this.updateOrderListModel(output);
            	}.bind(this),angular.noop);
	         },
	         
	         /**
		        *@description Calls getItemThumbnails mashup to show item images when the order is selected
		        */ 
	         uiSelectOrder : function(order){
		    	   
		    	   if(iscRule.isRuleEnabled('ShowItemImage') && iscCore.isVoid(order.ItemThumbnails)){
		    		   var getItemThumbnailsInput = {OrderLine:{OrderHeaderKey:order.OrderHeaderKey}}
		    		   iscMashup.callMashup(this,'getItemThumbnails',getItemThumbnailsInput,{}).then(function(data){
	               		var output = iscMashup.getMashupOutput(data,'getItemThumbnails');
	               		order.ItemThumbnails = output;
	               		this.ui.selectedOrderHeaderKey = order.OrderHeaderKey;
	               	}.bind(this),angular.noop);
		    	   }else{
		    		   this.ui.selectedOrderHeaderKey = order.OrderHeaderKey;
		    	   }
		       },
		       
	       /**
	        *@description Sets the styling for order status
	        */
	       uiGetCssClassByOrderStatus:function(order) {
	        	 return iscOrder.getCssClassByOrderStatus(order.MaxOrderStatus);
	         },
		         
	         /**
		        *@description Sets the localized status of the order
		        */
	         uiSetDisplayStatus:function(order){
	        	 order.DisplayStatus =  iscOrder.getDisplayStatus(order);
	         }
			
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
 /**
 *@iscdoc viewinfo
 *@viewname store.views.return.customer-list.customer-list
 *@package store.views.return.customer-list
 *@class customer-list
 *@description Displays the customer list.
 *
 */
angular.module('store').controller('store.views.return.customer-list.customer-list',
  ['$scope','$rootScope','iscScreen','iscWizard','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscReturn',
	function($scope,$rootScope,iscScreen,iscWizard,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscReturn) {
		
		iscWizard.initializeWizardPage($scope,{
           pageModel:{},
			model:{
                /**
                 *@iscdoc model
                 *@viewname store.views.return.customer-list.customer-list
                 *@name customerList
                 *@description Stores customer list
                 */
                "customerList":{},
                /**
                 *@iscdoc model
                 *@viewname store.views.return.customer-list.customer-list
                 *@name returnOrder
                 *@description Stores the return order details.
                 */
                "returnOrder":{},
                /**
				 *@iscdoc model
				 *@viewname store.views.return.add-return-item.add-return-item
				 *@name lookupConfig
				 *@description Stores the lookup type CUSTOMER that is associated with this page.
				 */
                "lookupConfig":{LookupType:"CUSTOMER"}
            },
            mashupRefs:[{
                /**
                 *@iscdoc mashup
                 *@viewname store.views.return.customer-list.customer-list
                 *@mashupid returnLookup_getCustomerList
                 *@mashuprefid getCustomerListPaginated
                 *@description Mashup used to list customers in a paginated way
                 */
                    mashupRefId: 'getCustomerListPaginated',
                    mashupId: 'returnLookup_getCustomerList',
                    isPaginated: true,
					pageSize : iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					appendPath : 'CustomerList.Customer',
					modelName:"customerList"
                     

                 }],
            ui:{
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.customer-list.customer-list
                *@property {Integer}  orderTotalQty - Total number of lines present in the order.
                */
                orderTotalQty: '0',
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.customer-list.customer-list
                *@property {String}  pageSize -Default number of order records to be shown while loading next records.
                */
                 pageSize: Number(iscAppContext.getFromContext("masterDataPageSize")),
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.return.customer-list.customer-list
                 *@property {String}  recordShownCount - Total number of order records displayed in the screen
                 */
                 recordShownCount: Number(iscAppContext.getFromContext("masterDataPageSize")),
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.customer-list.customer-list
                *@property {String}   apiPageSize - Number of records to be fetched by getOrderList API in one call.
                */
                apiPageSize:  Number(iscAppContext.getFromContext("listApiPageSize")),
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.customer-list.customer-list
                *@property {String}  noOfSearchResults - Number of search results
                */
                noOfSearchResults: 0,
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.customer-list.customer-list
                *@property {Boolean}  searchInProgress - True if mashup call is still in progress, false otherwise.
                */
                searchInProgress: false,
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.return.customer-list.customer-list
                 *@property {String}  hideSearch - Flag to hide or show the return lookup in the page
                 */
                hideSearch:'N',
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.return.customer-list.customer-list
                 *@property {String}  isListPage - Flag to display Customer Search Result count as the header. If false, then it is
                 *assumed to be a details page and Customer ID is displayed
                 */
                isListPage:true
            },
            
            /**
             *@iscdoc viewinit
             *@viewname store.views.return.customer-list.customer-list
             *@descriptionsets sets the customer list model using the output sent by the return lookup header
             */
            initialize: function(){
                  //this.ui.pageSize = iscAppContext.getFromContext("defaultPageSize");
                  var pageInput = iscWizard.getWizardPageInput();
                  var inputData = pageInput.input;
                  var callAPI = pageInput.callAPI;
                  
                  if(callAPI){
                	  
                  }else{
                	  this.handleGetCustomerListOutput(inputData,false);
                  }
                  iscReturn.setMiniCartParam(this);
                  $scope.$on('uiSearchClose',function(event,args){
				 	if (args){
						  $scope.ui.hideSearch = 'N';
				    }  
						   
				  });
                 
            },
            
         /**
         *@iscdoc uimethod
         *@viewname store.views.return.customer-list.customer-list
         *@methodname uiOpenCustomerDetails
         *@description onclick handler of View Order Details button, opens customer details page
         *param {Object} customer - customer details
         */
         uiOpenCustomerDetails:function(customer){
            if(!iscCore.isVoid(customer)){
            	var customerInput = {};
            	customerInput.Customer = customer;
            	var pageInput = {input:customerInput,callAPI:false};
                iscWizard.gotoCustomPage('customerDetails',pageInput,{});
            }
            else{
                   iscModal.showErrorMessage(iscI18n.translate('return.MSG_CustomerNotFound'));
            }
        },
        
        /**
         *@iscdoc uimethod
         *@viewname store.views.return.customer-list.customer-list
         *@methodname uigetNextCustomerRecords
         *@description Callback handler function of continuous scroll as user scrolls customer list.
         */
        uigetNextCustomerRecords: function(){
        	var custListModel = this.model.customerList.Page.Output.CustomerList;
        	var numRecordsInModel = custListModel.Customer.length;
        	console.log("numRecordsInModel="+numRecordsInModel);
        	if(numRecordsInModel - this.ui.recordShownCount >= this.ui.pageSize ){
                this.ui.recordShownCount+=this.ui.pageSize;
                console.log("Using existing model - doing client side pagination");
              }else{
            	  if(this.model.customerList.Page.IsLastPage != 'Y'){
            		  var data = custListModel.SearchText;
            		  var getCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:{DayPhone:data}}}};
            		 /* getCustomerListPaginatedInput.Page.PageNumber = +this.model.customerList.Page.PageNumber + 1;
            		  getCustomerListPaginatedInput.Page.PreviousPage = {};
            		  getCustomerListPaginatedInput.Page.PreviousPage.PageNumber = this.model.customerList.Page.PageNumber;
            		  getCustomerListPaginatedInput.Page.PreviousPage.Customer = {};
            		  getCustomerListPaginatedInput.Page.PreviousPage.Customer.CustomerKey = custListModel.Customer[numRecordsInModel-1].CustomerKey;*/
            		  
  				  console.log("calling API with input="+getCustomerListInput);
  				  this.ui.searchInProgress = true;
  				     iscMashup.callPaginatedMashup(this,'getCustomerListPaginated',getCustomerListInput,"NEXT",{}).then(function(data){
	            		/*var output = iscMashup.getMashupOutput(data,'getCustomerListPaginated');
	            		this.handleGetCustomerListOutput(output,true);*/
  				    	this.ui.searchInProgress = false;
  				    	this.uigetNextCustomerRecords();
	            	}.bind(this),angular.noop);
            	  }else{
            		  this.ui.recordShownCount = numRecordsInModel;
            		  console.log("not calling API but painting numItemsInModel="+numRecordsInModel+" items");
            	  }
            	 
              }
        },
        
       /**
        *@iscdoc uimethod
        *@viewname store.views.return.customer-list.customer-list
        *@methodname uiNextPageActionValidator
        *@description Determines if mashup call is in progress as user scrolls customer list.
        *@return {Boolean} - True if mashup call is not in progress, false otherwise. 
        */
        uiNextPageActionValidator: function(){
            if(!this.ui.searchInProgress){
                // mashup call not in progress. call next page handler
                return true;
            }
            else if(this.ui.searchInProgress){
                //mashup call in progress 
                return false;
            }
        },
        
        /**
         *@iscdoc uimethod
         *@viewname store.views.return.customer-list.customer-list
         *@methodname handleGetCustomerListOutput
         *@description Updates the customer list with the output of getCustomerListPaginated mashup
         */
            handleGetCustomerListOutput: function(output,onNext){
            	this.ui.searchInProgress = false;
     			 if(onNext){
     				//append the next page results with the total results
     				var recordList = output.Page.Output.CustomerList.Customer;
     				for(var i = 0;i < recordList.length; i++){
                           this.model.customerList.Page.Output.CustomerList.Customer.push(recordList[i]);
                   }
     				this.model.customerList.Page.PageNumber = output.Page.PageNumber;
     				this.model.customerList.Page.IsFirstPage = output.Page.IsFirstPage;
     				this.model.customerList.Page.IsLastPage = output.Page.IsLastPage;
     				this.uigetNextCustomerRecords();
     			 }else{
     				this.model.customerList =  output; 
         			 //this.ui.headerCustomerId = output.Page.Output.CustomerList.SearchText;
     				this.ui.headerProductId = iscI18n.translate('returnHeader.LABEL_Customer_Search_Result',{count:this.model.customerList.Page.Output.CustomerList.TotalNumberOfRecords});
     				
     				//following code is to set model for a paginated mashup call
     				this.pageModel.getCustomerListPaginated={};
     				this.pageModel.getCustomerListPaginated["0"] = {};	
     				this.pageModel.getCustomerListPaginated[output.Page.PageNumber] = output.Page.LastRecord;
     				this.pageModel.getCustomerListPaginated.currentPageNumber = output.Page.PageNumber;
     				this.pageModel.getCustomerListPaginated.IsLastPage = output.Page.IsLastPage;
     				this.pageModel.getCustomerListPaginated.IsFirstPage = output.Page.IsFirstPage;
     				this.pageModel.getCustomerListPaginated.IsValidPage = output.Page.IsValidPage;
     			 }
            	 
            },
            
            /**
             *@iscdoc uimethod
             *@viewname store.views.return.customer-list.customer-list
             *@methodname uiHandleSearchResult
	  		  *@description This method opens up a new page depending on what is searched in the return lookup.
	  		  *@param {Object} returnData - Search results
	  		  */
            uiHandleSearchResult : function(returnData) {
            	var pageInput = {input:returnData.NextPage.model,callAPI:returnData.NextPage.callAPI};
    			iscWizard.gotoCustomPage(returnData.NextPage.action,pageInput,{});
    		},
    		
            /**
             *@iscdoc uimethod
             *@viewname store.views.return.customer-list.customer-list
             *@methodname uiHandleReviewReturn
             *@description Onclick handler function for review returns button. Opens up Returns List page
             */
            uiHandleReviewReturn:function(){
                iscWizard.gotoCustomPage('returnsList',{input:this.model.returnOrder.Order.OrderHeaderKey},{});
             },
             
            /**
             *@iscdoc uimethod
             *@viewname store.views.return.customer-list.customer-list
             *@methodname uiCancel
             *@description Cancel button onclick handler for wizard. Shows confirmation message if return order is already created.
             */
            uiCancel : function(){
            	iscReturn.handleWizardExit(this.ui.orderTotalQty);
            },
            
            /**
             *@iscdoc method
             *@viewname store.views.return.customer-list.customer-list
             *@methodname handleWizardBack
             *@description Onclick handler for the wizard back button. Takes back to the previous page. 
	  		 *If the previous page is home page and the return order is created a confirmation message is shown.
             */
            handleWizardBack:function(){
            	return iscReturn.handleWizardBack(false,this.ui.orderTotalQty);
            },
            /**
             *@iscdoc method
             *@viewname store.views.return.customer-list.customer-list
             *@methodname handleWizardExit
             *@description Onclick handler for the wizard exit. Shows confirmation message if return order is already created.
             */
			handleWizardExit:function(){
				return iscReturn.handleWizardExit(this.ui.orderTotalQty);
			}
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
 /**
 *@iscdoc viewinfo
 *@viewname store.views.return.item-list.exchange-item-list
 *@package store.views.return.item-list
 *@class exchange-item-list
 *@description Provides the capability to search for products and view search results.
 *
 */
angular.module('store').controller('store.views.return.item-list.exchange-item-list',
  ['$animate','$scope','$rootScope','iscScreen','iscWizard','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext',
	function($animate,$scope,$rootScope,iscScreen,iscWizard,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext) {
		
		iscWizard.initializeWizardPage($scope,{
            model:{
                /**
                 *@iscdoc model
                 *@viewname store.views.return.item-list.exchange-item-list
                 *@name searchProductsResult
                 *@description Stores the searchCatalogIndex mashup output.
                 */
                "searchProductsResult":{},
                /**
                 *@iscdoc model
                 *@viewname store.views.return.item-list.exchange-item-list
                 *@name searchCatalogIndexInput
                 *@description searchCatalogIndex mashup input object.
                 */
                "searchCatalogIndexInput":{},
                /**
                 *@iscdoc model
                 *@viewname store.views.return.item-list.exchange-item-list
                 *@name orderDetails
                 *@description Stores the getCompleteOrderDetails mashup output.
                 */
                "orderDetails":{}
            },
            mashupRefs:[{
                /**
                *@iscdoc mashup
                *@viewname store.views.return.item-list.exchange-item-list
                *@mashupid itemSearch_searchCatalogIndex
                *@mashuprefid searchProducts
                *@description Mashup used to search for products.
                */
                    mashupRefId: 'searchProducts',
                    mashupId: 'itemSearch_searchCatalogIndex'

                },
                {
                /**
                *@iscdoc mashup
                *@viewname store.views.return.item-list.exchange-item-list
                *@mashupid addItems_getCompleteOrderDetails
                *@mashuprefid getCompleteOrderDetails
                *@modelname orderDetails
                *@description Mashup used to get no of products in order if order is created.
                */
                    mashupRefId: 'getCompleteOrderDetails',
                    mashupId: 'itemSearch_getCompleteOrderDetails',
                    modelName : 'orderDetails'
                }],
            ui:{
               /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.exchange-item-list
                *@property {Integer}  productSearchPageNo - Default page number while searching for products.
                */
                productSearchPageNo: "1",
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.exchange-item-list
                *@property {String}  searchInput - Product search input value entered by user,blank by default.
                */
                searchInput:"",
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.exchange-item-list
                *@property {Integer}  orderTotalQty - Total number of products present in the order.
                */
                orderTotalQty: '0',
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.exchange-item-list
                *@property {String}  pageSize - Default number of records to be shown in view during product search.
                */
                pageSize: '',
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.exchange-item-list
                *@property {String}  noOfSearchResults - Displays the number of products shown in view.
                */
                noOfSearchResults: 0,
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.exchange-item-list
                *@property {Boolean}  searchInProgress - True is mashup call is still in progress,false otherwise.
                */
                searchInProgress: false,
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.exchange-item-list
                *@property {Boolean}  focusScanField - True if focus is to be set on search field,false otherwise.
                */
                focusScanField : true
            },
            /**
             *@iscdoc viewinit
             *@viewname store.views.return.item-list.exchange-item-list
             *@description Searches the product using the input passed to the view, gets order details if order is already created.
             */
            initialize: function(){
            	$rootScope.$showBackButtonForStates = false;
                  this.ui.pageSize = iscAppContext.getFromContext("defaultPageSize");
                  var pageInput = iscWizard.getWizardPageInput();
                  var operation = pageInput.operation;
                  var inputData = pageInput.input;
                  var orderDetails = iscWizard.getWizardModel("orderModel");
                  if(!iscCore.isVoid(orderDetails) && !iscCore.isVoid(orderDetails.Order.OrderHeaderKey)){
                           var getOrderDetailsInput = {
                                Order:{
                                    OrderHeaderKey: orderDetails.Order.OrderHeaderKey
                                }
                           };
                           iscMashup.callMashup(this,'getCompleteOrderDetails',getOrderDetailsInput,{}).then(function(){
                               orderDetails = this.model.orderDetails;
                               iscWizard.setWizardModel("orderModel",this.model.orderDetails);
                               this.ui.orderTotalQty = orderDetails.Order.OrderLines.TotalNumberOfRecords;
                           }.bind(this),angular.noop);
                   }
                   if(!iscCore.isVoid(pageInput.CatalogSearch)){
                           this.ui.productSearchPageNo = 1;
                           if(!iscCore.isVoid(pageInput.SearchText)){
                               // set the input model,which will be used for continuous scroll.
                               this.model.searchCatalogIndexInput = {
                                   CatalogSearch:{
                                       Terms:{
                                           Term:{
                                               Value: pageInput.SearchText
                                           }
                                       }
                                   }
                               };
                           }
                           this.handleSearchCatalogIndex(pageInput);
                   }
                   else{
                       //call searchCatalogIndex api and show results.
                       this.searchProduct('search',inputData);
                   }
            },
         /**
         *@iscdoc uimethod
         *@viewname store.views.return.item-list.exchange-item-list
         *@methodname uiOpenItemDetails
         *@description Onclick handler for scan icon in search product input box.Opens product details view using the product identifier.
         *param {String} itemId - Product unique identifier.
         */
         uiOpenItemDetails:function(itemId){
            if(!iscCore.isVoid(itemId)){
                iscWizard.gotoCustomPage('addItems',{input: itemId},{removeCurrent:true,wizardPageCssClass:"fullscreen-modal"});
            }
            else{
                   iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
            }
        },
        /**
         *@iscdoc uimethod
         *@viewname store.views.return.item-list.exchange-item-list
         *@methodname uiHandleCheckout
         *@description Onclick handler for checkout button in view.Opens cart details page if order is already created.
         */
        uiHandleCheckout:function(){
           iscWizard.gotoCustomPage('cartDetails',{},{});
        },
        /**
         *@iscdoc uimethod
         *@viewname store.views.return.item-list.exchange-item-list
         *@methodname uiCancel
         *@description Cancel button onclick handler for wizard.Shows confirmation message,if yes then closes the wizard.
         */
        uiCancel : function(){
        	
        	iscWizard.gotoPreviousPage(true);
        	/*
            var confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
            if(this.ui.orderTotalQty < 1){
                confirmationMsg = iscI18n.translate('addItems.WarningMessage_Cancel');
            }
            iscModal.showConfirmationMessage(confirmationMsg).then(
                function(callBackAction){
                    //
                    if(callBackAction === 'YES'){
                        iscWizard.closeWizard();
                    }
                },
                function(callBackAction){
                    //      Do Nothing
                    
                });
            //iscWizard.closeWizard();
        */},
        /**
         *@iscdoc uimethod
         *@viewname store.views.return.item-list.exchange-item-list
         *@methodname uiOpenProductSearch
         *@description Onclick handler function for search icon in scan field.Opens dirty popup if screen is dirty
         * and based on action selected opens search product wizard page or stays in the same screen.
         *@param {String} searchTxt - Input to search for matching products.
         */
        uiOpenProductSearch: function(searchText){
            if(iscCore.isVoid(searchText)){
                iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
            }
            else{
                iscWizard.gotoCustomPage('productSearch',{input: searchText},{});
            }
        },
        /**
         *@iscdoc uimethod
         *@viewname store.views.return.item-list.exchange-item-list
         *@methodname uiSearchProductGetNextRecords
         *@description Callback handler function of continuous scroll as user scrolls product search results.
         *@param {String} searchTxt - Input to search for matching products.
         */
        uiSearchProductGetNextRecords: function(){
            if((this.ui.productSearchPageNo + 1) <= this.model.searchProductsResult.CatalogSearch.TotalPages){
                this.ui.productSearchPageNo++;
                this.searchProduct("Next");
            }
        },
       /**
        *@iscdoc uimethod
        *@viewname store.views.return.item-list.exchange-item-list
        *@methodname uiNextPageActionValidator
        *@description Determines if mashup call is in progress as user scrolls product search results.
        *@return {Boolean} -True if mashup call is in progress, false otherwise.
        */
        uiNextPageActionValidator: function(){
            if(!this.ui.searchInProgress){
                // mashup call not in progress. call next page handler
                return true;
            }
            else if(this.ui.searchInProgress){
                //mashup call in progress 
                return false;
            }
        },
       /**
        *@iscdoc uimethod
        *@viewname store.views.return.item-list.exchange-item-list
        *@methodname getOrderDetails
        *@description Read the order model stored at wizard and updates the total no of products for minicart.
        */
        getOrderDetails: function(){
            var orderModel = iscWizard.getWizardModel('orderModel');
            if(!iscCore.isVoid(orderModel)){
                this.model.orderDetails = orderModel;
                this.ui.orderTotalQty = orderModel.Order.OrderLines.TotalNumberOfRecords;
            }
        },
       /**
        *@iscdoc uimethod
        *@viewname store.views.return.item-list.exchange-item-list
        *@methodname searchProduct
        *@description Invokes the searchProduct mashup using input passed and paints the search results.
        *@action {String} action - Attribute used to check if mashup is invoked during continuous scroll.
        *@input {String} input - Search text.
        */
        searchProduct: function(action,input){
            if(action === 'Next'){
                // continuous scroll. hence input will be old search input value.
                input = this.model.searchCatalogIndexInput.CatalogSearch.Terms.Term.Value;
            }
            this.ui.searchInput = input;
            if(!iscCore.isVoid(input)){
                this.setSearchCatalogIndexInput(input);
                if(action === 'newSearch'){
                    this.model.searchProductsResult = {};
                    this.ui.productSearchPageNo = 1;
                }
                this.model.searchCatalogIndexInput.CatalogSearch.PageNumber = this.ui.productSearchPageNo;
                this.ui.searchInProgress = true;
                iscMashup.callMashup(this,"searchProducts",this.model.searchCatalogIndexInput,{}).then(function(data){
                            var output = iscMashup.getMashupOutput(data,'searchProducts');
                            this.handleSearchCatalogIndex(output);
                    }.bind(this),angular.noop);
            }
            else{
                iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
            }
        },
       /**
        *@iscdoc uimethod
        *@viewname store.views.return.item-list.exchange-item-list
        *@methodname setSearchCatalogIndexInput
        *@description Updates the search product mashup input object using the input.
        *@input {String} input - Search text.
        */
        setSearchCatalogIndexInput: function(input){
              this.model.searchCatalogIndexInput.CatalogSearch = {
                 PageSize :this.ui.pageSize,
                  Terms:{
                     Term:{
                        Value: input
                     }
                  }
              };
              var orderModel = iscWizard.getWizardModel("orderModel");
              if(!iscCore.isVoid(orderModel)){
                  var customerId = iscCore.getValueFromJsonPath(orderModel,"Order.BillToID");
                  if(!iscCore.isVoid(customerId)){
                      this.model.searchCatalogIndexInput.CatalogSearch.Item = {
                          CustomerInformation:{
                              CustomerID: customerId
                          }
                      };
                  }
              }
            },
           /**
            *@iscdoc uimethod
            *@viewname store.views.return.item-list.exchange-item-list
            *@methodname handleSearchCatalogIndex
            *@description SearchCatalogIndex mashup success callback handler function.If data is present then paints search
            * results else displays message.
            *@input {Object} output - SearchCatalogIndex mashup output object.
            */
            handleSearchCatalogIndex: function(output){
               this.ui.searchInProgress = false;
               this.getOrderDetails();
               var itemList = output.CatalogSearch.ItemList.Item;
               this.ui.focusScanField = true;
                if(iscCore.isVoid(itemList) && iscCore.isVoid(this.model.searchProductsResult)){
                    // if item list from api output is empty and searchProductsResult model is blank
                    this.ui.noProductsFound = true;
                  this.ui.noOfSearchResults = 0;
                }
                else{
                    this.ui.showSearchResults = true;
                    this.ui.noProductsFound = false;
                    this.ui.noOfSearchResults += itemList.length;
                    // if empty, then set model with api output
                    if(iscCore.isVoid(this.model.searchProductsResult)){
                        this.model.searchProductsResult =  output;
                    }
                    else if(!iscCore.isVoid(itemList)){
                        // if itemlist not empty, and  searchProductResult product also not empty, then
                        // continuous scrolling is performed in ui. hence append items to search results.
                        for(var i = 0;i < itemList.length; i++){
                        // TODO: move below code to model.srvc appendToModel() and use here.
                            this.model.searchProductsResult.CatalogSearch.ItemList.Item.push(itemList[i]);
                        }
                    }
                }
            },
            /**
             *@iscdoc method
             *@viewname store.views.return.item-list.exchange-item-list
             *@methodname handleWizardBack
             *@description Onclick handler for the wizard back button.Displays screen dirty check popup if
             *screen is dirty,opens previous page of wizard otherwise.
             */
            handleWizardBack:function(){
                var isFirstPage = iscWizard.isFirstPage();
                if(isFirstPage){
                    this.uiCancel();
                    return true;
                }
                else{
                    return false;
                }
            },
            /**
             *@iscdoc method
             *@viewname store.views.return.item-list.exchange-item-list
             *@methodname handleWizardExit
             *@description Onclick handler for the wizard cancel button.Displays screen dirty check popup if
             *screen is dirty,closes the wizard otherwise.
             */
			handleWizardExit:function(){
				var confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
				if(this.ui.orderTotalQty < 1){
						confirmationMsg = iscI18n.translate('addItems.WarningMessage_Cancel');
				}
				iscModal.showConfirmationMessage(confirmationMsg).then(
					function(callBackAction){
							//
							if(callBackAction === 'YES'){
									iscWizard.exitWizard();
							}
					},
					function(callBackAction){
							//      Do Nothing

					});
				return true;
			}
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
 /**
 *@iscdoc viewinfo
 *@viewname store.views.return.item-list.return-item-list
 *@package store.views.return.item-list
 *@class return-item-list
 *@description Displays the product list.
 *
 */
angular.module('store').controller('store.views.return.item-list.return-item-list',
  ['$animate','$scope','$rootScope','iscScreen','iscWizard','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscReturn','iscState',
	function($animate,$scope,$rootScope,iscScreen,iscWizard,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscReturn,iscState) {
		
		iscWizard.initializeWizardPage($scope,{
            model:{
                /**
                 *@iscdoc model
                 *@viewname store.views.return.item-list.return-item-list
                 *@name searchProductsResult
                 *@description Stores the searchCatalogIndex mashup output.
                 */
                "searchProductsResult":{},
                /**
                 *@iscdoc model
                 *@viewname store.views.return.item-list.return-item-list
                 *@name searchCatalogIndexInput
                 *@description searchCatalogIndex mashup input object.
                 */
                "searchCatalogIndexInput":{},
                /**
                 *@iscdoc model
                 *@viewname store.views.return.item-list.return-item-list
                 *@name returnOrder
                 *@description Stores the return order details.
                 */
                "returnOrder":{},
                /**
				 *@iscdoc model
				 *@viewname store.views.return.add-return-item.add-return-item
				 *@name lookupConfig
				 *@description Stores the lookup type PRODUCT that is associated with this page.
				 */
                "lookupConfig":{LookupType:"PRODUCT"}
            },
            mashupRefs:[{
                /**
                *@iscdoc mashup
                *@viewname store.views.return.item-list.return-item-list
                *@mashupid returnLookup_searchCatalogIndex
                *@mashuprefid searchProducts
                *@description Mashup used to search for products.
                */
                    mashupRefId: 'searchCatalogIndex',
                    mashupId: 'returnLookup_searchCatalogIndex'

                }],
            ui:{
               /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.return-item-list
                *@property {Integer}  productSearchPageNo - Default page number while searching for products.
                */
                productSearchPageNo: "1",
                
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.return-item-list
                *@property {Integer}  orderTotalQty - Total number of line present in the order. Used for minicart.
                */
                orderTotalQty: '0',
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.return-item-list
                *@property {String} pageSize -Default number of order records to be shown while loading next records.
                */
                pageSize: iscAppContext.getFromContext("defaultPageSize"),
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.return.item-list.return-item-list
                 *@property {String}  itemShownCount -  Total number of product records displayed in the screen
                 */
                 itemShownCount:iscAppContext.getFromContext("defaultPageSize"),
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.return-item-list
                *@property {String} apiPageSize - Number of records to be fetched by searchCatalogIndex API in one call.
                */
                apiPageSize: iscAppContext.getFromContext("defaultPageSize"),
                /**
                *@iscdoc uiattr
                *@viewname store.views.return.item-list.return-item-list
                *@property {Boolean} searchInProgress - True if mashup call is still in progress, false otherwise.
                */
                searchInProgress: false,
                /**
				 *@iscdoc uiattr
				 *@viewname store.views.return.item-list.return-item-list
				 *@property {String}  hideSearch - Flag to hide or show the return lookup in the page
				 */
                hideSearch:'N',
                /**
                 *@iscdoc uiattr
                 *@viewname store.views.return.item-list.return-item-list
                 *@property {String}  isListPage - Flag to display Product Search Result count as the header. If false, then it is
                 *assumed to be a details page and Product ID is displayed
                 */
                isListPage:true
            },
            /**
             *@iscdoc viewinit
             *@viewname store.views.return.item-list.return-item-list
             *@description sets the item list model using the output sent by the return lookup header
             */
            initialize: function(){
                  var pageInput = iscWizard.getWizardPageInput();
                  var operation = pageInput.operation;
                  var inputData = pageInput.input;
                  var callAPI = pageInput.callAPI;
                  
                  if(callAPI){
                	  
                  }else{
                	  this.handleSearchCatalogIndexOutput(inputData,false);
                  }
                  iscReturn.setMiniCartParam(this);
                   $scope.$on('uiSearchClose',function(event,args){
					 	if (args){
							  $scope.ui.hideSearch = 'N';
					    }  
							   
					});
            },
            
         /**
         *@iscdoc uimethod
         *@viewname store.views.return.item-list.return-item-list
         *@methodname uiOpenItemDetails
         *@description Onclick handler to view product details.
         *param {String} itemId - Product unique identifier.
         */
         uiOpenItemDetails:function(itemId){
            if(!iscCore.isVoid(itemId)){
            	var pageInput = {input:itemId,callAPI:true};
                iscWizard.gotoCustomPage('addReturnItem',pageInput,{});
            }
            else{
                   iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
            }
        },
        
       
        /**
         *@iscdoc uimethod
         *@viewname store.views.return.item-list.return-item-list
         *@methodname uiSearchProductGetNextRecords
         *@description Callback handler function of continuous scroll as user scrolls product search results.
         */
        uiSearchProductGetNextRecords: function(){
            /*if((this.ui.productSearchPageNo + 1) <= this.model.searchProductsResult.CatalogSearch.TotalPages){
                this.ui.productSearchPageNo++;
                this.searchProduct("Next");
            }*/
        	/**
        	 * Let's say ui.pageSize is 5 and apiPageSize is 100. If 5 records are available in the current model,
        	 * paint those. If less than 5 are available, get more records from API call and then paint 5 or less (whatever is the output)
        	 * But if this was the last of the pages (no more records are available, then paint whatever remains)
        	 */
        	var catalogSearchModel = this.model.searchProductsResult.CatalogSearch;
        	var numItemsInModel = catalogSearchModel.ItemList.Item.length
        	console.log("numItemsInModel="+numItemsInModel);
        	if(numItemsInModel - this.ui.itemShownCount >= this.ui.pageSize ){
                this.ui.itemShownCount+=this.ui.pageSize;
                console.log("Using existing model - doing client side pagination");
              }else{
            	  if(catalogSearchModel.PageNumber < catalogSearchModel.TotalPages){
            		  
            		  var searchCatalogIndexInput = {CatalogSearch:{Terms:{Term:{Value:catalogSearchModel.SearchText}}}};
  				    //searchCatalogIndexInput.CatalogSearch.PageSize = iscAppContext.getFromContext("defaultPageSize");
  				      searchCatalogIndexInput.CatalogSearch.PageSize = this.ui.apiPageSize;
  				    searchCatalogIndexInput.CatalogSearch.PageNumber = +catalogSearchModel.PageNumber + 1;
  				  console.log("calling API with page number="+searchCatalogIndexInput.CatalogSearch.PageNumber);
  				  this.ui.searchInProgress = true;
  				     iscMashup.callMashup(this,'searchCatalogIndex',searchCatalogIndexInput,{}).then(function(data){
	            		var output = iscMashup.getMashupOutput(data,'searchCatalogIndex');
	            		this.handleSearchCatalogIndexOutput(output,true);
	            	}.bind(this),angular.noop);
            	  }else{
            		  this.ui.itemShownCount = numItemsInModel;
            		  console.log("not calling API but painting numItemsInModel="+numItemsInModel+" items");
            	  }
            	 
              }
        },
        
       /**
        *@iscdoc uimethod
        *@viewname store.views.return.item-list.return-item-list
        *@methodname uiNextPageActionValidator
        *@description Determines if mashup call is in progress as user scrolls product search results.
        *@return {Boolean} -True if mashup call is not in progress, false otherwise.
        */
        uiNextPageActionValidator: function(){
            if(!this.ui.searchInProgress){
                // mashup call not in progress. call next page handler
                return true;
            }
            else if(this.ui.searchInProgress){
                //mashup call in progress 
                return false;
            }
        },
        
        /**
         *@iscdoc uimethod
         *@viewname store.views.return.item-list.return-item-list
         *@methodname handleSearchCatalogIndexOutput
         *@description Updates the product list with the output of searchCatalogIndex mashup
         */
            handleSearchCatalogIndexOutput: function(output, onNext){
            	this.ui.searchInProgress = false;
      			 if(onNext){
      				//append the next page results with the total results
      				var itemList = output.CatalogSearch.ItemList.Item;
      				for(var i = 0;i < itemList.length; i++){
                            this.model.searchProductsResult.CatalogSearch.ItemList.Item.push(itemList[i]);
                    }
      				this.model.searchProductsResult.CatalogSearch.PageNumber = output.CatalogSearch.PageNumber;
      				this.uiSearchProductGetNextRecords();
      			 }else{
      				 if(!iscCore.isVoid(output.CatalogSearch)){
       					this.model.searchProductsResult =  output; 
             			 //this.ui.headerProductId = output.CatalogSearch.SearchText;
          				this.ui.headerProductId = iscI18n.translate('returnHeader.LABEL_Product_Search_Result',{count:this.model.searchProductsResult.CatalogSearch.TotalHits});
       				 }else{
       					this.ui.headerProductId ='';
       					this.ui.hideSearch ='Y';
       				 }
      			 }
            },
            
            /**
             *@iscdoc uimethod
             *@viewname store.views.return.item-list.return-item-list
             *@methodname uiHandleSearchResult
	  		  *@description This method opens up a new page depending on what is searched in the return lookup.
	  		  *@param {Object} returnData - Search results
	  		  */
            uiHandleSearchResult : function(returnData) {
    			var pageInput = {input:returnData.NextPage.model,callAPI:returnData.NextPage.callAPI};
    			iscWizard.gotoCustomPage(returnData.NextPage.action,pageInput,{});
    		},
    		
            /**
             *@iscdoc uimethod
             *@viewname store.views.return.item-list.return-item-list
             *@methodname uiHandleReviewReturn
             *@description Onclick handler function for review returns button. Opens up Returns List page
             */
            uiHandleReviewReturn:function(){
                iscWizard.gotoCustomPage('returnsList',{input:this.model.returnOrder.Order.OrderHeaderKey},{});
             },
            /**
             *@iscdoc uimethod
             *@viewname store.views.return.item-list.return-item-list
             *@methodname uiCancel
             *@description Cancel button onclick handler for wizard. Shows confirmation message if return order is already created.
             */
            uiCancel : function(){
            	iscReturn.handleWizardExit(this.ui.orderTotalQty);
            },
            
            /**
             *@iscdoc method
             *@viewname store.views.return.item-list.return-item-list
             *@methodname handleWizardBack
             *@description Onclick handler for the wizard back button. Takes back to the previous page. 
	  		 *If the previous page is home page and the return order is created a confirmation message is shown.
             */
            handleWizardBack:function(){
            	if(!iscCore.isVoid(iscReturn.getReturnHeaderKeyFromWizard())) {
            		return iscReturn.handleWizardBack(false,this.ui.orderTotalQty);
            	} else {
            		return false;
            	}
            },
            /**
             *@iscdoc method
             *@viewname store.views.return.item-list.return-item-list
             *@methodname handleWizardExit
             *@description Onclick handler for the wizard exit. Shows confirmation message if return order is already created.
             */
			handleWizardExit:function(){
				return iscReturn.handleWizardExit(this.ui.orderTotalQty);
			}
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.return.payment.return-capture-payment
 *@package store.views.return.payment
 *@class return-capture-payment
 *@description Displays the capture payment screen in create return flow.
 *
 */
	angular.module('store').controller('store.views.return.payment.return-payment',
	  ['$animate','$scope','$rootScope','iscScreen','iscWizard','$location','$filter','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscObjectUtility','iscPayment','iscPaymentinput','iscOrder', 'iscReturn', 
		function($animate,$scope,$rootScope,iscScreen,iscWizard,$location,$filter,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscObjectUtility,iscPayment,iscPaymentinput,iscOrder,iscReturn) {			
			iscWizard.initializeWizardPage($scope,{
					/**
				       *ModelList
				       *Models that hold data
				       * 
				       */
					model:{
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getCountryList
				           *@description This model contains the getCommonCodeList api output to get list of countries.
				           */
						"getCountryList":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getCurrencyList
				           *@description This model contains the getCurrency api output.
				           */
						"getCurrencyList":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getRulesDetails_ReatTimeAuth
				           *@description This model contains the getRuleDetails api output for WSC_STORE_REAL_TIME_AUTHORIZATION.
				           */
						"getRulesDetails_ReatTimeAuth":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getRulesDetails_PaymentAttrEncrypt
				           *@description This model contains the getRuleDetails api output for ENCRYPT_ADDNL_ATTRIBUTES_CREDIT_CARD_PAYMENT_TYPE_GROUP.
				           */
						"getRulesDetails_PaymentAttrEncrypt":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getRulesDetails_CreditCardName
				           *@description This model contains the getRuleDetails api output for WSC_STORE_USE_CREDIT_CARD_NAME.
				           */
						"getRuleDetails_CCName":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getRuleDetails_ChargeShipLines
				           *@description This model contains the getRuleDetails api output for CHARGE_SHIP_LINES_AT_STORE.
				           */
						"getRuleDetails_ChargeShipLines":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getRuleDetails_PostponePickupPayment
				           *@description This model contains the getRuleDetails api output for POSTPONE_PMNT_PROSSESSING_TILL_PICKUP.
				           */
						"getRuleDetails_PostponePickupPayment":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getPaymentTypeList
				           *@description This model contains the getPaymentTypeList api output.
				           */
						"getPaymentTypeList":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getPaymentCardTypeList
				           *@description This model contains the getPaymentCardTypeList api output to get the list of credit card types.
				           */
						"getPaymentCardTypeList":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getExchangePaymentCardTypeList
				           *@description This model contains the getPaymentCardTypeList api output to get the list of credit card types for exchange order Document Type.
				           */
						"getExchangePaymentCardTypeList":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name getCompleteOrderDetails
				           *@description This model contains the getCompleteOrderDetails api output.
				           */
						"getCompleteOrderDetails":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name returnOrderDetails
				           *@description This model contains the getCompleteOrderDetails api output for return order.
				           */
						"returnOrderDetails":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name exchangeOrderModel
				           *@description This model contains the exchangeOrder details.
				           */
						"exchangeOrderModel":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name capturePayment
				           *@description This model contains the capturePayment api output.
				           */
						"capturePayment":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name computeRefundPayments
				           *@description This model contains the computeRefundPayments api output.
				           */
						"computeRefundPayments":{},
						/**
				           *@iscdoc model
				  		   *@viewname store.views.return.payment.return-payment
				           *@name newPaymentMethods
				           *@description This model contains the payment attributes.
				           */
						"newPaymentMethods":{}
					},
					 /**
				       *MashupRefs
				       *array containing the list of mashups referred in this controller
				       */
					mashupRefs:[
								{
								/**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_common_getCountryList
								*@mashuprefid getCountryList
								*@modelname getCountryList
								*@description This mashup is used to get list of countries.
								*/
					            	mashupRefId: 'getCountryList',
					            	mashupId: 'wsc_common_getCountryList',
					            	modelName : 'getCountryList'
					            },
					            {
								/**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_common_getCurrencyList
								*@mashuprefid getCurrencyList
								*@modelname getCurrencyList
								*@description This mashup is used to get list of currencies.
								*/
					            	mashupRefId: 'getCurrencyList',
					            	mashupId: 'wsc_paymentCapture_getCurrencyList',
					            	modelName : 'getCurrencyList'
					            },
					            {
								/**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_RealTimeAuthorization
								*@mashuprefid getRulesDetails_ReatTimeAuth
								*@modelname getRulesDetails_ReatTimeAuth
								*@description This mashup is used to get rule details of the Rule 'WSC_STORE_REAL_TIME_AUTHORIZATION' for the Store's Enterprise.
								*/
					            	mashupRefId: 'getRulesDetails_ReatTimeAuth',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_RealTimeAuthorization',
					            	modelName : 'getRulesDetails_ReatTimeAuth'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentCapture_getRulesDetails_PaymentAttrEncrypt
								*@mashuprefid getRulesDetails_PaymentAttrEncrypt
								*@modelname getRulesDetails_PaymentAttrEncrypt
								*@description This mashup is used to get rule details of the Hub Rule 'ENCRYPT_ADDNL_ATTRIBUTES_CREDIT_CARD_PAYMENT_TYPE_GROUP'.
								*/
					            	mashupRefId: 'getRulesDetails_PaymentAttrEncrypt',
					            	mashupId: 'wsc_paymentCapture_getRulesDetails_PaymentAttrEncrypt',
					            	modelName : 'getRulesDetails_PaymentAttrEncrypt'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_CCName
								*@mashuprefid getRuleDetails_CCName
								*@modelname getRuleDetails_CCName
								*@description This mashup is used to get rule details of the Rule 'WSC_STORE_USE_CREDIT_CARD_NAME' for the Store's Enterprise.
								*/
					            	mashupRefId: 'getRuleDetails_CCName',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_CCName',
					            	modelName : 'getRuleDetails_CCName'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_ChargeShipLines
								*@mashuprefid getRuleDetails_ChargeShipLines
								*@modelname getRuleDetails_ChargeShipLines
								*@description This mashup is used to get rule details of the Rule 'CHARGE_SHIP_LINES_AT_STORE' for the Store's Enterprise.
								*/
					            	mashupRefId: 'getRuleDetails_ChargeShipLines',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_ChargeShipLines',
					            	modelName : 'getRuleDetails_ChargeShipLines'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_PostponePickupPayment
								*@mashuprefid getRuleDetails_PostponePickupPayment
								*@modelname getRuleDetails_PostponePickupPayment
								*@description This mashup is used to get rule details of the Rule 'POSTPONE_PMNT_PROSSESSING_TILL_PICKUP' for the Store's Enterprise.
								*/
					            	mashupRefId: 'getRuleDetails_PostponePickupPayment',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_PostponePickupPayment',
					            	modelName : 'getRuleDetails_PostponePickupPayment'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentCapture_getPaymentTypeList
								*@mashuprefid getPaymentTypeList
								*@modelname getPaymentTypeList
								*@description This mashup is used to get list of payment types for the current Store.
								*/
					            	mashupRefId: 'getPaymentTypeList',
					            	mashupId: 'wsc_paymentCapture_getPaymentTypeList',
					            	modelName : 'getPaymentTypeList'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_PaymentCardTypeConfLevel
								*@mashuprefid getPaymentCardTypeList
								*@modelname getPaymentCardTypeList
								*@description This mashup is used to get list of payment card types (credit card types) for the current Store.
								*/
					            	mashupRefId: 'getPaymentCardTypeList',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_PaymentCardTypeConfLevel',
					            	modelName : 'getPaymentCardTypeList'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentCapture_getRuleDetails_PaymentCardTypeConfLevel
								*@mashuprefid getExchangePaymentCardTypeList
								*@modelname getExchangePaymentCardTypeList
								*@description This mashup is used to get list of payment card types (credit card types) for the current Store for exchange order document type.
								*/
					            	mashupRefId: 'getExchangePaymentCardTypeList',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_PaymentCardTypeConfLevel',
					            	modelName : 'getExchangePaymentCardTypeList'
					            },
					            {
								/**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentConfirmation_getCompleteReturnOrderDetails
								*@mashuprefid getCompleteOrderDetails
								*@modelname getCompleteOrderDetails
								*@description This mashup is used to get complete order details for the order.
								*/
					            	mashupRefId: 'getCompleteOrderDetails',
					            	mashupId: 'wsc_paymentConfirmation_getCompleteReturnOrderDetails',
					            	modelName : 'getCompleteOrderDetails'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentConfirmation_capturePayment
								*@mashuprefid capturePayment
								*@modelname capturePayment
								*@description This mashup is used to capture payment details on the order for capturePayment API call.
								*/
					            	mashupRefId: 'capturePayment',
					            	mashupId: 'wsc_paymentConfirmation_capturePayment',
					            	modelName : 'capturePayment'
					            },
					            {
								/**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentConfirmation_capturePayment
								*@mashuprefid deletePayment
								*@modelname capturePayment
								*@description This mashup is used to delete a payment method from the order.
								*/
					            	mashupRefId: 'deletePayment',
					            	mashupId: 'wsc_paymentConfirmation_capturePayment',
					            	modelName : 'capturePayment'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentConfirmation_capturePayment
								*@mashuprefid resumePayment
								*@modelname capturePayment
								*@description This mashup is used to resume a suspended payment method on the order.
								*/
					            	mashupRefId: 'resumePayment',
					            	mashupId: 'wsc_paymentConfirmation_capturePayment',
					            	modelName : 'capturePayment'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_paymentConfirmation_computeRefundPayments
								*@mashuprefid computeRefundPayments
								*@modelname computeRefundPayments
								*@description This mashup is used to compute refund payments on the return order.
								*/
					            	mashupRefId: 'computeRefundPayments',
					            	mashupId: 'wsc_paymentConfirmation_computeRefundPayments',
					            	modelName : 'computeRefundPayments'
					            },
					            {
					            /**
						        *@iscdoc mashup
								*@viewname store.views.return.payment.return-payment
								*@mashupid wsc_returnOrder_oneClickCapturePayAndRefundConfirm
								*@mashuprefid oneClickCapturePayAndRefundConfirm
								*@modelname oneClickCapturePayAndRefundConfirm
								*@description This mashup is called on click of Pay button to capture, process payment and confirm the order.
								*/
					            	mashupRefId: 'oneClickCapturePayAndRefundConfirm',
					            	mashupId: 'wsc_returnOrder_oneClickCapturePayAndRefundConfirm',
					            	modelName : 'oneClickCapturePayAndRefundConfirm'
					            }
					            
		            ],
		            ui:{
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {String}  orderBillToKey - BillToKey on the order.
						*/
		            	orderBillToKey : "",
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {String}  orderShipToKey - ShipToKey on the order.
						*/
		            	orderShipToKey : "",
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {String}  orderHeaderKey - OrderHeaderKey of the order.
						*/
		            	orderHeaderKey : "",
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Object} wizardOrderModel - Order model object on the wizard.
						*/
		            	wizardOrderModel: "",
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {String} orderCurrency - Order currency.
						*/
		            	orderCurrency:"",
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Object} personInfo - temporary PersonInfo model object for capturing address.
						*/
		            	personInfo:{},
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean} initcomplete - Boolean value to track completion of initialization or re-initialization (after save) for the screen.
						*/
		            	initcomplete:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean} reInitPadss - Boolean value to track completion of initialization or re-initialization for the PADSS directive.
						*/
		            	reInitPadss:'N',
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Object} custDefaultPersonInfo - Customer default billing address model object, if available, for capturing billing address on payment.
						*/
		            	custDefaultPersonInfo : {},
		            	actionClicked:'',
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Number}  remainingAmount - Calculate and store remaining amount to add payment for on the order.
						*/
		            	remainingAmount:0,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  orderHasAnyCarryLines - Boolean value to track if order has any Carry lines.
						*/
		            	orderHasAnyCarryLines:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  orderHasAnyShippingLines - Boolean value to track if order has any Shipping lines.
						*/
		            	orderHasAnyShippingLines:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  orderHasAnyPickupLines - Boolean value to track if order has any Pickup lines.
						*/
		            	orderHasAnyPickupLines:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  realTimeAuthEnabled - Boolean value to track if real time authorization is turned on for the current Store.
						*/
		            	realTimeAuthEnabled:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  ccNameRuleEnabled - Boolean value to track if 'Use single field for Credit Card Name' rule is turned on for the current Store.
						*/
		            	ccNameRuleEnabled:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  encryptEnabled - Boolean value to track if 'Encrypt additional attributes of the payment' rule is turned on for HUB.
						*/
		            	encryptEnabled:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  chargeShpLinesAtStoreRuleEnabled - Boolean value to track if 'Charge Ship To Home Order Lines At Store' rule is turned on for the current Store.
						*/
		            	chargeShpLinesAtStoreRuleEnabled:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  postponePaymentForPickupAtStoreRuleEnabled - Boolean value to track if 'Postpone Payment processing until pickup' rule is turned on for the current Store.
						*/
		            	postponePaymentForPickupAtStoreRuleEnabled:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  isRefundMode - Boolean value to track if current return order is in refund mode or has greater exchange total.
						*/
		            	isRefundMode:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  isExchangeOrderPresent - Boolean value to track if current return order also has exchange Order.
						*/
		            	isExchangeOrderPresent:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  noReturnLinesPresent - Boolean value to track if current return order does not have any lines.
						*/
		            	noReturnLinesPresent:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  noExchangeLinesPresent - Boolean value to track if current exchange order does not have any lines.
						*/
		            	noExchangeLinesPresent:false,
		            	/**
						 *@iscdoc uiattr
						 *@viewname store.views.return.payment.return-payment
						 *@property {Boolean}  isInitDataReady - This is to track whether data initialization was complete.
						*/
		            	isInitDataReady:false
		            },
		            //Screen intialization
		            /**
					 * @iscdoc viewinit
					 * @viewname store.views.return.payment.return-payment
					 * @method initialize
					 * @description This method calls getInitDetails method to get all initialization details for the current screen.
					 */
		            initialize: function(){		
		            	this.model.newPaymentMethods.newPaymentMethod = [];
		            	var pageInput = iscWizard.getWizardPageInput();
		            	this.ui.wizardOrderModel = iscWizard.getWizardModel("returnOrder");
		            	this.model.exchangeOrderModel = iscWizard.getWizardModel("exchangeOrderModel");
		            	this.ui.orderHeaderKey = this.ui.wizardOrderModel.Order.OrderHeaderKey;
		            	//iscMashup.callMashup(this,"computeRefundPayments",iscPaymentinput.computeRefundPaymentsInput(this.ui.orderHeaderKey),{}).then(this.getInitDetails.bind(this),this.onFailurePayment.bind(this));
		            	this.getInitDetails(this.ui.orderHeaderKey, this.ui.wizardOrderModel);
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.return.payment.return-payment
					 *@methodname getInitDetails
					 *@description This method calls all init mashups to get the details of the payment types, card types, currency list, country list, relevant rules and 
					 * 				current return and exchange order details and initializes the model objects for all.
					 */
		            getInitDetails : function(orderHeaderKey,wizardOrderModel){
		            	//var wizardOrderModel = this.ui.wizardOrderModel;
		            	//var orderHeaderKey = this.ui.wizardOrderModel.Order.OrderHeaderKey;
		            	var getCountryListMashupRefObj = iscMashup.getMashupRefObj(this,"getCountryList",iscPaymentinput.getCountryListInput(wizardOrderModel));
		            	var getCurrencyListMashupRefObj = iscMashup.getMashupRefObj(this,"getCurrencyList",iscPaymentinput.getCurrencyListInput(wizardOrderModel));
		            	var ruleDetailsMashupRefObj = iscMashup.getMashupRefObj(this,"getRulesDetails_ReatTimeAuth",iscPaymentinput.getRuleDetailsInput(wizardOrderModel));
		            	var ruleDetailsEncryptMashupRefObj = iscMashup.getMashupRefObj(this,"getRulesDetails_PaymentAttrEncrypt",iscPaymentinput.getRuleDetailsInput(wizardOrderModel));
		            	var ruleDetailsCCNameMashupRefObj = iscMashup.getMashupRefObj(this,"getRuleDetails_CCName",iscPaymentinput.getRuleDetailsInput(wizardOrderModel));
		            	var ruleDetailsChargeShpLinesMashupRefObj = iscMashup.getMashupRefObj(this,"getRuleDetails_ChargeShipLines",iscPaymentinput.getRuleDetailsInput(wizardOrderModel));
		            	var ruleDetailsPostponePickupPaymentMashupRefObj = iscMashup.getMashupRefObj(this,"getRuleDetails_PostponePickupPayment",iscPaymentinput.getRuleDetailsInput(wizardOrderModel));
		            	var getPaymentTypeListMashupRefObj = iscMashup.getMashupRefObj(this,"getPaymentTypeList",iscPaymentinput.getPaymentTypeListInput(wizardOrderModel));
		            	var getPaymentCardTypeListMashupRefObj = iscMashup.getMashupRefObj(this,"getPaymentCardTypeList",iscPaymentinput.getPaymentCardTypeListInput(wizardOrderModel));
		            	var computeRefundPaymentsMashupRefObj = iscMashup.getMashupRefObj(this,"computeRefundPayments",iscPaymentinput.computeRefundPaymentsInput(orderHeaderKey));
		            	var getCompleteOrderDetailsMashupRefObj = iscMashup.getMashupRefObj(this,"getCompleteOrderDetails",iscPaymentinput.getCompleteOrderDetailsInput(orderHeaderKey));
		            	var mashupRefList = [];
		            	if(this.model.exchangeOrderModel){
		            		var getExchangePaymentCardTypeListMashupRefObj = iscMashup.getMashupRefObj(this,"getExchangePaymentCardTypeList",iscPaymentinput.getPaymentCardTypeListInput(this.model.exchangeOrderModel));
		            		mashupRefList = [getCountryListMashupRefObj,getCurrencyListMashupRefObj,ruleDetailsMashupRefObj,ruleDetailsEncryptMashupRefObj,ruleDetailsCCNameMashupRefObj,
		            							ruleDetailsChargeShpLinesMashupRefObj,ruleDetailsPostponePickupPaymentMashupRefObj,getPaymentTypeListMashupRefObj,getPaymentCardTypeListMashupRefObj,getExchangePaymentCardTypeListMashupRefObj,computeRefundPaymentsMashupRefObj,getCompleteOrderDetailsMashupRefObj];
		            	}
		            	else{
		            		mashupRefList = [getCountryListMashupRefObj,getCurrencyListMashupRefObj,ruleDetailsMashupRefObj,ruleDetailsEncryptMashupRefObj,ruleDetailsCCNameMashupRefObj,
		            							ruleDetailsChargeShpLinesMashupRefObj,ruleDetailsPostponePickupPaymentMashupRefObj,getPaymentTypeListMashupRefObj,getPaymentCardTypeListMashupRefObj,computeRefundPaymentsMashupRefObj,getCompleteOrderDetailsMashupRefObj];
		            	}
		            	iscMashup.callMashups(this,mashupRefList,{}).then(this.onSuccessOfInitDetails.bind(this),angular.noop);		
		            },
		            
		            //Mashup Input Preparation Methods Start
		            /**
					 *@iscdoc method
					 *@viewname store.views.return.payment.return-payment
					 *@methodname getCapturePaymentInput
					 *@description This method calls prepares input model object for capturePayment API call for capturing the payment details on the order.
					 */
		            getCapturePaymentInput : function(){
		            	var apiInput = {};
		            	apiInput.Order = {};
		            	apiInput.Order.OrderHeaderKey = this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
		            	var orderModelForPaymentMethod = apiInput.Order;
		            	var originalOrderForSavedPaymentMethod = this.model.getCompleteOrderDetails.Order;
		            	if(this.ui.isExchangeOrderPresent){
		            		var returnOrder = apiInput.Order.Return = {};
		            		returnOrder.Order = {};
		            		apiInput.Order.Return.Order.OrderHeaderKey = this.model.getCompleteOrderDetails.Order.Return.Order.OrderHeaderKey;
		            		if(this.ui.isRefundMode){
		            			orderModelForPaymentMethod = returnOrder.Order;
		            			originalOrderForSavedPaymentMethod = this.model.getCompleteOrderDetails.Order.Return.Order;
			            	}
		            	}
		            	
		            	//prepare payment method
		            	orderModelForPaymentMethod.PaymentMethods = {};
		            	orderModelForPaymentMethod.PaymentMethods.PaymentMethod = [];
		            	var totalOrderPaymentCounter = 0;
		            	for(var p=0; p < this.model.newPaymentMethods.newPaymentMethod.length; p++){
		            		orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p] = {};
		            		var newPaymentMethodObj = this.model.newPaymentMethods.newPaymentMethod[p];
		            		if(!newPaymentMethodObj.PaymentTypeGroup && (newPaymentMethodObj.PaymentType && newPaymentMethodObj.PaymentType.PaymentTypeGroup) ){
			            		newPaymentMethodObj.PaymentTypeGroup = newPaymentMethodObj.PaymentType.PaymentTypeGroup;
			            		newPaymentMethodObj.PaymentType = newPaymentMethodObj.PaymentType.PaymentType;
			            	}
			            	orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p].PaymentType = newPaymentMethodObj.PaymentType;
			            	orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p].PaymentTypeGroup = newPaymentMethodObj.PaymentTypeGroup;
			            	orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p].RequestedAmount = newPaymentMethodObj.RequestedAmount;
			            	if(newPaymentMethodObj.NoProcessingRequired){
			            		orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p].NoProcessingRequired = newPaymentMethodObj.NoProcessingRequired;
			            	}
			            	if(this.ui.isRefundMode){
			            		orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p].Operation = "Manage";
			            	}
			            	else{
			            		if(!this.ui.orderHasAnyCarryLines && !(this.ui.orderHasAnyShippingLines && this.ui.chargeShpLinesAtStoreRuleEnabled)){
			            			orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p].Operation = "Manage";
			            		}
			            		else{
					            	if(!newPaymentMethodObj.Operation){
					            		orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p].Operation = 'Manage';
					            	}
					            	else {
					            		orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p].Operation = angular.copy(newPaymentMethodObj.Operation);
					            	}
			            		}
			            	}
			            	
			            	var paymentMethodObjectForInput = iscPaymentinput.prepareCapturePaymentInputForPaymentMethod(newPaymentMethodObj,this.ui.realTimeAuthEnabled,this.ui.ccNameRuleEnabled,this.ui.isRefundMode);
			            	orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p] = angular.extend(orderModelForPaymentMethod.PaymentMethods.PaymentMethod[p],paymentMethodObjectForInput);
			            	totalOrderPaymentCounter++;
		            	}
		            	if(originalOrderForSavedPaymentMethod.PaymentMethods && originalOrderForSavedPaymentMethod.PaymentMethods.PaymentMethod){
			            	for(var sp=0; sp < originalOrderForSavedPaymentMethod.PaymentMethods.PaymentMethod.length; sp++){
			            		var newPaymentMethodObj = originalOrderForSavedPaymentMethod.PaymentMethods.PaymentMethod[sp];
			            		var paymentMethodObjectForInput = iscPaymentinput.prepareCapturePaymentInputForSavedPaymentMethod(newPaymentMethodObj,this.ui.realTimeAuthEnabled,this.ui.ccNameRuleEnabled,this.ui.isRefundMode);
				            	if(!iscObjectUtility.isEmpty(paymentMethodObjectForInput)){
				            		if(newPaymentMethodObj.NoProcessingRequired){
					            		paymentMethodObjectForInput.NoProcessingRequired = newPaymentMethodObj.NoProcessingRequired;
					            	}
					            	if(this.ui.isRefundMode){
					            		paymentMethodObjectForInput.Operation = "Manage";
					            	}
					            	else{
					            		if(!this.ui.orderHasAnyCarryLines && !(this.ui.orderHasAnyShippingLines && this.ui.chargeShpLinesAtStoreRuleEnabled)){
			            					paymentMethodObjectForInput.Operation = "Manage";
					            		}
					            		else{
						            		if(!newPaymentMethodObj.Operation){
						            			paymentMethodObjectForInput.Operation = "Manage";
						            		}
						            		else {
						            			paymentMethodObjectForInput.Operation = angular.copy(newPaymentMethodObj.Operation);
						            		}
					            		}
					            	}
				            		
				            		var orderPaymentCounter = totalOrderPaymentCounter;
				            		totalOrderPaymentCounter++;
				            		orderModelForPaymentMethod.PaymentMethods.PaymentMethod[orderPaymentCounter] = paymentMethodObjectForInput;
				            	}
			            	}
		            	}
		            	
		            	return apiInput;
		            },
		            //Mashup Input prepare methods END
		            
		            //Action methods START
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uiOneClickCaptureProcessRefund
			  		 *@description This method is called on click of Process Refund button in the Return Payment screen. It prepares the input by capturing all the payment details and calls the 
			  		 *				'wsc_returnOrder_oneClickCapturePayAndRefundConfirm' mashup (mashupRef : 'oneClickCapturePayAndRefundConfirm'). Before preparing the input and calling the mashups, it
			  		 *				validates if enough payment methods have been added to refunds on return order or capture funds for the exchange order. If validation fails, it throws an error message.
			  		 */
		            uiOneClickCaptureProcessRefund : function(){
		            	
		            	if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent){
		            		
	            			var remainingAmountToAuth = this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth;
	            			var addedAmount = 0;
	            			if(this.model.getCompleteOrderDetails.Order.PaymentMethods && this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod){
		            			for(var sp=0; sp < this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod.length; sp++){
		            				var newPaymentMethodObj = this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod[sp];
		            				var requestedAmount = newPaymentMethodObj.RequestedAmount;
		            				var maxChargeLimit = newPaymentMethodObj.MaxChargeLimit;
		            				addedAmount += parseFloat(requestedAmount) - parseFloat(maxChargeLimit);
		            			}
	            			}
	            			for(var p=0; p < this.model.newPaymentMethods.newPaymentMethod.length; p++){
	            				var newPaymentMethodObj = this.model.newPaymentMethods.newPaymentMethod[p];
	            				var requestedAmount = newPaymentMethodObj.RequestedAmount;
	            				addedAmount += parseFloat(requestedAmount);
	            			}
		            			
		            		if(iscObjectUtility.isGreaterThanZero(parseFloat(remainingAmountToAuth) - parseFloat(addedAmount))){
		            			iscModal.showErrorMessage(iscI18n.translate('payment.INSUFFICIENT_PAYMENT'));
		            			return;
			            	}
		            	}
		            	else {
		            		var refundTotal = this.model.returnOrderDetails.Order.OverallTotals.GrandRefundTotal;
	            			var addedAmount = 0;
	            			if(this.model.returnOrderDetails.Order.PaymentMethods && this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod){
		            			for(var sp=0; sp < this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod.length; sp++){
		            				var newPaymentMethodObj = this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod[sp];
		            				var requestedAmount = newPaymentMethodObj.RequestedAmount;
		            				addedAmount += parseFloat(requestedAmount);
		            			}
	            			}
	            			for(var p=0; p < this.model.newPaymentMethods.newPaymentMethod.length; p++){
	            				var newPaymentMethodObj = this.model.newPaymentMethods.newPaymentMethod[p];
	            				var requestedAmount = newPaymentMethodObj.RequestedAmount;
	            				addedAmount += parseFloat(requestedAmount);
	            			}
		            			
		            		if(iscObjectUtility.isGreaterThanZero(parseFloat(refundTotal) - parseFloat(addedAmount))){
		            			iscModal.showErrorMessage(iscI18n.translate('payment.INSUFFICIENT_REFUND_PAYMENT'));
		            			return;
			            	}
			            	if(iscObjectUtility.isLessThanZero(parseFloat(refundTotal) - parseFloat(addedAmount))){
		            			iscModal.showErrorMessage(iscI18n.translate('payment.EXCESS_REFUND_PAYMENT'));
		            			return;
			            	}
		            	}
		            	//** To do server side processing ** //
		            	var capturePaymentInput = this.getCapturePaymentInput();
		            	capturePaymentInput.Order.BillToKey = this.model.getCompleteOrderDetails.Order.BillToKey ? this.model.getCompleteOrderDetails.Order.BillToKey : "";
		            	capturePaymentInput.Order.ShipToKey = this.model.getCompleteOrderDetails.Order.ShipToKey ? this.model.getCompleteOrderDetails.Order.ShipToKey : "";
		            	capturePaymentInput.Order.BillToID = this.model.getCompleteOrderDetails.Order.BillToID ? this.model.getCompleteOrderDetails.Order.BillToID : "";
		            	capturePaymentInput.Order.EnterpriseCode = this.model.getCompleteOrderDetails.Order.EnterpriseCode;
		            	capturePaymentInput.Order.DocumentType = this.model.getCompleteOrderDetails.Order.DocumentType;
		            	capturePaymentInput.Order.CustomerContactID = this.model.getCompleteOrderDetails.Order.CustomerContactID ? this.model.getCompleteOrderDetails.Order.CustomerContactID : "";
		            	capturePaymentInput.Order.PaymentTypeList = this.model.getPaymentTypeList.PaymentTypeList;
		            	if(this.ui.isRefundMode){
		            		capturePaymentInput.Order.RefundExpected = "Y";
		            	}
		            	else {
		            		capturePaymentInput.Order.RefundExpected = "N";
		            	}
		            	capturePaymentInput.Order.ReturnLinesPresent = "Y";
		            	if(this.model.getCompleteOrderDetails.Order.Return && this.model.getCompleteOrderDetails.Order.Return.Order){
		            		capturePaymentInput.Order.Return.Order.BillToKey = this.model.getCompleteOrderDetails.Order.Return.Order.BillToKey ? this.model.getCompleteOrderDetails.Order.Return.Order.BillToKey : "";
			            	capturePaymentInput.Order.Return.Order.ShipToKey = this.model.getCompleteOrderDetails.Order.Return.Order.ShipToKey ? this.model.getCompleteOrderDetails.Order.Return.Order.ShipToKey : "";
			            	capturePaymentInput.Order.Return.Order.BillToID = this.model.getCompleteOrderDetails.Order.Return.Order.BillToID ? this.model.getCompleteOrderDetails.Order.Return.Order.BillToID : "";
			            	capturePaymentInput.Order.Return.Order.EnterpriseCode = this.model.getCompleteOrderDetails.Order.Return.Order.EnterpriseCode;
			            	capturePaymentInput.Order.Return.Order.DocumentType = this.model.getCompleteOrderDetails.Order.Return.Order.DocumentType;
			            	capturePaymentInput.Order.Return.Order.CustomerContactID = this.model.getCompleteOrderDetails.Order.Return.Order.CustomerContactID ? this.model.getCompleteOrderDetails.Order.Return.Order.CustomerContactID : "";
			            	if(this.ui.noReturnLinesPresent){
			            		capturePaymentInput.Order.ReturnLinesPresent = "N";
			            	}
		            	}
		            	if(this.ui.isExchangeOrderPresent && this.ui.noExchangeLinesPresent){
		            		capturePaymentInput.Order.ExchangeLinesPresent = "N";
		            	}
		            	iscMashup.callMashup(this,"oneClickCapturePayAndRefundConfirm",capturePaymentInput,{}).then(this.onSuccessOfPayment.bind(this),this.onFailurePayment.bind(this));
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uiExpandPayment
			  		 *@description This method is called on click of Edit link for a payment method panel in the Capture Payment screen. It opens the payment panel with all the fields which can be edited.
			  		 */
		            uiExpandPayment : function(paymentMethod){
		            	paymentMethod.expandPaymentMethodDetails();
		            	//paymentMethod.DetailView = 'Y';
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uiCollapsePayment
			  		 *@description This method is called on click of Collapse link for a payment method panel in the Capture Payment screen. It collapses the payment panel hiding all the fields which can be edited.
			  		 */
		            uiCollapsePayment : function(paymentMethod){
		            	paymentMethod.collapsePaymentMethodDetails();
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uiRemovePaymentPanel
			  		 *@description This method is called on click of Remove link for a new payment method in the Capture Payment screen. It deletes the corresponding new payment method panel.
			  		 */
		            uiRemovePaymentPanel : function(index){
		            	var deleteConfMsg = "payment.LABEL_Delete_Payment";
		            	var pendingRequestedAmount = this.model.newPaymentMethods.newPaymentMethod[index].RequestedAmount;
		            	var that = this;
		            	iscModal.showConfirmationMessage(deleteConfMsg).then(function(action){
		            				if(iscCore.isBooleanTrue(action)){
										that.model.newPaymentMethods.newPaymentMethod.splice(index,1);
						            	if(parseFloat(pendingRequestedAmount) > 0){
						            		var newRemainingAmount = parseFloat(pendingRequestedAmount) + parseFloat(that.ui.remainingAmount);
						            		that.ui.remainingAmount = newRemainingAmount.toFixed(2);
						            	}
		            				}
								});
		            	
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uiAddNewPaymentPanel
			  		 *@description This method is called on click of 'Add Payment Method' link in the Capture Payment screen. It adds new payment method panel.
			  		 */
		            uiAddNewPaymentPanel : function(){
		            	var paymentPanelLength = this.model.newPaymentMethods.newPaymentMethod.length;
		            	var newPaymentMethodObj = this.getNewPaymentMethodObject();
		            	var finalRemainingAmount = 0;
		            	if(this.ui.remainingAmount > 0){
		            		finalRemainingAmount = finalRemainingAmount + parseFloat(this.ui.remainingAmount);
		            	}
		            	if(finalRemainingAmount > 0){
		            		newPaymentMethodObj.RequestedAmount = finalRemainingAmount.toFixed(2).toString();
		            		this.ui.remainingAmount = 0;
		            	}
		            	else{
		            		newPaymentMethodObj.RequestedAmount = "0";
		            	}
						
						this.model.newPaymentMethods.newPaymentMethod[paymentPanelLength] = newPaymentMethodObj;
						this.ui.actionClicked = '';
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uiCancel
			  		 *@description This method is called on click of 'Cancel' button in the Capture Payment screen. It shows a confirmation message before closing the order capture flow.
			  		 */
		            uiCancel : function(){
		            	iscReturn.handleWizardCancel(this.model.getCompleteOrderDetails.Order.OrderLines.TotalNumberOfRecords);
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uiRemovePayment
			  		 *@description This method is called on click of Remove link for an already payment method on the order in the Capture Payment screen. It deletes the corresponding saved payment method from the order
			  		 *				by making a server API call.
			  		 */
		            uiRemovePayment : function(paymentMethod){
		            	var deleteConfMsg = "payment.LABEL_Delete_Payment";
		            	var that = this;
		            	iscModal.showConfirmationMessage(deleteConfMsg).then(function(action){
            				if(iscCore.isBooleanTrue(action)){
								var apiInput = {};
				            	apiInput.CapturePayment = {};
				            	if(that.ui.isRefundMode){
				            		apiInput.CapturePayment.OrderHeaderKey = that.ui.wizardOrderModel.Order.OrderHeaderKey;
				            	}
				            	else {
				            		apiInput.CapturePayment.OrderHeaderKey = that.model.getCompleteOrderDetails.Order.OrderHeaderKey;
				            	}
				            	apiInput.CapturePayment.PaymentMethods = {};
				            	apiInput.CapturePayment.PaymentMethods.PaymentMethod = {};
				            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.PaymentKey = paymentMethod.PaymentKey;
				            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.Operation = "Delete";
				            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.IsCorrection = "N";
				            	var mashupRefList = [];
				            	mashupRefList = [iscMashup.getMashupRefObj(that,"deletePayment",apiInput)];
				            	var pendingRequestedAmount = paymentMethod.RequestedAmount;
				            	var chargedAmount = paymentMethod.TotalCharged;
				            	var authorizedAmount = paymentMethod.TotalAuthorized;
				            	if(parseFloat(pendingRequestedAmount) > 0){
				            		var newRemainingAmount = parseFloat(pendingRequestedAmount) + parseFloat(that.ui.remainingAmount);
				            		that.ui.remainingAmount = newRemainingAmount.toFixed(2);
				            	}
				            	if(!that.ui.isRefundMode && parseFloat(chargedAmount) > 0 || parseFloat(authorizedAmount) > 0){
				            		if(parseFloat(chargedAmount) > 0){
				            			var finalRemainingAmount = parseFloat(that.ui.remainingAmount) - parseFloat(chargedAmount);
				            			that.ui.remainingAmount = finalRemainingAmount.toFixed(2);
				            		}
				            		else if(parseFloat(authorizedAmount) > 0){
				            			var finalRemainingAmount = parseFloat(that.ui.remainingAmount) - parseFloat(authorizedAmount);
				            			that.ui.remainingAmount = finalRemainingAmount.toFixed(2);
				            		}
				            	}
				            	
					            iscMashup.callMashups(that,mashupRefList,{}).then(that.onSuccessOfSavePayment.bind(that),angular.noop);
            				}
						});
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uiResumePayment
			  		 *@description This method is called on click of Resume link for an already payment method on the order, which is in Suspended state, in the Capture Payment screen. 
			  		 *				It resumes the corresponding saved payment method on the order by making a server API call to reset the Suspension status.
			  		 */
		            uiResumePayment : function(paymentMethod){
		            	var apiInput = {};
		            	apiInput.CapturePayment = {};
		            	if(this.ui.isRefundMode){
		            		apiInput.CapturePayment.OrderHeaderKey = this.ui.wizardOrderModel.Order.OrderHeaderKey;
		            	}
		            	else {
		            		apiInput.CapturePayment.OrderHeaderKey = this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
		            	}
		            	apiInput.CapturePayment.PaymentMethods = {};
		            	apiInput.CapturePayment.PaymentMethods.PaymentMethod = {};
		            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.PaymentKey = paymentMethod.PaymentKey;
		            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.ResetSuspensionStatus = "Y";
		            	apiInput.CapturePayment.PaymentMethods.PaymentMethod.RequestedAmount = "0";
		            	var mashupRefList = [];
		            	mashupRefList = [iscMashup.getMashupRefObj(this,"resumePayment",apiInput)];
		            	this.ui.resumePaymentKey = paymentMethod.PaymentKey;
			            iscMashup.callMashups(this,mashupRefList,{}).then(this.onSuccessOfSavePayment.bind(this),angular.noop);
		            },
		            uiSavePayment : function(){
		            	var mashupRefList = [];
			            var capturePaymentMashupRefObj = iscMashup.getMashupRefObj(this,"capturePayment",this.getCapturePaymentInput());
			            mashupRefList = [capturePaymentMashupRefObj];
			            	
			            iscMashup.callMashups(this,mashupRefList,{}).then(this.onSuccessOfSavePayment.bind(this),angular.noop);
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uiFinishWizard
			  		 *@description This method is called on click on View Order Summary button on the success popup when payment capture and processing is successful to go to Order Summary screen.
			  		 */
		            uiFinishWizard : function(){
		               iscWizard.finishWizard();
		            },
		            /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uihandleScreenInvalid
			  		 *@description This method is called on click of Pay button in the Capture Payment screen, if there are any validation errors on the fields.
			  		 */
		            uihandleScreenInvalid : function(){
		            	this.ui.actionClicked = 'pay';
		            	$scope.$broadcast('callVerifyAddress',{'callingScreeen':'return-capture-payment'});
		            	iscModal.showErrorMessage(iscI18n.translate('payment.MSG_SCREEN_ERRORS'));
		            },
		             /**
			  		 *@iscdoc uimethod
					 *@viewname store.views.return.payment.return-payment		 
			  		 *@methodname uiDoNothing
			  		 *@description This method is handler method for enter button click to prevent form submit on click on enter on any of the screen fields.
			  		 */
					uiDoNothing:function(){
						return;
					},
		            //Action methods END
		            
		            //Mashup Success/Failure Handler Methods START
					/**
					 *@iscdoc method
					 *@viewname store.views.return.payment.return-payment
					 *@methodname onSuccessOfInitDetails
					 *@description callback handler for init mashups call which initializes all the model objects.
					 *
					 */
		            onSuccessOfInitDetails : function(data){
		            	var mashupRef = data.MashupRefs.MashupRef;
		            	var newPaymentMethodObj = {};
		            	if(mashupRef !== null && mashupRef !== undefined){
		            		var len = mashupRef.length;
		            		for(var i = 0; i < len; i++){
		            			var mashupRefObj = mashupRef[i];
		            			if(mashupRefObj.mashupRefId === 'getRulesDetails_ReatTimeAuth'){
		            				this.model.getRulesDetails_ReatTimeAuth = mashupRefObj.Output;
		            				if(this.model.getRulesDetails_ReatTimeAuth && this.model.getRulesDetails_ReatTimeAuth.Rules && this.model.getRulesDetails_ReatTimeAuth.Rules.RuleSetValue == '02'){
		            					this.ui.realTimeAuthEnabled = true;
		            				}
		            				else {
		            					this.ui.realTimeAuthEnabled = false;
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getRuleDetails_ChargeShipLines'){
		            				this.model.getRuleDetails_ChargeShipLines = mashupRefObj.Output;
		            				if(this.model.getRuleDetails_ChargeShipLines && this.model.getRuleDetails_ChargeShipLines.Rules && this.model.getRuleDetails_ChargeShipLines.Rules.RuleSetValue == 'Y'){
		            					this.ui.chargeShpLinesAtStoreRuleEnabled = true;
		            				}
		            				else {
		            					this.ui.chargeShpLinesAtStoreRuleEnabled = false;
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getRuleDetails_PostponePickupPayment'){
		            				this.model.getRuleDetails_PostponePickupPayment = mashupRefObj.Output;
		            				if(this.model.getRuleDetails_PostponePickupPayment && this.model.getRuleDetails_PostponePickupPayment.Rules && this.model.getRuleDetails_PostponePickupPayment.Rules.RuleSetValue == 'Y'){
		            					this.ui.postponePaymentForPickupAtStoreRuleEnabled = true;
		            				}
		            				else {
		            					this.ui.postponePaymentForPickupAtStoreRuleEnabled = false;
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getRuleDetails_CCName'){
		            				this.model.getRuleDetails_CCName = mashupRefObj.Output;
		            				if(this.model.getRuleDetails_CCName && this.model.getRuleDetails_CCName.Rules && this.model.getRuleDetails_CCName.Rules.RuleSetValue == 'Y'){
		            					this.ui.ccNameRuleEnabled = true;
		            				}
		            				else {
		            					this.ui.ccNameRuleEnabled = false;
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getRulesDetails_PaymentAttrEncrypt'){
		            				this.model.getRulesDetails_PaymentAttrEncrypt = mashupRefObj.Output;
		            				if(this.model.getRulesDetails_PaymentAttrEncrypt && this.model.getRulesDetails_PaymentAttrEncrypt.Rules && this.model.getRulesDetails_PaymentAttrEncrypt.Rules.RuleSetValue == 'Y'){
		            					this.ui.encryptEnabled = true;
		            				}
		            				else {
		            					this.ui.encryptEnabled = false;
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getCompleteOrderDetails'){
		            				this.model.getCompleteOrderDetails = mashupRefObj.Output;
		            				this.model.exchangeOrderModel = null;
		            				if(this.model.getCompleteOrderDetails.Order.DocumentType === "0003"){
		            					this.model.returnOrderDetails = this.model.getCompleteOrderDetails;
		            					if(this.model.returnOrderDetails.Order.OverallTotals.GrandRefundTotal > 0){
			            					this.ui.isRefundMode = true;
			            				}
		            				}
		            				else if(this.model.getCompleteOrderDetails.Order.DocumentType === "0001" && this.model.getCompleteOrderDetails.Order.ExchangeType 
		            					&& !iscObjectUtility.isEmpty(this.model.getCompleteOrderDetails.Order.ExchangeType)){
		            						this.ui.isExchangeOrderPresent = true;
		            					if(this.model.getCompleteOrderDetails.Order.Return && this.model.getCompleteOrderDetails.Order.Return.Order){
			            					this.model.returnOrderDetails = this.model.getCompleteOrderDetails.Order.Return;
			            				}
			            				if(this.model.returnOrderDetails.Order.OverallTotals.GrandRefundTotal > 0){
			            					this.ui.isRefundMode = true;
			            				}
			            				if(this.model.returnOrderDetails.Order.OrderLines.TotalNumberOfRecords <= 0){
			            					this.ui.noReturnLinesPresent = true;
			            				}
			            				if(this.model.getCompleteOrderDetails.Order.OrderLines.TotalNumberOfRecords <= 0){
			            					this.ui.noExchangeLinesPresent = true;
			            				}
		            				}		            				
		            				
		            				this.ui.orderShipToKey = mashupRefObj.Output.Order.ShipToKey;
		            				if(this.ui.isRefundMode){
		            					this.ui.orderShipToKey = this.model.returnOrderDetails.Order.ShipToKey;
		            				}
		            				
		            				if(mashupRefObj.Output.Order.BillToKey){
		            					this.ui.orderBillToKey = mashupRefObj.Output.Order.BillToKey;
		            					if(this.ui.isRefundMode){
			            					this.ui.orderBillToKey = this.model.returnOrderDetails.Order.BillToKey;
			            				}
		            				}
		            				if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent && iscOrder.orderHasAnyCarryLines(this.model.getCompleteOrderDetails)){
		            					this.ui.orderHasAnyCarryLines = true;
		            				}
		            				if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent && iscOrder.orderHasAnyShippingLines(this.model.getCompleteOrderDetails)){
		            					this.ui.orderHasAnyShippingLines = true;
		            				}
		            				if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent && iscOrder.orderHasAnyPickupLines(this.model.getCompleteOrderDetails)){
		            					this.ui.orderHasAnyPickupLines = true;
		            				}
		            				this.ui.orderCurrency = this.model.getCompleteOrderDetails.Order.PriceInfo.Currency;
		            				if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent && this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth > 0){
		            					var paymentPanelLength = this.model.newPaymentMethods.newPaymentMethod.length;
		            					newPaymentMethodObj.RequestedAmount = iscPayment.calculateRemainingAmountToAdd(this.model.getCompleteOrderDetails, null);
		            					if(this.model.getCurrencyList.CurrencyList){
			            					for(var j = 0; j < this.model.getCurrencyList.CurrencyList.Currency.length; j++){
				            					var currency = this.model.getCurrencyList.CurrencyList.Currency[j];
				            					var currencyType = currency.Currency;
				            					if(this.ui.orderCurrency === currencyType){
				            						newPaymentMethodObj.CustomerAccountCurrency = this.model.getCurrencyList.CurrencyList.Currency[j];
				            					}
				            				}
			            				}
			            				if(this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo && this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo.PersonInfo){
		            						this.ui.custDefaultPersonInfo = this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo.PersonInfo;
		            						newPaymentMethodObj.PersonInfoBillTo = this.ui.custDefaultPersonInfo;
		            					}
		            					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerFirstName) && iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerLastName)){
		            						newPaymentMethodObj.FirstName = this.model.getCompleteOrderDetails.Order.CustomerFirstName;
											newPaymentMethodObj.LastName = this.model.getCompleteOrderDetails.Order.CustomerLastName;
											newPaymentMethodObj.CreditCardName = iscPayment.getFormattedName(newPaymentMethodObj.FirstName,newPaymentMethodObj.LastName);
		            					}
		            				
			            				if(this.ui.orderShipToKey != "" && this.ui.orderBillToKey && this.ui.orderShipToKey === this.ui.orderBillToKey){
			            					newPaymentMethodObj.useShpAddressForBill = 'Y';
			            				}
			            				else {
				        					newPaymentMethodObj.useShpAddressForBill = 'N';
				        				}
			            				if(this.model.getCompleteOrderDetails.Order.PersonInfoBillTo){
			            					//do nothing
			            				}
			            				else if(this.model.getCompleteOrderDetails.Order.BillToID
			            						&& this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo && this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo.PersonInfo){
			            							//do nothing
			            				}
			            				else {
			            					this.model.getCompleteOrderDetails.Order.PersonInfoBillTo = {};
			            					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerFirstName) && iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerLastName)){
			            						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.FirstName = this.model.getCompleteOrderDetails.Order.CustomerFirstName;
												this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.LastName = this.model.getCompleteOrderDetails.Order.CustomerLastName;
			            					}
			            					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerPhoneNo)){
			            						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.DayPhone = this.model.getCompleteOrderDetails.Order.CustomerPhoneNo;
			            					}
			            					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerEMailID)){
			            						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.EMailID = this.model.getCompleteOrderDetails.Order.CustomerEMailID;
			            					}
			            				}
		            				}
		            				if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent && this.model.getExchangePaymentCardTypeList && this.model.getExchangePaymentCardTypeList.PaymentCardTypeList){
		            					this.model.getPaymentCardTypeList = this.model.getExchangePaymentCardTypeList;
		            				}
		            				
		            				this.ui.initcomplete = true;
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getPaymentTypeList'){
		            				this.model.getPaymentTypeList = mashupRefObj.Output;
		            				var paymentTypeFound = false;
		            				//set CREDIT_CARD as default to load
		            				for(var j = 0; j < this.model.getPaymentTypeList.PaymentTypeList.PaymentType.length; j++){
		            					var paymentTypeDef = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[j];
		            					var paymentType = paymentTypeDef.PaymentType;
		            					var paymentTypeGroup = paymentTypeDef.PaymentTypeGroup;
		            					if(this.ui.isRefundMode){
											if(paymentTypeGroup === 'STORED_VALUE_CARD'){
												newPaymentMethodObj.PaymentType = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[j];
			            						paymentTypeFound = true;
			            						break;
											}
										}
										else{
											if(paymentTypeGroup === 'CREDIT_CARD'){
												newPaymentMethodObj.PaymentType = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[j];
			            						paymentTypeFound = true;
			            						break;
											}
										}
		            				}
		            				if(!paymentTypeFound){
		            					newPaymentMethodObj.PaymentType = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[0];
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getPaymentCardTypeList'){
		            				this.model.getPaymentCardTypeList = mashupRefObj.Output;
		            				if(this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType && this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType.length > 0){
		            					newPaymentMethodObj.CardType = this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType[0];
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getExchangePaymentCardTypeList'){
		            				this.model.getExchangePaymentCardTypeList = mashupRefObj.Output;
		            				if(this.model.getExchangePaymentCardTypeList.PaymentCardTypeList.PaymentCardType && this.model.getExchangePaymentCardTypeList.PaymentCardTypeList.PaymentCardType.length > 0){
			            				if(!this.ui.isRefundMode){
			            					this.model.getPaymentCardTypeList = this.model.getExchangePaymentCardTypeList;
			            					newPaymentMethodObj.CardType = this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType[0];
			            				}
		            				}
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getCountryList'){
		            				this.model.getCountryList = mashupRefObj.Output;
		            			}
		            			else if(mashupRefObj.mashupRefId === 'getCurrencyList'){
		            				this.model.getCurrencyList = mashupRefObj.Output;
		            				if(this.orderCurrency && this.orderCurrency != ""){
		            					for(var k = 0; k < this.model.getCurrencyList.CurrencyList.Currency.length; k++){
			            					var currency = this.model.getCurrencyList.CurrencyList.Currency[k];
			            					var currencyType = currency.Currency;
			            					if(this.ui.orderCurrency === currencyType){
					            				newPaymentMethodObj.CustomerAccountCurrency = this.model.getCurrencyList.CurrencyList.Currency[k];
			            					}
			            				}
		            				}
		            				else{
			            				newPaymentMethodObj.CustomerAccountCurrency = this.model.getCurrencyList.CurrencyList.Currency[0];
		            				}
		            			}
		            		}
		            	}	
		            	if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent && this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth > 0){
		            		if(this.model.getCompleteOrderDetails.Order.PaymentMethods && this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod 
		            		&& this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod && this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod.length  > 0){
		            			this.ui.remainingAmount = iscPayment.calculateRemainingAmountToAdd(this.model.getCompleteOrderDetails, null);
		            		}
		            		else {
		            			this.model.newPaymentMethods.newPaymentMethod[0] = newPaymentMethodObj;
		            		}
		            	}
		            	else if(this.ui.isRefundMode){
		            		//TODO calc refund total and set on this.ui.remainingAmount
		            		var refundTotal = this.model.returnOrderDetails.Order.OverallTotals.GrandRefundTotal;
	            			var addedAmount = 0;
	            			if(this.model.returnOrderDetails.Order.PaymentMethods && this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod){
		            			for(var sp=0; sp < this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod.length; sp++){
		            				var newPaymentMethodObj = this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod[sp];
		            				var requestedAmount = iscPayment.calculatePlannedRefundAmountToDisplay(newPaymentMethodObj);
		            				if(iscObjectUtility.isEmpty(requestedAmount)){
		            					requestedAmount = "0.00";
		            				}
		            				addedAmount += parseFloat(requestedAmount);
		            			}
	            			}
	            			for(var p=0; p < this.model.newPaymentMethods.newPaymentMethod.length; p++){
	            				var newPaymentMethodObj = this.model.newPaymentMethods.newPaymentMethod[p];
	            				var requestedAmount = newPaymentMethodObj.RequestedAmount;
	            				if(iscObjectUtility.isEmpty(requestedAmount)){
	            					requestedAmount = "0.00";
	            				}
	            				addedAmount += parseFloat(requestedAmount);
	            			}
		            			
		            		if(iscObjectUtility.isGreaterThanZero(parseFloat(refundTotal) - parseFloat(addedAmount))){
		            			this.ui.remainingAmount = parseFloat(refundTotal) - parseFloat(addedAmount);
			            	}
		            	}
		            	this.ui.isInitDataReady = true;
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.return.payment.return-payment
					 *@methodname onFailurePayment
					 *@description failure handler for any kind of mashup or ajax call errors on mashup call when Pay button is clicked on the Capture Payment screen.
					 *				On any kind of error, it shows an error message popup with details of the errors found.
					 *
					 */
		            onFailurePayment : function(data){
		            	this.ui.actionClicked = '';
		            	if(data.Errors && data.Errors.Error){
		            		for(var i=0; i < data.Errors.Error.length; i ++){
		            			if(data.Errors.Error[i] && data.Errors.Error[i].ErrorCode && data.Errors.Error[i].ErrorCode === "YFS10210"){
		            				break;
		            			}
		            		}
		            	}
		            	
		            	this.model.newPaymentMethods = {};
						this.model.newPaymentMethods.newPaymentMethod = [];

		            	if(data.Errors.OrderDetails && data.Errors.OrderDetails.Order && data.Errors.OrderDetails.Order.length > 0){
		            		this.reInitScreenData(data.Errors.OrderDetails.Order[0]);
		            	}
		            	
		            	var messageOption = { 
	    					options: { 
	    						headerText: "payment.LABEL_PaymentFailure"
	    					},
	    					settings : {
	    						contentTemplate : "./store/views/order/payment/payment-error-content.tpl.html"
	    					},
	    					data : {
	    						contentData : {
	    							errors : data.Errors ? data.Errors : {}
	    						}
	    					}
	    				};
	    				var message = iscI18n.translate('payment.MESSAGE_PaymentFailure');
	    				iscModal.showErrorMessage(message, messageOption);
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.return.payment.return-payment
					 *@methodname onSuccessOfPayment
					 *@description callback handler for mashup call when Pay button is clicked on the Capture Payment screen.
					 *				On any kind of error, it shows an error message popup with details of the errors found.
					 *				If no errors found, it shows success message popup with payment details and a button to go to Order Summary screen.
					 *
					 */
		            onSuccessOfPayment : function(data){
		            	this.ui.actionClicked = '';
		            	var mashupRef = data.MashupRefs.MashupRef;
		            	if(mashupRef !== null && mashupRef !== undefined){
		            		var len = mashupRef.length;
		            		for(var i = 0; i < len; i++){
		            			var mashupRefObj = mashupRef[i];
		            			if(mashupRefObj.mashupRefId === "oneClickCapturePayAndRefundConfirm"){
		            				var errorFound = mashupRefObj.Output.Order.ErrorFound;
		            				if(errorFound === 'Y'){
		            					if(mashupRefObj.Output.Order.ErrorInAddress && mashupRefObj.Output.Order.ErrorInAddress === 'Y'){
		            						$scope.$broadcast('callVerifyAddress',{'callingScreeen':'return-capture-payment'});
		            					}
		            					else{
		            						this.model.newPaymentMethods = {};
			            					this.model.newPaymentMethods.newPaymentMethod = [];
			            					this.reInitScreenData(mashupRefObj.Output.Order);
									        var messageOption = { 
						    					options: { 
						    						headerText: "payment.LABEL_PaymentFailure"
						    					},
						    					settings : {
						    						contentTemplate : "./store/views/order/payment/payment-error-content.tpl.html"
						    					}
						    				};
						    				var message = iscI18n.translate('payment.MESSAGE_PaymentFailure');
						    				iscModal.showErrorMessage(message, messageOption);
		            					}
		            					
			            			}
			            			else {
			            				//If everything was successful, screen will not refresh with updated data, it will just go to next screen (this is to avoid addition get API call which is not required.)
			            				if(mashupRefObj.Output.Order.PaymentProcessSuccess &&  mashupRefObj.Output.Order.PaymentProcessSuccess === "Y"){
			            					callConfirmDraftOrder = false;
			            					if(!this.ui.isRefundMode){
			            						iscWizard.setWizardModel("returnLinesModel",this.model.returnOrderDetails.Order.OrderLines);
							    				iscWizard.setWizardModel("exchangeOrderModel",this.model.getCompleteOrderDetails);
			            					}
							    			iscWizard.finishWizard();	
			            				}
			            				else {//If anything was unsuccessful, screen will refresh with updated data which will be returned by the mashup call in case of any unsuccessful scenario
			            					this.model.newPaymentMethods = {};
				            				this.model.newPaymentMethods.newPaymentMethod = [];
			            					callConfirmDraftOrder = false;
			            					this.reInitScreenData(mashupRefObj.Output.Order);
			            					if(this.ui.remainingAmount > 0){
			            						iscModal.showErrorMessage(iscI18n.translate('payment.INSUFFICIENT_PAYMENT'));
			            					}
			            					else {
			            						var messageOption = { 
							    					options: { 
							    						headerText: "payment.LABEL_PaymentFailure"
							    					},
							    					settings : {
							    						contentTemplate : "./store/views/order/payment/payment-error-content.tpl.html"
							    					},
							    					data : {
							    						contentData : {
							    							errors : data.Errors ? data.Errors : {}
							    						}
							    					}
							    				};
							    				var message = iscI18n.translate('payment.MESSAGE_PaymentFailure');
							    				iscModal.showErrorMessage(message, messageOption);
			            					}
			            				}
			            			}
		            			}
		            		}
		            	}		           
		            },
		            onSuccessOfSavePayment : function(data){//pending
		            	var mashupRef = data.MashupRefs.MashupRef;
		            	if(mashupRef !== null && mashupRef !== undefined){
		            		var len = mashupRef.length;
		            		for(var i = 0; i < len; i++){
		            			var mashupRefObj = mashupRef[i];
		            			if(mashupRefObj.mashupRefId === 'capturePayment'){
		            				this.ui.initcomplete=false;
		            				this.ui.reInitPadss='Y';
		            				var shippingAddressList = angular.copy(this.model.getCompleteOrderDetails.Order.ShippingAddressList);
		            				this.model.getCompleteOrderDetails = mashupRefObj.Output;
		            				if(this.ui.isExchangeOrderPresent){
		            					this.model.returnOrderDetails = this.model.getCompleteOrderDetails.Order.Return;
		            				}
		            				else {
		            					this.model.returnOrderDetails = this.model.getCompleteOrderDetails;
		            				}
		            				this.model.getCompleteOrderDetails.Order.ShippingAddressList = shippingAddressList;
		            				this.ui.orderShipToKey = mashupRefObj.Output.Order.ShipToKey;
		            				if(mashupRefObj.Output.Order.BillToKey != undefined){
		            					this.ui.orderBillToKey = mashupRefObj.Output.Order.BillToKey;
		            				}
		            				this.model.newPaymentMethods = {};
		            				this.model.newPaymentMethods.newPaymentMethod = [];
		            				var newPaymentMethodObj = {};
		            				if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent){
		            					if(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth > 0){
			            					newPaymentMethodObj = this.getNewPaymentMethodObject();
											this.model.newPaymentMethods.newPaymentMethod[0] = newPaymentMethodObj;
										}
		            				}
		            				
		            				else{
		            					this.model.newPaymentMethods = {};
		            					this.model.newPaymentMethods.newPaymentMethod = [];
		            				}
		            				
		            				this.ui.initcomplete=true;
		            			}
		            			else if (mashupRefObj.mashupRefId === 'deletePayment' || mashupRefObj.mashupRefId === 'resumePayment'){		            				
		            				var getCompleteOrderDetailsMashupRefObj = iscMashup.getMashupRefObj(this,"getCompleteOrderDetails",iscPaymentinput.getCompleteOrderDetailsInput(mashupRefObj.Output.Order.OrderHeaderKey));
					            	var mashupRefList = [getCompleteOrderDetailsMashupRefObj];
					            	iscMashup.callMashups(this,mashupRefList,{}).then(this.onSuccessOfOrderDetails.bind(this),angular.noop);
		            			}
		            		}
		            	}
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.return.payment.return-payment
					 *@methodname onSuccessOfOrderDetails
					 *@description callback handler for mashup call to re-initializes getCompleteOrderDetails model object when any saved payment method is deleted or resumed.
					 *
					 */
		            onSuccessOfOrderDetails : function(data){//pending
		            	var mashupRef = data.MashupRefs.MashupRef;
		            	if(mashupRef !== null && mashupRef !== undefined){
		            		var len = mashupRef.length;
		            		for(var i = 0; i < len; i++){
		            			var mashupRefObj = mashupRef[i];
		            			if(mashupRefObj.mashupRefId === 'getCompleteOrderDetails'){
		            				this.initScreenDetails(mashupRefObj.Output);
		            				if(this.ui.isExchangeOrderPresent){
		            					this.model.returnOrderDetails = this.model.getCompleteOrderDetails.Order.Return;
		            				}
		            				else {
		            					this.model.returnOrderDetails = this.model.getCompleteOrderDetails;
		            				}
		            				if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent){
		            					if(this.ui.resumePaymentKey){
			            					var paymentMethod = iscPayment.getPaymentMethodForKey(this.model.getCompleteOrderDetails, this.ui.resumePaymentKey);
			            					if(paymentMethod && !iscPayment.isPaymentMethodSuspended(paymentMethod,this.model.getCompleteOrderDetails.Order.DocumentType)){
			            						var resumedAmount = paymentMethod.MaxChargeLimit;
			            						var finalResumedAmount = 0;
			            						var chargedAmount = paymentMethod.TotalCharged;
			            						var authorizedAmount = paymentMethod.TotalAuthorized;
			            						if(parseFloat(chargedAmount) > 0 || parseFloat(authorizedAmount) > 0){
								            		if(parseFloat(chargedAmount) > 0){
								            			finalResumedAmount = parseFloat(resumedAmount) - parseFloat(chargedAmount);
								            		}
								            		else if(parseFloat(authorizedAmount) > 0){
								            			 finalResumedAmount = parseFloat(resumedAmount) - parseFloat(authorizedAmount);
								            		}
								            	}
								            	else {
								            		finalResumedAmount = resumedAmount;
								            	}
								            	if(parseFloat(finalResumedAmount) > 0){
								            		var newRemainingAmount = parseFloat(this.ui.remainingAmount) - parseFloat(finalResumedAmount);
								            		this.ui.remainingAmount = newRemainingAmount.toFixed(2);
								            	}
			            					}
			            					this.ui.resumePaymentKey = null;
			            				}
			            				this.ui.remainingAmount = iscPayment.calculateRemainingAmountToAdd(this.model.getCompleteOrderDetails, this.model.newPaymentMethods.newPaymentMethod);
		            				}
		            				else {
		            					var refundTotal = this.model.returnOrderDetails.Order.OverallTotals.GrandRefundTotal;
				            			var addedAmount = 0;
				            			if(this.model.returnOrderDetails.Order.PaymentMethods && this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod){
					            			for(var sp=0; sp < this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod.length; sp++){
					            				var newPaymentMethodObj = this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod[sp];
					            				var requestedAmount = iscPayment.calculatePlannedRefundAmountToDisplay(newPaymentMethodObj);
					            				if(iscObjectUtility.isEmpty(requestedAmount)){
					            					requestedAmount = "0.00";
					            				}
					            				addedAmount += parseFloat(requestedAmount);
					            			}
				            			}
				            			if(iscObjectUtility.isGreaterThanZero(parseFloat(refundTotal) - parseFloat(addedAmount))){
					            			this.ui.remainingAmount = parseFloat(refundTotal) - parseFloat(addedAmount);
						            	}
		            				}
		            				
		            			}
		            		}
		            	}
		            },
		            //Mashup Success/Failure Handler Methods END
		            
		            //Other methods	
		            /**
					 *@iscdoc method
					 *@viewname store.views.return.payment.return-payment
					 *@methodname getNewPaymentMethodObject
					 *@description gets new PaymentMethod model object to initalize a new Payment Method panel in the Capture Payment screen.
					 *				By default, it sets the default selected Payment Type as the first payment type belonging to the Payment type gourp "CREDIT_CARD".
					 *				If no credit card type payment types are available, then it defaults the selected payment type to the first in the list.
					 *
					 */
		            getNewPaymentMethodObject : function(){
		            	var newPaymentMethodObj = {};
		            	if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent){
		            		newPaymentMethodObj.RequestedAmount = this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth;
		            	}
		            	else{
		            		var refundTotal = this.model.returnOrderDetails.Order.OverallTotals.GrandRefundTotal;
	            			var addedAmount = 0;
	            			if(this.model.returnOrderDetails.Order.PaymentMethods && this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod){
		            			for(var sp=0; sp < this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod.length; sp++){
		            				var paymentMethodObj = this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod[sp];
		            				var requestedAmount = iscPayment.calculatePlannedRefundAmountToDisplay(paymentMethodObj);
		            				if(iscObjectUtility.isEmpty(requestedAmount)){
		            					requestedAmount = "0.00";
		            				}
		            				addedAmount += parseFloat(requestedAmount);
		            			}
	            			}
	            			for(var p=0; p < this.model.newPaymentMethods.newPaymentMethod.length; p++){
	            				var paymentMethodObj = this.model.newPaymentMethods.newPaymentMethod[p];
	            				var requestedAmount = paymentMethodObj.RequestedAmount;
	            				if(iscObjectUtility.isEmpty(requestedAmount)){
	            					requestedAmount = "0.00";
	            				}
	            				addedAmount += parseFloat(requestedAmount);
	            			}
		            			
		            		if(iscObjectUtility.isGreaterThanZero(parseFloat(refundTotal) - parseFloat(addedAmount))){
		            			newPaymentMethodObj.RequestedAmount = this.ui.remainingAmount = parseFloat(refundTotal) - parseFloat(addedAmount);
			            	}
		            	}
						if(this.model.getCurrencyList.CurrencyList){
							if(this.ui.orderCurrency && this.ui.orderCurrency != ""){
								for(var j = 0; j < this.model.getCurrencyList.CurrencyList.Currency.length; j++){
									var currency = this.model.getCurrencyList.CurrencyList.Currency[j];
									var currencyType = currency.Currency;
									if(this.ui.orderCurrency === currencyType){
										newPaymentMethodObj.CustomerAccountCurrency = this.model.getCurrencyList.CurrencyList.Currency[j];
									}
								}
							}
							else {
								newPaymentMethodObj.CustomerAccountCurrency = this.model.getCurrencyList.CurrencyList.Currency[0];
							}
						}
						if(this.model.getCompleteOrderDetails.Order.PersonInfoBillTo && !iscObjectUtility.isEmpty(this.model.getCompleteOrderDetails.Order.PersonInfoBillTo)){
							newPaymentMethodObj.PersonInfoBillTo = angular.copy(this.model.getCompleteOrderDetails.Order.PersonInfoBillTo);
						}
						else if(this.ui.custDefaultPersonInfo){
							newPaymentMethodObj.PersonInfoBillTo = angular.copy(this.ui.custDefaultPersonInfo);
						}
						if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerFirstName) && iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerLastName)){
    						newPaymentMethodObj.FirstName = this.model.getCompleteOrderDetails.Order.CustomerFirstName;
							newPaymentMethodObj.LastName = this.model.getCompleteOrderDetails.Order.CustomerLastName;
							newPaymentMethodObj.CreditCardName = iscPayment.getFormattedName(newPaymentMethodObj.FirstName,newPaymentMethodObj.LastName);
    					}
						if(this.model.getPaymentTypeList.PaymentTypeList){
							var paymentTypeFound = false;
							for(var j = 0; j < this.model.getPaymentTypeList.PaymentTypeList.PaymentType.length; j++){
								var paymentTypeDef = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[j];
								var paymentType = paymentTypeDef.PaymentType;
								var paymentTypeGroup = paymentTypeDef.PaymentTypeGroup;
								if(this.ui.isRefundMode){
									if(paymentTypeGroup === 'STORED_VALUE_CARD'){
										newPaymentMethodObj.PaymentType = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[j];
										paymentTypeFound = true;
										break;
									}
								}
								else{
									if(paymentTypeGroup === 'CREDIT_CARD'){
										newPaymentMethodObj.PaymentType = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[j];
										paymentTypeFound = true;
										break;
									}
								}
								
							}
							if(!paymentTypeFound){
								newPaymentMethodObj.PaymentType = this.model.getPaymentTypeList.PaymentTypeList.PaymentType[0];
							}
						}
        				if(this.ui.orderShipToKey != "" && this.ui.orderBillToKey && this.ui.orderShipToKey === this.ui.orderBillToKey){
        					newPaymentMethodObj.useShpAddressForBill = 'Y';
        				}
        				else {
        					newPaymentMethodObj.useShpAddressForBill = 'N';
        				}
						if(this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType && this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType.length > 0){
        					newPaymentMethodObj.CardType = this.model.getPaymentCardTypeList.PaymentCardTypeList.PaymentCardType[0];
        				}
						return newPaymentMethodObj;
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.return.payment.return-payment
					 *@methodname getTotalAmountAlreadyAdded
					 *@description gets amount value for which payment details are already added, including the saved and new payment methods on order.
					 *
					 */
		            getTotalAmountAlreadyAdded : function(){
		            	var totalAmount = 0;
		            	for(var p=0; p < this.model.newPaymentMethods.newPaymentMethod.length; p++){
		            		var paymentMethod = this.model.newPaymentMethods.newPaymentMethod[p];
		            		var requestedAmount = paymentMethod.RequestedAmount;
		            		totalAmount = parseFloat(totalAmount) + parseFloat(requestedAmount);
		            	}
		            	if(this.model.getCompleteOrderDetails.Order.PaymentMethods && this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod
		            	&& this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod.length >0){
		            		for(var p=0; p < this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod.length; p++){
			            		var paymentMethod = this.model.getCompleteOrderDetails.Order.PaymentMethods.PaymentMethod[p];
			            		var requestedAmount = paymentMethod.RequestedAmount;
			            		totalAmount = parseFloat(totalAmount) + parseFloat(requestedAmount);
			            	}
		            	}
		            	return totalAmount;
		            },
		             /**
					 *@iscdoc method
					 *@viewname store.views.return.payment.return-payment
					 *@methodname reInitScreenData
					 *@description called by any fail condition from final mashup call (either exception or payment pending or payment transaction unsuccessful).
					 *
					 */
		            reInitScreenData : function(finalOrderObj){//pending
		            	
						var customerDefaultBillTo = angular.copy(this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo);
						var shippingAddressList = angular.copy(this.model.getCompleteOrderDetails.Order.ShippingAddressList);
						if(this.ui.isExchangeOrderPresent && this.ui.isRefundMode){
							customerDefaultBillTo = angular.copy(this.model.getCompleteOrderDetails.Order.Return.Order.CustomerDefaultBillTo);
        					shippingAddressList = angular.copy(this.model.getCompleteOrderDetails.Order.Return.Order.ShippingAddressList);
						}
						this.model.getCompleteOrderDetails.Order = finalOrderObj;
						this.model.returnOrderDetails = this.ui.isExchangeOrderPresent ? (this.model.getCompleteOrderDetails.Order.Return ? this.model.getCompleteOrderDetails.Order.Return : this.model.returnOrderDetails) : this.model.getCompleteOrderDetails;
		            							
						if(this.ui.isExchangeOrderPresent && this.ui.isRefundMode){
    						if(!this.model.getCompleteOrderDetails.Order.Return.Order.CustomerDefaultBillTo && customerDefaultBillTo){
    							this.model.getCompleteOrderDetails.Order.Return.Order.CustomerDefaultBillTo = customerDefaultBillTo;
    						}
    						if(!this.model.getCompleteOrderDetails.Order.Return.Order.ShippingAddressList && shippingAddressList){
    							this.model.getCompleteOrderDetails.Order.Return.Order.ShippingAddressList = shippingAddressList;
    						}
						}
						else {
							if(!this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo && customerDefaultBillTo){
								this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo = customerDefaultBillTo;
							}
							if(!this.model.getCompleteOrderDetails.Order.ShippingAddressList && shippingAddressList){
								this.model.getCompleteOrderDetails.Order.ShippingAddressList = shippingAddressList;
							}
						}
						
						if(!this.ui.isRefundMode && this.ui.isExchangeOrderPresent && parseFloat(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth) > 0){
							var remainingAmountToAuth = this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth;
        					if(parseFloat(remainingAmountToAuth) > 0){
        						//update remaining amount with AwaitingChargeInterfaceAmount and AwaitingAuthInterfaceAmount for Suspended payment methods
        						this.ui.remainingAmount = angular.copy(remainingAmountToAuth);
        						var suspendAwaitAmt = iscPayment.getAwtAuthNChrgAmtOnSuspndedPmts(this.model.getCompleteOrderDetails.Order.PaymentMethods,this.model.getCompleteOrderDetails.Order.DocumentType);
        						if(suspendAwaitAmt > 0){
        							this.ui.remainingAmount = parseFloat(this.ui.remainingAmount) + parseFloat(suspendAwaitAmt);
        							this.ui.remainingAmount = (this.ui.remainingAmount).toFixed(2);
        						}
        					}
							//var newPaymentMethodObj = this.getNewPaymentMethodObject();
							//this.model.newPaymentMethods.newPaymentMethod[0] = newPaymentMethodObj;
						}
						else if(this.ui.isRefundMode){
							var refundTotal = this.model.returnOrderDetails.Order.OverallTotals.GrandRefundTotal;
	            			var addedAmount = 0;
	            			if(this.model.returnOrderDetails.Order.PaymentMethods && this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod){
		            			for(var sp=0; sp < this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod.length; sp++){
		            				var newPaymentMethodObj = this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod[sp];
		            				var requestedAmount = newPaymentMethodObj.RequestedAmount ? newPaymentMethodObj.RequestedAmount : iscPayment.calculatePlannedRefundAmountToDisplay(newPaymentMethodObj);
		            				addedAmount += parseFloat(requestedAmount);
		            				if(newPaymentMethodObj && newPaymentMethodObj.ProcessChargeTransactionDetail
		            					&& newPaymentMethodObj.ProcessChargeTransactionDetail.ChargeTransactionDetail
		            					&& newPaymentMethodObj.ProcessChargeTransactionDetail.ChargeTransactionDetail.PaymentTransactionErrorList
		            					&& newPaymentMethodObj.ProcessChargeTransactionDetail.ChargeTransactionDetail.PaymentTransactionErrorList.PaymentTransactionError){
		            						this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod[sp].IncompletePaymentType = 'Y';
		            						this.model.returnOrderDetails.Order.PaymentMethods.PaymentMethod[sp].IncompleteDueToError = 'Y';
		            				}
		            			}
	            			}
	            			for(var p=0; p < this.model.newPaymentMethods.newPaymentMethod.length; p++){
	            				var newPaymentMethodObj = this.model.newPaymentMethods.newPaymentMethod[p];
	            				var requestedAmount = newPaymentMethodObj.RequestedAmount;
	            				addedAmount += parseFloat(requestedAmount);
	            			}
		            			
		            		if(iscObjectUtility.isGreaterThanZero(parseFloat(refundTotal) - parseFloat(addedAmount))){
		            			this.ui.remainingAmount = parseFloat(refundTotal) - parseFloat(addedAmount);
			            	}
						}
		            },
		            /**
					 *@iscdoc method
					 *@viewname store.views.return.payment.return-payment
					 *@methodname initScreenDetails
					 *@description called by callback handler for mashup call to re-initializes getCompleteOrderDetails model object when any saved payment method is deleted or resumed.
					 *
					 */
		            initScreenDetails : function(orderModel){//pending
		            	var newPaymentMethodObj = {};
        				this.model.getCompleteOrderDetails = angular.copy(orderModel);
        				if(this.ui.isExchangeOrderPresent){
        					this.model.returnOrderDetails = this.model.getCompleteOrderDetails.Order.Return;
        				}
        				this.ui.orderShipToKey = orderModel.Order.ShipToKey;
        				if(orderModel.Order.BillToKey){
        					this.ui.orderBillToKey = orderModel.Order.BillToKey;
        				}
        				/**if(parseFloat(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth) > 0){
        					if(this.model.newPaymentMethods && this.model.newPaymentMethods.newPaymentMethod 
        					&& this.model.newPaymentMethods.newPaymentMethod.length && this.model.newPaymentMethods.newPaymentMethod.length > 0){
        						var requestedAmount = this.model.newPaymentMethods.newPaymentMethod[this.model.newPaymentMethods.newPaymentMethod.length-1].RequestedAmount;
        						var pendingRequestedAmount = parseFloat(this.model.getCompleteOrderDetails.Order.ChargeTransactionDetails.RemainingAmountToAuth) - parseFloat(this.getTotalAmountAlreadyAdded());
        						if(pendingRequestedAmount > 0 ){
        							var newRequestedAmount = (requestedAmount + pendingRequestedAmount).toFixed(2);
        							this.model.newPaymentMethods.newPaymentMethod[this.model.newPaymentMethods.newPaymentMethod.length-1].RequestedAmount = newRequestedAmount.toString();
        						}
        					}
        					else {
        						newPaymentMethodObj = this.getNewPaymentMethodObject();
        						this.model.newPaymentMethods.newPaymentMethod[0] = newPaymentMethodObj;
        						this.ui.remainingAmount = this.ui.remainingAmount - newPaymentMethodObj.RequestedAmount;
        					}
        				} **/
        				if(!this.model.getCompleteOrderDetails.Order.PersonInfoBillTo
        				&& !(this.model.getCompleteOrderDetails.Order.BillToID
        						&& this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo && this.model.getCompleteOrderDetails.Order.CustomerDefaultBillTo.PersonInfo)){
        					this.model.getCompleteOrderDetails.Order.PersonInfoBillTo = {};
        					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerFirstName) && iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerLastName)){
        						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.FirstName = this.model.getCompleteOrderDetails.Order.CustomerFirstName;
								this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.LastName = this.model.getCompleteOrderDetails.Order.CustomerLastName;
        					}
        					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerPhoneNo)){
        						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.DayPhone = this.model.getCompleteOrderDetails.Order.CustomerPhoneNo;
        					}
        					if(iscObjectUtility.trimString(this.model.getCompleteOrderDetails.Order.CustomerEMailID)){
        						this.model.getCompleteOrderDetails.Order.PersonInfoBillTo.EMailID = this.model.getCompleteOrderDetails.Order.CustomerEMailID;
        					}
        				}
        				
        				this.ui.initcomplete = true;

		            },
		            uiIsPaymentRequired : function(){
		            	return !this.ui.isRefundMode && this.model.getCompleteOrderDetails.Order.OverallTotals.GrandTotal != this.model.returnOrderDetails.Order.OverallTotals.GrandTotal;
		            },
					handleWizardBack:function(){
						console.log("Screen is dirty");
						var that = this;
						if($scope.paymentCaptureForm.$dirty){
							iscModal.showConfirmationMessage("globals.MSG_BackClickDirtyMessage")
								.then(function(actionName){
									if(actionName==="YES"){
										iscReturn.handleWizardBack(false,that.model.getCompleteOrderDetails.Order.OrderLines.TotalNumberOfRecords);
									}
								},function(){});
						}
						else {
							iscReturn.handleWizardBack(false,this.model.getCompleteOrderDetails.Order.OrderLines.TotalNumberOfRecords);
						}
						return true;
					},
					handleWizardExit:function(){
						return iscReturn.handleWizardExit(this.model.getCompleteOrderDetails.Order.OrderLines.TotalNumberOfRecords);				
					}
		            
				});
		}
	]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.return.return-summary.return-summary
 *@package store.views.return.return-summary
 *@class return-summary
 *@description Displays return summary .
 *
 */

angular.module('store').controller('store.views.return.return-summary.return-summary',
		  ['$scope','$rootScope','iscScreen','iscMashup','iscResourcePermission','iscState','iscStateParams','iscPrint','iscPayment','iscPaymentinput','iscModal','iscI18n','$timeout',
			function($scope,$rootScope,iscScreen,iscMashup,iscResourcePermission,iscState,iscStateParams,iscPrint,iscPayment,iscPaymentinput,iscModal,iscI18n,$timeout) {				
				iscScreen.initializeScreen($scope,{
					 
						
				      model:{
				    	  /**
				           *@description This model contains the getCompleteOrderLineList api output for return order.
				           */
				    	  "returnLineList" : {},
				    	  /**
				           *@description This model contains the getCompleteOrderLineList api output for exchange order.
				           */
				    	  "exchangeOrderLineList":{},
				    	  /**
				           *@description This is return order wizard model.
				           */
				    	  "returnOrder" : {},
				    	  /**
				           *@description This model contains payment information of return order.
				           */
				    	  "paymentSummary":{},
				    	  /**
				           *@description This model contains payment types for the store.
				           */
				    	  "getPaymentTypeList":{},
				    	  /**
				           *@description This model contains payment card types for the store.
				           */
				    	  "getPaymentCardTypeList":{},
				    	  /**
				           *@description This model contains real time authorization rule value for the store.
				           */
				    	  "getRulesDetails_ReatTimeAuth":{},
				    	  /**
				           *@description This model contains disposition code list for the store.
				           */
				    	  "dispositionList":{},
				    	  /**
				    	   * @description This model contains exchange order details
				    	   */
				    	  "exchangeOrder":{}
				    	  
				      },
				     
				  		mashupRefs : [
				  		  
				  			{
				  				/**
								*@description This mashup is used to get the list of return order lines.
								*/
				  				 mashupRefId: 'getReturnOrderLines',
						         mashupId: 'returnsummary_getReturnOrderLines',
						         modelName: "returnLineList"
				  			}/*,
				  			{
				  				 mashupRefId: 'getExchangeOrderLines',
						         mashupId: 'returnsummary_getExchangeOrderLines',
						         modelName: "exchangeOrderLineList"
				  			}*/,
				  			
				  			
				  			{
				  				/**
									*@description This mashup is used to get return order details, along with exchange order details and exchange order lines
									*/
				  				 mashupRefId: 'getReturnOrderDetails',
						         mashupId: 'returnsummary_getReturnOrderDetails',
						         modelName: 'returnOrder'
				  			},
				  			
				  			
				  			
				  			{
				  				/**
									*@description This mashup is used to print return receipt.
									*/
				  				 mashupRefId: 'returnsummary_prints',
						         mashupId: 'returnsummary_prints'
				  			},
				  			 {
					            /**
								*@description This mashup is used to get list of payment types for the current Store.
								*/
					            	mashupRefId: 'getPaymentTypeList',
					            	mashupId: 'wsc_paymentCapture_getPaymentTypeList',
					            	modelName : 'getPaymentTypeList'
					            },
					            {
					            /**
								*@description This mashup is used to get list of payment card types (credit card types) for the current Store.
								*/
					            	mashupRefId: 'getPaymentCardTypeList',
					            	mashupId: 'wsc_paymentCapture_getRuleDetails_PaymentCardTypeConfLevel',
					            	modelName : 'getPaymentCardTypeList'
					            }, 
					            {
								/**
									*@description This mashup is used to get rule details of the Rule 'WSC_STORE_REAL_TIME_AUTHORIZATION' for the Store's Enterprise.
									*/
						            	mashupRefId: 'getRulesDetails_ReatTimeAuth',
						            	mashupId: 'wsc_paymentCapture_getRuleDetails_RealTimeAuthorization',
						            	modelName : 'getRulesDetails_ReatTimeAuth'
						            },
						            {
						            	/**
										*@description This mashup is used to send return receipt.
										*/
							            	mashupRefId: 'sendEmail',
							            	mashupId: 'returnsummary_sendEmail',
							            },
							            {
							            	/**
											*@description This mashup is used to disposition codes for the store
											*/
							            	mashupRefId: 'getReturnDispositionList',
											mashupId: 'returnsummary_getReturnDispositionList',
											modelName : 'dispositionList'
							            },
							            
							            {	/**
											*@description This mashup is used to stamp disposition codes on return order
											*/
							            	mashupRefId: 'stampReturnDisposition',
											mashupId: 'returnsummary_stampReturnDisposition',
							            }
				  			
				  		],
				  		
				  		
			            ui:{
			            	/**
			    			 *@property {Number} returnLineShownCount - pageSize of the return line list for continuous scrolling.
			    			 */
			            	returnLineShownCount: 5,
			            	/**
			    			 *@property {Number} exchangeLineShownCount - pageSize of the exchange line list for continuous scrolling.
			    			 */
			            	exchangeLineShownCount:5,
			            	/**
			    			 *@property {String} paymentMethodLabel - bundle key for payment method label which could be Return Method or Payment Method
			    			 */
			            	paymentMethodLabel:"returns.LABEL_Refund_Method",
			            	/**
			    			 *@property {Boolean} showEmailError - flag to display email error
			    			 */
			            	showEmailError:false,
			            	/**
			    			 *@property {Boolean} emailSent - flag to display email sent message
			    			 */
			            	emailSent:false,
			            	/**
			    			 *@property {Boolean} showReturnlines - flag to display return lines panel
			    			 */
			            	showReturnlines : false,
			            	/**
			    			 *@property {Boolean} showExchangelines - flag to display exchange lines panel
			    			 */
				            showExchangelines : false,
				            /**
			    			 *@property {Boolean} disableReturnTab - flag to disable return panel
			    			 */
				            disableReturnTab: false,
				            /**
			    			 *@property {Boolean} closeAllAccordianTabs - flag to close all accordion
			    			 */
				            closeAllAccordianTabs:true,
							emailForm: {},
			            	//prepopulatedEmail:"LABEL_Email_address"
			            	
			            },
			            /**
						 *@description Initializes the return summary screen with getCompleteOrderDetails and getCompleteOrderLineList api calls for return and exchange orders.
						 */
			            initialize : function()
			  		    {
			  			//this.model.orderModel = iscStateParams.params.input;
			            var orderInput = iscStateParams.params.input;
			  			var getOrderDetailsInput = {"Order" : { "OrderHeaderKey" : orderInput.Order.OrderHeaderKey}};
			  			var getReturnLinesInput = {"OrderLine" : { "OrderHeaderKey" : orderInput.Order.OrderHeaderKey}};
			  			var mashupArray = [];
			        	mashupArray.push(iscMashup.getMashupRefObj(this,'getReturnOrderLines',getReturnLinesInput));
			        	mashupArray.push(iscMashup.getMashupRefObj(this,'getReturnOrderDetails',getOrderDetailsInput));
			        	mashupArray.push(iscMashup.getMashupRefObj(this,"getRulesDetails_ReatTimeAuth",iscPaymentinput.getRuleDetailsInput({})));
			        	mashupArray.push(iscMashup.getMashupRefObj(this,"getPaymentTypeList",iscPaymentinput.getPaymentTypeListInput(orderInput)));
			        	mashupArray.push(iscMashup.getMashupRefObj(this,"getPaymentCardTypeList",iscPaymentinput.getPaymentCardTypeListInput(orderInput)));
			        	mashupArray.push(iscMashup.getMashupRefObj(this,"getReturnDispositionList",{}));
			        	iscMashup.callMashups(this,mashupArray,{}).then(function(data){
			  				var output = iscMashup.getMashupOutput(data,'getReturnOrderDetails');
			  				
		            		this.updateReturnOrderDetails(output);
  		            	}.bind(this),angular.noop);
			        	
			        	
			        	/*$scope.$on("$handleBackButton", this.handleBackButtonEvent.bind(this)); */
			  			/*iscMashup.callMashup(this,'getReturnOrderDetails',getOrderDetailsInput,{}).then(function(){
			  				var output = iscMashup.getMashupOutput(data,'getReturnOrderDetails');
		            		this.updateReturnOrderDetails(output);
  		            	}.bind(this));*/
			  			},
			  			/**
			  			 * @description This method updates the models with return order details
			  			 * @param {Object} output - output of getReturnOrderDetails mashup
			  			 */
			  			updateReturnOrderDetails:function(output){
			  				this.model.returnOrder = output;
			  				
			  				if(!iscCore.isVoid(this.model.returnOrder.Order.CustomerEMailID)){
			  					this.ui.emailid = this.model.returnOrder.Order.CustomerEMailID;
			  				}
			  				
			  				//this.model.returnLineList.OrderLines = output.OrderLines;
			  				if(!iscCore.isVoid(output.Order.ExchangeOrders.ExchangeOrder)){
			  					this.model.exchangeOrderLineList.OrderLineList = output.Order.ExchangeOrders.ExchangeOrder[0].OrderLineList;
			  					this.model.exchangeOrder.Order = output.Order.ExchangeOrders.ExchangeOrder[0];
			  				}else{
			  					this.ui.closeAllAccordianTabs = false;
			  					this.ui.disableReturnTab = true;
			  					this.model.exchangeOrderLineList = {OrderLineList:{TotalNumberOfRecords:0}};
			  					this.model.exchangeOrder.Order = {PriceInfo:{Currency:this.model.returnOrder.Order.PriceInfo.Currency}};
			  				}
			  				var paymentMethodOrder = {};
			  				
			  				if(output.Order.OverallTotals.GrandTotalDifference > 0){
			  					//this.model.paymentMethods.PaymentMethods = output.Order.ExchangeOrders.ExchangeOrder[0].PaymentMethods;
			  					paymentMethodOrder.Order = output.Order.ExchangeOrders.ExchangeOrder[0];
			  					this.ui.paymentMethodLabel="returns.LABEL_Payment_Method";
			  				}else{
			  					paymentMethodOrder = this.model.returnOrder;
			  				}
			  				
			  				if(this.model.getRulesDetails_ReatTimeAuth && this.model.getRulesDetails_ReatTimeAuth.Rules && this.model.getRulesDetails_ReatTimeAuth.Rules.RuleSetValue == '02'){
            					this.ui.realTimeAuthEnabled = true;
            				}
			  				
			  				if(output.Order.OverallTotals.GrandTotalDifference != 0){
			  					var orderPaymentMethodsToShow = iscPayment.prepareSuccessMessagePopupData(paymentMethodOrder,this.model.getPaymentTypeList.PaymentTypeList,this.model.getPaymentCardTypeList.PaymentCardTypeList,this.ui.realTimeAuthEnabled);
				  				console.log(orderPaymentMethodsToShow);
				  				this.model.paymentSummary.paymentDetails = orderPaymentMethodsToShow.paymentDetails;
				  				this.model.paymentSummary.paymentMethodsAvailable= orderPaymentMethodsToShow.paymentMethodsAvailable;
			  				}else{
			  					this.model.paymentSummary.paymentDetails = {};
			  					this.model.paymentSummary.paymentMethodsAvailable= false;
			  				}
			  				
			  				if(this.model.returnLineList.OrderLineList.TotalNumberOfRecords == 0){
			  					this.ui.showReturnlines = false;
			  					this.ui.showExchangelines = true;
			  				}else{
			  					this.ui.showReturnlines = true;
			  					this.ui.showExchangelines = false;
			  				}
			  				
			  			},
			            
			  			/*handleBackButtonEvent:function(e,data){
			  				e.preventDefault();
			  				this.uiShowReturnDisposition();
			  			},*/
			  			/**
						 *@description Shows next set of return order lines when order lines panel is scrolled.
						 */
			  			uiGetReturnOrderLineListNext: function(){
			            	
		            	    if(this.ui.returnLineShownCount <= this.model.returnLineList.OrderLineList.OrderLine.length){
			                  this.ui.returnLineShownCount+=5;
			                }
		                },
			            
		                /**
						 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
						 */
			    		uiReturnOrderLineScrollActionValidator : function(){
			             	return true;
			             },
			             /**
						 *@description Shows next set of exchange order lines when order lines panel is scrolled.
						 */
			             uiGetExchOrderLineListNext: function(){
				            	
			            	    if(this.ui.exchangeLineShownCount <= this.model.exchangeOrderLineList.OrderLineList.OrderLine.length){
				                  this.ui.exchangeLineShownCount+=5;
				                }
			                },
			                
				            /**
							 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
							 */
			                uiExchOrderLineScrollActionValidator : function(){
				             	return true;
				             },
		                /**
						 *@description Closes return summary screen. 
						 */
		                
			            uiClose : function(){
			              iscState.goToPreviousState();
			                
			            },
			            /**
						 *@description Handles back wizard back button. Takes the user to home page 
						 */
			            handleWizardBack:function(){
							iscState.goToPreviousState();
						},
			            /**
						 *@description This method opens the home screen. 
						 */
			    		gotoHome : function(){
			    			iscState.goToState('/home',{},{});
			    		},
			    		
			    		/**
						 *@description This method checks if disposition codes are defined. If yes, then open return disposition popup otherwise go to homepage
						 */
			    		uiShowReturnDisposition: function(){
			    			if(this.model.dispositionList.ReturnDispositionList.TotalNumberOfRecords == 0
			    					|| this.model.returnLineList.OrderLineList.TotalNumberOfRecords == 0){
			    				this.gotoHome();
			    			}else{
			    				this.openReturnDispositionPopup();
			    			}
			    			
			    		},
			    		
			    		/**
						 *@description This method opens return disposition popup.
						 */
			    		openReturnDispositionPopup : function(){
			    			var that=this;
			    			var popupInput = {OrderHeaderKey:this.model.returnOrder.Order.OrderHeaderKey};
    						popupInput.returnLineList = this.model.returnLineList;
    						popupInput.dispositionList = this.model.dispositionList;
			    			var returnDispPopupInput = {
			    					 modalInput: function(){
			    		      			return popupInput;
			    		      		}   
			    				   
			    				};
			    			
			    			iscModal.openModal('store.views.return.common.disposition.return-disposition',returnDispPopupInput,{}).then(function(callBackData){
			    				if(callBackData.data !== null && callBackData.data !== undefined){
			    					that.stampReturnDisposition.call(that,callBackData.data);
			    					//gotoHome();
			    				}
			    			},
			    				angular.noop);
			    		},
			    		
			    		/**
						 *@description This method calls changeOrder to stamp return disposition code on return order.
						 *@param {Object} data - output of chageOrder mashup
						 */
			    		stampReturnDisposition:function(data){
			    			var inputChangeOrder = data.inputChangeOrder;
			    			iscMashup.callMashup(this,'stampReturnDisposition',inputChangeOrder,{}).then(this.handleStampReturnDisposition.bind(this),angular.noop);
			    		},
			    		/**
						 *@description This method takes the user to home page after return disposition codes are stamped.
						 */
			    		handleStampReturnDisposition: function(data){
			    			this.gotoHome();
			    		},
			    		/**
						 *@description This method does custom validation for email field
						 */
			    		uiCustomEmailValidator:function(validationResponseObj, angularErrorObj, modelValue, viewValue) {
			    			if (angularErrorObj.required) {
			    				validationResponseObj.booleanResponse = false;
			    				validationResponseObj.errorMesssage = iscI18n.translate('returns.MSG_EmailIsRequired');
			    			}else if(angularErrorObj.pattern){
			    				validationResponseObj.booleanResponse = false;
			    				validationResponseObj.errorMesssage = iscI18n.translate('datatype.EmailFormat');
			    			}
			    			return validationResponseObj;
			    		},
			             
			    		/**
						 *@description This method forms the input to print service
						 */
			             getPrintServiceInput: function(){
			            	 var inputObj = {};
		             			inputObj.Order={};
		             			var model= this.model.returnOrder.Order;
		             			inputObj.Order.OrderHeaderKey = model.OrderHeaderKey;
		             			inputObj.Order.ShipNode = model.SellerOrganizationCode;
		            		 	inputObj.Order.Currency = model.PriceInfo.Currency;
		            		 	inputObj.Order.OrganizationCode = model.EnterpriseCode;
		            		 	return inputObj;
			             },
			             /**
						 *@description This method calls the print service
						 */
			            uiPrintReceipt : function(){
			            	var inputObj = this.getPrintServiceInput();
	             			iscMashup.callMashup(this,"returnsummary_prints",inputObj,{}).then(this.printCallBackHandler.bind(this),angular.noop);
				  	   },
				            	
				  			/**
							 *@description Call back handler for print service. 
							 *@param {Object} data - Output of print service. 
							 */
				            printCallBackHandler : function(data){
				            	var output = iscMashup.getMashupOutput(data,"returnsummary_prints");
								iscPrint.printHtmlOutput(output);
				  	          },
				  	          
				  	        /**
								 *@description This method calls the email service
								 *@param {Object} emailForm - ui email form for validation
								 *@param {String} emailID - email id to which the email should be sent.
								 */ 
				  	        uiSendEmail:function(){
								var that = this;
								$timeout(function () {
									that.ui.emailForm.$setDirty();
									if(iscCore.isVoid(that.ui.emailid) || !that.ui.emailForm.$valid){
										that.ui.showEmailError=true;
										document.getElementById('return_emailId').focus();
										 
									}else if(that.ui.emailForm.$valid){
										var inputObj = that.getPrintServiceInput();
										inputObj.Order.ToEmailID = that.ui.emailid;
										iscMashup.callMashup(that,"sendEmail",inputObj,{}).then(that.emailCallBackHandler.bind(that),angular.noop);
									}
								},10);
				  	        },
				  	      /**
							 *@description This method reset the email flags
							 */
				  	      uiResetEmailFlags : function(){
				  	    	var emailInputText = document.getElementById("return_emailId").value;
				  	    	if(!iscCore.isVoid((emailInputText))){
				  	    		this.ui.emailSent=false;
					  	    	this.ui.showEmailError=false;
				  	    	}
				  	    	
				  	      },
				  	      /**
				  	       * @description This method is the call back handler of email service. It displays email sent message
				  	       */
				  	      emailCallBackHandler : function(data){
				            	var output = iscMashup.getMashupOutput(data,"sendEmail");
				            	var screen = this;
				            	this.ui.emailSent = true;
				  	          },
				  	         
				  	          
				 });
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58),  IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewinfo
 *@viewname store.views.return.returns-list.returns-list
 *@package store.views.return.returns-list
 *@class returns-list
 *@description Displays return and exchange order lines
 *
 */
angular.module('store').controller('store.views.return.returns-list.returns-list',
  ['$animate','$scope','$rootScope', '$timeout','iscScreen','iscWizard','$locale','iscStateParams','iscMashup','iscModal','iscDomUtility','iscResourcePermission','$filter','iscReturn','iscI18n','iscOrder','iscState','iscAppContext','$interval',
	function($animate,$scope,$rootScope,$timeout, iscScreen,iscWizard,$locale,iscStateParams,iscMashup,iscModal,iscDomUtility,iscResourcePermission,$filter,iscReturn,iscI18n,iscOrder, iscState,iscAppContext,$interval) {
		
		iscWizard.initializeWizardPage($scope,{
			
			   	         
            model:{
            	/**
		           *@description This model contains the getCompleteOrderLineList api output.
		           */
		    	  "orderLineList" : {} ,
		    	  /**
		           *@description This model contains the getCompleteOrderDetails api output.
		           */
		    	  "getCompleteOrderDetails":{},
                /**
                   *@description This model contains the return order details.
                   */
                "returnOrderDetails":{},
                /**
                 *@description This model contains the return order line list.
                 */
                "returnOrderLineList":{},
                /**
                 *@description This model contains the scan input for find products
                 */
                "addProductInput":{}
            },
            mashupRefs:[
                        {
                        	/**
							*@description This mashup is used to get return order line list.
							*/
                            mashupRefId: 'getCompleteOrderLineList',
                            mashupId: 'returnsList_getCompleteOrderLineList'

                        },
                        {
                        	/**
							*@description This mashup is used to get return order details.
							*/
                        	mashupRefId: 'getCompleteOrderDetails',
                        	mashupId: 'returnsList_getCompleteOrderDetails'
                        },
                        {
                        	/**
							*@description This mashup is used to record approval for overridding order lines using manager override code.
							*/
                        	mashupRefId: 'recordApprovalForReturnOrderLines',
                        	mashupId: 'returnOrder_recordApprovalForReturnOrderLines'
                        },
			  			{
			  				/**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid viewcart_getCompleteOrderLineList
								*@mashuprefid viewcart_getCompleteOrderLineList
								*@modelname orderLineList
								*@description This mashup is used to get the list of OrderLines.
								*/
			  				 mashupRefId: 'viewcart_getCompleteOrderLineList',
					         mashupId: 'viewcart_getCompleteOrderLineList',
					         modelName: "orderLineList"
			  			},
			  			 
			  			{
			  				/**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid viewcart_getCompleteOrderDetails
								*@mashuprefid viewcart_getCompleteOrderDetails
								*@modelname getCompleteOrderDetails
								*@description This mashup is used to get order details.
								*/
			  				
			  				 mashupRefId: 'viewcart_getCompleteOrderDetails',
					         mashupId: 'viewcart_getCompleteOrderDetails',
					         modelName: 'getCompleteOrderDetails'
			  			},
			  			
			  			{
			  			 /**
					        *@iscdoc mashup
							*@viewname store.views.order.cart-details.cart-details
							*@mashupid wsc_paymentCapture_getRuleDetails_ChargeShipLines
							*@mashuprefid getRuleDetails_ChargeShipLines
							*@modelname getRuleDetails_ChargeShipLines
							*@description This mashup is used to get rule details of the Rule 'CHARGE_SHIP_LINES_AT_STORE' for the Store's Enterprise.
							*/
				            	mashupRefId: 'getRuleDetails_ChargeShipLines',
				            	mashupId: 'wsc_paymentCapture_getRuleDetails_ChargeShipLines',
				            	modelName : 'getRuleDetails_ChargeShipLines'
				        },
			  			 
			  			{  
			  				/**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid viewcart_ovp_modifyFulfillmentOptions
								*@mashuprefid viewcart_ovp_modifyFulfillmentOptions
								*@description This mashup is used to call modifyFulfillmentOptions when price is overridden for a product.
								*/
			  				mashupRefId: 'viewcart_ovp_modifyFulfillmentOptions',
			  				mashupId: 'viewcart_ovp_modifyFulfillmentOptions'
			  				
			  			},
			  			
			  			{
			  				/**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid viewcart_getItemAvailabilityForStore
								*@mashuprefid viewcart_getItemAvailabilityForStore
								*@description This mashup is used to check availability of the product when quantity is edited or ShipTo address of order line is changed.
								*/
			  				mashupRefId:'viewcart_getItemAvailabilityForStore',
			  				mashupId:'viewcart_getItemAvailabilityForStore'
			  			},
			  			
			  			{
			  				/**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid viewcart_modifyFulfillmentOptions
								*@mashuprefid viewcart_modifyFulfillmentOptions
								*@description This mashup is used to call modifyFulfillmentOptions api when coupon is removed,store is selected for a pickup line and delivery method is changed.
								*/
			  				mashupRefId:'viewcart_modifyFulfillmentOptions',
			  				mashupId:'viewcart_modifyFulfillmentOptions'
			  				
			  			},
			  			
			  			{   
			  				/**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid viewcart_changeOrderForGift
								*@mashuprefid viewcart_changeOrderForGift
								*@description This mashup is used to call changeOrder api to add/edit/delete gift information either at order/orderline level.
								*/
			  				mashupRefId:'viewcart_changeOrderForGift',
			  				mashupId:'viewcart_changeOrderForGift'
			  				
			  			},
			  			
			  			{
			  				/**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid vc_modifyFulfillmentOptionsForDeletion
								*@mashuprefid vc_modifyFulfillmentOptionsForDeletion
								*@description This mashup is used to call modifyFulfillmentOptions api to delete a order line.
								*/
			  				mashupRefId:'vc_modifyFulfillmentOptionsForDeletion',
			  				mashupId:'vc_modifyFulfillmentOptionsForDeletion'
			  				
			  			},
			  			
			  			{
			  				/**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid vc_getCompleteOrderLineList
								*@mashuprefid vc_getCompleteOrderLineList
								*@description This mashup is used to call getCompleteOrderLineList to get total number of order lines to validate whether the order needs to be reserved.
								*/
			  				mashupRefId:'exchange_getCompleteOrderLineList',
			  				mashupId:'exchange_getCompleteOrderLineList' 
			  				
			  			},
			  			
			  			{
			  				/**
						        *@iscdoc mashup
								*@viewname store.views.order.cart-details.cart-details
								*@mashupid vc_updateSettledQtyOnAllLines
								*@mashuprefid vc_updateSettledQtyOnAllLines
								*@description This mashup is used to call changeOrder to update SettledQuantity on non-settled lines in case of orders in mixed mode, which is having settled and non-settled lines.
								*/
			  				mashupRefId:'vc_updateSettledQtyOnAllLines',
			  				mashupId:'vc_updateSettledQtyOnAllLines' 
			  				
			  			},
			  			
			            {
			  				/**
							*@description This mashup is used to delete a return order line. 
							*/
					    	mashupRefId: 'deleteReturnOrderLine',
	                        mashupId: 'returnsList_modifyReturnOrderLines'
				        },
				        {
				        	/**
							*@description This mashup is used to save return reason for return order lines.
							*/
					    	mashupRefId: 'applyReturnReasonToReturnOrderLine',
	                        mashupId: 'returnsList_modifyReturnOrderLines'
				        },
				        {
				        	/**
							*@description This mashup is used to process return order where the return policies will be executed against the return order.
							*/
					    	mashupRefId: 'processReturnOrder',
	                        mashupId: 'returnsList_processReturnOrder'
					     },
					      {
					    	 /**
								*@description This mashup is used to process return order lines discount.
								*/
					    	mashupRefId: 'returnsListLoad_processReturnOrder',
	                        mashupId: 'returnsListLoad_processReturnOrder'
					     },
					     {
					    	 /**
								*@description This mashup is used to update customer information in return order.
								*/
					    	 mashupRefId: 'updateCustomerInfoInReturnOrder',
		                     mashupId: 'returnsList_updateCustomerInfoInReturnOrder'
					     }
			  			
                       ],
            ui:{
            	 /**
				*@property {Number}  orderLineShownCount - pageSize of the Order line list for continuous scrolling.
				*/
                orderLineShownCount: 5,
                /**
				*@property {Number}  returnOrderLinesCount - contains the number of return order lines.
				*/
                returnOrderLinesCount:"0",
                /**
                 *@property {Boolean} oLineQtyEditResourcePermission - true/false based on resource permission for editing order line quantity.
                 */
                oLineQtyEditResourcePermission :false,
                /**
                 *@property {Boolean} hasNonReturnableOrderLines - true/false based on return order contains non returnable lines or not
                 */
                hasNonReturnableOrderLines:false,
                /**
                 *@property {String} refundButtonActionKey - contains Refund button value computed based on Return Order Total and Exchange Order Total.
                 */
                refundButtonActionKey:"",
                /**
                 *@property {Number} refundAmount - contains refund amount to be returned to the customer
                 */
                refundAmount:"0.00",
                /**
                 *@property {Number} paymentAmount - contains payment amount to be paid by the customer
                 */
                paymentAmount:"0.00",
                /**
                 *@property {Boolean} comingFromExchange -  true if return list screen is navigated from Add Exchange Product screen, false otherwise  
                 */
                comingFromExchange:false,
                /**
				*@property {Number}  oLineShownCount - pageSize of the Order line list for continuous scrolling.
				*/
                oLineShownCount : 5,
                /**
                 *@property {Boolean} showReturnlines -  if true return list accordian to be expanded and if false return list accordian to be collapsed
                 */
                showReturnlines : false,
                /**
                 *@property {Boolean} showExchangelines -  if true exchange list accordian to be expanded and if false exchange list accordian to be collapsed
                 */
                showExchangelines : false,
                /**
                 *@property {Boolean} OpenCustomerTabInMobile -  if true customer tab is expanded in mobile resolution and if false customer tab is collapsed.
                 */
                OpenCustomerTabInMobile:false,
                /**
                 *@property {String} currentAccordianTabOpen - 'Exchange' or 'Return' based on which accordian tab is open
                 */
                currentAccordianTabOpen:"",
                /**
                 *@property {Boolean} closeAllAccordianTabs -  if true return and exchange list accordian will be collapsed and if false both will be expanded. 
                 */
                closeAllAccordianTabs:true,
				/**
                 *@property {Number} activeTabIndex -  index of the tab that is open and active
                 */
				activeTabIndex : null

            },
            
	         /**
	         * @description method to initialize the controller and search for product using the input to the page.
	         */
	         initialize: function(){
	        	 $rootScope.$showBackButtonForStates = true;
	        	 var pageInput = iscWizard.getWizardPageInput();
	        	 var orderHeaderKey = "";
	        	 
	        	 if(iscResourcePermission.hasPermission("WSC000032")){
		  				this.ui.oLineQtyEditResourcePermission=true;
					}
	        	 
	        	 if(!iscCore.isVoid(pageInput) && !iscCore.isVoid(pageInput.input)) {
	        		 orderHeaderKey = pageInput.input;
	        	 } else {
	        		 var returnOrderModel = iscWizard.getWizardModel("returnOrder");
	        		 orderHeaderKey = returnOrderModel.Order.OrderHeaderKey;
	        	 }
	        	 
	        	 
	        	 var processReturnOrderInput = {
	        			 Order : {
	        				 OrderHeaderKey:orderHeaderKey
	        			 }
	        	 };
	        	 
	        	 
	        	 var completeOrderDetailsInput = {
	        			 Order : {
	        				 OrderHeaderKey:orderHeaderKey
	        			 }
	        	 };
	        	 var completeOrderLineListInput = {
	        			 OrderLine : {
	        				 OrderHeaderKey:orderHeaderKey,
	        				 SkipRuleAndViolation:"true"
	        			 }
	        	 };
	        	 
	        	var mashupArray = [];
	        	
	        	var openReturnReason = iscWizard.getWizardModel('forReturnReasonPopup');
				this.ui.comingFromExchange = !iscCore.isVoid(openReturnReason) && openReturnReason.ExchangeOrderOpened == 'Y';
				
	        	if(!this.ui.comingFromExchange) {
	        		mashupArray.push(iscMashup.getMashupRefObj(this,'returnsListLoad_processReturnOrder',processReturnOrderInput));
		        	mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteOrderLineList', completeOrderLineListInput));
		        	mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteOrderDetails',completeOrderDetailsInput));
	        	}
			
	             var exchangeOrderModel = iscWizard.getWizardModel("exchangeOrderModel");
	             if(!iscCore.isVoid(exchangeOrderModel)){
			        	mashupArray.push(iscMashup.getMashupRefObj(this,'viewcart_getCompleteOrderLineList',{"OrderLine" : { "OrderHeaderKey" : exchangeOrderModel.Order.OrderHeaderKey}}));
			        	mashupArray.push(iscMashup.getMashupRefObj(this,'viewcart_getCompleteOrderDetails', {"Order" : { "OrderHeaderKey" : exchangeOrderModel.Order.OrderHeaderKey}}));
	             } 
		        
	             if(mashupArray.length > 0) {
	            	 iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
	             } else {
	            	 
	            	 var returnOrderLines = iscWizard.getWizardModel('ReturnOrderLines');
	        		 var returnOrderDetails = iscWizard.getWizardModel('ReturnOrderDetails');
	        		 returnOrderDetails.Order.OrderLines = {TotalLinesInCart:returnOrderLines.OrderLineList.TotalNumberOfRecords};
	        	
		        	if(!iscCore.isVoid(returnOrderDetails)){
		        		this.model.returnOrderDetails = angular.copy(returnOrderDetails);
		        		iscWizard.setWizardModel("returnOrder",angular.copy(returnOrderDetails));
		        	}
		        	
		        	if(!iscCore.isVoid(returnOrderLines)){
		        		this.model.returnOrderLineList =  returnOrderLines;
		        		this.ui.returnOrderLinesCount = this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords;
		        	}

		        	this.calculateRefundPaymentTotal();
	             }
	            
	         },
	         
	         /**
				 *@description callback handler for init APIs invoked in initialize() method.
				 *@param {Object} response - Controller data of init api calls.
				 */	
	         handleInitApiCalls:function(response) {
	        	 
	        	 var returnOrderDetails = "", returnOrderLines="";
	        	 
	        	 if(!this.ui.comingFromExchange) {
	        		 returnOrderLines = iscMashup.getMashupOutput(response,"getCompleteOrderLineList");
	        		 returnOrderDetails = iscMashup.getMashupOutput(response,"getCompleteOrderDetails");
	        		 returnOrderDetails.Order.OrderLines = {TotalLinesInCart:returnOrderLines.OrderLineList.TotalNumberOfRecords};
	        	 } else {
	        		 returnOrderLines = iscWizard.getWizardModel('ReturnOrderLines');
	        		 returnOrderDetails = iscWizard.getWizardModel('ReturnOrderDetails');
	        	 }
	        	
	        	
	        	if(!iscCore.isVoid(returnOrderDetails)){
	        		this.model.returnOrderDetails = angular.copy(returnOrderDetails);
	        		iscWizard.setWizardModel("returnOrder",angular.copy(returnOrderDetails));
	        	}
	        	if(!iscCore.isVoid(returnOrderLines)){
	        		this.model.returnOrderLineList =  returnOrderLines;
	        		this.ui.returnOrderLinesCount = this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords;
	        	}
	        	
	        	  /* getCompleteOrderLineList api output for Exchange order*/
				var apiOutput = iscMashup.getMashupOutput(response,"viewcart_getCompleteOrderLineList");
				if(!iscCore.isVoid(apiOutput)){
					var orderLines = []; 
		 	        orderLines = apiOutput.OrderLineList.OrderLine;
		 	        
		 			if(!iscCore.isVoid(orderLines)){
		 				
		 				for(var k= 0; k<orderLines.length ; k++){
		 					orderLines[k].OrderLineTranQuantity.OrderedQty = $filter('number')(orderLines[k].OrderLineTranQuantity.OrderedQty);    
		 					orderLines[k].OrderedQty = $filter('number')(orderLines[k].OrderedQty);
						}
		 			}
		 			
		 			this.model.orderLineList = apiOutput;
	        		 
				} else {
					 this.ui.showReturnlines = true;
	        		 
				}
				
				 var numOfExchangeLines = 0;
	        	 if(!iscCore.isVoid(this.model.orderLineList) && !iscCore.isVoid(this.model.orderLineList.OrderLineList) && !iscCore.isVoid(this.model.orderLineList.OrderLineList.OrderLine) && !iscCore.isVoid(this.model.orderLineList.OrderLineList.OrderLine.length)) {
	        		 numOfExchangeLines = $filter('number')(this.model.orderLineList.OrderLineList.OrderLine.length);       		 
	        	 }
	        	 
	        	 
	        	 if(numOfExchangeLines > 0) {
	        		 
	        		 this.ui.showExchangelines =  this.ui.closeAllAccordianTabs = true;
	        		 this.ui.currentAccordianTabOpen = "EXCHANGE";
	        		 
	        	 } else {
	        		 
	        		 this.ui.closeAllAccordianTabs = false;
	        		 this.ui.showExchangelines = this.ui.showReturnlines  = true;
	        		 this.ui.currentAccordianTabOpen = "";
	        	 }
	        	 
				
				this.calculateRefundPaymentTotal();
				this.checkToOpenReturnReasonPopup();
	         },
	         
	         /**
				 *@description This method checks if return reason popup needs to launched for Return Order
				 */	
	         checkToOpenReturnReasonPopup:function(){
	        	/*var openReturnReason = iscWizard.getWizardModel('forReturnReasonPopup');
				this.ui.comingFromExchange = !iscCore.isVoid(openReturnReason) && openReturnReason.ExchangeOrderOpened == 'Y';*/
				if(this.model.returnOrderLineList.OrderLineList.AllLinesHaveReturnReason != 'Y' && !this.ui.comingFromExchange){
					this.openMultipleReturnReasonPopup();
				}
				iscWizard.setWizardModel('forReturnReasonPopup',{ExchangeOrderOpened:'N'});
				this.ui.comingFromExchange = false;
				
				//set focus on process return button if the return reason popup is not opened
				$timeout(function ()
				    {
				         iscDomUtility.setFocus(document.getElementById('itemBarCodeTextBox'));
				    }, 0);
	         },
	         
	         /**
				 *@description This method opens Return Reason popup.
				 */	
	         
	         openMultipleReturnReasonPopup:function(){
	        	 var that=this;
	    			var popupInput = {OrderHeaderKey:this.model.returnOrderDetails.Order.OrderHeaderKey};
					popupInput.returnLineList = this.model.returnOrderLineList;
	    			var returnReasonPopupInput = {
	    					 modalInput: function(){
	    		      			return popupInput;
	    		      		}   
	    				   
	    				};
	    			
	    			/* there are two modal names because these popups have different modal css.
	    			 * The html and controller are the same.
	    			 */
	    			var modalName = 'store.views.return.common.reason.return-reason-multiple';
	    			if(this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords == '1'){
	    				modalName = 'store.views.return.common.reason.return-reason-oneline';
	    			}
	    			iscModal.openModal(modalName,returnReasonPopupInput,{}).then(function(callBackData){
	    				if(callBackData.data !== null && callBackData.data !== undefined){
	    					that.stampMultipleReturnReason.call(that,callBackData.data);
	    				}
	    			},
	    			function(callBackData){
    					//set focus on process return button after the return reason popup is closed by clicking on cancel
	    				$timeout(function ()
	    					    {
	    					         iscDomUtility.setFocus(document.getElementById('itemBarCodeTextBox'));
	    					    }, 0);
	    			});
	         },
	         
	         /**
	 		*@description callback handler on click of submit/ok in Return reason popup
	 		* @param {Object} data - contains data captured in Return reason popup
	 	 */		
	         
	         stampMultipleReturnReason:function(data){
	    			var inputChangeOrder = data.inputChangeOrder;
	    			iscMashup.callMashup(this,'applyReturnReasonToReturnOrderLine',inputChangeOrder,{}).then(this.updateReturnOrderLineList.bind(this),angular.noop);
	    		},
	    		
	    		
	    		/**
		 		*@description This method calculates the Refund/Payment total based on Return Order total and Exchange Order total. 
		 	 */		
	         calculateRefundPaymentTotal:function() {
	        	
	        	 var returnOrderTotal = 0, exchangeOrderTotal = 0;
	        	 
	        	 /*have a default model for currency*/
	        	 if(iscCore.isVoid(this.model.getCompleteOrderDetails)){
	        		 this.model.getCompleteOrderDetails = {Order:{PriceInfo:{Currency:this.model.returnOrderDetails.Order.PriceInfo.Currency}}};
	        	 }
	        			 
	        	 if(!iscCore.isVoid(this.model.returnOrderDetails) && !iscCore.isVoid(this.model.returnOrderDetails.Order.OverallTotals)) {
	        		 returnOrderTotal = this.model.returnOrderDetails.Order.OverallTotals.GrandTotal;
	        		 returnOrderTotal = Number(returnOrderTotal.replace(/[^0-9\.]+/g,""));
	        		 if(isNaN(returnOrderTotal))
	        			 returnOrderTotal = 0;
	        	 }
	        	 
	        	 if(!iscCore.isVoid(this.model.getCompleteOrderDetails) && !iscCore.isVoid(this.model.getCompleteOrderDetails.Order.OverallTotals)) {
	        		 exchangeOrderTotal = this.model.getCompleteOrderDetails.Order.OverallTotals.GrandTotal;
	        		 exchangeOrderTotal = Number(exchangeOrderTotal.replace(/[^0-9\.]+/g,""));
	        		 if(isNaN(exchangeOrderTotal))
	        			 exchangeOrderTotal = 0;
	        	 }
	        	 
	        	 if(returnOrderTotal > exchangeOrderTotal) {
	        		 this.ui.refundButtonActionKey = "returns.LABEL_Process_Refund";
	        		 this.ui.refundAmount = returnOrderTotal - exchangeOrderTotal;
	        		 this.ui.paymentAmount = 0;
	        	 } else if (returnOrderTotal < exchangeOrderTotal) {
	        		 this.ui.refundButtonActionKey = "returns.LABEL_Process_Payment";
	        		 this.ui.refundAmount = 0;
	        		 this.ui.paymentAmount = exchangeOrderTotal - returnOrderTotal;
	        	 } else {
	        		 this.ui.refundButtonActionKey = "returns.LABEL_Process_Return";
	        		 this.ui.paymentAmount = "0.00";
	        		 this.ui.refundAmount = "0.00";
	        	 }
	        	 
	         },
	         
	         /**
		 		*@description This method is invoked when clicked on Return list/Exchange list accordian
		 		* @param {String} clickedTab - contains clicked accordian tab name - RETURN/EXCHANGE 
		 	 */		
	         uiOnAccordianClick:function(clickedTab) {
	        	 
	        	 var numOfExchangeLines = 0;
	        	 if(!iscCore.isVoid(this.model.orderLineList) && !iscCore.isVoid(this.model.orderLineList.OrderLineList) && !iscCore.isVoid(this.model.orderLineList.OrderLineList.OrderLine) && !iscCore.isVoid(this.model.orderLineList.OrderLineList.OrderLine.length)) {
	        		 numOfExchangeLines = $filter('number')(this.model.orderLineList.OrderLineList.OrderLine.length);       		 
	        	 }
	        	 
/*	        	 if(numOfExchangeLines == 0) {
	        		 
	        		 this.ui.closeAllAccordianTabs = false;
	        		 this.ui.showExchangelines = true;
	        		 this.ui.currentAccordianTabOpen = "";
	        		 
	        	 } else if (numOfExchangeLines > 0){*/
	        		 
	        		this.ui.closeAllAccordianTabs = true; 
	        		if(clickedTab == 'EXCHANGE') {
		        		 
	        			if(clickedTab == this.ui.currentAccordianTabOpen || iscCore.isVoid(this.ui.currentAccordianTabOpen)) {
	        				//close the exchange tab
	        				this.ui.showExchangelines = false;
	        				this.ui.currentAccordianTabOpen = 'RETURN';
	        			} else {
	        				//open exchange tab
	        				this.ui.showExchangelines = true;
	        				this.ui.showReturnlines = false;
	        				this.ui.currentAccordianTabOpen = 'EXCHANGE';
	        			}
		        		 
	 	        	} else if(clickedTab == 'RETURN') {
	 	        		
	 	        		if(clickedTab == this.ui.currentAccordianTabOpen || iscCore.isVoid(this.ui.currentAccordianTabOpen)) {
	        				//close the return tab
	 	        			this.ui.showReturnlines = false;
	 	        			this.ui.currentAccordianTabOpen = 'EXCHANGE';
	        			} else {
	        				//open return tab 
	        				this.ui.showReturnlines = true;
	        				this.ui.showExchangelines = false;
	        				this.ui.currentAccordianTabOpen = 'RETURN';
	        			}
	 	        		
	 	        	} 
	        		 
	        	 //}
	        	 
	         },
	         
	         uiCouponApplied:function(orderDetails){
		        	this.model.getCompleteOrderDetails = orderDetails;
		        	$scope.cartDetails.$setPristine();
		        	this.calculateRefundPaymentTotal();
		     },
		         
		     /**
				 *@description Shows next set of order lines when order lines panel is scrolled.
				 */
		  		
	         uiGetReturnOrderLineListNext:function() {
	        	 if(this.ui.orderLineShownCount <= this.model.returnOrderLineList.OrderLineList.OrderLine.length){
	   	          this.ui.orderLineShownCount+=5;
	   	        }
	         },
	         
	         /**
	 		 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
	 		 */
	         uiReturnOrderLineScrollActionValidator:function() {
	        	 return true;
	         },
	         
	         /**
		 		*@description This method is used to assign return reason to return order line. 
		 		* @param {Object} orderLine - order line details
		 	 */	
	         uiAddReturnReasonForOrderLine:function(orderLine) {
	        	 this.openReturnReasonModal({}, orderLine.OrderLineKey);
	         },
	         
	         /**
		 		*@description This method is used to modify return reason to return order line. 
		 		* @param {Object} orderLine - order line details
		 	 */	
	         uiEditReturnReasonForOrderLine:function(orderLine) {
	        	 
	 			var popupInput = {};
	 			popupInput.returnReasonCode = orderLine.ReturnReason;
	 			popupInput.dispositionCode = orderLine.DispositionCode;
	 			popupInput.dispositionNoteText = orderLine.DispositionNoteText;
	 			
	 			var returnReasonPopupInput = {
	 				 modalInput: function(){
	 	      			return popupInput;
	 	      		}   
	 			   
	 			};
	 			
	 			this.openReturnReasonModal(returnReasonPopupInput, orderLine.OrderLineKey);
		 			
	         },
	         
	         /**
		 		*@description This method is used to enable/disable Refund/Payment button based on any return/exchange lines are present.
		 	 */	
	         uiToggleReturnsButton:function() {
	        	 
	        	 var isButtonDisabled = true;
	        	 
	        	 var numOfReturnLines = null, numOfExchangeOrderLines = null;
	        	
	        	 if(!iscCore.isVoid(this.model.returnOrderLineList) && !iscCore.isVoid(this.model.returnOrderLineList.OrderLineList)) {
	        		 numOfReturnLines = $filter('number')(this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords);
	        	 }
	        	 
	        	 if(!iscCore.isVoid(this.model.orderLineList) && !iscCore.isVoid(this.model.orderLineList.OrderLineList)) {
	        		 numOfExchangeOrderLines = $filter('number')(this.model.orderLineList.OrderLineList.TotalNumberOfRecords);
	        	 }
	        	 
	        	 if((!iscCore.isVoid(numOfExchangeOrderLines) && numOfExchangeOrderLines > 0) || (!iscCore.isVoid(numOfReturnLines) && numOfReturnLines > 0)) {
	        		isButtonDisabled = false;
	        	 } 
	        	 
	        	 return isButtonDisabled; 
	        	 
	         },
	         
	         /**
		 		*@description This method is used to launch Add Customer popup.  
		 	 */	
	         uiIdentifyCustomerPopup:function(){
		  			var customerInput = {};
		  			var that = this;
		  			customerInput.Mode = "Identify";
		  			var customerPopupInput = {
		          			modalInput: function(){
		          				return customerInput;
		          			}
		          	};
		  			
					iscModal.openModal('store.views.common.customer.customerpopup',customerPopupInput,{})
							.then(function(callBackData){
		        			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
		        				that.onCustomerIdentification.call(that,callBackData.data);
		        			}		            			
		   				},
							angular.noop);	
		  		  },
		  		  
		  		 /**
			 		*@description This method is used to add customer information to return & exchange order
			 		* @param {Object} customerInfo - customer information to be added to the order
			 	 */	
		  		 onCustomerIdentification: function(customerInfo){
		        	  var customerModel = customerInfo.customerModel;
		        	  
		        	   var changeOrderInput  = {};
		          	   changeOrderInput.Order ={};
		          	   changeOrderInput.Order.OrderHeaderKey=this.model.returnOrderDetails.Order.OrderHeaderKey;
		          	   changeOrderInput.Order.BillToID = customerModel.Customer.CustomerID; 
		          	   /*if(!iscCore.isVoid(customerInfo.addressSelected)){
		          		 changeOrderInput.Order.PersonInfoBillTo={};
			  			 changeOrderInput.Order.PersonInfoBillTo = angular.copy(customerInfo.addressSelected.PersonInfo);
		          	   }*/
		          	   
		          	   changeOrderInput.Order.PersonInfoBillTo={};
		  			 	changeOrderInput.Order.PersonInfoBillTo = angular.copy(customerInfo.addressSelected.PersonInfo);
		  			 
		  			 	changeOrderInput.Order.PersonInfoShipTo={};
		  			 	changeOrderInput.Order.PersonInfoShipTo = angular.copy(customerInfo.addressSelected.PersonInfo);
		          	   
		          	   
		      	       if(customerModel.Customer.CustomerType === '02' || (customerModel.Customer.CustomerContactList &&  customerModel.Customer.CustomerContactList.CustomerContact && customerModel.Customer.CustomerContactList.CustomerContact.length === 1)){
		  				changeOrderInput.Order.CustomerContactID =  customerModel.Customer.CustomerContactList.CustomerContact[0].CustomerContactID;
		  				changeOrderInput.Order.CustomerFirstName =  customerModel.Customer.CustomerContactList.CustomerContact[0].FirstName;
		     	    	changeOrderInput.Order.CustomerLastName  =  customerModel.Customer.CustomerContactList.CustomerContact[0].LastName;
		     	    	changeOrderInput.Order.CustomerEMailID   =  customerModel.Customer.CustomerContactList.CustomerContact[0].EMailID;
		     	    	
		     	    	if(!iscCore.isVoid(customerInfo.addressSelected)){
		     	    		changeOrderInput.Order.CustomerZipCode   =  customerInfo.addressSelected.PersonInfo.ZipCode;
			          	   }
		      	       }
		      	       
		      	      /* if(!iscCore.isVoid(this.model.getCompleteOrderDetails) && !iscCore.isVoid(this.model.getCompleteOrderDetails.Order) && !iscCore.isVoid(this.model.getCompleteOrderDetails.Order.OrderHeaderKey)) {
		      	    	 changeOrderInput.Order.ExchangeOrderHeaderKey = this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
		      	       }*/
		          	 
		      	      iscMashup.callMashup(this,"updateCustomerInfoInReturnOrder",changeOrderInput,{}).then(this.afterCustomerUpdateToOrder.bind(this),angular.noop);  
		          },
		          
		          
		          /**
			 		*@description callback handler after customer information is added to return & exchange order
			 		* @param {Object} response - controller data with api output
			 	 */	
		          afterCustomerUpdateToOrder:function(response) {
		        	  var apiOutput = iscMashup.getMashupOutput(response,"updateCustomerInfoInReturnOrder");
		        	  if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.Order)) {
			        	  if(!iscCore.isVoid(apiOutput.Order.ExchangeOrder)) {
			        		  this.model.getCompleteOrderDetails = apiOutput.Order.ExchangeOrder; 
			        		  iscWizard.setWizardModel("exchangeOrderModel",this.model.getCompleteOrderDetails);
			        	  }
			        	  this.model.returnOrderDetails = angular.copy(apiOutput);
			        	  this.model.returnOrderDetails.Order.OrderLines = {TotalLinesInCart:this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords};
			        	  delete this.model.returnOrderDetails.Order["ExchangeOrder"];
			        	  iscWizard.setWizardModel("returnOrder",this.model.returnOrderDetails);
		        	  }
		        	  
		          },
		          
		          /**
			 		*@description This method is used to launch Edit Customer popup 
			 	 */	
		  		 uiEditAddressInCustomerPanel: function(){
		   		      var that = this;
		   		      var popupInput = {};
		   		      popupInput.Mode = 'Edit';
		   			  popupInput.PersonInfo = angular.copy(this.model.returnOrderDetails.Order.PersonInfoBillTo);   
		   			  popupInput.hideShipaddress = true;
		   		      var addressPopUpInput = {
		   				 modalInput: function(){
		        				return popupInput;
		        			}   
		   		   };
		   		   
		   		  iscModal.openModal('store.views.common.orderaddress.orderaddresspopup',addressPopUpInput,{})
		   				.then(function(callBackData){
		        			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
		        				that.handleEditAddressInCustomerPanel.call(that,callBackData.data);
		        			}		            			
		   				},
		   				angular.noop);
		     		},
		     		
		     		 /**
			 		*@description This method is used to update customer information to return & exchange order
			 		* @param {Object} newAddress - customer information to be updated to the order
			 	 */	
		     		handleEditAddressInCustomerPanel: function(newAddress){
			     		   
			               var personInfo = angular.copy(newAddress);
			 			   delete personInfo.IsDefaultShippingAddress;
			 			    
			     		   var changeOrderInput  = {};
			           	   changeOrderInput.Order ={};
			           	   changeOrderInput.Order.OrderHeaderKey=this.model.returnOrderDetails.Order.OrderHeaderKey;
			           	   
			           	   changeOrderInput.Order.PersonInfoBillTo={};
			           	   changeOrderInput.Order.PersonInfoBillTo = angular.copy(personInfo);;
			           	   
			           	   changeOrderInput.Order.PersonInfoShipTo={};
			           	   changeOrderInput.Order.PersonInfoShipTo = angular.copy(personInfo);
			           	  
			           	   if(!this.model.returnOrderDetails.Order.BillToID){
				     	       changeOrderInput.Order.CustomerFirstName =   personInfo.FirstName;
				     	       changeOrderInput.Order.CustomerLastName  =   personInfo.LastName;
				     	       changeOrderInput.Order.CustomerEMailID   =   personInfo.EMailID;
				     	       changeOrderInput.Order.CustomerZipCode   =   personInfo.ZipCode;
			           	   }
			            	
			           	 iscMashup.callMashup(this,"updateCustomerInfoInReturnOrder",changeOrderInput,{}).then(this.afterCustomerUpdateToOrder.bind(this),angular.noop);    
			     		},
	         
			     		 /**
				 		*@description This method is launch Return Reason popup.
				 		* @param {Object} modalInput - input for the return reason popup
				 		* @param {String} orderLineKey - Order line key for which return reaon needs to be assigned/modified
				 	 */	
	         openReturnReasonModal:function(modalInput, orderLineKey) {
	        	 var that = this;
	        	 iscModal.openModal('store.views.return.common.reason.return-reason-single',modalInput,{}).then(function(callBackData){
		 				if(callBackData.data !== null && callBackData.data !== undefined){
		 					that.applyOverrideForOrderLine.call(that,callBackData.data,orderLineKey);
	 				}
	 				},
	 				angular.noop);
	         },
	         
	         /**
		 		*@description This method is launch Return Reason popup.
		 		* @param {Object} modalInput - input for the return reason popup
		 		* @param {String} orderLineKey - Order line key for which return reaon needs to be assigned/modified
		 	 */	
	         applyOverrideForOrderLine:function(overrideData, orderLineKey) {
	        	 var apiInput = {};
	        	 if(overrideData.applyToAll) {
	        		 apiInput = {'Order':{'OrderHeaderKey':this.model.returnOrderDetails.Order.OrderHeaderKey,'ApplyToAll':'Y','ReturnReason':overrideData.returnReason/*,'DispositionCode':overrideData.returnDisposition*/}};
	        	 } else {
	        		 apiInput ={'Order':{'OrderHeaderKey':this.model.returnOrderDetails.Order.OrderHeaderKey,'OrderLines':[{'OrderLine':{'ReturnReason':overrideData.returnReason,/*'DispositionCode':overrideData.returnDisposition,*/'OrderLineKey' : orderLineKey}}]}};
	        	 }
	        	  
	             iscMashup.callMashup(this,"applyReturnReasonToReturnOrderLine",apiInput,{}).then(this.updateReturnOrderLineList.bind(this),angular.noop);
	         },
	         
	         /**
		 		*@description This method is used to update the return order line list after return reason is assigned/modified to the return order line.
		 		* @param {Object} response - controller data which contains API output
		 	 */	
	         updateReturnOrderLineList:function(response) {
	            	var apiOutput = iscMashup.getMashupOutput(response,"applyReturnReasonToReturnOrderLine");
	            	this.updateReturnOrderLines(apiOutput);
	            	
	            	//set focus on process return button after the return reason popup is closed by clicking on OK
	            	$timeout(function ()
	    				    {
	    				         iscDomUtility.setFocus(document.getElementById('itemBarCodeTextBox'));
	    				    }, 0);
	        },
	        /**
	 		*@description This method is invoked to confirm return order line deletion
	 		* @param {Object} orderLine - order line details.
	 	 */	
		  	uiConfirmOrderLineDeletion: function(orderLine) {
		  		var that = this;
            	iscModal.showConfirmationMessage("returns.MSG_DeleteOrderLine").then(function(action){
					that.deleteReturnOrderLine(action,orderLine);
				});
		  		
		  	},
		  	 /**
	 		*@description This method is used to delete return order line
	 		* @param {Object} orderLine - order line details to be deleted.
	 		* @param {String} action - YES/NO depending on user selected Ok/Cancel in confirm popup
	 	 */	
		  	deleteReturnOrderLine : function(action,orderLine){
            	if(action === 'YES'){
	            	var apiInput ={'Order':{'OrderHeaderKey':this.model.returnOrderDetails.Order.OrderHeaderKey,'OrderLines':[{'OrderLine':{'Action':'REMOVE','OrderLineKey' : orderLine.OrderLineKey}}]}}; 
	            	iscMashup.callMashup(this,"deleteReturnOrderLine",apiInput,{}).then(this.updateReturnOrderLineListAfterDelete.bind(this,orderLine.OrderLineKey),angular.noop);
            	}
            },
            /**
	 		*@description This method is used to update return order line list, return order and calculate order total after deleting return order line.
	 		* @param {String} deletedOrderLineKey - deleted order line key
	 		* @param {Object} response - controller data containing API output
	 	 */	
            updateReturnOrderLineListAfterDelete:function(deletedOrderLineKey, response) {
            	var apiOutput = iscMashup.getMashupOutput(response,"deleteReturnOrderLine");
            	this.updateReturnOrderLines(apiOutput);
			    this.updateReturnOrderDetails(apiOutput);
			    this.calculateRefundPaymentTotal();
			    this.updateReturnOrderModelInWizard(deletedOrderLineKey);
            },
            /**
	 		*@description This method is updates return order lines model with input model
	 		* @param {Object} apiOutput - return order model
	 	 */	
            updateReturnOrderLines:function(apiOutput) {
            	if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.Order) && !iscCore.isVoid(apiOutput.Order.OrderLineList)) {
            		this.model.returnOrderLineList = {};
            		this.ui.hasNonReturnableOrderLines = false;
                	this.model.returnOrderLineList.OrderLineList = apiOutput.Order.OrderLineList;
                	this.ui.returnOrderLinesCount = this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords;
            	}            	
            },
            /**
	 		*@description This method is updates return order model with input model
	 		* @param {Object} apiOutput - return order model
	 	 */	
            updateReturnOrderDetails:function(apiOutput) {
            	this.model.returnOrderDetails = apiOutput;
            },
            /**
	 		*@description This method is updates return order model in the wizard with input model
	 		* @param {Object} apiOutput - return order model
	 	 */	
            updateReturnOrderModelInWizard:function(deletedOrderLineKey) {
            	var returnOrderModel = iscWizard.getWizardModel('returnOrder');
            	 if(!iscCore.isVoid(returnOrderModel) && !iscCore.isVoid(returnOrderModel.Order) && !iscCore.isVoid(returnOrderModel.Order.OrderLines)) {
            		var numOfOrderLines = $filter('number')(returnOrderModel.Order.OrderLines.TotalNumberOfRecords);
            		var returnOrderlines = returnOrderModel.Order.OrderLines.OrderLine;
      				if(!isNaN(numOfOrderLines) && numOfOrderLines > 0 && !iscCore.isVoid(returnOrderModel.Order.OrderLines.OrderLine)) {
      					for(var i=0;i<returnOrderModel.Order.OrderLines.OrderLine.length;i++) {
    						var returnOrderLine = returnOrderModel.Order.OrderLines.OrderLine[i];
    						if(!iscCore.isVoid(returnOrderLine) && returnOrderLine.OrderLineKey == deletedOrderLineKey) {
    							returnOrderlines.splice(i,1);
	            				break;
    						}
    					}
      				}
            	}
            	
            	returnOrderModel.Order.OrderLines.TotalNumberOfRecords = this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords;
            	returnOrderModel.Order.OrderLines.TotalLinesInCart = this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords;
            	iscWizard.setWizardModel('returnOrder',returnOrderModel);
            	
            },
            
            /**
	 		*@description This method is used to launch Override Policy popup to view Policy Violations for the order line
	 		* @param {Object} orderLine - order line details
	 	 */	
            uiViewPolicyViolation:function(orderLine) {
    			var that = this;
    			var popupInput = {};
    			popupInput.orderLineModel = orderLine;
    			popupInput.viewMode = "Y";
    			
    			var overridePolicyPopupInput = {
    				 modalInput: function(){
    	      			return popupInput;
    	      		}   
    			   
    			};
    			   
    			   
    			iscModal.openModal('store.views.return.common.override.override-policy-violation',overridePolicyPopupInput,{});
    		},
            
    		 /**
	 		 *@description Onclick event handler for 'Continue to Payment/Refund' button.Checks the returns list screen for dirty state.
	 	 */	
    		uiCheckDirtyStateBeforeRefund: function(){
    		
    			/* Check whether the screen is dirty before navigating to payment screen*/
           	 
           	 var isDirty = $scope.cartDetails.$dirty;
           	 if(isDirty){
           		 var that = this;
           		 iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
	            			if(iscCore.isBooleanTrue(action)){
	            				that.uiValidateOrderBeforeRefund();
	            			}
           	 });
           	 }else{
           		 this.uiValidateOrderBeforeRefund();
           	 }		
    			
    		},
    		
    		 /**
	 		*@description This method is invoked when user clicks on Refund/Payment button. This method validates the following before processing the exchange order and return order:
	 		* 1. Customer is assigned to the order.
	 		* 2. Return reason is assigned to all return order lines.
	 		* 
	 	 */	
    		uiValidateOrderBeforeRefund:function() {
		  		
				var that = this;
            	var callProcessReturnOrder = false;
            	if((!iscCore.isVoid(this.model.returnOrderDetails.Order) && iscCore.isVoid(this.model.returnOrderDetails.Order.BillToID)) || (!iscCore.isVoid(this.model.getCompleteOrderDetails.Order) && !iscCore.isVoid(this.model.getCompleteOrderDetails.Order.OrderHeaderKey) && iscCore.isVoid(this.model.getCompleteOrderDetails.Order.BillToID))) {
            		this.ui.OpenCustomerTabInMobile = true;
					this.ui.activeTabIndex = 0;
	  				this.uiIdentifyCustomerPopup();
		  			/* iscModal.showErrorMessage(iscI18n.translate('returns.MSG_NoCustomerAssigned')).then(function(callbackData) {
		  				that.ui.OpenCustomerTabInMobile = true;
		  				that.uiIdentifyCustomerPopup();
		  			 }); */
		  			 
		  		} else if (!this.isReturnReasonAssignedToAllReturnOrderLines()) {
		  			 iscModal.showErrorMessage(iscI18n.translate('returns.MSG_AssignReturnReasonToAllLines')); 
		  		} else {
		            	 var exchangeOrderModel = iscWizard.getWizardModel("exchangeOrderModel");
			             if(!iscCore.isVoid(exchangeOrderModel)){
			            	 
			            	 var orderDetailsModel = {};
			        		    orderDetailsModel.Order= {};
			        		    orderDetailsModel.Order.OrderLines = {};
			        		    orderDetailsModel.Order.OrderLines.OrderLine = this.model.orderLineList.OrderLineList.OrderLine;
			        		   
		        		    if(iscOrder.orderHasOnlyCarryLines(orderDetailsModel)){
		        		    	callProcessReturnOrder = true;
		        		    }
			        		else{
			        			
			            	 var orderModel = this.model.getCompleteOrderDetails;
		            		 var isShippingLinePresent = iscOrder.checkIfOrderHasShipLines(this.model.orderLineList.OrderLineList.OrderLine);	
		        		  	 var checkAvailability = true;
		                   	 if(isShippingLinePresent){
		                   		 
		                       	 if(iscCore.isVoid(orderModel.Order.PersonInfoShipTo)){
		                       		 iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.NoShipToAddressOline')); 
		                       		 checkAvailability = false;
		                       	 }
		                   	 } 	 
		                       	if(checkAvailability){
		                	     	if(!iscOrder.orderHasMixedSettledLines(this.model.orderLineList.OrderLineList.OrderLine)){
		                	     		var apiInput = {};
		                         		apiInput.Order= {};
		                         		apiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
		                         		iscMashup.callMashup(this,"exchange_getCompleteOrderLineList",apiInput,{}).then(this.handleProcessReturnOrderWithExchangeLines.bind(this),angular.noop); 
		                	     	}
		                	    	else {
		                	    		var computeAvailabilityApiInput = {};
		                         		computeAvailabilityApiInput.Order= {};
		                         		computeAvailabilityApiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
		                         		var updateSettledQtyOnAllLinesApiInput = {};
		                         		updateSettledQtyOnAllLinesApiInput.Order= {};
		                         		updateSettledQtyOnAllLinesApiInput.Order.OrderHeaderKey=this.model.getCompleteOrderDetails.Order.OrderHeaderKey;
		                         		updateSettledQtyOnAllLinesApiInput.Order.OrderLines = {};
		                         		updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine = [];
		                         		for(var i= 0; i<this.model.orderLineList.OrderLineList.OrderLine.length; i++){
		                         			var orderline = this.model.orderLineList.OrderLineList.OrderLine[i];
		        							if(orderline.OrderLineTranQuantity && orderline.OrderLineTranQuantity.OrderedQty 
		        								&& orderline.OrderLineTranQuantity.SettledQuantity && orderline.OrderLineTranQuantity.OrderedQty != orderline.OrderLineTranQuantity.SettledQuantity){
		        								var lengthOfInputOrderLines = updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine.length;
		        								updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines] = {};
		        								updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineKey = orderline.OrderLineKey;
		        								updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineTranQuantity = {};
		        								updateSettledQtyOnAllLinesApiInput.Order.OrderLines.OrderLine[lengthOfInputOrderLines].OrderLineTranQuantity.SettledQuantity = orderline.OrderLineTranQuantity.OrderedQty;
		        							 }
		        						}
		                	    		var updateSettledQtyOnAllLinesMashupRefObj = iscMashup.getMashupRefObj(this,"vc_updateSettledQtyOnAllLines",updateSettledQtyOnAllLinesApiInput);
		                	    		var computeAvailabilityMashupRefObj = iscMashup.getMashupRefObj(this,"exchange_getCompleteOrderLineList",computeAvailabilityApiInput);
		                	    		var mashupRefList = [updateSettledQtyOnAllLinesMashupRefObj,computeAvailabilityMashupRefObj];
		            					iscMashup.callMashups(this,mashupRefList,{}).then(this.handleProcessReturnOrderWithExchangeLines.bind(this),angular.noop);
		                	    	}
		                	     }
			             }  	 
			             } else {
		                   		callProcessReturnOrder = true;
		                   	 }
		  			
		  		}
		  		
		  		if(callProcessReturnOrder) {
		  			this.callProcessReturnOrder();
		  		}
           	
		  	},
		  	
		  	 /**
	 		*@description callback handler after process return order API is called.
	 		* @param {Object} response - controller data containing API output
	 	 */	
		  	handleProcessReturnOrderWithExchangeLines:function(response) {
		  		var apiOutput = iscMashup.getMashupOutput(response,"exchange_getCompleteOrderLineList");
		  		if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.OrderLineList) && !iscCore.isVoid(apiOutput.OrderLineList.ReturnOrder)) {
		  			this.processViolationsOnReturnOrder(apiOutput.OrderLineList.ReturnOrder);
		  		} else {
		  			this.gotoPaymentPage();
		  		}
		  	},
		  	
		  	 /**
	 		*@description This method is used to invoke process return order API on return order.
	 	 */	
		  	callProcessReturnOrder:function() {
		  		
		  		var returnOrderHeaderKey = "",channel = "null";
	  			if(!iscCore.isVoid(this.model.returnOrderDetails) && !iscCore.isVoid(this.model.returnOrderDetails.Order)) {
	  				returnOrderHeaderKey = this.model.returnOrderDetails.Order.OrderHeaderKey;
	  				if(!iscCore.isVoid(this.model.returnOrderDetails.Order.EntryType)) {
	  					channel = this.model.returnOrderDetails.Order.EntryType;
	  				}
	  			}
	  			
	  			var apiInput ={'Order':{'OrderHeaderKey':returnOrderHeaderKey,"AppContextInfo":{"Channel":channel}}}; 
            	iscMashup.callMashup(this,"processReturnOrder",apiInput,{}).then(this.handleProcessReturnOrder.bind(this),angular.noop);
		  		
		  	},
		  	
		  	 /**
	 		*@description This method checks return order for any policy violations and accordingly opens override policy popup for overridding. 
	 		*If return order has no violations then we navigate to payment page.
	 		*
	 		* @param {Object} returnOrder - return order details
	 	 */	
		  	processViolationsOnReturnOrder:function(returnOrder) {
		  		
	  			var showOverridePopup = returnOrder.Order.ShowOverridePopup;
	  			var showOverriddenLabel = returnOrder.Order.ShowOverriddenLabel;
	  			
	  			if(showOverridePopup == 'Y') {
	  				this.openOverridePopUpForViolatedOrderLines(returnOrder);
	  			} else if(showOverriddenLabel == 'Y') {
	  				iscModal.showErrorMessage(iscI18n.translate('returns.MSG_DeleteNonReturnableLines')); 
	  			}
	  			
	  			if(showOverriddenLabel == 'Y') {
	  				this.markReturnLinesAsCannotBeOverridden(returnOrder); 
	  			}
	  			
	  			if(showOverridePopup == 'N' && showOverriddenLabel == 'N') {
	  				this.gotoPaymentPage();
	  			}
		  			
		  		
		  	},
		  	
		  	/**
	 		*@description This method is callback handkler for processReturnOrder API. This processes the return order for any policy violations. If not, then navigates to payment page.
	 		*
	 		* @param {Object} response - container data with API output
	 	 */	
		  	handleProcessReturnOrder:function(response) {
		  		var apiOutput = iscMashup.getMashupOutput(response,"processReturnOrder");
		  		if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.Order)) {
		  			this.processViolationsOnReturnOrder(apiOutput);
		  		} else {
		  			this.gotoPaymentPage();
		  		}
		  	},
		  	
		  	markReturnLinesAsCannotBeOverridden:function(returnOrder) {
		  		
	  			if(!iscCore.isVoid(this.model.returnOrderLineList) && !iscCore.isVoid(this.model.returnOrderLineList.OrderLineList)) {
		  			
		  			var numOfOrderLines = $filter('number')(this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords);
					if(!isNaN(numOfOrderLines) && numOfOrderLines > 0) {
						for(var i=0;i<this.model.returnOrderLineList.OrderLineList.OrderLine.length;i++) {
							
							var returnOrderLine = this.model.returnOrderLineList.OrderLineList.OrderLine[i];
							
							if(!iscCore.isVoid(returnOrder) && !iscCore.isVoid(returnOrder.Order) && !iscCore.isVoid(returnOrder.Order.OrderLines)) {
					  			
					  			var numOfViolatedOrderLines = $filter('number')(returnOrder.Order.OrderLines.TotalNumberOfRecords);
								if(!isNaN(numOfViolatedOrderLines) && numOfViolatedOrderLines > 0) {
									for(var j=0;j<returnOrder.Order.OrderLines.OrderLine.length;j++) {
										
										var orderLineWithViolation = returnOrder.Order.OrderLines.OrderLine[j];
										if(returnOrderLine.OrderLineKey == orderLineWithViolation.OrderLineKey) {
											returnOrderLine.ReturnPolicyViolations = {};
											returnOrderLine.ReturnPolicyViolations = orderLineWithViolation.ReturnPolicyViolations;
											this.ui.hasNonReturnableOrderLines = true;
										}/* else {
											returnOrderLine.CannotBeOverridden = "Y";
											this.ui.hasNonReturnableOrderLines = true;
										}*/
									}
										
								}
					  		}
							
						}
							
					}
		  			
		  		}
		  		
		  	},
		  	
		  	
		  	/**
	 		*@description This method is used to launch Policy Override popup 
	 		*
	 		* @param {Object} returnOrder - return order details
	 	 */		
		  	openOverridePopUpForViolatedOrderLines:function(returnOrder) {
		  		
		  		var that = this;
				var popupInput = {};
				popupInput.openOverride = true;
				popupInput.viewMode = "N";
				popupInput.multipleOrderLines = "Y";
				popupInput.orderModel = this.getReturnOrderModelForOverridePopup(returnOrder);
				popupInput.returnOrder = returnOrder;
				
				var overridePolicyPopupInput = {
					 modalInput: function(){
		      			return popupInput;
		      		}   
				   
				};
				   
				   
				iscModal.openModal('store.views.return.common.override.override-policy-violation',overridePolicyPopupInput,{}).then(function(callBackData){
					if(callBackData.data !== null && callBackData.data !== undefined){
						that.applyOverrideForViolatedOrderLines.call(that,callBackData.data);
					}
					},
					angular.noop);
		  		
		  		
		  	},
		  	
		  	/**
	 		*@description This method prepares the input required to open Policy Override popup
	 		*
	 		* @param {Object} returnOrder - return order details
	 	 */		
		  	getReturnOrderModelForOverridePopup:function(returnOrder) {
		  		
		  		if(!iscCore.isVoid(this.model.returnOrderLineList) && !iscCore.isVoid(this.model.returnOrderLineList.OrderLineList)) {
					var numOfOrderLines = $filter('number')(this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords);
					if(!isNaN(numOfOrderLines) && numOfOrderLines > 0) {
						for(var i=0;i<this.model.returnOrderLineList.OrderLineList.OrderLine.length;i++) {
							var returnOrderLine = this.model.returnOrderLineList.OrderLineList.OrderLine[i];
							
							if(!iscCore.isVoid(returnOrder) && !iscCore.isVoid(returnOrder.Order) && !iscCore.isVoid(returnOrder.Order.OrderLines)) {
								var numOfOrderLines = $filter('number')(returnOrder.Order.OrderLines.TotalNumberOfRecords);
								if(!isNaN(numOfOrderLines) && numOfOrderLines > 0) {
									for(var j=0;j<returnOrder.Order.OrderLines.OrderLine.length;j++) {
										var processedReturnOrderLine = returnOrder.Order.OrderLines.OrderLine[j];
										
										if(returnOrderLine.OrderLineKey == processedReturnOrderLine.OrderLineKey) {
											processedReturnOrderLine.VariationAttrs = returnOrderLine.VariationAttrs;
											if(!iscCore.isVoid(returnOrderLine.LineOverallTotals)) {
												processedReturnOrderLine.LineOverallTotals = {};
												processedReturnOrderLine.LineOverallTotals = returnOrderLine.LineOverallTotals;
											}
											break;
										}
										
									}
								}
							}

						}
					}
				}
		  		
		  		return returnOrder;
		  		
		  		
		  	},
		  	
		 	/**
	 		*@description This method is invoked after overridding the return policy in Policy Override popup. This methods invokes postRecordApprovalofReturnOrder() method for processing the return order after approval.
	 		*
	 		* @param {Object}popupData - contains data captured in Override Policy Violation popup
	 	 */		
		  	applyOverrideForViolatedOrderLines:function(popupData) {
		  		
		  		/**
		  		 * 1. Filter out 1100 lines and delete 1300/1500 lines - DONE
		  		 * 2. Prepare Order model with 1100 violations, overrideCode and overrideReason - DONE
		  		 * 3. Invoke Service mashup
		  		 * 4. In service mashup output - invoke recordApprovals for all 1100 lines
		  		 * 5. After recordApproval is successful changeOrder to capture override reason notes
		  		 * 6. In the output of service mashup, check for IsPolicyConfigInvalid = Y or  IsRecordApprovalError = Y. If any throw error, else do nothing
		  		 */
		  		
		  		/*if(!iscCore.isVoid(returnOrder) && !iscCore.isVoid(returnOrder.Order) && !iscCore.isVoid(returnOrder.Order.OrderLines)) {
		  			
		  			var numOfViolatedOrderLines = $filter('number')(returnOrder.Order.OrderLines.TotalNumberOfRecords);
					if(!isNaN(numOfViolatedOrderLines) && numOfViolatedOrderLines > 0) {
						for(var j=returnOrder.Order.OrderLines.OrderLine.length-1;j>=0;j--) {
							
							var orderLineWithViolation = returnOrder.Order.OrderLines.OrderLine[j];
							if(!iscCore.isVoid(orderLineWithViolation.ReturnPolicyViolations) && orderLineWithViolation.ReturnPolicyViolations.CannotBeOverridden == 'Y') {
								returnOrder.Order.OrderLines.OrderLine.splice(j,1);
							} else {
								
								if(!iscCore.isVoid(overrideReason)) {
									orderLineWithViolation.OverrideCode = overrideReason.overrideCode;
									orderLineWithViolation.Notes = {};
									orderLineWithViolation.Notes.Note = {};
					            	if(overrideReason.value == 'Other') {
					            		orderLineWithViolation.Notes.Note.NoteText = overrideReason.otherText;
					            	} else {
					            		orderLineWithViolation.Notes.Note.NoteText = overrideReason.value;
					            	}
					        	}
								
								delete orderLineWithViolation.ImageURL;
								delete orderLineWithViolation["Order"];
								delete orderLineWithViolation["ItemDetails"];
								delete orderLineWithViolation["LineOverallTotals"];
								
								
							}
						}
					}
		  		}
		  		
		  		delete returnOrder.Order.OrderLines.TotalNumberOfRecords;
		  		delete returnOrder.Order.ShowOverridePopup;
		  		delete returnOrder.Order.ShowOverriddenLabel;
		  		
		  		returnOrder = angular.copy(returnOrder);
		  		
		  		iscMashup.callMashup(this,"recordApprovalForReturnOrderLines",returnOrder,{}).then(this.postRecordApprovalofReturnOrder.bind(this));*/
		  		
		  		this.postRecordApprovalofReturnOrder(popupData.response);
		  		
		  		
		  	},
		  	
		  	/**
	 		*@description This method checks if there is an any non returnable lines in return order. If it has then, user stays on return list page else he'll be navigated to payment page
	 		*
	 		* @param {Object} response - contains processReturnOrder API output.
	 	 */		
		  	postRecordApprovalofReturnOrder:function(response) {
		  		
		  		/*var apiOutput = iscMashup.getMashupOutput(response,"recordApprovalForReturnOrderLines");
				var isPolicyConfigInvalid = apiOutput.Order.IsPolicyConfigInvalid;
				var isRecordApprovalError = apiOutput.Order.IsRecordApprovalError;
				
				if(!iscCore.isVoid(isRecordApprovalError) && isRecordApprovalError == 'Y') {
					iscModal.showErrorMessage(iscI18n.translate('orderDetails.MSG_UnableToApproveOverride'));
				} else if(!iscCore.isVoid(isPolicyConfigInvalid) && isPolicyConfigInvalid == 'Y') {
					iscModal.showErrorMessage(iscI18n.translate('orderDetails.MSG_InvalidReturnPolicyConfiguration'));
				}*/
				
				if(!this.ui.hasNonReturnableOrderLines) {
					this.gotoPaymentPage();
				}
				
				
		  	},
		  	
		  	
			/**
	 		*@description This method is used to navigate to payment page
	 		*
	 	 */		
		  	gotoPaymentPage:function() {
		  		var nextPageInput = {'Order':{'OrderHeaderKey':this.model.returnOrderDetails.Order.OrderHeaderKey}};
		  		iscWizard.gotoCustomPage('payment',nextPageInput,{});
		  	},
		  	
			/**
	 		*@description This method checks if return reason is assigned to all return order lines.
	 		*
	 	 */		
		  	isReturnReasonAssignedToAllReturnOrderLines:function() {
		  		
		  		var isRRAssignedToAll = true;
		  		
		  		if(!iscCore.isVoid(this.model.returnOrderLineList) && !iscCore.isVoid(this.model.returnOrderLineList.OrderLineList)) {
					var numOfOrderLines = $filter('number')(this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords);
					if(!isNaN(numOfOrderLines) && numOfOrderLines > 0) {
						for(var i=0;i<this.model.returnOrderLineList.OrderLineList.OrderLine.length;i++) {
							var returnOrderLine = this.model.returnOrderLineList.OrderLineList.OrderLine[i];
							if(iscCore.isVoid(returnOrderLine.ReturnReason)) {
								isRRAssignedToAll = false;
								break;
							}
							
						}
					} 
		  		}
		  		
		  		return isRRAssignedToAll;
		  		
		  	},
		  	
			/**
	 		*@description This method returns the sum of number of return order lines and exchange order lines.
	 		*
	 	 */		
		  	getTotalOrderLinesCount:function() {
		  		
		  		var numOfReturnLines = 0, numOfExchangeOrderLines = 0;
	        	
	        	 if(!iscCore.isVoid(this.model.returnOrderLineList) && !iscCore.isVoid(this.model.returnOrderLineList.OrderLineList)) {
	        		 numOfReturnLines = $filter('number')(this.model.returnOrderLineList.OrderLineList.TotalNumberOfRecords);
	        	 }
	        	 
	        	 if(!iscCore.isVoid(this.model.orderLineList) && !iscCore.isVoid(this.model.orderLineList.OrderLineList)) {
	        		 numOfExchangeOrderLines = $filter('number')(this.model.orderLineList.OrderLineList.TotalNumberOfRecords);
	        	 }
	        	 
	        	return Number(numOfReturnLines) + Number(numOfExchangeOrderLines) ;
		  	},
		  	
		    /**
	         * @description This method is invoked on click of home button 
	         */
		  	handleWizardExit:function(){
	        	return iscReturn.handleWizardExit(this.getTotalOrderLinesCount());
	        },
	        /**
             * @description This method is invoked on click of cancel button
             */
		  	uiCancel : function(){
		  		iscReturn.handleWizardCancel(this.getTotalOrderLinesCount());
            },
            
            /**
             * @description This method is invoked on click of back button.
             */
            handleWizardBack:function(){

				var isFirstPage = iscWizard.isFirstPage();
				var isDirty = $scope.cartDetails.$dirty;
				if(isDirty){
					var confirmationMsg = null;
					if(isFirstPage){
						confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
						iscModal.showConfirmationMessage(confirmationMsg).then(
								function(callBackAction){
									if(callBackAction === 'YES'){
										iscWizard.closeWizard();
									}
			       				});
					}
					else{
						iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
            			if(iscCore.isBooleanTrue(action)){
            				iscWizard.gotoPreviousPage(true);
            			}
            		});
					}
					return true;
				}else if(isFirstPage){
					confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
					iscModal.showConfirmationMessage(confirmationMsg).then(
							function(callBackAction){
								if(callBackAction === 'YES'){
									iscWizard.closeWizard();
								}
		       				});
					return true;
				}
				else{
					return false;
				}
			
            },
            
            uihandleScreenDirty: function(){
            	iscModal.showErrorMessage(iscI18n.translate('globals.MSG_SCREEN_ERRORS')); 
            }, 
	        
                  /* Exchange Ordermethods */
            /**
              *@description This is a onFocus event handler of quantity field in exchange order lines panel.
			  *@param {Object} qtyField - quantity field as JSON object. 
			  *@param {Object} orderlineModel - orderLine data as JSON object. 
             */
            uiOnQuantityFieldFocus :function (qtyField,orderLineModel) {
  				if($scope.cartDetails.$valid)
  				var formats = $locale.NUMBER_FORMATS;
	  			var oldQuantity = orderLineModel.OrderLineTranQuantity.OrderedQty;
	  			if(!iscCore.isVoid(oldQuantity)){
	  				oldQuantity=oldQuantity.replace(formats.GROUP_SEP, '');		
	  			}
	  			if(orderLineModel.showQtyUpdate !=='Y'){
	  				qtyField.oldQty = oldQuantity;
	  			}
  				
  		    },
  		  /**  
  		     *@description Shows confirmation dialog before deleting exchange order line.On Conformation,deleteOrderLine method is called.
			 *@param {Object} orderlineModel - orderLine data as JSON object. 
		  */   
  		  uiConfirmDeletion : function(orderLineModel){
          	
          	var that = this;
          	iscModal.showConfirmationMessage("viewcartdetails.LABEL_OLineDeleteConfirmation").then(function(action){
					that.deleteOrderLine(action,orderLineModel);
				});
          },
          
          /**
		    *@description Deletes order line by calling modifyFulfillmentOptions api.
			*@param {String} action - action is the response of a confirmation dialog to delete exchange order line. 
			*@param {Object} orderlineModel - orderLine data as JSON object. 
		  */ 
          deleteOrderLine : function(action,orderLineModel){
          	if(action === 'YES'){
	            	var apiInput ={'Order':{'OrderHeaderKey':this.model.getCompleteOrderDetails.Order.OrderHeaderKey,'OrderLines':[{'OrderLine':{'Action':'REMOVE','OrderLineKey' : orderLineModel.OrderLineKey}}]}}; 
	            	iscMashup.callMashup(this,"vc_modifyFulfillmentOptionsForDeletion",apiInput,{}).then(this.updateOrderLineList.bind(this),angular.noop);
          	}
          },
          
          /**
           *@description Call back handler of modifyFulfillmentOptions api when exchange order line is deleted.It Updates Order Header and Order line list data.
		   *@param {Object} data - Controller data of modifyFulfillmentOptions api call.
		  */ 
          
          updateOrderLineList : function(data){
          	var apiOutput = iscMashup.getMashupOutput(data,"vc_modifyFulfillmentOptionsForDeletion");
          	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
		    this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
		    this.calculateRefundPaymentTotal();
          },
          
          /**
            *@description Opens Gift options popup for exchange order line on click of 'Make this product a gift' link.
		    *@param {Object} orderlineModel - orderLine data as JSON object. 
		  */
          uiOpenGiftOptionsForOrderLine : function(orderlineModel){
        	  iscOrder.openGiftOptionsForOrderLinePopup(orderlineModel,this,'applyGiftOptionsForOrderLine');
          },
          
          /**
             *@description Calls changeOrder api to save data captured in gift options popup.
			 *@param {Object} data - JSON object containing data captured in gift options popup. 
			 *@param {Object} orderlineModel - orderLine data as JSON object.  
		  */
	            applyGiftOptionsForOrderLine : function(data,orderlineModel){
	            	
	            	var orderLineList =[];
	                orderLineList[0] = orderlineModel;
	            	if((!iscCore.isVoid(data.removeGift))&&(data.removeGift === 'Y')){
	            		var apiInput =iscOrder.prepareChangeOrderInputForGiftRemoval(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderLineList);
	            		iscMashup.callMashup(this,"viewcart_changeOrderForGift",apiInput,{}).then(this.updateOrderLineAfterGiftRemoval.bind(this),angular.noop);
	            	}else{
	            		 var apiInput =iscOrder.prepareChangeOrderInputForGift(data,this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderLineList);
	                     iscMashup.callMashup(this,"viewcart_changeOrderForGift",apiInput,{}).then(this.updateOrderLineWithGiftMessage.bind(this),angular.noop);    	
	            	}
	            	
	        	},   
	        	
	        	/**
	        	  *@description Updates the exchange order line once the gift options are removed.
				  *@param {Object} data - JSON object containing changeOrder api output. 
			    */
	        	 
	        	updateOrderLineAfterGiftRemoval : function(data){
	        		var apiOutput = iscMashup.getMashupOutput(data,"viewcart_changeOrderForGift");
	        		iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
	        		
	        		if(this.model.orderLineList.OrderLineList.OrderLine.length === 1){
	        			this.model.giftModel = {};
		        		iscWizard.setWizardModel("giftOptionsForOrderModel",{});
		        		this.ui.isOrderGift = '';
		                }
	        		
	        	},
	        	
	        	 /**
	        	 *@description Updates the exchange order line with gift data.
				 *@param {Object} data - JSON object containing changeOrder api output. 
				 */	        	
	        	  updateOrderLineWithGiftMessage : function(data){
		            	var apiOutput = iscMashup.getMashupOutput(data,"viewcart_changeOrderForGift");
		            	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
		            },
		            
		            /**
		            *@description Updates the orderLineList model with the latest exchange order line list.
					*@param {Object} apiOutput - JSON object containing changeOrder api output. 
					*/
		            replaceCompleteOrderLineList : function(apiOutput){
		            	if((!iscCore.isVoid(apiOutput.Order.OrderLines)) && (!iscCore.isVoid(apiOutput.Order.OrderLines.OrderLine))){
		            		delete this.model.orderLineList.OrderLineList["OrderLine"];
		                	this.model.orderLineList.OrderLineList.OrderLine = [];
		                	this.model.orderLineList.OrderLineList.OrderLine = apiOutput.Order.OrderLines.OrderLine;	
		            	}
		            },  
		            
		            uiValidateQuantity : function(validationResponseObj, angularErrorObject, modelValue, viewValue){
		            	
		            	/* check if the DataType Validation is successful */
		            	if(!iscCore.isVoid(angularErrorObject) && angularErrorObject.iscDatatypeValidator)
		            		return validationResponseObj;
		            	else
		            	var isQty_a_Number = !isNaN(viewValue);
		            	if(!iscCore.isBooleanTrue(isQty_a_Number)){
		            		validationResponseObj.booleanResponse = !isNaN(viewValue);
			            	validationResponseObj.errorMesssage = iscI18n.translate("globals.ERROR_invalid_input");
            			}
		            	
		            	return validationResponseObj;
		            },
		            
		            /**
		             *@description Validates exchange order line quantity change and calls getItemAvailabilityForStore api to check the Item availability .
					 *@param {Object} qtyField - quantity field as JSON object. 
					 *@param {Object} orderlineModel - orderLine data as JSON object. 
					*/
		            uiValidateQuantityAndUpdate : function(qtyField,orderlineModel){
			  			
			  			var formats = $locale.NUMBER_FORMATS;
			  			var newQuantity = orderlineModel.OrderLineTranQuantity.OrderedQty;
			  			newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
			  			orderlineModel.OrderLineTranQuantity.OrderedQty = newQuantity;
			  			if(qtyField.oldQty !== newQuantity){
			  				qtyField.oldQty = newQuantity ;
			  			if (typeof newQuantity == "string")
			  				newQuantity = parseInt(newQuantity,10);
			  			if (newQuantity === 0 ) {
			  				iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.MSG_InvalidQty')); 
			  				orderlineModel.OrderLineTranQuantity.OrderedQty = orderlineModel.OrderedQty;
			  				orderlineModel.showQtyUpdate='N';
					    }else{
				  			var  modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
				  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
				  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.OrderedQty = orderlineModel.OrderLineTranQuantity.OrderedQty;
				  			var getItemAvailabilityForStoreInput = iscOrder.prepareGetItemAvailabilityForStoreApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel);
				  			getItemAvailabilityForStoreInput.Promise.modifyFulfillmentOptionsInput =modifyFulfillmentOptionsInput ;
				  			iscMashup.callMashup(this,"viewcart_getItemAvailabilityForStore",getItemAvailabilityForStoreInput,{}).then(this.handleOrderLineQtyChange.bind(this),angular.noop);
					    }
			  			}
			  		},
			  		
			  		/**
			  		 *@description Shows/hides Update button for quantity field in exchange order lines panel based on the validity of the edited quantity.
					 *@param {Object} qtyField - quantity field as JSON object. 
					 *@param {Object} orderlineModel - orderLine data as JSON object. 
					 */
			  		uiShowUpdateButton : function(qtyField,orderlineModel){
  						
  						var formats = $locale.NUMBER_FORMATS;
			  			var newQuantity = orderlineModel.OrderLineTranQuantity.OrderedQty;
			  			newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
			  			if((!iscCore.isVoid(newQuantity)) && qtyField.oldQty !== newQuantity)
			  				orderlineModel.showQtyUpdate ='Y';
			  			else
			  				orderlineModel.showQtyUpdate ='N';
  			
  		},
  		
  		/**
		 *@description hides Update button for quantity field.
		 *@param {Object} orderlineModel - orderLine data as JSON object. 
		 */
  		
  		uiHideUpdateButton : function(orderlineModel){
  			orderlineModel.showQtyUpdate ='N';
  		},
  		
  		/**
		 *@description Shows next set of order lines when exchange order lines panel is scrolled.
		 */
  		
  		uiGetOrderLineListNext: function(){
    	    if(this.ui.oLineShownCount <= this.model.orderLineList.OrderLineList.OrderLine.length){
              this.ui.oLineShownCount+=5;
            }
    },
    
    /**
	 *@methodname uiOLineScrollActionValidator 
	 *@description Validates if next page action should be performed by checking whther api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
	 */
    
    uiOLineScrollActionValidator : function(){
    	return true;
    },
    
    /**
	 *@description onclick handler function for override price icon
	 *@param {Object} orderlineModel - orderLine data as JSON object.    
     */	
    
    uiOpenOverridePriceModal: function(orderlineModel){
    	
    	
    	var currency = this.model.getCompleteOrderDetails.Order.PriceInfo.Currency;
    	iscOrder.openOverridePriceModal(orderlineModel,currency,this,'onPriceOverride');
    },
      
    /**
     * @description callback handler function for price override popup.saves the overridden price against exchange item.
     * @param {Object} data - data sent from override price popup.
	 * @param {Object} orderlineModel - orderLine data as JSON object.  
     */
      onPriceOverride: function(data,orderlineModel){
			var modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo = {};
			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo.ListPrice = orderlineModel.LinePriceInfo.ListPrice;
			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo.UnitPrice = data.newprice;
			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].LinePriceInfo.IsPriceLocked = 'Y';
       	iscOrder.addPriceOverrideDefaultNote(modifyFulfillmentOptionsInput,data.reason);
       	iscMashup.callMashup(this,"viewcart_ovp_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handlePriceOverrideApiCall.bind(this),angular.noop);
        },
        
        /**
		 *@description Call back handler of modifyFulfillmentOptions api when unit price of exchange product is overridden.
		 *@param {Object} data - modifyFulfillmentOptions api output. 
		 */
        
        handlePriceOverrideApiCall : function(data){
      	  var apiOutput = iscMashup.getMashupOutput(data,"viewcart_ovp_modifyFulfillmentOptions");  
            this.handleModifyFulfillmentOptionsApiOutput(apiOutput);
        },
        
        /**
		 *@description Call back handler of getItemAvailabilityForStore api.
		 *@param {Object} data - getItemAvailabilityForStore api output.
		 */
        handleOrderLineQtyChange : function(data){
	        	var apiOutput = iscMashup.getMashupOutput(data,"viewcart_getItemAvailabilityForStore");
			    if(!iscCore.isVoid(apiOutput.Promise)){
			    	if(apiOutput.Promise.IsItemQtyAvailable === "N"){
			    		iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.OrderLineQtyChangeError'));
			    		/* reset the quantity field */
			    		var orderLineKey = apiOutput.Promise.OrderLineKey;
			    		var orderLineList = []; 
			    		orderLineList = this.model.orderLineList.OrderLineList.OrderLine;
	        		   for(var j=0; j<orderLineList.length; j++){
     					
     						if(orderLineList[j].OrderLineKey == orderLineKey){
     							orderLineList[j].OrderLineTranQuantity.OrderedQty = orderLineList[j].OrderedQty;
     							break;
     						}
	        	 	   }
			    	}
			    }else{
			    	
			    	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
			    	this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
			    	this.calculateRefundPaymentTotal();
			    	if(iscCore.isVoid(this.model.getCompleteOrderDetails.PromotionsApplied)){
			    		this.ui.showCouponScanField = false;
			    	}
			    	$scope.cartDetails.$setPristine();
			    	
			    	}
	        },
	        
	        /**
			 *@description onclick handler function for change delivery method icon.It opens fulfillment options popup.
			 *@param {Object} orderlineModel - orderLine data as JSON object.    
		     */	
	        
	        uiChangeDeliveryMethod : function(orderlineModel){
            	
            	var that = this;
            	var changeDeliveryModalInput = {
            					modalInput: function ()
					 				{
					  				return {	
					  					inputData : {
					  							OrderHeaderKey : that.model.getCompleteOrderDetails.Order.OrderHeaderKey,
					  							orderLine : orderlineModel,
					  							orderPersonInfoShipTo : that.model.getCompleteOrderDetails.Order.PersonInfoShipTo
					  								}
				  						};
	  								}
            					};
            	
            	iscModal.openModal('store.views.common.fulfillment.fulfillmentoptions',changeDeliveryModalInput,{})
            			 .then(function(callBackData){
            		that.handleDeliveryMethodChange.call(that,callBackData.data,orderlineModel);
					},angular.noop);
            	
            },
            
            /**
			 *@description Utility which updates orderLineList,getCompleteOrderDetails models when modifyFulfillmentOptions api is called.
			 *@param {Object} apiOutput - modifyFulfillmentOptions api output.
			 */
            
            handleModifyFulfillmentOptionsApiOutput : function (apiOutput){
  	        	iscOrder.updateOrderLines(apiOutput,this.model.orderLineList);
  			    this.model.getCompleteOrderDetails =iscOrder.updateOrderHeaderDetails(apiOutput,this.model.getCompleteOrderDetails);
  			    this.calculateRefundPaymentTotal();
  	        },
  	      
  	      /**
			 *@description Call back handler of modifyFulfillmentOptions api when coupon is removed,store is selected for a pickup line and delivery method is changed.
			 *@param {Object} data - modifyFulfillmentOptions api output.
			 */
  	        
  	      handleModifyFulfillmentOptionsOutput : function(data){
        	  var apiOutput = iscMashup.getMashupOutput(data,"viewcart_modifyFulfillmentOptions");  
              this.handleModifyFulfillmentOptionsApiOutput(apiOutput);
          },

            
          /**
           * @description Callback handler function of fulfillmentoptions popup. 
           * @param {Object} data - data sent from override fulfillmentoptions popup.
		   * @param {Object} orderlineModel - orderLine data as JSON object.  
           */
          
            handleDeliveryMethodChange : function(data,orderlineModel){
            	
            	var newDelMethod = data.newDelMethod;
	  			var  modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
	  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].DeliveryMethod = newDelMethod;
	  			
            	if(newDelMethod == "PICK"){
            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ShipNode = data.selectedStore.ShipNode;
            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.SettledQuantity = "0";
            		if(!iscCore.isVoid(data.selectedStore.Availability.AvailableDate)){
            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ReqShipDate = data.selectedStore.Availability.AvailableDate;
    	  			}
            	}else if (newDelMethod == "SHP"){
            		/* If charge shipping lines at store rule is not turned on, set SettledQuantity as 0 */
            		if(this.model.getRuleDetails_ChargeShipLines && this.model.getRuleDetails_ChargeShipLines.Rules && this.model.getRuleDetails_ChargeShipLines.Rules.RuleSetValue == 'N'){
    					modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.SettledQuantity = "0";
    				}
            		if(!iscCore.isVoid(data.EarliestShipDate)){
            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].EarliestShipDate = data.EarliestShipDate;
            		}
            		
            		if(!iscCore.isVoid(data.personInfoShipTo)){
            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = {};
            	
            		
            		/* check if the order has ship to address*/
    	  			if((!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo) || (data.personInfoShipTo.IsDefaultShippingAddress === 'Y')){
    	  				modifyFulfillmentOptionsInput.Order.PersonInfoShipTo  =  data.personInfoShipTo;
    	  				if(!this.model.getCompleteOrderDetails.Order.BillToID){
    	  				modifyFulfillmentOptionsInput.Order.CustomerFirstName =  data.personInfoShipTo.FirstName;
    	      	        modifyFulfillmentOptionsInput.Order.CustomerLastName  =  data.personInfoShipTo.LastName;
    	      	        modifyFulfillmentOptionsInput.Order.CustomerEMailID   =  data.personInfoShipTo.EMailID;
    	      	        modifyFulfillmentOptionsInput.Order.CustomerZipCode   =  data.personInfoShipTo.ZipCode;
    	  				}
    	  			}
    	  			
            		 delete data.personInfoShipTo.IsDefaultShippingAddress;
       			     delete data.personInfoShipTo.IsDefaultBillingAddress;
      			    
    	  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = data.personInfoShipTo;
    	  			
    	  			/* check if the order has ship to address*/
    	  			if(!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo){
    	  				modifyFulfillmentOptionsInput.Order.PersonInfoShipTo  =  data.personInfoShipTo;
    	  			}
            		}
            		if(!iscCore.isVoid(data.selectedCarrier)){
            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].CarrierServiceCode =data.selectedCarrier.CarrierServiceCode;
            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates = {};
            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate = [];
	            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[0] = {};
	            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[0].CommittedDate = data.selectedCarrier.DeliveryStartDate;
	            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[0].DateTypeId ="MIN_DELIVERY";
	            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[1] = {};
	            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[1].CommittedDate = data.selectedCarrier.DeliveryEndDate;
	            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderDates.OrderDate[1].DateTypeId ="MAX_DELIVERY";
            		}
            		
            	}else if(newDelMethod == "CARRY"){
            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ShipNode = iscAppContext.getFromContext("storeName");
            		if(orderlineModel.OrderLineTranQuantity.SettledQuantity === "0"){
            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
            			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.SettledQuantity = "0";
            		}
            	}
            	/* Stamp MarkForKey @ OrderLine If PersonInfoMarkFor element is present*/
            	if((!iscCore.isVoid(orderlineModel.PersonInfoMarkFor)) && (!iscCore.isVoid(orderlineModel.PersonInfoMarkFor.PersonInfoKey))){
            		modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].MarkForKey = orderlineModel.PersonInfoMarkFor.PersonInfoKey;
            	}
            	iscMashup.callMashup(this,"viewcart_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleModifyFulfillmentOptionsOutput.bind(this),angular.noop);
            },
            
            /**
			 *@description Opens Address capture popup for Adding or Editing Exchange Order/OrderLine shippping address.
			 *@param {String} mode - Specifies whether the address needs to be added or edited.
			 *@param {Object} orderlineModel - orderLine data as JSON object.    
		  */
            
            uiAddOrEditAddress : function(mode,orderlineModel){
	 			   var that = this;
	 			   var popupInput = {};
	 			   popupInput.Mode = mode;
	 			  
	 			   popupInput.Context = "showDefaultshipto";
	 			   if(mode == "Edit"){
	 				  if(!iscCore.isVoid(orderlineModel.PersonInfoShipTo)){
	 					 popupInput.PersonInfo = angular.copy(orderlineModel.PersonInfoShipTo);     
	 				  }else{
	 					 popupInput.PersonInfo = angular.copy(this.model.getCompleteOrderDetails.Order.PersonInfoShipTo);   
	 				  }
	 			   }
	 			   
	 			   if(!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo){
	 				  popupInput.hideShipaddress = true;
	 			   }else {
	 				  if(mode=='Add'){
	 					 popupInput.PersonInfo ={};
	 				  }
	 					 popupInput.PersonInfo.IsDefaultShippingAddress='N';
	 			   }
	 			  
	 			   var addressPopUpInput = {
	 					 modalInput: function(){
	          				return popupInput;
	          			}   
	 					   
	 			   };
	 			   
	 			 iscModal.openModal('store.views.common.orderaddress.orderaddresspopup',addressPopUpInput,{})
						.then(function(callBackData){
	          			if(callBackData != null && callBackData.data != null && callBackData.data != undefined){
	          				that.onAddressAdditionOrEdit.call(that,callBackData.data,orderlineModel);
	          			}		            			
	     				},
						angular.noop);
	 		     },
                
	 		    /**
					 *@description Call back handler of address capture popup,which calls getItemAvailabilityForStore api for captured address to check the availability of the product.
					 *@param {Object} data - data captured in address capture popup.
					 *@param {Object} orderlineModel - orderLine data as JSON object.    
				  */
	 		     
	 		    onAddressAdditionOrEdit : function(data,orderlineModel){
	 			    
	 			    var personInfo = angular.copy(data);
	 			    
	 			   delete personInfo.IsDefaultShippingAddress;
	 			   delete personInfo.IsDefaultBillingAddress;
	 			   
	 			    var modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
		  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity = {};
		  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].OrderLineTranQuantity.OrderedQty = orderlineModel.OrderLineTranQuantity.OrderedQty;
		  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = {};
		  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].PersonInfoShipTo = personInfo;
		  			
		  			/* check if the order has ship to address*/
		  			if((!this.model.getCompleteOrderDetails.Order.PersonInfoShipTo) || (data.IsDefaultShippingAddress === 'Y')){
		  				modifyFulfillmentOptionsInput.Order.PersonInfoShipTo  =  personInfo;
		  				if(!this.model.getCompleteOrderDetails.Order.BillToID){
		  				modifyFulfillmentOptionsInput.Order.CustomerFirstName =  personInfo.FirstName;
		      	        modifyFulfillmentOptionsInput.Order.CustomerLastName  =  personInfo.LastName;
		      	        modifyFulfillmentOptionsInput.Order.CustomerEMailID   =  personInfo.EMailID;
		      	        modifyFulfillmentOptionsInput.Order.CustomerZipCode   =  personInfo.ZipCode;
		  				}
		  			}
	               /* getItemAvailabilityForStore API Input*/
		  			
		  			var getItemAvailabilityForStoreInput = iscOrder.prepareGetItemAvailabilityForStoreApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel);
		  			getItemAvailabilityForStoreInput.Promise.PromiseLines.PromiseLine[0].ShipToAddress = personInfo;
		  			getItemAvailabilityForStoreInput.Promise.modifyFulfillmentOptionsInput =modifyFulfillmentOptionsInput ;
		  			iscMashup.callMashup(this,"viewcart_getItemAvailabilityForStore",getItemAvailabilityForStoreInput,{}).then(this.handleOrderLineQtyChange.bind(this),angular.noop);
		  			
	 		  },
	 		  
	 		 uiOpenAddItems: function(type){			
		 			if(!iscCore.isVoid(this.model.addProductInput.value)){
		 				iscWizard.setWizardModel("ReturnOrderLines",angular.copy(this.model.returnOrderLineList));
		 				iscWizard.setWizardModel("ReturnOrderDetails",angular.copy(this.model.returnOrderDetails));
		 				
		 				    var pageInput = {
		 							input: this.model.addProductInput.value
		 					};
		 				    
		 				    if(type==="SEARCH"){
		 						iscWizard.gotoCustomPage('productSearch',pageInput,{wizardPageCssClass:"fullscreen-modal"});
		 					}
		 					if(type==="SCAN"){
		 						iscWizard.gotoCustomPage('addItems',pageInput,{wizardPageCssClass:"fullscreen-modal"});
		 					}
		 			}
		 			else{
		 				iscModal.showErrorMessage(iscI18n.translate('addItems.MSG_ProductSearchError'));
		 			}
		 		},
		 		
		 		 /**
				 *@description onclick handler function for store address link.It opens Store search popup.
				 *@param {Object} orderlineModel - orderLine data as JSON object.    
			     */	
		 		
	 		    uiOpenStoreSearch: function(orderlineModel){
	 			iscOrder.openStoreSearchModal(orderlineModel,this,'afterStoreSelection','CARTDETAILS');
	            },
	            
	            /**
		           * @description Callback handler function of store selection popup. Sets ship node for pickup lines
		           * @param {Object} data - data sent from override store selection popup.
				   * @param {Object} orderlineModel - orderLine data as JSON object.  
		           */
	            afterStoreSelection: function(data,orderlineModel){
		  			var  modifyFulfillmentOptionsInput =iscOrder.prepareModifyFulfillmentOptionsApiInput(this.model.getCompleteOrderDetails.Order.OrderHeaderKey,orderlineModel.OrderLineKey);
    	  			modifyFulfillmentOptionsInput.Order.OrderLines.OrderLine[0].ShipNode = data.selectedStore.ShipNode;
    	  			iscMashup.callMashup(this,"viewcart_modifyFulfillmentOptions",modifyFulfillmentOptionsInput,{}).then(this.handleModifyFulfillmentOptionsOutput.bind(this),angular.noop);
	            }
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.return.sales-order-details.sales-order-details
 *@package store.views.return.sales-order-details
 *@class sales-order-details
 *@description Displays sales order details to be returned.
 *
 */
angular.module('store').controller('store.views.return.sales-order-details.sales-order-details',
  ['$animate','$document','$scope','$rootScope','$timeout','iscScreen','iscWizard','iscStateParams','iscMashup','iscModal','iscResourcePermission','$filter','iscI18n','iscScrollUtility','iscReturn','iscDomUtility','iscAppContext',
	function($animate,$document,$scope,$rootScope,$timeout,iscScreen,iscWizard,iscStateParams,iscMashup,iscModal,iscResourcePermission,$filter,iscI18n,iscScrollUtility,iscReturn,iscDomUtility,iscAppContext) {
		
	  
		  var escapeBinderFn = function(event){
			  if(event.which === 27 && !event.defaultPrevented) {
		           this.ui.showOrderPreview = false;
		           $document.off("keydown",escapeBinderFn);
		           $scope.$apply();
		         }
	  	 };
	  	 
	  	$scope.$on("$destroy", function () {
	           $document.off("keydown",escapeBinderFn);
			});
	  	
		iscWizard.initializeWizardPage($scope,{
			
			 subscribers : [
			   	         {
			   	          'event':'refreshSalesOrderLine',
			                 'handler':'refreshOrderLine' 		
			   		    }
			   	         ],
			   	         
            model:{
            	/**
		           *@iscdoc model
		  		   *@viewname store.views.return.sales-order-details.sales-order-details
		           *@name orderDetails
		           *@description This model contains the getCompleteOrderDetails api output.
		           */
                "orderDetails":{},
                /**
		           *@iscdoc model
		  		   *@viewname store.views.return.sales-order-details.sales-order-details
		           *@name orderLineList
		           *@description This model contains the getCompleteOrderLineList api output.
		           */
                "orderLineList":{},
                /**
		           *@iscdoc model
		  		   *@viewname store.views.return.sales-order-details.sales-order-details
		           *@name returnOrder
		           *@description This model contains the return order details.
		           */
                "returnOrder":{},
                /**
		           *@iscdoc model
		  		   *@viewname store.views.return.sales-order-details.sales-order-details
		           *@name itemPreview
		           *@description This model contains the item details of recently returned product.
		           */
                "itemPreview":{},
                /**
		           *@description This model is used for setting the default search entity as ORDER in Lookup action.
		           */
                "lookupConfig":{LookupType:"ORDER"}
            },
            
            mashupRefs:[
                        {
			  				/**
						        *@iscdoc mashup
								*@viewname store.views.return.sales-order-details.sales-order-details
								*@mashupid orderDetails_getCompleteOrderDetails
								*@mashuprefid getCompleteOrderDetails
								*@description This mashup is used to get sales order details.
								*/
                            mashupRefId: 'getCompleteOrderDetails',
                            mashupId: 'orderDetails_getCompleteOrderDetails'

                        },
                        {
                        	/**
							*@description This mashup is used to get return order details.
							*/
                            mashupRefId: 'getCompleteReturnOrderDetails',
                            mashupId: 'orderDetails_getCompleteReturnOrderDetails'

                        },
                        {
                        	/**
							*@description This mashup is used to validate the manager override code.
							*/
                            mashupRefId: 'validateOverrideCode',
                            mashupId: 'returnOrder_validateOverrideCode'

                        },
                        {
                        	/**
							*@description This mashup is used to get sales order line list.
							*/
                            mashupRefId: 'getSortedCompleteOrderLineList',
                            mashupId: 'orderDetails_getSortedCompleteOrderLineList'

                        },
                        {
                        	/**
							*@description This mashup is used to get override validation reason common code.
							*/
                            mashupRefId: 'getOverrideViolationReasonList',
                            mashupId: 'orderDetails_getCommonCodeListForOverrideViolationReason'

                        },
                        {
                        	/**
							*@description This mashup is used to create a return order.
							*/
                            mashupRefId: 'createReturnOrder',
                            mashupId: 'orderDetails_createReturnOrder'

                        },
                        {
                        	/**
							*@description This mashup is used to add a product to the return order.
							*/
                            mashupRefId: 'changeReturnOrder',
                            mashupId: 'orderDetails_changeReturnOrder'

                        },
                        {
                        	/**
							*@description This mashup is used to create a return order by overriding policy using manager override code.
							*/
                            mashupRefId: 'createReturnOrderWithPolicyOverride',
                            mashupId: 'orderDetails_createReturnOrderWithPolicyOverride'

                        },
                        {
                        	/**
								*@description This mashup is used to add a product to the return order by overriding policy using manager override code.
								*/
                            mashupRefId: 'changeReturnOrderWithPolicyOverride',
                            mashupId: 'orderDetails_changeReturnOrderWithPolicyOverride'

                        },
                        {
                        	/**
							*@description This mashup is used to translate a barcode into item id.
							*/
                        	mashupRefId: 'translateBarCodeByItemId',
                        	mashupId: 'orderDetails_translateBarcodeForItem'
                        }
                       ],
            ui:{
            	/**
				*@property {Number}  orderTotalQty - number of products added to return cart.
				*/
            	orderTotalQty: '0',
            	/**
				*@property {Number}  scannedItemLineIndex - denotes the scanned sales order line index.
				*/
                scannedItemLineIndex:1,
                /**
				*@property {Boolean}  overrideResourcePermission - true if user has Override resource permission, false otherwise.
				*/
                overrideResourcePermission:false,
                /**
				*@property {String}  selectedOrderLineKey - contains the order line key of selected order line.
				*/
                selectedOrderLineKey : "",
                /**
				*@property {String}  headerOrderNo - contains sales order number.
				*/
                headerOrderNo:"",
                /**
				*@property {String}  showProductCount - hides/shows the number of products in sales order.
				*/
                showProductCount:'N',
                /**
				*@property {Number}  orderLineShownCount - pageSize of the Order line list for continuous scrolling.
				*/
                orderLineShownCount: 5,
                /**
				*@property {String}  hideSearch - hide/shows the Lookup Return search panel.
				*/
                hideSearch:'N',
                /**
				*@property {Boolean}  showOrderNoAsLink - true if sales order number should be shown as link in lower resolutions, false otherwise.
				*/
                showOrderNoAsLink:true,
                /**
				*@property {String}  orderPreviewTemplate - contains the sales order preview template file path which will be displayed in lower resolutions
				*/
                orderPreviewTemplate:'store/views/return/sales-order-details/sales-order-preview.tpl.html',
                /**
				*@property {Boolean}  showOrderPreview - true if sales order preview needs to be shown, false otherwise.
				*/
                showOrderPreview:false,
                /**
				*@property {Boolean}  isOrderLineOverridden - true if order line is overridden, false otherwise.
				*/
                isOrderLineOverridden :false
            },
            
			
            
			
         /**
         * @scDoc Method
         * @method initialize
         * @description method to initialize the controller and search for product using the input to the page.
         */
         initialize: function(){
        	 
        	 iscReturn.setMiniCartParam(this);
        	 
        	 if(iscResourcePermission.hasPermission("WSC000034")) {
        		 this.ui.overrideResourcePermission = true;
        	 }
		
        	 var pageInput = iscWizard.getWizardPageInput();
        	 var completeOrderDetailsInput = {};
        	 completeOrderDetailsInput.Order = {};
        	 completeOrderDetailsInput.Order.AppContextInfo = {};
        	 completeOrderDetailsInput.Order.OrderHeaderKey = pageInput.input.Order.OrderHeaderKey;
        	 completeOrderDetailsInput.Order.EnterpriseCode = pageInput.input.Order.EnterpriseCode;
        	 var channel = this.getEntryTypeForSalesOrder(pageInput.input);

        	 completeOrderDetailsInput.Order.AppContextInfo.Channel = channel;
        	 var completeOrderLineListInput = {"OrderLine" : { "OrderHeaderKey" : completeOrderDetailsInput.Order.OrderHeaderKey,"AppContextInfo":{"Channel":channel}}};
        	 
        	 var mashupArray = [];
        	 mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteOrderDetails',completeOrderDetailsInput));
	         mashupArray.push(iscMashup.getMashupRefObj(this,'getSortedCompleteOrderLineList', completeOrderLineListInput));
	         
	         var returnOrderModel = iscWizard.getWizardModel('returnOrder');
	         if(!iscCore.isVoid(returnOrderModel) && !iscCore.isVoid(returnOrderModel.Order) && !iscCore.isVoid(returnOrderModel.Order.OrderHeaderKey)) {
	        	 var getReturnOrderDetails = {"Order" : { "OrderHeaderKey" : returnOrderModel.Order.OrderHeaderKey}};
	        	 mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteReturnOrderDetails', getReturnOrderDetails));
	         }
	         
	         iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
	         
	         $scope.$on('uiSearchClose',function(event,args){
			 	if (args){
					  $scope.ui.hideSearch = 'N';
			    }  
					   
			 });
	        	
         },
         
         /**
			 *@description This method is used to retrieve entry type of sales order.
			 *@param {Object} orderModel - contains sales order details
			 */	
         getEntryTypeForSalesOrder:function(orderModel) {
        	 var entryType = "";
        	 if(!iscCore.isVoid(orderModel) && !iscCore.isVoid(orderModel.Order) && !iscCore.isVoid(orderModel.Order.AppContextInfo) && iscCore.isVoid(orderModel.Order.AppContextInfo.Channel)) {
        		 entryType = "null";
        	 } else {
        		 entryType = orderModel.Order.AppContextInfo.Channel;
        	 }
        	 
        	 return entryType;
         },
         
         /**
			 *@description callback handler for init APIs invoked in initialize() method.
			 *@param {Object} response - Controller data of init api calls.
			 */	
         handleInitApiCalls: function(response) {
        	 
        	 var apiOutput = iscMashup.getMashupOutput(response,"getCompleteOrderDetails");
        	 this.model.orderDetails = apiOutput;
        	 this.ui.headerOrderNo = apiOutput.Order.OrderNo;
        	 
        	 if(!iscCore.isVoid(this.model.orderDetails.Order.ReturnOrder)) {
        		 
        		 this.model.returnOrder = {Order:this.model.orderDetails.Order.ReturnOrder};
        		 this.ui.orderTotalQty = this.model.returnOrder.Order.OrderLines.TotalLinesInCart;
        		 iscWizard.setWizardModel("returnOrder",this.model.returnOrder);
        		 
        		 if(!iscCore.isVoid(this.model.returnOrder.Order.ExchangeOrders) && !iscCore.isVoid(this.model.returnOrder.Order.ExchangeOrders.ExchangeOrder[0])) {
        			 var exchangeOrderModel = {Order:{OrderHeaderKey:this.model.returnOrder.Order.ExchangeOrders.ExchangeOrder[0].OrderHeaderKey}};
        			 iscWizard.setWizardModel("exchangeOrderModel",exchangeOrderModel); 
        		 }
                	
           	 } else if(this.model.orderDetails.Order.IsOrderReturnable == "N") {
        		 iscModal.showWarningMessage(iscI18n.translate('orderDetails.MSG_OrderNotReturnable'));
        	 }
        	 
        	 apiOutput = iscMashup.getMashupOutput(response,"getSortedCompleteOrderLineList");
        	 if(!iscCore.isVoid(apiOutput)) {
        		 this.model.orderLineList = apiOutput;
        	 }
        	 
        	 apiOutput = iscMashup.getMashupOutput(response,"getCompleteReturnOrderDetails");
        	 if(iscCore.isVoid(this.model.returnOrder) && !iscCore.isVoid(apiOutput)) {
        		 this.model.returnOrder = apiOutput;
        	 }
        	 
        	//set focus on process return button if the return reason popup is not opened
			$timeout(function () {
		        iscDomUtility.setFocus(document.getElementById('itemScanTextbox'));
		    }, 0);
         },
         
         /**
			 *@description This method controls the display of Purchased Quantity field on UI. This field will be hidden if all quantity of a product is returned.
			 *@param {Object} orderLine - contains order line details
			 */	
         uiTogglePurchasedQtyDisplay: function(orderLine) {
        	 
        	 var returnedQty = Number(this.uiGetReturnedQuantity(orderLine));
        	 var returnableQty = Number(orderLine.ReturnableQty);
        	 var orderedQty = Number(orderLine.OrderedQty);
        	 
        	return (returnedQty + returnableQty) == orderedQty ? false : true;
        	 
         },
         
         /**
			 *@description This method returns the returnable quantity for the orderline.
			 *@param {Object} orderLine - contains order line details
			 */	
         uiGetTotalReturnableQty: function(orderLine) {
        	 
        	 var totalReturnableQty = Number(this.uiGetReturnedQuantity(orderLine)) + Number(orderLine.ReturnableQty);
        	 
        	 if(this.uiGetReturnableQuantityNumber(orderLine) == 0 && !this.uiIsOrderLineAddedToReturned(orderLine) && orderLine.ReturnPolicyViolations.CannotBeOverridden == 'N') {
        		 totalReturnableQty = orderLine.OrderedQty;
        	 } 
        	 
        	 return totalReturnableQty;
         },
         
         /**
			 *@description This method displays the sales order preview on click of sales order number in lower resolutions.
			 */	
         uiShowOrderPreview:function() {
        	if(!this.ui.showOrderPreview) {
        		this.ui.showOrderPreview = true;
    			$timeout(function() {
    				 $document.off("keydown", escapeBinderFn);
    			}, 3000);
        	} else if(this.ui.showOrderPreview) {
        		this.ui.showOrderPreview = false;
        		 $document.off("keydown",escapeBinderFn);
        	}
			
         },
         
         /**
			*@description This method opens up a new page depending on what is searched in the return lookup.
			*@param {Object} searchResult - Search results
		 */	
 		uiHandleSearchResult: function(searchResult) {
 			iscWizard.gotoCustomPage(searchResult.NextPage.action,{input:searchResult.NextPage.model},{}); 
 		},
 		 
 		  /**
			*@description This method is invoked when clicks on Add to Return action for a order line. This method creates prepares the input for adding an item o return and invokes API for adding it to return order.
			*@param {Object} orderLine - order line details 
		 */	
		uiHandleAddToReturn : function(orderLine) {
        	var addToReturnInput = this.getAddToReturnInput(orderLine);
        	if(addToReturnInput !== -1){
        		this.saveItemToReturn(addToReturnInput);
        	}
		},
		
		  /**
		*@description This method is sets the selected order line key into a property selectedOrderLineKey.
		*@param {Object} orderLineKey - selected order line key
	 */	
		uiSetSelectedLine: function(orderLineKey) {
			this.ui.selectedOrderLineKey = orderLineKey;
		},
		
		 /**
		*@description This method is used to launch Override Policy popup to display the policy violations of the order line.
		@param {Object} orderLine - order line details 
	 */	
		uiViewPolicyViolation:function(orderLine) {
			var that = this;
			var popupInput = {};
			popupInput.orderLineModel = orderLine;
			popupInput.viewMode = "Y";
			
			var overridePolicyPopupInput = {
				 modalInput: function(){
	      			return popupInput;
	      		}   
			   
			};
			   
			   
			iscModal.openModal('store.views.return.common.override.override-policy-violation',overridePolicyPopupInput,{});
		},
		
		uiAddItemToRetrurnCart: function(orderLine) {
			var addItemToCartInput = this.getAddItemToCartInput("", orderLine);
			if(!iscCore.isVoid(addItemToCartInput)) {
				this.saveItemToCart(addItemToCartInput, false);
			}
		},
		
		 /**
		*@description This method is used to launch Override Policy pop-up to display the policy violations of the order line and Override reasons.
		* @param {Object} orderLine - order line details
		* @param {Object} openDefaultView - boolean value set as TRUE to display policy violations of the order line and Override reasons.
	 */	
		uiOverridePolicyViolation: function(orderLine, openDefaultView) {
			
			var that = this;
			var popupInput = {};
			popupInput.openOverride = openDefaultView?true:false;
			popupInput.viewMode = "N";
			popupInput.orderLineModel = orderLine;
			popupInput.overrideInput = this.getAddItemToCartInput("", orderLine);
			
			var overridePolicyPopupInput = {
				 modalInput: function(){
	      			return popupInput;
	      		}   
			   
			};
			   
			   
			iscModal.openModal('store.views.return.common.override.override-policy-violation',overridePolicyPopupInput,{}).then(function(callBackData){
				if(callBackData.data !== null && callBackData.data !== undefined){
					that.applyOverrideForOrderLine.call(that,callBackData.data,orderLine);
				}
				},
				function(callBackData){
					if(callBackData.data !== null && callBackData.data !== undefined){
						if(iscCore.isVoid(that.model.returnOrder)) {
							that.model.returnOrder = callBackData.data.returnOrder;
							iscWizard.setWizardModel("returnOrder",that.model.returnOrder);
						}
						
			        	
					}
				}
				);
		},
		
		 /**
		*@description callback handler on click of submit/ok in Override Policy Violation popup
		* @param {Object} orderLine - order line details
		* @param {Object} popupData - contains data captured in Override Policy Violation popup
	 */	
		applyOverrideForOrderLine: function(popupData, orderLine) {
			this.postSaveItemToCart(popupData.response);	
		},
		
		 /**
		*@description This method prepare the input for adding an product to return order.
		* @param {Object} orderLine - order line details
		* @param {Object} overrideReason - overrideReason selected for the order line in Override Policy Violation popup
	 */	
		getAddItemToCartInput:function(overrideReason, orderLine) {
			
			var addItemToCartInput = {};
			addItemToCartInput.Order = {};
			addItemToCartInput.Order.AppContextInfo = {};
			addItemToCartInput.Order.OrderLines = {};
        	addItemToCartInput.Order.OrderLines.OrderLine = {};
        	
        	
        	addItemToCartInput.Order.AppContextInfo.Channel = 'Store';
        	 
        	if(!iscCore.isVoid(this.model.returnOrder)){
        		addItemToCartInput.Order.OrderHeaderKey =this.model.returnOrder.Order.OrderHeaderKey;
        		
        		if(iscCore.isVoid(this.model.returnOrder.Order.BillToID) && !iscCore.isVoid(this.model.orderDetails.Order.BillToID)) {
        			addItemToCartInput.Order.BillToID = this.model.orderDetails.Order.BillToID;
            		addItemToCartInput.Order.CustomerContactID = this.model.orderDetails.Order.CustomerContactID;
            		addItemToCartInput.Order.CustomerFirstName = this.model.orderDetails.Order.CustomerFirstName;
            		addItemToCartInput.Order.CustomerLastName = this.model.orderDetails.Order.CustomerLastName;
            		addItemToCartInput.Order.CustomerEMailID = this.model.orderDetails.Order.CustomerEMailID;
            		addItemToCartInput.Order.PersonInfoShipTo =  this.model.orderDetails.Order.PersonInfoShipTo;
            		addItemToCartInput.Order.PersonInfoBillTo =  this.model.orderDetails.Order.PersonInfoBillTo;
        		}
        		
        	} else {
        		
        		if(!iscCore.isVoid(this.model.orderDetails.Order.BillToID)){
        			
        			addItemToCartInput.Order.BillToID = this.model.orderDetails.Order.BillToID;
            		addItemToCartInput.Order.CustomerContactID = this.model.orderDetails.Order.CustomerContactID;
            		addItemToCartInput.Order.CustomerFirstName = this.model.orderDetails.Order.CustomerFirstName;
            		addItemToCartInput.Order.CustomerLastName = this.model.orderDetails.Order.CustomerLastName;
            		addItemToCartInput.Order.CustomerEMailID = this.model.orderDetails.Order.CustomerEMailID;
            		addItemToCartInput.Order.PersonInfoShipTo =  this.model.orderDetails.Order.PersonInfoShipTo;
            		addItemToCartInput.Order.PersonInfoBillTo =  this.model.orderDetails.Order.PersonInfoBillTo;
        		}
        		
        		addItemToCartInput.Order.PriceInfo = {};
        		addItemToCartInput.Order.PriceInfo.Currency = this.model.orderDetails.Order.PriceInfo.Currency;
        	}

        	if(!iscCore.isVoid(this.model.returnOrder)) {
        		var matchingReturnOrderLine = this.findMatchingReturnOrderLine(orderLine.OrderLineKey);
        		if(!iscCore.isVoid(matchingReturnOrderLine)) {
        			addItemToCartInput.Order.OrderLines.OrderLine.OrderLineKey = matchingReturnOrderLine.OrderLineKey;
            		addItemToCartInput.Order.OrderLines.OrderLine.OrderedQty = Number(matchingReturnOrderLine.OrderedQty) + Number("1");
        		} else {
        			addItemToCartInput.Order.OrderLines.OrderLine.OrderedQty = "1";
        		}
        	}  else {
        		addItemToCartInput.Order.OrderLines.OrderLine.OrderedQty = "1";
        	}
        	
        	if(iscCore.isVoid(addItemToCartInput.Order.OrderLines.OrderLine.OrderLineKey)) {
            	addItemToCartInput.Order.OrderLines.OrderLine.DerivedFrom = {};
            	addItemToCartInput.Order.OrderLines.OrderLine.DerivedFrom.OrderNo = this.model.orderDetails.Order.OrderNo;
            	addItemToCartInput.Order.OrderLines.OrderLine.DerivedFrom.OrderLineKey = orderLine.OrderLineKey;
            	addItemToCartInput.Order.OrderLines.OrderLine.DerivedFrom.DocumentType = "0001";
        	} else {
        		addItemToCartInput.Order.OrderLines.OrderLine.DerivedFromOrderLineKey = orderLine.OrderLineKey;
        	}
        	
        	if(!iscCore.isVoid(overrideReason)) {
        		addItemToCartInput.Order.OrderLines.OrderLine.OverrideCode = overrideReason.overrideCode;
        		addItemToCartInput.Order.OrderLines.OrderLine.Notes = {};
        		addItemToCartInput.Order.OrderLines.OrderLine.Notes.Note = {};
            	if(overrideReason.value == 'Other') {
            		addItemToCartInput.Order.OrderLines.OrderLine.Notes.Note.NoteText = overrideReason.otherText;
            	} else {
            		addItemToCartInput.Order.OrderLines.OrderLine.Notes.Note.NoteText = overrideReason.value;
            	}
        	}
        	
			
        	return addItemToCartInput;
		},
		
		 /**
		*@description This method returns the returned quantity for the order line.
		* @param {Object} orderLine - order line details
	 */	
		uiGetReturnedQuantity:function(orderLine) {
			
			var returnedQty = 0;
			
			var returnOrderLine = this.findMatchingReturnOrderLine(orderLine.OrderLineKey);
			if(!iscCore.isVoid(returnOrderLine) && !iscCore.isVoid(returnOrderLine.OrderedQty)) {
				returnedQty = returnOrderLine.OrderedQty;
			}
			
			return returnedQty;
		},
		
		/**
		*@description This method returns the returnable quantity for the order line.
		* @param {Object} orderLine - order line details
	 */	
		uiGetReturnableQuantityNumber:function(orderLine) {
			var returnableQty = 0;
			returnableQty = Number(orderLine.ReturnableQty);
			if(isNaN(returnableQty)) {
				returnableQty = 0;	
			}
			
			return returnableQty;
		},
		
		/**
		*@description This method checks if atleast 1 quantity of the product is returned.
		* @param {Object} orderLine - order line details
	 */	
		uiIsOrderLineAddedToReturned:function(orderLine) {
			
			var isAddedToReturn = false;
			if(!iscCore.isVoid(this.model.returnOrder) && !iscCore.isVoid(this.model.returnOrder.Order) && !iscCore.isVoid(this.model.returnOrder.Order.OrderLines)) {
				var numOfOrderLines = $filter('number')(this.model.returnOrder.Order.OrderLines.TotalNumberOfRecords);
				if(!isNaN(numOfOrderLines) && numOfOrderLines > 0) {
					for(var i=0;i<this.model.returnOrder.Order.OrderLines.OrderLine.length;i++) {
						var returnOrderLine = this.model.returnOrder.Order.OrderLines.OrderLine[i];
						if(orderLine.OrderLineKey == returnOrderLine.DerivedFromOrderLineKey && Number(returnOrderLine.OrderedQty) > 0) {
							isAddedToReturn = true;
							break;
						}
					}
				}
			}
			return isAddedToReturn;
			
		},
		
		/**
		*@description This method checks if the product is returned completely.
		* @param {Object} orderLine - order line details
	 */	
		uiIsOrderLineCompletelyReturned:function(orderLine) {
			
			var isCompleted = false;
			if(!iscCore.isVoid(this.model.returnOrder) && !iscCore.isVoid(this.model.returnOrder.Order) && !iscCore.isVoid(this.model.returnOrder.Order.OrderLines)) {
				var numOfOrderLines = $filter('number')(this.model.returnOrder.Order.OrderLines.TotalNumberOfRecords);
				if(!isNaN(numOfOrderLines) && numOfOrderLines > 0) {
					for(var i=0;i<this.model.returnOrder.Order.OrderLines.OrderLine.length;i++) {
						var returnOrderLine = this.model.returnOrder.Order.OrderLines.OrderLine[i];
						if(orderLine.OrderLineKey == returnOrderLine.DerivedFromOrderLineKey && Number(orderLine.OrderedQty) == Number(returnOrderLine.OrderedQty)) {
							isCompleted = true;
							break;
						}
					}
				}
			}
			return isCompleted;
		},
		
		
		/**
		*@description This method returns the order line details of the matching salesOrderLineKey passed as input.
		* @param {Object} salesOrderLineKey - order line key of sales order
	 */	
		findMatchingReturnOrderLine: function(salesOrderLineKey) {
			
			var matchingReturnOrderLine = "";
			if(!iscCore.isVoid(this.model.returnOrder) && !iscCore.isVoid(this.model.returnOrder.Order) && !iscCore.isVoid(this.model.returnOrder.Order.OrderLines)) {
				var numOfOrderLines = $filter('number')(this.model.returnOrder.Order.OrderLines.TotalNumberOfRecords);
				if(!isNaN(numOfOrderLines) && numOfOrderLines > 0) {
					for(var i=0;i<this.model.returnOrder.Order.OrderLines.OrderLine.length;i++) {
						
						var returnOrderLine = this.model.returnOrder.Order.OrderLines.OrderLine[i];
						if(salesOrderLineKey == returnOrderLine.DerivedFromOrderLineKey) {
							matchingReturnOrderLine = returnOrderLine;
							break;
						}
						
					}
				}
			}
			
			return matchingReturnOrderLine;
		},
		

		/**
		*@description This method invokes the API to add product to return order depending on whether
		*	1. Return order already exits
		*	2. Add product to return order with policy override
		*
		*	based on the above 2 conditions appropriate mashup is called.
		*
		* @param {Object} addToCartInput - contains createOrder/changeOrder API input
		* @param {Boolean} isPolicyOverride - Boolean value to indicate if Policy Override was done or not.
	 */	
		saveItemToCart: function(addToCartInput, isPolicyOverride) {
			
			var mashupToCall = isPolicyOverride?"createReturnOrderWithPolicyOverride":"createReturnOrder";

			if(addToCartInput && !iscCore.isVoid(addToCartInput.Order)){
				if(!iscCore.isVoid(addToCartInput.Order.OrderHeaderKey)) {
					mashupToCall = isPolicyOverride?"changeReturnOrderWithPolicyOverride":"changeReturnOrder";
				}
				
			}
			
			iscMashup.callMashup(this,mashupToCall,addToCartInput,{}).then(this.postSaveItemToCart.bind(this),angular.noop);
			
		},
		
		/**
		 *@description callback handler invoked after adding a product to return order.
		 *@param {Object} response - Controller data of createOrder/changeOrder
		 */	
		postSaveItemToCart: function(response) {
			var orderModel = response.MashupRefs.MashupRef[0].Output;
			this.ui.orderTotalQty = orderModel.Order.OrderLines.TotalLinesInCart;
			var updatedOrderLine = "";
			if(!iscCore.isVoid(orderModel.Order.OrderLines) && !iscCore.isVoid(orderModel.Order.OrderLines.SalesOrderLine)) {
				updatedOrderLine = orderModel.Order.OrderLines.SalesOrderLine;
				this.updateOrderLineForSalesOrder(updatedOrderLine);
				this.showItemPreview(updatedOrderLine,false);
				delete orderModel.Order.OrderLines["SalesOrderLine"];
			}

        	iscWizard.setWizardModel("returnOrder",orderModel);
        	this.model.returnOrder = orderModel;
		},
		
		/**
		 *@description This method displays item preiew when an item is added to return cart.
		 *@param {Object} orderLine - order line details.
		 *@param {Boolean} showTick - true if tick icon needs to be shown in item preview, false otherwise
		 */	
		showItemPreview:function(orderLine,showTick) {
			this.model.itemPreview = orderLine;
			this.model.itemPreview.ShowTick = showTick;
			if(showTick){
				this.model.itemPreview.ItemDetails.Quantity = null;
			} else {
				this.model.itemPreview.ItemDetails.Quantity = 1;
			}
        	$timeout(function() {
        		var itemPreviewSpanWidget = document.getElementById('itemPreviewSpan');
    			if(!iscCore.isVoid(itemPreviewSpanWidget)) {
    				//itemPreviewSpanWidget.click();
    				$scope.$broadcast('itemPreviewSpanClicked',{'data':1});
    			}
        	}, 0);
		},
		
		
		/**
		 *@description This method updates returnable quantity of previously returned product in the order line list model
		 *@param {Object} derivedFromOrderLine - previously returned order line details.
		 */	
		updateOrderLineForSalesOrder: function(derivedFromOrderLine) {
			
			for(var i=0;i<this.model.orderLineList.OrderLineList.OrderLine.length;i++) {
				
				var salesOrderLine = this.model.orderLineList.OrderLineList.OrderLine[i];
				this.ui.scannedItemLineIndex++;
				if(derivedFromOrderLine.OrderLineKey == salesOrderLine.OrderLineKey) {
					this.model.orderLineList.OrderLineList.OrderLine[i] = derivedFromOrderLine;
					break;
				}
				
			}
			
		},
		
		/**
		 *@description Shows next set of order lines when order lines panel is scrolled.
		 */
  		
  		uiGetOrderLineListNext: function(){
		    if(this.ui.orderLineShownCount <= this.model.orderLineList.OrderLineList.OrderLine.length){
	          this.ui.orderLineShownCount+=5;
	        }
        },
        
        /**
		 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
		 */
        
        uiOrderLineScrollActionValidator : function(){
        	return true;
        },
        
        /**
		 *@description This method updates returnable quantity of the product which was deleted from mini cart.
		 *@param {Object} event - contains event related data
		 *@param {Object} args - contains order line details deleted from mini cart
		 */	
        refreshOrderLine:function(event, args) {
        	console.log("Within RefreshOrderLne");
        	var info = args;
			if (info){
				  var that = this;	
				  var orderLineModel = angular.copy(info.data);
				  for(var i=0;i<that.model.orderLineList.OrderLineList.OrderLine.length;i++) {
						var tempOrderLine = that.model.orderLineList.OrderLineList.OrderLine[i];
						if(orderLineModel.OrderLineKey == tempOrderLine.OrderLineKey) {
							that.model.orderLineList.OrderLineList.OrderLine[i].ReturnableQty = orderLineModel.ReturnableQty;
							if(($filter('number')(orderLineModel.ReturnableQty)) > 0) {
								that.model.orderLineList.OrderLineList.OrderLine[i].IsOrderLineReturnable = "Y";
							} else {
								that.model.orderLineList.OrderLineList.OrderLine[i].IsOrderLineReturnable = "N";
							}
							break;
						}
					}
				  
			}
        },
		
		 /**
         * @description prepares input to create/update return order.
         * @param {Object} orderLine - order line details.
         */
		getAddToReturnInput: function(orderLine){
        	var addToReturnInput = {};
        	addToReturnInput.Order = {};
        	if(!iscCore.isVoid(this.model.returnOrder)){
        		addToReturnInput.Order.OrderHeaderKey =this.model.returnOrder.Order.OrderHeaderKey;
        	}
        	addToReturnInput.Order.EntryType = iscAppContext.getFromContext('storeEntryType');
        	addToReturnInput.Order.OrderLines={};
        	addToReturnInput.Order.OrderLines.OrderLine = [{
        				Item: {
	        				ItemID: orderLine.ItemDetails.ItemID,
	        				UnitOfMeasure: orderLine.ItemDetails.UnitOfMeasure
	        			},
	        			OrderLineTranQuantity:{
        					OrderedQty : orderLine.OrderedQty
        				},
        				LinePriceInfo:{
        					UnitPrice:orderLine.LinePriceInfo.UnitPrice
        				}
        					
        		}];
    		if(orderLine.DeliveryMethod != ''){
    			if(orderLine.DeliveryMethod === 'CARRY'){
    				addToReturnInput.Order.OrderLines.OrderLine[0].DeliveryMethod = orderLine.DeliveryMethod;
    			}
    			else if(orderLine.DeliveryMethod === 'PICK'){
    				if(orderLine.ShipNode === ""){
    					this.uiOpenStoreSearch('addToCart');
               			return -1;
    				}
    				else{
    					addToReturnInput.Order.OrderLines.OrderLine[0].ShipNode = orderLine.ShipNode;
    					addToReturnInput.Order.OrderLines.OrderLine[0].DeliveryMethod = orderLine.DeliveryMethod;
    				}
    			}
    			else if(orderLine.DeliveryMethod  === 'SHP'){
    				addToReturnInput.Order.OrderLines.OrderLine[0].DeliveryMethod = orderLine.DeliveryMethod;
    			}
    		}
    		
    		addToReturnInput.Order.OrderLines.OrderLine[0].test = orderLine.OrderLineKey;
        return addToReturnInput;
        },
        
        /**
         * @description saves the item by calling create order/changeOrder api.
         * @param addToCartInput create/update order input
         */
        saveItemToReturn: function(addToReturnInput){
        	var mashupToCall = 'createReturnOrder';
        	if(addToReturnInput && !iscCore.isVoid(addToReturnInput.Order)){
	   			if(!iscCore.isVoid(addToReturnInput.Order.OrderHeaderKey)){
	    				mashupToCall = "modifyFulfillmentOptionsForReturns";
    			}
    			else{
    				mashupToCall = "createReturnOrder";
    			}
        	}
        	iscMashup.callMashup(this,mashupToCall,addToReturnInput,{}).then(function(data){
				var returnOrderModel = data.MashupRefs.MashupRef[0].Output;			            	
            	iscWizard.setWizardModel("returnOrder",returnOrderModel);
            	this.ui.returnOrderLineKeyList.push(addToReturnInput.Order.OrderLines.OrderLine[0].test);
            	console.log(this.ui.returnOrderLineKeyList);
            	console.log(this.ui.returnOrderLineKeyList.indexOf(addToReturnInput.Order.OrderLines.OrderLine[0].test));
            	this.ui.orderTotalQty = returnOrderModel.Order.OrderLines.TotalLinesInCart;
            	this.model.returnOrder = returnOrderModel;
            	this.resetOrderRelatedAttrs();
        	}.bind(this),angular.noop);
        },
		
        /**
         * @description saves the item by calling create order/changeOrder api.
         * @param {Object} addToCartInput create/update order input
         */
		uiGetItemDetailsForScan: function(barCodeData){
        	if(!iscCore.isVoid(barCodeData)){
        		var translateBarCodeInput = { 'BarCode' :{'BarCodeData': barCodeData}};
        		translateBarCodeInput.BarCode.OrderHeaderKey = this.model.orderDetails.Order.OrderHeaderKey;
        		var channel = this.model.orderDetails.Order.EntryType;
        		if(iscCore.isVoid(channel)) {
        			channel = "null";
        		}
        		translateBarCodeInput.BarCode.EntryType = channel;
        		var returnOrderModel = iscWizard.getWizardModel('returnOrder');
        		if(!iscCore.isVoid(returnOrderModel) && !iscCore.isVoid(returnOrderModel.Order)) {
        			translateBarCodeInput.BarCode.ReturnOrderHeaderKey = returnOrderModel.Order.OrderHeaderKey;
        		}
        		
            	iscMashup.callMashup(this,"translateBarCodeByItemId",translateBarCodeInput,{}).then(this.handleItemScan.bind(this),angular.noop); 
        	}
        	else{
        		iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.MSG_InvalidBarCodeData'));
			    }
        },
        
        /**
         * @description callback handler for translateBarCode API which is invoked while scanning a product
         * @param {Object} response - controller data which contains API output
         */
        handleItemScan:function(response) {
        	var apiOutput = iscMashup.getMashupOutput(response,"translateBarCodeByItemId");
        	console.log("Item Scan ",apiOutput);
        	var scanStatus = apiOutput.BarCode.ScanStatus;
        	if(scanStatus === 'LINE_HAS_VIOLATION') {
        		if(this.ui.overrideResourcePermission) {
        			//var orderLineKey = apiOutput.BarCode.Translations.Translation[0].OrderContextualInfo.OrderLineKeyWithViolation;
        			var orderLineKey = apiOutput.BarCode.OrderContextualInfo.OrderLineKeyWithViolation;
            		this.showOverridePopupForOrderLine(orderLineKey);
            		this.model.scanItemInput.itemID = "";
        		} else {
        			iscModal.showErrorMessage(iscI18n.translate('orderDetails.MSG_NoPermissionToOverride'));
        		}
        		
        		
        	} else if(scanStatus === 'LINE_ADDED_TO_RETURN') {
        		
        		//var updatedOrderLine = apiOutput.BarCode.Translations.Translation[0].OrderContextualInfo.SalesOrderLine;
        		var updatedOrderLine = apiOutput.BarCode.OrderContextualInfo.SalesOrderLine;
        		this.model.itemPreviewModel = updatedOrderLine;
        		this.updateOrderLineForSalesOrder(updatedOrderLine);
        		this.showLastScannedProduct(updatedOrderLine.OrderLineKey);
        		var returnOrderModel = {};
        		returnOrderModel.Order = {};
        		//returnOrderModel.Order = apiOutput.BarCode.Translations.Translation[0].OrderContextualInfo.Order;
        		returnOrderModel.Order = apiOutput.BarCode.OrderContextualInfo.Order;
        		delete returnOrderModel.Order.OrderLines["SalesOrderLine"];
        		this.ui.orderTotalQty = returnOrderModel.Order.OrderLines.TotalLinesInCart;
        		iscWizard.setWizardModel("returnOrder",returnOrderModel);
    			this.model.returnOrder = returnOrderModel;
    			this.model.scanItemInput.itemID = "";
    			this.showItemPreview(updatedOrderLine,true);
    			
        	} else {
        		this.showTranslationErrorMessage(scanStatus);
        	}
        	
        },
        
        /**
         * @description This method brings the sales order line in view which was not visible in the current view after successful scanning of product.
         * @param {String} scannedOrderLineKey - clast scanned order line key
         */
        showLastScannedProduct:function(scannedOrderLineKey) {
        	if(this.ui.orderLineShownCount < this.ui.scannedItemLineIndex){
				this.ui.orderLineShownCount = this.ui.scannedItemLineIndex;
			}
        	var that = this;
			$timeout(function(){
					iscScrollUtility.scrollToElementWIthOffset(document.getElementById('orderLinesHolder'), document.getElementById(scannedOrderLineKey), 0, 0);
				}, 0);
			this.ui.scannedItemLineIndex = 1;
        },
        
        /**
         * @description This method displays error messages on unsuccessful product scan.
         * @param {String} scanStatus - last scanned order line key
         */
        showTranslationErrorMessage:function(scanStatus) {
        	
        	var msgBundleKey = 'orderDetails.MSG_'+scanStatus;
        	if(iscCore.isVoid(scanStatus)) {
        		msgBundleKey = 'orderDetails.MSG_NO_ITEM_FOUND';
        	} 
        	
        	iscModal.showErrorMessage(iscI18n.translate(msgBundleKey));
        	
        },
        
        /**
         * @description This method is invoked to display Override policy popup for the last scanned product
         *  @param {String} orderLineKey - last scanned order line key
         */
        showOverridePopupForOrderLine: function(orderLineKey) {
        	
        	var matchingOrderLine = "";
        	for(var i=0;i<this.model.orderLineList.OrderLineList.OrderLine.length;i++) {
				
				var salesOrderLine = this.model.orderLineList.OrderLineList.OrderLine[i];
				if(orderLineKey == salesOrderLine.OrderLineKey) {
					matchingOrderLine = salesOrderLine;
					break;
				}
        	}
        	
        	this.uiOverridePolicyViolation(matchingOrderLine, false);
        	
        },
        
        /**
         * @description This method is invoked on click of home button 
         */
        handleWizardExit:function(){
        	return iscReturn.handleWizardExit(this.ui.orderTotalQty);
        },

        /**
         * @description onclick handler function for the continue button to navigate to returns list screen..
         */
            uiHandleReviewReturn:function(){
               iscWizard.gotoCustomPage('returnsList',{input:this.model.returnOrder.Order.OrderHeaderKey},{});
            },
            /**
             * @description This method is invoked on click of cancel button
             */
            uiCancel : function(){
           		iscReturn.handleWizardCancel(this.ui.orderTotalQty);
            },
            /**
             * @description This method is invoked on click of back button.
             */
            handleWizardBack:function(){
            	return iscReturn.handleWizardBack(false,this.ui.orderTotalQty);
            },
            uiOpenItemDetails :function(orderLine) {
            	
    			var popupInput = {};
    			popupInput.orderline = orderLine;
    			
    			var viewItemDetailsInput = {
    				 modalInput: function(){
    	      			return popupInput;
    	      		}   
    			   
    			};
    			   
    			   
    			iscModal.openModal('store.views.common.product.product-details',viewItemDetailsInput,{});
    			
            }
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.return.sales-order-list.sales-order-list
 *@package store.views.return.sales-order-list
 *@class sales-order-list
 *@description Displays list of sales order to be returned.
 *
 */
angular.module('store').controller('store.views.return.sales-order-list.sales-order-list',
  ['$animate','$scope','$filter','$rootScope','iscScreen','iscState','iscWizard','iscStateParams','iscMashup','iscModal','iscOrder','iscReturn','iscResourcePermission','iscI18n','iscAppContext','iscRule',
	function($animate,$scope,$filter,$rootScope,iscScreen,iscState,iscWizard,iscStateParams,iscMashup,iscModal,iscOrder,iscReturn,iscResourcePermission,iscI18n,iscAppContext,iscRule) {
		
		iscWizard.initializeWizardPage($scope,{
            model:{
            	/**
		           *@description This model contains the initial getOrderList api input.
		           */
            	getOrderListInput:{},
            	/**
		           *@description This model contains the getOrderList api output.
		           */
                "orderList":{},
                /**
		           *@description This model contains the return order details.
		           */
                "returnOrder":{},
                /**
		           *@description This model is used for setting the default search entity as ORDER in Lookup action.
		           */
	             "lookupConfig":{LookupType:"ORDER"}
            },
            mashupRefs:[
                        /**
                         *@description This mashup is used to get all the orders matching the order number.
                         */
                        {
                            mashupRefId: 'getOrderListByOrderNo',
                            mashupId: 'orderList_getOrderListByOrderNo'

                        },
                        /**
                         * @description  This mashup gets all the sales orders matching filter criteria using getOrderList API.
                         */
            			{
           				 mashupRefId: 'getOrderListByFilterCriteria',
                            mashupId: 'store.views.return.sales-order-list.getOrderListByFilterCriteria'
            			},
            			{
	                        /**
	                        *@description Calls getOrderList API to fetch maximum 50 orders of the current customer sorted by descending createts
	                        */
	                            mashupRefId: 'getItemThumbnails',
	                            mashupId: 'store.views.common.getItemThumbnails'
	
	                        }
                        
                       ],
            ui:{
            	/**
				*@property {String}  headerOrderNo - contains sales order number.
				*/
                headerOrderNo:"",
                /**
				*@property {Number}  orderTotalQty - number of products added to return cart.
				*/
                orderTotalQty: '0',
                /**
				*@property {String}  selectedOrderLineKey - contains the order haeder key of selected order in the list page.
				*/
                selectedOrderHeaderKey : "",
                /**
				*@property {Number}  orderShownCount - pageSize of the Order list for continuous scrolling.
				*/
                orderShownCount: 10,
                /**
				*@property {String}  hideSearch - hide/shows the Lookup Return search panel.
				*/
                hideSearch:'N',
                /**
				*@property {Boolean}  showCustomerName - if true displays customer name field, if false hides it.
				*/
                showCustomerName: true,
                /**
				*@property {String}  refineResults - In Order list screen, we will fetch a fixed number of records (20). If actually there are more records this attribute will be set to Y and a message will be shown at the end, to refine the search criteria.
				*/
                refineResults:"N",
                /**
				*@property {Number}  numOfOrders - number of orders matching the OrderNo/filter criteria.
				*/
                numOfOrders : -1,
                getFilterFromContext:false,
                getOrderListInitializeMashupName:'getOrderListByOrderNo'
            },
         /**
         * @description method to initialize the controller and search for product using the input to the page.
         */
         initialize: function(){
        	 
        	 iscReturn.setMiniCartParam(this);
        	 
        	 var pageInput = iscWizard.getWizardPageInput();
        	 this.model.getOrderListInput = pageInput.input;
        	 /*getOrderListInput.Order = {};
        	 getOrderListInput.Order.OrderNo = pageInput.input.Order.OrderNo;*/
        	 
        	 var orderListInput =  this.model.getOrderListInput;
    		 //if coming from back, use the saved filter. otherwise reset the order list filter
        	 var wizAction = iscWizard.getWizardAction();
    		 if(wizAction == 'PREVIOUS'){
    			 var orderListFilter = iscAppContext.getFromContext("returnOrderListFilter");
    			 if(!iscCore.isVoid(orderListFilter) && orderListFilter.input){
    				 orderListInput = orderListFilter.input;
    				 this.ui.getFilterFromContext = true;
    				 this.ui.getOrderListInitializeMashupName = 'getOrderListByFilterCriteria';
    			 }
    		 }else{
    			 iscAppContext.removeFromContext("returnOrderListFilter");
    		 }
    		 
             iscMashup.callMashup(this,this.ui.getOrderListInitializeMashupName,orderListInput,{}).then(this.processOrderList.bind(this),angular.noop);
              $scope.$on('uiSearchClose',function(event,args){
			 	if (args){
					  $scope.ui.hideSearch = 'N';
			    }  
					   
			 });
         },
         
         /**
			 *@description callback handler for init APIs invoked in initialize() method.
			 *@param {Object} response - Controller data of init api calls.
			 */	
         processOrderList: function(response) {
        	 
        	 var apiOutput = iscMashup.getMashupOutput(response,this.ui.getOrderListInitializeMashupName);
        	 this.ui.numOfOrders =  $filter('number')(apiOutput.OrderList.TotalNumberOfRecords);
        	 if(!this.ui.getFilterFromContext && this.ui.numOfOrders == 1) {
        		 iscWizard.gotoCustomPage('orderDetails',{input:this.getInputForOrderDetails(apiOutput.OrderList.Order[0])},{}); 
        	 } 
        	 /*else if (numOfRecords > 1) {
        		 this.ui.headerOrderNo = apiOutput.OrderList.Order[0].OrderNo;
        	 } else {
        		 this.ui.headerOrderNo =iscI18n.translate('orderList.LABEL_Order_Search_results',{count:numOfRecords}); 
        	 }*/
        	 
        	 this.ui.selectedOrderHeaderKey = apiOutput.OrderList.Order[0].OrderHeaderKey;
        	 
        	 this.model.orderList = apiOutput;
        	 
         },
         
         uiGetCssClassByOrderStatus:function(order) {
        	 return iscOrder.getCssClassByOrderStatus(order.MaxOrderStatus);
         },
         
         uiSetDisplayStatus:function(order){
        	 order.DisplayStatus =  iscOrder.getDisplayStatus(order);
         },
         /**
			*@description This method opens up a new page depending on what is searched in the return lookup.
			*@param {Object} searchResult - Search results
		 */	
         uiHandleSearchResult: function(searchResult) {
 			iscWizard.gotoCustomPage(searchResult.NextPage.action,{input:searchResult.NextPage.model},{}); 
 		},
 		 
 		 /**
		*@description This method opens the Add Products to Return screen for the selected order.
		*@param {Object} order - Order details model.
	 */	
		uiViewOrderDetails : function(order) {
			iscWizard.gotoCustomPage('orderDetails',{input:this.getInputForOrderDetails(order)},{}); 
		},
		
		 /**
		*@description This method is sets the selected order header key into a property selectedOrderHeaderKey.
		*@param {Object} orderHeaderKey - selected order header key
	 */	
		uiSelectOrder: function(order) {
			 if(iscRule.isRuleEnabled('ShowItemImage') && iscCore.isVoid(order.ItemThumbnails)){
	    		   var getItemThumbnailsInput = {OrderLine:{OrderHeaderKey:order.OrderHeaderKey}}
	    		   iscMashup.callMashup(this,'getItemThumbnails',getItemThumbnailsInput,{}).then(function(data){
            		var output = iscMashup.getMashupOutput(data,'getItemThumbnails');
            		order.ItemThumbnails = output;
            		this.ui.selectedOrderHeaderKey = order.OrderHeaderKey;
            	}.bind(this),angular.noop);
	    	   }else{
	    		   this.ui.selectedOrderHeaderKey = order.OrderHeaderKey;
	    	   }
		},
		
		/**
		 *@description Shows next set of order lines when order lines panel is scrolled.
		 *In Order list screen, we will fetch a fixed number of records (20). If actually there are more records we set refineResults = Y to display 
		 * a message will be shown at the end, to refine the search criteria.
		 */
  		
  		uiGetOrderListNext: function(){
  			if(this.ui.orderShownCount == this.model.orderList.OrderList.Order.length) {
  				this.ui.refineResults = 'Y';
  			} else if(this.ui.orderShownCount <= this.model.orderList.OrderList.Order.length){
	          this.ui.orderShownCount+=10;
	        }
        },
        
        /**
		 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
		 */
        
        uiOrderListScrollActionValidator : function(){
        	return true;
        },
        
        /**
		*@description This method prepares the input of order model to be passed to Add Products to Return view/screen. 
		*@param {Object} order - Order details model.
	 */	
        getInputForOrderDetails: function(order) {
        	var orderModel = {};
        	orderModel.Order = {};
        	
        	orderModel.Order.EnterpriseCode = order.EnterpriseCode;
        	orderModel.Order.OrderHeaderKey = order.OrderHeaderKey;
        	orderModel.Order.AppContextInfo = {};
        	orderModel.Order.AppContextInfo.Channel = order.EntryType;
        	
        	return orderModel;
        },
        
        /**
		*@description This method invokes getOrderList API with order filter criteria as input to get all orders matching the filter criteria. 
		*@param {Object} order - Order Search Criteria model.
	 */	
        uiApplyFilterOnOrderList : function(orderListSearchCriteria) {
        	iscMashup.callMashup(this,'getOrderListByFilterCriteria',orderListSearchCriteria,{}).then(this.handleOrderFilterResult.bind(this),angular.noop);
        },
        
        /**
		*@description This method sets the response of getOrderList API to orderList model and resets the numOfOrders 
		*@param {Object} response - mashup response model
	 */	
        handleOrderFilterResult : function(response) {
        	
         var apiOutput = iscMashup.getMashupOutput(response,"getOrderListByFilterCriteria");
       	 this.ui.numOfOrders =  $filter('number')(apiOutput.OrderList.TotalNumberOfRecords);
       	 if(this.ui.numOfOrders > 0) {
       		this.model.orderList = iscOrder.stampDisplayStatusOnOrderList(apiOutput);
       	 } else {
       		this.model.orderList = apiOutput;
       	 }
         this.ui.refineResults = 'N';
        	
        },
        
        
        /**
         * @description This method is invoked on click of home button 
         */
        handleWizardExit:function(){
        	return iscReturn.handleWizardExit(this.ui.orderTotalQty);
        },
        /**
         * @description This method is invoked on click of cancel button
         */
        uiCancel : function(){
        	iscReturn.handleWizardCancel(this.ui.orderTotalQty);
         },
         /**
          * @description This method is invoked on click of back button.
          */
        handleWizardBack:function(){
        	return iscReturn.handleWizardBack(false,this.ui.orderTotalQty);
        }
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


angular.module('store').controller('store.views.shipment.batchpick.batchpick-finish',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscState',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams,iscState) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  		},
  		
			initialize : function(){
			  // If return order has no lines and exchange order is confirmed, move to Order summary for exchange order instead of return summary
			  if(iscWizard.getWizardAction()==="FINISH"){
			    var orderInput = iscWizard.getWizardModel("returnOrder");
			    var returnLinesInput = iscWizard.getWizardModel("returnLinesModel");
			   /** if(returnLinesInput && returnLinesInput.TotalNumberOfRecords && returnLinesInput.TotalNumberOfRecords <= 0){
			    	orderInput = iscWizard.getWizardModel("exchangeOrderModel");
			    	iscState.goToState('ordersummary',{orderInput:orderInput},{}); 
			    }
			    else { **/
			    	iscState.goToState('returnsummary',{input:orderInput},{});
			   // }
			  }
			  else if(iscWizard.getWizardAction()==="CLOSE"){
			    iscState.goToPreviousState();
			  }
			  
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


angular.module('store').controller('store.views.shipment.batchpick.batchpick-init',
  ['$scope','$rootScope','iscWizard','iscMashup','iscI18n','iscResourcePermission','iscRule','iscStateParams',
	function($scope,$rootScope,iscWizard,iscMashup,iscI18n,iscResourcePermission,iscRule,iscStateParams) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		],
  		ui:{
  			
  		},
  		
			initialize : function(){
				console.log(iscStateParams);
				if(iscStateParams.params.action==="batchList"){
					iscWizard.gotoCustomPage('batchList',iscStateParams.params,{});
					
				}else if(iscStateParams.params.action==="skipbatchList"){
					
					var batch = iscStateParams.params.input.batch;
					if(iscI18n.translate('batchpick.BATCH_OPEN') === batch.Status){
						batch.callBatchListApi = 'Y';
						if(batch.BatchType == 'SORT_WHILE_PICK'){
							iscWizard.gotoCustomPage('swpPicking',batch,{});
						}else{
							iscWizard.gotoCustomPage('sapPicking',batch,{});
						}
						
					}else if(iscI18n.translate('batchpick.BATCH_PICK_COMPLETE_NOT_STAGED') === batch.Status && (iscRule.getRuleSetValue('enableStagingLocation')=='Y')){
						//batch.callBatchListApi = 'Y';
						var pageInput = {StoreBatch:{StoreBatchKey:batch.StoreBatchKey,BatchNo:batch.BatchNo}};
						if(batch.BatchType == 'SORT_WHILE_PICK'){
							iscWizard.gotoCustomPage('swpStaging',pageInput,{});
						}else{
							iscWizard.gotoCustomPage('sapStaging',pageInput,{});
						}
					}
					
				}
			}
  		
  		    
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/






/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.pack.pack-search-list
 *@package store.views.shipment.pack
 *@class pack-search-list
 *@description This portlet is used as an entry point packing.
 *
 */


angular.module("store").controller("store.views.shipment.confirm.shipment-confirm-list",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscStateParams","iscAppContext","iscWizard","iscResourcePermission","iscPrint","$timeout","iscShipment","$filter",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup,iscStateParams,iscAppContext,iscWizard,iscResourcePermission,iscPrint,$timeout,iscShipment,$filter){
		
		iscScreen.initializeScreen($scope,{  
			model:{
				shipmentList:{},
				packagesList:{}
			},
            mashupRefs:[
                
                {
                    mashupRefId: 'getPackagesListAndCount',
                    mashupId: 'store.views.home.order-fulfillment.getPackagesCount',
                	modelName:'packagesList'
               },
               
               {
					mashupRefId : 'getShipmentList',
					mashupId : 'store.views.shipment.confirm.confirmShipment_getShipmentListByScac',
					modelName : "getShipmentList"
			   }
                
               
            ],
            ui : {
               
			    selectedCarrier :"",
			    showSuccessMsg : false,
			    length:0
			    

                
			},	
			
			initialize : function(){
				var stateParams = iscStateParams.params.input;
				if(stateParams){
					this.ui.showSuccessMsg = stateParams.ShowSuccessMsg;
				}
				 	
				 var apiInput = {};
				 apiInput.Container={};
				 apiInput.Container.Shipment={};
				 iscMashup.callMashup(this,"getPackagesListAndCount",apiInput,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				
			},
			
			
			 handleInitApiCalls : function (data){
		  		var output = iscMashup.getMashupOutput(data,"getPackagesListAndCount");
		  		var containers = output.Containers;
		  		var carriers = containers.Carriers;
		  		if(carriers){
		  			var carrier = carriers.Carrier;
		  			var length = carrier.length;
		  			this.ui.length = length;
		  			if(length > 0){
		  				this.uiSelectPackage(carrier[0]);
		  			}
		  		}
				 
				    
	            	
		  },
		  		  
			uiSelectPackage : function(carrier){
				this.ui.selectedCarrier = carrier.SCAC;
			
			},
            
            
            
            
			uiViewContainerDetails : function(carrier){
				iscState.goToState('shipmentConfirmDetails',{input:{Carrier:{SCAC:carrier.SCAC, SCACDesc:carrier.DisplaySCAC}}},{}); 
			
			},
			
			
			uiConfirmShipment : function(carrier){
				var apiInput={};
				apiInput.Shipment={};
				apiInput.Shipment.SCAC=carrier.SCAC;
				iscMashup.callMashup(this,"getShipmentList",apiInput,{}).then(this.handleConfirmShipmentOutput.bind(this),undefined);
			},
			
			
			
			handleConfirmShipmentOutput : function(data){
			
				var that=this;
				var confirmShipmentError = "";
 				var confirmShipmentSuccess = "";
 				var failureCount = iscCore.getValueFromJsonPath(this.model.getShipmentList, "FailedContainers.TotalFailures");
 				if(!isNaN(failureCount)) {
 					if(failureCount > 0) {
 						confirmShipmentError = "ThereAreFewFailedContainers";
 					} else if(failureCount == 0) {
 						if(iscCore.getValueFromJsonPath(this.model.getShipmentList, "FailedContainers.CloseManifestSuccess") == 'Y') {
 							this.initialize();
 							this.ui.showSuccessMsg =true;
 						} else {
 							confirmShipmentError = "ShipmentConfirmedFailed";
 						}
 					}
 				}else{
 					failureCount = iscCore.getValueFromJsonPath(this.model.getShipmentList, "Shipments.TotalFailures");
 					if(!isNaN(failureCount)){
 						if(failureCount > 0) {
 							confirmShipmentError = "ShipmentConfirmedFailed";
 						}else if(failureCount == 0){
 							this.initialize();
 							this.ui.showSuccessMsg =true;
 						}
 					}
 				}
 				if(!iscCore.isVoid(confirmShipmentError)){
 					iscModal.showErrorMessage(iscI18n.translate('packagelist.MSG_'+confirmShipmentError)).then(function(action){
             			if(action){
             				that.initialize();
             			}
             		});
 				}else if(!iscCore.isVoid(confirmShipmentSuccess)){
 						this.initialize();
 						this.ui.showSuccessMsg =true;
 				}
 				
 				
 				
				
				
				
				
			},
            
			
			/**
			 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
			 */
	        
	        uiOrderListScrollActionValidator : function(){
	        	return true;
	        },
	        
			uiUpdateSelection : function(tab){
				
				
				
			},
			
			
			 /**
			 *@iscdoc uimethod
			 *@viewname store.views.order.cart-details.cart-details
			 *@methodname uiCancel
			 *@description This method handles on click of cancel button in cart details screen.
			 */
			uiClose : function(){
				iscState.goToState("/home", {}, {});
          }
         
		
        });
    }]);
			 
			 
            

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/




angular.module('store').controller('store.views.shipment.confirm.shipment-confirm',
  ['$scope','$rootScope','$timeout','iscScreen','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscState','iscShipment','$filter',
	function($scope,$rootScope,$timeout,iscScreen,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscState,iscShipment,$filter) {
		iscScreen.initializeScreen($scope,{
			model : {
				"getShipmentContainerList" : {}
			},
			mashupRefs : [
				
				
				{
					mashupRefId : 'getShipmentContainerList',
					mashupId : 'store.views.shipment.confirm.confirmShipment_getShipmentContainerDetailsByScac',
					modelName : "getShipmentContainerList",
					
				},
				
				{
					mashupRefId : 'getShipmentList',
					mashupId : 'store.views.shipment.confirm.confirmShipment_getShipmentListByScac',
					modelName : "getShipmentList"
				}
			],
			ui : {
					selectedCarrier : null,
					count:20,
					apiInput : null
			},
			
			initialize : function(){
				this.ui.apiInput={};
				this.ui.apiInput.Container={};
				this.ui.apiInput.Container.Shipment={};
				var stateParams = iscStateParams.params.input.Carrier;
				
				this.ui.apiInput.Container.Shipment.SCAC=stateParams.SCAC;
				this.ui.selectedCarrier=stateParams.SCAC;
				
				var scacDesc = stateParams.SCACDesc;
				
				iscMashup.callMashup(this,"getShipmentContainerList",this.ui.apiInput,{}).then(this.handleSuccess.bind(this,scacDesc),undefined);
			},

			handleSuccess : function(scacDesc,data) {
				var output = iscMashup.getMashupOutput(data,"getShipmentContainerList");
				var containers = output.Containers;
				containers.SCACDesc=scacDesc;
				var container = containers.Container;
				var length = container.length;
				for(var i=0;i<length;i++){
					var containerObj = container[i];
					var shipment = containerObj.Shipment;
					shipment.FormattedShipDate = $filter('date')(shipment.ExpectedShipmentDate,'mediumDate');
				}
			},
			
			uiClose : function(){
				$scope.$emit('$backButtonClicked')
			},
			
			uiHandleConfirmShipment : function(){
				iscMashup.callMashup(this,"getShipmentList",this.getInputForConfirmShipmentCall(),{}).then(this.handleConfirmShipmentOutput.bind(this),undefined);
			},
			getInputForConfirmShipmentCall : function(){
				return {"Shipment":{"SCAC":this.ui.selectedCarrier}};
			},
			
			handleConfirmShipmentOutput : function(data){
 				var confirmShipmentError = "";
 				var confirmShipmentSuccess = "";
 				var failureCount = iscCore.getValueFromJsonPath(this.model.getShipmentList, "FailedContainers.TotalFailures");
 				if(!isNaN(failureCount)) {
 					if(failureCount > 0) {
 						confirmShipmentError = "ThereAreFewFailedContainers";
 					} else if(failureCount == 0) {
 						if(iscCore.getValueFromJsonPath(this.model.getShipmentList, "FailedContainers.CloseManifestSuccess") == 'Y') {
 							iscState.goToState('shipmentConfirmList',{input:{ShowSuccessMsg:true}},{}); 
 						} else {
 							confirmShipmentError = "ShipmentConfirmedFailed";
 						}
 					}
 				}else{
 					failureCount = iscCore.getValueFromJsonPath(this.model.getShipmentList, "Shipments.TotalFailures");
 					if(!isNaN(failureCount)){
 						if(failureCount > 0) {
 							confirmShipmentError = "ShipmentConfirmedFailed";
 						}else if(failureCount == 0){
 							iscState.goToState('shipmentConfirmList',{input:{ShowSuccessMsg:true}},{}); 
 						}
 					}
 				}
 				if(!iscCore.isVoid(confirmShipmentError)){
 					iscModal.showErrorMessage(iscI18n.translate('packagelist.MSG_'+confirmShipmentError)).then(function(action){
             			if(action){
             				iscMashup.callMashup(this,"getShipmentContainerList",this.ui.apiInput,{}).then(this.handleSuccess.bind(this,scacDesc),undefined);
             			}
             		});
 				}else if(!iscCore.isVoid(confirmShipmentSuccess)){
 						iscState.goToState('shipmentConfirmList',{input:{ShowSuccessMsg:true}},{});  
 				}


				
			},
			
			uiNextPageActionValidator : function(){
				if(this.ui.count <= this.model.getShipmentContainerList.Containers.TotalNumberOfRecords) {
					 return true;
				}
				return false;
			},

			uiSearchProductGetNextRecords : function(){
				if(this.ui.count<=this.model.getShipmentContainerList.Containers.TotalNumberOfRecords) {
					 this.ui.count+=10;
				}
			
			}
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/






angular.module('store').controller('store.views.shipment.containerpack.containerpack-finish',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscState',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams,iscState) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
      },
  		mashupRefs : [
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  		},
  		
			initialize : function(){
             if(iscWizard.getWizardAction()==="CLOSE"){
			    iscState.goToPreviousState();
			  }
			  
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/






angular.module('store').controller('store.views.shipment.containerpack.containerpack-init',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscModal','iscI18n','iscState','$filter','iscStateParams',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscModal, iscI18n, iscState,$filter,iscStateParams) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
    	  
    	  shipmentDetails:{}
      },
  		mashupRefs : [
  		              
						{
							 mashupRefId: 'validateShipmentForContainerPack',
							 mashupId: 'store.views.shipment.containerpack.validateShipmentForContainerPack'
						
						},
						{
							 mashupRefId: 'changeShipmentForAssignToUser',
							 mashupId: 'store.views.shipment.containerpack.changeShipment'
						},
						{
							
							 mashupRefId: 'changeShipmentStatus',
							 mashupId: 'store.views.shipment.containerpack.changeShipmentStatus'
						},
						{
							
							 mashupRefId: 'unpackShipment',
							 mashupId: 'store.views.shipment.containerpack.unpackShipment'
						}
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  			stateParams:{action:"",params:""}
  			
  		},
  		
			initialize : function(){
				
				this.validateShipmentForContainerPack();
				
			},
			
			validateShipmentForContainerPack:function() {
				
				var shipmentModel = iscStateParams.params.input;
				var apiInput = {Shipment:{ShipmentKey:shipmentModel.Shipment.ShipmentKey, Action:"Pack"}};
				//var apiInput = {Shipment:{ShipmentKey:"PETCJ100002", Action:"Pack"}};
				
				iscMashup.callMashup(this,"validateShipmentForContainerPack",apiInput,{}).then(this.processShipmentDetailsForContainerPack.bind(this));
				
			},
			
			processShipmentDetailsForContainerPack:function(response) {
				
				var apiOutput = iscMashup.getMashupOutput(response,"validateShipmentForContainerPack");
				this.model.shipmentDetails = apiOutput;
				if(apiOutput.Shipment.Error) {
					this.handleShipmentValidationError(apiOutput)
				} else {
					//this.gotoCustomPage();
					//iscWizard.gotoCustomPage(this.ui.stateParams.action,this.ui.stateParams.params,{});
					iscWizard.gotoCustomPage('packProducts',iscStateParams.params.input,{});
				}
				
			},
			
			gotoCustomPage:function() {
				iscWizard.gotoCustomPage(this.ui.stateParams.action,this.ui.stateParams.params,{});
			},
			
			gotoShipmentSummary:function(shipment) {
				iscState.goToState('shipmentsummary',{input: shipment},{});
			},
			
			exitContainerPackWizard:function() {
				iscWizard.setWizardModel("shipmentDetails",this.model.shipmentDetails);
				iscWizard.closeWizard();
				//iscWizard.finishWizard();
			},
			
			handleShipmentValidationError:function(shipmentDetails) {
				
				var errorDesc = shipmentDetails.Shipment.Error.ErrorDescription;
				var action = shipmentDetails.Shipment.Error.action;
				var that = this;
				
				if(errorDesc == "AssignedToUserIsDifferent") {
					
					this.openAssingedToDifferentUserPopup(shipmentDetails);
					
				} else if(errorDesc == "InvalidShipmentShipNode") {
					iscModal.showErrorMessage(iscI18n.translate('containerPack.MSG_'+errorDesc)).then(function(action){
            			if(action){
            				//iscWizard.closeWizard();
            				that.exitContainerPackWizard();
            			}
            		});
				} else if (errorDesc.indexOf("InvalidTransactionAllowed_") > -1) {
					/*iscModal.showErrorMessage(iscI18n.translate('containerPack.MSG_'+errorDesc)).then(function(action){
            			if(action){
            				//iscWizard.closeWizard();
            				//that.exitContainerPackWizard();
            				var input = {Shipment:{ShipmentKey:shipmentDetails.Shipment.ShipmentKey}};
            				that.gotoShipmentSummary(input);
            			}
            		});*/
					this.showCustomErrorModal(iscI18n.translate('containerPack.MSG_'+errorDesc), shipmentDetails)
					
				}
				
			},
			
			/**
			 * @description This method displays error modal with 'Go Back' & 'Goto Shipment Summary' modal actions.
			 * 
			 * @param {Object} shipmentDetails - Shipment details JSON object
			 * @param {String} translatedMessage - message to be displayed in modal
			 */
			showCustomErrorModal:function(translatedMessage, shipmentDetails) {
				
				var that = this;
				
				var confirmModalOptions = { 
    					options: { 
    						headerText: "modal.TITLE_Error",
    						headerIconCss: "app-glyphicons app-icon-error_30",
    						action:[
    						  {
    						    actionName:"goBack",
    						    actionLabel:"backroomPick.ACTION_GoBack"
    						  },
    						  {
      						    actionName:"gotoSummary",
      						    actionLabel:"backroomPick.ACTION_GotoShipmentSummary"
      						  }
    						]
    					},
    					settings: { 
    						size: "md", 
    						type: "error" 
    					}
				};
				
				iscModal.showConfirmationMessage(translatedMessage, confirmModalOptions).then(function(action){
					if(action == "goBack"){
						that.exitContainerPackWizard();
        			} else if(action == "gotoSummary") {
        				var input = {Shipment:{ShipmentKey:shipmentDetails.Shipment.ShipmentKey}};
        				that.gotoShipmentSummary(input);
        			}
        		});
				
				
			},							
			openAssingedToDifferentUserPopup:function(shipmentDetails) {
				
				
				var that = this;
				var popupInput = {};
				popupInput.shipmentDetails = shipmentDetails;
				popupInput.flowName = "PACK";
				
				var abandonShipmentPopup = {
					 modalInput: function(){
		      			return popupInput;
		      		}   
				   
				};
				   
				iscModal.openModal('store.views.shipment.common.abandon-shipment.abandon-shipment',abandonShipmentPopup,{}).then(function(callBackData){
					                  
					if(callBackData.data !== null && callBackData.data !== undefined){
						that.handleAbandonShipmentPopupResponse(callBackData.data);
						}
					},
					function() {
						//that.gotoShipmentSummary({Shipment:{ShipmentKey:that.model.shipmentDetails.Shipment.ShipmentKey}});
						that.exitContainerPackWizard();
					}
				);

				
				
			},
			
			handleAbandonShipmentPopupResponse:function(action) {
				
				var shipmentInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
				var shipmentInputForAssigningUser = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
				var that = this;
				var mashupRefId = "";
					
				if (typeof String.prototype.startsWith != 'function' ) {
					  String.prototype.startsWith = function( str ) {
					    return (this.substring( 0, str.length ) === str);
					  };
				}
				//TransactionId="PACK_SHIPMENT_COMPLETE"
				
				if(!iscCore.isVoid(this.model.shipmentDetails.Shipment.DocumentType)){
					if(this.model.shipmentDetails.Shipment.DocumentType == "0001"){
						shipmentInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, TransactionId : "PACK_SHIPMENT_COMPLETE" }};
					}else{
						shipmentInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, TransactionId : "PACK_SHIPMENT_COMPLETE.0006"}};
					}
				}
				
				if(action == 'START_OVER') {
					
					var mashupArray = [];
		        	
					if(!(Number(this.model.shipmentDetails.Shipment.ShipmentContainerizedFlag) === 1)){
						var unPackShipmentInput = {Container:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
						mashupArray.push(iscMashup.getMashupRefObj(this,'unpackShipment', unPackShipmentInput));
					}
					if(!(this.model.shipmentDetails.Shipment.Status.Status.startsWith("1100.70.06.70"))){
						mashupArray.push(iscMashup.getMashupRefObj(this,'changeShipmentStatus',shipmentInput));
					}
		        	mashupArray.push(iscMashup.getMashupRefObj(this,'changeShipmentForAssignToUser',shipmentInputForAssigningUser));
		        	
		        	iscMashup.callMashups(this,mashupArray,{}).then(function(response){
		        		iscWizard.gotoCustomPage('packProducts',shipmentInput,{});
					});
		        	
				} else if (action == 'CONTINUE') {
					var mashupArray = [];
					
					if(!(this.model.shipmentDetails.Shipment.Status.Status.startsWith("1100.70.06.70"))){
						mashupArray.push(iscMashup.getMashupRefObj(this,'changeShipmentStatus',shipmentInput));
				} 
		        	mashupArray.push(iscMashup.getMashupRefObj(this,'changeShipmentForAssignToUser',shipmentInputForAssigningUser));
				
		        	iscMashup.callMashups(this,mashupArray,{}).then(function(response){
		        		iscWizard.gotoCustomPage('packProducts',shipmentInput,{});
				});
				
				} 
			},
			
			
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/






/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.pack.pack-search-list
 *@package store.views.shipment.pack
 *@class pack-search-list
 *@description This portlet is used as an entry point packing.
 *
 */


angular.module("store").controller("store.views.shipment.containerpack.extn-pack-search-list",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscAppContext","$timeout","iscExtnShipment","$filter",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup, iscAppContext,$timeout,iscExtnShipment,$filter){
		
		iscScreen.initializeScreen($scope,{  
			model:{
				shipmentList:{},
                itemPackRule : {Rules : {RuleSetValue : 'N'}},
                scanInput:{value:""}
			},
            mashupRefs:[
                {
                     mashupRefId: 'getReadyForPackingShipmentList',
                     mashupId: 'store.views.shipment.containerpack.getReadyForPackingShipmentList',
                     modelName:'shipmentList',
                    isPaginated: true,
					pageSize : 15,//iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					appendPath : 'Shipments.Shipment'
                },
                {
                    mashupRefId:'translateBarCodeForShipmentPack',
                    mashupId:'store.views.home.getShipmentFromItemId'
                },
                {
                    mashupRefId:'getRuleForItemPack',
                    mashupId:'store.views.home.getRuleForItemPack',
                    modelName:'itemPackRule'
                }
                
            ],
            ui : {
                apiCallInProgress:false,
				showAdvanceSearch:false,
                selectedShipmentKey:"",
                recordShownCount:15 // read from context
			},
			
			initialize : function(){
				
				 var mashupArray = [];
	        	 mashupArray.push(iscMashup.getMashupRefObj(this,'getReadyForPackingShipmentList',{}));
                 mashupArray.push(iscMashup.getMashupRefObj(this,'getRuleForItemPack',{}));
		         
		         iscMashup.callMashups(this,mashupArray,{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);
				
			},
            
            processPaginatedShipmentList:function(response) {
                
                this.ui.apiCallInProgress = false;
                var output = iscMashup.getMashupOutput(response,"getReadyForPackingShipmentList");
                this.ui.noOfSearchResults =  $filter('number')(output.Page.Output.Shipments.TotalNumberOfRecords);
            	 
                if(output.Page.Output.Shipments.Shipment){
                    this.processShipment(output.Page.Output.Shipments);
                }
                
                console.log(output.Page.Output.Shipments);
                
            	 if(this.ui.noOfSearchResults == 1){
		    		 iscState.goToState('packwizard',{},{});
		    	 }else{
		    		 
		    	 }
            	 
            	 
            },
            
            processShipment : function(shipments){
                for(var i = 0; i < shipments.Shipment.length; i++){
                    var shipment = shipments.Shipment[i];
                    
                    shipment.OrderNoToDisplay = iscExtnShipment.getDisplayOrderNumber(shipment.DisplayOrderNo, '|', ', ', true);
                    shipment.ImageUrlToDisplay = iscExtnShipment.getFullURLForImage(shipment.ImageUrl);
                    shipment.SLAStylingClass = this._getSLAStyling(shipment.ImageUrl);
                    shipment.StatusDescriptionToDisplay = iscExtnShipment.getShipmentStatusDescription(shipment);
                    
                }
                
            },
            
            
            _getSLAStyling: function(imageUrl){
				if(!iscCore.isVoid(imageUrl) && imageUrl.lastIndexOf("/") != -1) {
					var cssClass = imageUrl.substring(imageUrl.lastIndexOf("/") + 1, imageUrl.indexOf("."));
					if(!iscCore.isVoid(cssClass)) {
						console.log("cssClass="+cssClass);
						return cssClass;
					}
				}
			},
            uiScanBarCodeData:function() {
                if (!iscCore.isVoid(this.model.scanInput.value)) {
                    var translateBarCodeApiInput = {
                        BarCode: {
                            BarCodeData: this.model.scanInput.value
                        }
                    };
                    iscMashup.callMashup(this, "translateBarCodeForShipmentPack", translateBarCodeApiInput, {})
                        .then(this.processBarCodeTranslation.bind(this), angular.noop);
                    this.model.scanInput.value = "";
                } else {
                    iscModal.showErrorMessage(iscI18n.translate('extn_packportlet.MSG_InvalidBarCodeData'));
                }
				 
            },
            
            processBarCodeTranslation:function(response)  {
				 
                var apiOutput = iscMashup.getMashupOutput(response,"translateBarCodeForShipmentPack");
                if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.BarCode.ErrorCode)) {
                    iscModal.showErrorMessage("apierror."+apiOutput.BarCode.ErrorCode);
                }
                else{
                    iscState.goToState("extn_containerpack",{
                        input: {
                            Shipment: apiOutput.BarCode.Shipment
                        }
                    },{});
                }
				 
            },
            
            uiViewPackOrderDetails:function(shipment){
                var shipmentModel = {Shipment:{}};
                    shipmentModel.Shipment = shipment;
                    iscState.goToState("extn_containerpack",{
                        input: {
                            Shipment: shipment
                        }
                    },{});
            },
            
            uiCancel : function(){
                iscState.goToPreviousState();
            },
            
            
            uiNextPageActionValidator: function() {
				var callNextPage = true;
				if (this.ui.apiCallInProgress) {
					callNextPage = false;
				}
				return callNextPage;
			},
			uiGetNextPackingRecords: function() {
				if (this.model.shipmentList.Page.IsLastPage !=="N") {
					return;
				}
				this.ui.apiCallInProgress = true;
				iscMashup.callPaginatedMashup(this, "getReadyForPackingShipmentList", {}, "NEXT", {})
                    .then(this.processPaginatedShipmentList.bind(this),angular.noop);
			},
            
            uiOpenShipmentSummary: function(shipmentKey) {
				iscState.goToState("extn-shipment-summary", {
					input: {
						Shipment: {
							ShipmentKey: shipmentKey
						}
					}
				}, {});
            }
            
            
        });
    }]);
			 
			 
            

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/





/**
 *@iscdoc viewmodal
 *@viewname store.views.shipment.containerunpack.container-unpack-reason
 *@package store.views.shipment.containerunpack
 *@class store.views.shipment.containerunpack.container-unpack-reason
 */
angular.module('store').controller('store.views.shipment.containerunpack.container-unpack-reason',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal','$timeout',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal,$timeout) {
		
		
		iscScreen.initializeModalScreen($scope,{


      /**
       *ModelList
       *Models that hold data
       * 
       */
  		model:{
  			 /**
	           *@description This model contains return reason common code list.
	           */
         "reasonList":{}
		
  		},


  		/**
       *MashupRefs
       *array containing the list of mashups referred in this controller
       */
  		mashupRefs : [
            {
                mashupRefId:"getReasonCodes",
                mashupId:"store.views.shipment.containerunpack.unpack_getReasonCodes",
                modelName:"reasonList"
            }

			],


			ui:{
                reasonCode:""
            },
			
			  /**
	         * @scDoc Method
	         * @method initialize
	         * @description method to initialize the controller and loads the record shortage view.
	         */
			initialize : function(){
				
				
				iscMashup.callMashup(this,"getReasonCodes",{},{})
                    .then(function(controllerData){
                        $timeout(function(){
                            if(Number(this.model.reasonList.CommonCodeList.TotalNumberOfRecords)>0){
                                this.ui.reasonCode=this.model.reasonList.CommonCodeList.CommonCode[0].CodeValue;
                            }
                        }.bind(this),0);
                        
                    }.bind(this));
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({data:'CANCEL'});
			},

			
			
			/**
			 *@description OnClick handler of "Apply" button, propagates the data back to invoking screen.
			 */
			uiApply : function () {
				$uibModalInstance.close({data:'APPLY',reasonCode:this.ui.reasonCode});
			}
			
			
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.customer-pickup.customer-pickup-finish
 *@package store.views.shipment.customer-pickup
 *@class customer-pickup-finish
 *@description Finishes the Customer Pickup wizard.
 *
 */



angular.module('store').controller('store.views.shipment.customer-pickup.customer-pickup-finish',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscModal','iscI18n','iscState',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams,iscModal, iscI18n, iscState) {		
		iscWizard.initializeWizardPage($scope,{      
            model:{
            },
  		    mashupRefs : [

  		    ],
            ui:{
            },
            /**
            *@description Opens shipment summary if the action is FINISH else open previous screen.
            */
			initialize : function(){
				if(iscWizard.getWizardAction()==="FINISH"){
					var shipmentDetailsModel = iscWizard.getWizardModel('shipmentDetails');
					var shipmentKey = shipmentDetailsModel.Shipment.ShipmentKey;
					iscState.goToState('shipmentsummary',{input:
						{
							Shipment:{ShipmentKey: shipmentKey},
							flowName:'CustomerPickup'
						}
					},{});
				} else if(iscWizard.getWizardAction()==="CLOSE"){
					iscState.goToPreviousState();
				}
			}
        });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.customer-pickup.customer-pickup-init
 *@package store.views.shipment.customer-pickup
 *@class customer-pickup-init
 *@description Initializes the Customer pickup wizard.
 *
 */


angular.module('store').controller('store.views.shipment.customer-pickup.customer-pickup-init',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscModal','iscI18n','iscState','$filter','iscStateParams',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscModal, iscI18n, iscState,$filter,iscStateParams) {		
		iscWizard.initializeWizardPage($scope,{      
            model:{
    	       /**
				*@description Contains the 'getAppointmentDetails' mashup output for appointent details.
				*/
    	       shipmentDetails:{}
            },
  		    mashupRefs : [
  		        /**
                *@description Validates the shipment customer pickup flow.
                */      
                {
                     mashupRefId: 'validateShipmentForCustomerPickup',
                     mashupId: 'store.views.shipment.customer-pickup.ValidateShipmentForCustomerPickup'

                }
  		    ],
  		    
            ui:{
                /**
                 *@property {Object} stateParams Input to the wizard.
                 */
                stateParams:{params:""}
            },
  		    /**
			*@description Reads wizard input and validates the shipment for customer pickup flow and starts the wizard.
			*/
			initialize : function(){
					this.ui.stateParams.params = iscStateParams.params;
					this.validateShipmentForCustomerPickup();
			},
			/**
			*@description Reads wizard input and validates the shipment for customer pickup flow and starts the wizard.
			*/
			validateShipmentForCustomerPickup:function() {
				
				var shipmentModel = this.ui.stateParams.params.input;
				var apiInput = {Shipment:{ShipmentKey:shipmentModel.Shipment.ShipmentKey, Action:"CustomerPick"}};
				iscMashup.callMashup(this,"validateShipmentForCustomerPickup",apiInput,{})
                    .then(this.processShipmentDetailsForCustomerPickup.bind(this),angular.noop);
				
			},
			/**
			*@description Processes the shipment details for customer pickup and starts the wizard by opening singlepagepickup page.
			*/
			processShipmentDetailsForCustomerPickup:function(response) {
				
				var apiOutput = iscMashup.getMashupOutput(response,"validateShipmentForCustomerPickup");
				this.model.shipmentDetails = apiOutput;
				if(apiOutput.Shipment.Error) {
					this.handleShipmentValidationError(apiOutput)
				} else {
					iscWizard.setWizardModel("shipmentDetails",this.model.shipmentDetails);
                    iscWizard.startCustomWizard('singlepagepickup',this.ui.stateParams.params,{});
				}
				
			},
			/**
			*@description Validates the shipment details for customer pickup and shows error message.
			*/
			handleShipmentValidationError:function(shipmentDetails) {
				
				var errorDesc = shipmentDetails.Shipment.Error.ErrorDescription;
				var action = shipmentDetails.Shipment.Error.action;
				var that = this;

                if (errorDesc == "InvalidShipmentShipNode" || errorDesc.indexOf("InvalidTransactionAllowed_") > -1) {
					this.showCustomErrorModal(iscI18n.translate('customerpickup.MESSAGE_'+errorDesc), shipmentDetails)
				} 
				
			},
            
            /**
			 *@description This method displays error modal with 'Go Back' & 'Goto Shipment Summary' modal actions.
			 * 
			 *@param {Object} shipmentDetails - Shipment details JSON object
			 *@param {String} translatedMessage - message to be displayed in modal
			 */
			showCustomErrorModal:function(translatedMessage, shipmentDetails) {
				
				var that = this;
				
				var confirmModalOptions = { 
    					options: { 
    						headerText: "modal.TITLE_Error",
    						headerIconCss: "app-glyphicons app-icon-error_30",
    						action:[
    						  {
    						    actionName:"goBack",
    						    actionLabel:"customerpickup.ACTION_Go_back"
    						  },
    						  {
      						    actionName:"gotoSummary",
      						    actionLabel:"customerpickup.ACTION_Goto_shipment_summary"
      						  }
    						]
    					},
    					settings: { 
    						size: "md", 
    						type: "error" 
    					}
				};
				
				iscModal.showConfirmationMessage(translatedMessage, confirmModalOptions).then(function(action){
					if(action == "goBack"){
						that.closeCustomerPickupWizard();
        			} else if(action == "gotoSummary") {
                        iscState.goToState('shipmentsummary',{input: shipmentDetails},{});
        			}
        		});
				
				
			},
            
            /**
	    	   *@description This method closes the customer pickup wizard.
	    	   */
			closeCustomerPickupWizard:function() {
				iscWizard.setWizardModel("shipmentDetails",this.model.shipmentDetails);
				iscWizard.closeWizard();
			},
			
			
        });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.customer-pickup.customer-pickup-page
 *@package store.views.shipment.customer-pickup
 *@class customer-pickup-page
 *@description Displays 'singlepagepickup' page of the 'Customer Pickup' wizard.
 */

angular.module('store').controller('store.views.shipment.customer-pickup.customer-pickup-page',
  ['$scope','$rootScope','iscScreen','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscState','iscAppInfo','iscShipment', '$timeout','iscPrint','iscWizard','$locale','$filter','iscObjectUtility','iscScrollUtility','iscCustomerPickup',
	function($scope,$rootScope,iscScreen,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscState,iscAppInfo,iscShipment,$timeout,iscPrint,iscWizard,$locale,$filter,iscObjectUtility,iscScrollUtility,iscCustomerPickup) {
		iscWizard.initializeWizardPage($scope,{
			model: {
				/**
                *@description This model contains the getShipmentDetails api output. It will have header level shipment information.
                */
                "shipmentDetails" : {},
                /**
                *@description This model contains the getShipmentLineList api output. It will have all the shipment lines.
                */
                "shipmentLineList" : {} ,
                /**
                *@description This model contains the list for customer verification methods.
                */
                "custVeriMethodList" : {}
			},
			mashupRefs:[
				/**
                 *@description This mashup is invoked to fetch header level shipment information.
                 */
                {  
                    mashupRefId: 'getShipmentDetails',
                    mashupId: 'store.views.shipment.customer-pickup.getShipmentSummaryDetails',
                    modelName : 'shipmentDetails'
                },
                /**
                 *@description This mashup is invoked to fetch all shipment lines.
                 */
                {
                    mashupRefId: 'getShipmentLineList',
                    mashupId: 'store.views.shipment.customer-pickup.getShipmentLineDetails',
                    modelName : 'shipmentLineList'
                },
                /**
                 *@description This mashup is invoked to fetch list of customer verification methods.
                 */
                {
                    mashupRefId: 'getCustomerVerficationMethodList',
                    mashupId: 'store.views.shipment.customer-pickup.getCustomerVerficationMethodList',
                    modelName : 'custVeriMethodList'
                },
                /**
                 *@description This mashup is invoked to fetch barcode translations details for a product.
                 */
                {	 
                    mashupRefId: 'registerBarCodeForCustomerPickup',
                    mashupId: 'store.views.shipment.customer-pickup.registerBarCodeForCustomerPickup',
                    modelName : 'lastScannedProduct'					
                },
                /**
                 *@description This mashup is invoked when all shipment lines are picked together.
                 */
                {	
                    mashupRefId: 'pickAllShipmentLines',
                    mashupId: 'store.views.shipment.customer-pickup.pickupAllShipmentLines'
                },
                /**
                 *@description This mashup is invoked to get the updated shipment line details.
                 */
                {
                    mashupRefId: 'getUpdatedShipmentLineDetails',
                    mashupId: 'store.views.shipment.customer-pickup.getShipmentLineDetailsPostChangeShipment'
                }, 
                /**
                 *@description This mashup updates the picked up quantity for the shipment line.
                 */
                {
                    mashupRefId: 'updatePickedupQuantityForShipmentLine',
                    mashupId: 'store.views.shipment.customer-pickup.updatePickedupQuantityForShipmentLine'
                }, 
                /**
                 *@description This mashup records the shortage for the shipment line.
                 */
                {
                    mashupRefId: 'recordShortageForShipmentLine',
                    mashupId: 'store.views.shipment.customer-pickup.recordShortageForShipmentLine'

                },
                /**
                 *@description This mashup records the shortage for the remaining shipment lines.
                 */
                {
                    mashupRefId: 'recordShortageForAllShipmentLines',
                    mashupId: 'store.views.shipment.customer-pickup.recordShortageForAllShipmentLines'
                },
                /**
                 *@description This mashup is invoked to call recordCustomerPickup api on finish of customer pickup.
                 */
                {	
                    mashupRefId: 'recordCustomerPickup',
                    mashupId: 'store.views.shipment.customer-pickup.recordCustomerPickup'                    			
                },
                /**
                 *@description This mashup is invoked to rule which determines staging location is required or not.
                 */
                {
                    mashupRefId: 'getStagingLocationRequiredRuleDetails',
                    mashupId: 'store.views.shipment.getStagingLocationRequiredRuleDetails'
                }
			],
			
			ui : {
                /**
                 *@property {Boolean} showCustomerPickupUI Flag to indicate to show the screen content. Used in initial loading of the screen.
                 */
                showCustomerPickupUI:false,
                /**
                 *@property {String} shipmentKey Holds the shipment key.
                 */
				shipmentKey: "",
                /**
                 *@property {String} customerVerificationMethod Holds the selected customer verification method.
                 */
				customerVerificationMethod: "",
                /**
                 *@property {Boolean} showCustomerVerificationMethodError Flag to indicate to show the error message for customer verification method.
                 */
				showCustomerVerificationMethodError: false,
                /**
                 *@property {String} customerVerificationMethodErrorDesc Holds the error message for customer verification method.
                 */
				customerVerificationMethodErrorDesc: iscI18n.translate('customerpickup.MESSAGE_CustomerVerificationMethodNotFound'),
                /**
                 *@property {Number} recordShownCount Number of shipment lines to show on load. Used for client side paginigation.
                 */
                recordShownCount:iscAppContext.isMobile()?6:10,
                /**
                 *@property {String} selectedShipmentLineKey Holds selected shipment line key.
                 */
                selectedShipmentLineKey:"",
                /**
                 *@property {String} currentlySelectedShipmentLine Holds currenlty selected shipment line key.
                 */
                currentlySelectedShipmentLine:"",
                /**
                 *@property {Boolean} focusOnFirstLine Flag to indicate to focus on the first shipment line on page load.
                 */
                focusOnFirstLine:true,
                /**
                 *@property {Number} productListIndex Number of shipment lines.
                 */
                productListIndex:0,
                /**
                 *@property {String}  selectedCustomerContact - Pickup Customer's Name.
                 */
                "selectedCustomerContact":"",
                /**
                 *@property {Boolean} isStagingLocationRuleEnabled Flag to indicate to show staging location information or not.
                 */
                isStagingLocationRuleEnabled:true,
                /**
                 *@property {Boolean} hasStagingLocation Flag to indicate whether these is valid staging location information or not.
                 */
                hasStagingLocation:false
			},
			/**
			*@description Reads wizard model and loads shipment details.
			*/
			initialize: function(){
				var shipmentKey = iscStateParams.params.input.Shipment.ShipmentKey;
				this.ui.shipmentKey = shipmentKey;
                var shipmentDetailsMashupInput = {};
				shipmentDetailsMashupInput.Shipment = {};
				shipmentDetailsMashupInput.Shipment.ShipmentKey = shipmentKey;
				
				var shipmentLineListMashupInput = {};
				shipmentLineListMashupInput.ShipmentLine = {};
				shipmentLineListMashupInput.ShipmentLine.ShipmentKey = shipmentKey;
				
				var mashupArray = [];
				mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentDetails',shipmentDetailsMashupInput));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getCustomerVerficationMethodList',{}));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentLineList',shipmentLineListMashupInput));
                mashupArray.push(iscMashup.getMashupRefObj(this,'getStagingLocationRequiredRuleDetails',{Rule:{}}));
				
				iscMashup.callMashups(this,mashupArray,{})
                    .then(this.handleInitMashupOutput.bind(this),angular.noop);
			},
			
			/**
			 *@description Callback handler for  init mashups call made from the 'initialize' method.
			 *@param {Object} response - Output data of mashups call
			 */
			handleInitMashupOutput: function(controllerData) {
				this.ui.showCustomerPickupUI = true;
                /*var custVerMethodList = iscMashup.getMashupOutput(controllerData,"getCustomerVerficationMethodList");
                if(custVerMethodList){
                    var commonCodes = iscCore.getValueFromJsonPath(custVerMethodList,"CommonCodeList.CommonCode");
                    if(commonCodes && angular.isArray(commonCodes) && commonCodes.length > 0){
                        this.ui.custVerificationMethod = commonCodes[0];
                    }
                }
                */
                var shipmentDetails = iscMashup.getMashupOutput(controllerData,"getShipmentDetails");
                if(shipmentDetails && shipmentDetails.Shipment){
                    shipmentDetails.Shipment.DisplayOrderNoDesc = iscShipment.getDisplayOrderNumber(shipmentDetails.Shipment.DisplayOrderNo, '|', ', ', false);
                }
                
                this.ui.hasStagingLocation = !iscCore.isVoid(shipmentDetails.Shipment.HoldLocation);
                this.ui.selectedCustomerContact = shipmentDetails.Shipment.CustomerContacts.CustomerContact[0];
				this.model.shipmentLineList = iscMashup.getMashupOutput(controllerData,"getShipmentLineList");
                
                if(!iscCore.isVoid(this.model.shipmentLineList) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines) 
                   && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords)) {
                    
                    this.ui.numberOfPickableProducts = $filter('number')(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords);
                    this.ui.shipmentFullyPicked = (this.ui.numberOfPickableProducts == 0 ) ? true : false;
                    if(this.ui.focusOnFirstLine && this.ui.numberOfPickableProducts > 0) {
                         this.ui.currentlySelectedShipmentLine = this.model.shipmentLineList.ShipmentLines.ShipmentLine[0];
                         this.ui.selectedShipmentLineKey = this.ui.currentlySelectedShipmentLine.ShipmentLineKey;
                         this.uiStampCustomerPickupQuantityAttrs(this.ui.currentlySelectedShipmentLine);
                    }
                }
				//iscDomUtility.setFocus(document.getElementById('productScanInput'));
				
                var slaImageRelativePath = shipmentDetails.Shipment.ImageUrl;
                if(slaImageRelativePath) {
                    this.ui.slaImageFullURL =  iscShipment.getFullURLForImage(slaImageRelativePath);
                }
                
                var ruleDetails = iscMashup.getMashupOutput(controllerData,"getStagingLocationRequiredRuleDetails");
				this.ui.isStagingLocationRuleEnabled = (ruleDetails && ruleDetails.Rules.RuleSetValue == "Y") ? true : false;
				//this.ui.isStagingLocationRuleEnabled = false;	        	
			}, uiOpenOrder: function() {
			   	if(this.model.shipmentDetails) {
			   		var shipment = this.model.shipmentDetails.Shipment;
			   	 	if(shipment.ShipmentLines && shipment.ShipmentLines.ShipmentLine && shipment.ShipmentLines.ShipmentLine.length > 0) {
				   	 	var orderModel =  {
				   	 		"Order": shipment.ShipmentLines.ShipmentLine[0].Order
				   	 	};
	                    iscState.goToState('ordersummary',{orderInput:orderModel,showBackLink:true},{});
                    }
			   	}
			},
            
            /**
			 *@description Gets the next count to show shipment lines. Used in client side pagination.
			 */
            uiGetNextShipmentLineRecords : function(){
								
              if(this.ui.recordShownCount <= this.model.shipmentLineList.ShipmentLines.ShipmentLine.length){
                  this.ui.recordShownCount += 6;
                }

            },
            /*
			uiOnValueChange: function() {
				this.ui.showCustomerVerificationMethodError = false;
			},
            */
			/**
             *@description This method closes the wizard.
             */
			uiCancel:function() {
				this.handleWizardExitAndClose("close");
			},
			/**
             *@description Handler method called on wizard exit event.
             */
			handleWizardExit:function() {
				return this.handleWizardExitAndClose("exit");
			},
			/**
             *@description Handler method called on wizard back event.
             */
			handleWizardBack:function() {
				var isDirty = $scope.customerPickupForm.$dirty;
                return iscWizard.handleWizardBack(isDirty,'customerpickup.MESSAGE_CancelWarningMessage');
			},
			/**
             *@description Handler method called on wizard back and exit event.
             */
			handleWizardExitAndClose: function(wizardAction) {
				var isDirty = $scope.customerPickupForm.$dirty;
                return iscWizard.handleWizardExitAndClose(wizardAction,isDirty,'customerpickup.MESSAGE_CancelWarningMessage');
			},
			
            
            /**
             *@description This method updates the shipment line qauntity for barcode scanning.
             */
            uiScanBarCodeData:function() {
					  			
                if(!iscCore.isVoid(this.model.barCodeData)){

                    var that = this;
                    this.model.barCodeData = iscObjectUtility.trimString(this.model.barCodeData);
                    var registerBarCodeForCPInput = { 'BarCode' :{'BarCodeData': this.model.barCodeData,ShipmentContextualInfo:{}}};
                    registerBarCodeForCPInput.BarCode.ShipmentContextualInfo.ShipmentKey = this.model.shipmentDetails.Shipment.ShipmentKey; 
                    registerBarCodeForCPInput.BarCode.ShipmentContextualInfo.SellerOrganizationCode = this.model.shipmentDetails.Shipment.SellerOrganizationCode; 

                    iscMashup.callMashup(this,"registerBarCodeForCustomerPickup",registerBarCodeForCPInput,{}).then(this.processRegisterBarCodeOutput.bind(this),function(errorResponse) {
                        that.handleMashupErrors(errorResponse);
                    }); 
                }
                else {
                    iscModal.showErrorMessage(iscI18n.translate('customerpickup.MESSAGE_InvalidBarCodeData'));
                }

            },
            /**
			 *@description Callback handler for 'registerBarCodeForCustomerPickup' mashup call.
             *@param {Object} errorResponse - Error Output data of 'registerBarCodeForCustomerPickup' mashup call
			 */
            handleMashupErrors:function(errorResponse) {

                var that = this;
                var errorMsg = errorResponse.Errors.Error[0].ErrorDescription;
                var errorCode = errorResponse.Errors.Error[0].ErrorCode;
                if(iscI18n.hasKey("apierror."+errorCode)){
                    errorMsg = iscI18n.translate("apierror."+errorCode);
                    iscModal.showErrorMessage(errorMsg,null,null).then(function(callbackData) {
                        that.resetData();
                    });				
                } else {
                    iscModal.showErrorMessage(errorMsg,null,null).then(function(callbackData) {
                        that.resetData();
                    });				
                }

            },
            /**
			 *@description Callback handler for 'registerBarCodeForCustomerPickup' mashup call.
             *@param {Object} response - Output data of 'registerBarCodeForCustomerPickup' mashup call
			 */
            processRegisterBarCodeOutput:function(response) {

                var apiOutput = iscMashup.getMashupOutput(response,"registerBarCodeForCustomerPickup");
                this.updateShipmentLineListModel(apiOutput.BarCode.Shipment.ShipmentLine);
                this.highlightLastPickedProduct(apiOutput.BarCode.Shipment.ShipmentLine);
                this.resetData();
            },

            /**
             *@description This method updates the shipment line qaunity.
             *@param {Object} shipmentLine Shipment line for which quantity needs to be updated.
             *@param {String} newCustomerPickedQty New customer picked quantity.
             */
            uiUpdateShipmentLineQuantity : function(shipmentLine,newCustomerPickedQty){
                var mashupArray = [];
				mashupArray.push(iscMashup.getMashupRefObj(this,'updatePickedupQuantityForShipmentLine',iscCustomerPickup.getQuantityUpdateInput(this.ui.shipmentKey,shipmentLine.ShipmentLineKey,newCustomerPickedQty)));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getUpdatedShipmentLineDetails',iscCustomerPickup.getShipmentLineDetailsInput(this.ui.shipmentKey,shipmentLine.ShipmentLineKey)));
				

                iscMashup.callMashups(this,mashupArray,{})
                    .then(this.postPickupQuantityUpdate.bind(this));
            },
            /**
			 *@description Callback handler for mashup call made for updating the shipment line quantity.
             *@param {Object} response - Output data of mashup call
			 */
            postPickupQuantityUpdate:function(response) {
                var updatedShipmentModel = iscMashup.getMashupOutput(response,"getUpdatedShipmentLineDetails");
                if(updatedShipmentModel.ShipmentLines.ShipmentLine){
                    this.updateShipmentLineListModel(updatedShipmentModel.ShipmentLines.ShipmentLine[0]);
                }
                this.resetData();
            },
            
            /**
             *@description This method resets customer pickup data.
             */
            resetData:function() {
					  			
                this.model.barCodeData = "";
                if($scope.customerPickupForm) {
                    $scope.customerPickupForm.$setPristine();
                }
                if($scope.quantityForm) {
                    $scope.quantityForm.$setPristine();
                }
                //iscDomUtility.setFocus(document.getElementById('productScanInput'));

            },

            /**
             *@description This method updates the shipment line on mashup calls.
             *@param {Object} shipmentLine Shipment line which needs to be updatd
             */
            updateShipmentLineListModel:function(updatedShipmentModel) {

                if(!iscCore.isVoid(this.model.shipmentLineList) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords)) {

                     var numOfShipmentLines = $filter('number')(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords);
                     for(var i=0;i<numOfShipmentLines;i++) {

                         var shipmentLine = this.model.shipmentLineList.ShipmentLines.ShipmentLine[i];
                         this.ui.productListIndex++;
                         if(!iscCore.isVoid(shipmentLine) && shipmentLine.ShipmentLineKey == updatedShipmentModel.ShipmentLineKey) {
                             var shipmentLine = this.model.shipmentLineList.ShipmentLines.ShipmentLine[i];
                            shipmentLine.CustomerPickedQuantity = $filter('number') (updatedShipmentModel.CustomerPickedQuantity);
                            shipmentLine.EditableCustomerPickedQuantity = shipmentLine.CustomerPickedQuantity;
                            shipmentLine.Quantity = $filter('number') (updatedShipmentModel.Quantity);
                            shipmentLine.ShortageQty = $filter('number') (updatedShipmentModel.ShortageQty);
                            shipmentLine.ShortageResolutionReason = updatedShipmentModel.ShortageResolutionReason;
                            shipmentLine.ShortageResolutionReasonDesc = updatedShipmentModel.ShortageResolutionReasonDesc;
                            shipmentLine.CancelReason = updatedShipmentModel.CancelReason;
                            shipmentLine.CancelReasonDesc = updatedShipmentModel.CancelReasonDesc;
                            shipmentLine.IsCustomerPickComplete = updatedShipmentModel.IsCustomerPickComplete;
                            
                            this.uiStampCustomerPickupQuantityAttrs(this.model.shipmentLineList.ShipmentLines.ShipmentLine[i]);

                            break;
                         }
                     }
                 }

            },
            /**
             *@description This method highlights the shipment line which has last picked product .
             *@param {Object} updatedShipmentLineModel Shipment line which needs to be highlighted
             */
            highlightLastPickedProduct:function(updatedShipmentLineModel) {

                if(this.ui.recordShownCount < this.ui.productListIndex){
                    this.ui.recordShownCount = this.ui.productListIndex;
                }
                var that = this;
                $timeout(function(){
                        iscScrollUtility.scrollToElementWIthOffset(document.getElementById('shipmentDetials'), document.getElementById(updatedShipmentLineModel.ShipmentLineKey), 0, 100);
                    }, 0);
                this.ui.productListIndex = 1;
                this.uiSelectShipmentLine(updatedShipmentLineModel);

            },
            /**
             *@description This method selects the shipment line for further actions.
             *@param {Object} shipmentLine Shipment line which needs to be selected
             */
            uiSelectShipmentLine:function(shipmentLine) {
                this.ui.selectedShipmentLineKey = shipmentLine.ShipmentLineKey;
                this.uiStampCustomerPickupQuantityAttrs(shipmentLine);
                this.ui.currentlySelectedShipmentLine = shipmentLine;
                this.ui.focusOnFirstLine = false;
                //this._isInitSelection = false;
            },
            /**
             *@description This method stamps the attributes that are required for displaying the shipment line.
             *@param {Object} shipmentLine Shipment line for which the attributes needs to updated
             */
            uiStampCustomerPickupQuantityAttrs:function(shipmentLine) {
								
                var shortageQty = 0, zeroQty = 0;
                
                if(shipmentLine.CustomerPickedQuantity) {
                    shipmentLine.EditableCustomerPickedQuantity = angular.copy(shipmentLine.CustomerPickedQuantity);
                } else {
                    shipmentLine.EditableCustomerPickedQuantity = "0";
                    shipmentLine.CustomerPickedQuantity = "0";
                }

                
                var shipmentQuantity = angular.isNumber(Number(shipmentLine.Quantity)) ? Number(shipmentLine.Quantity) : zeroQty;
                var customerPickedQuantity =  angular.isNumber(Number(shipmentLine.CustomerPickedQuantity)) ? Number(shipmentLine.CustomerPickedQuantity) : zeroQty; 
                var shortageResolution = shipmentLine.ShortageResolutionReason;

                
                if(shortageResolution) {
                    shortageQty =  shipmentQuantity - customerPickedQuantity;
                }

                shipmentLine.ComputedShortageQty = shortageQty;

                shipmentLine.showQtyUpdate = "N";
                
                shipmentLine.IsLineCompletelyPickup = shipmentLine.CustomerPickedQuantity === shipmentLine.Quantity
                shipmentLine.IsLineShorted = !iscCore.isVoid(shipmentLine.ShortageResolutionReason);
                shipmentLine.canLineBeShorted = iscCore.isVoid(shipmentLine.ShortageResolutionReason) && shipmentLine.Quantity != 0 && shipmentLine.CustomerPickedQuantity != shipmentLine.Quantity ;
                shipmentLine.IsCompletelyShortedInBackroom = ((shipmentLine.OriginalQuantity == shipmentLine.ShortageQty) &&  iscCore.isVoid(shipmentLine.ShortageResolutionReason)) ? true : false;
            },

            /**
             *@description This method shows shortage resolution popup.
             *@param {Object} shipmentLine Shipment line that needs to be shorted
             */
            uiOpenRecordShortagePopup:function(shipmentLine) {

                var zeroQty = 0;
                var popInput = {};
                popInput.codeType = 'YCD_SHORT_RESOLU';
                popInput.shipmentLine = angular.copy(shipmentLine);

                var customerPickedQty = angular.isNumber(Number(shipmentLine.CustomerPickedQuantity)) ? Number(shipmentLine.CustomerPickedQuantity) : zeroQty;
                var shipmentQuantity = angular.isNumber(Number(shipmentLine.Quantity)) ? Number(shipmentLine.Quantity) : zeroQty;

                popInput.shipmentLine.DisplayQty = customerPickedQty
                popInput.shipmentLine.DisplayTotalQty = shipmentQuantity;
                popInput.shipmentLine.OrderLine = shipmentLine.OrderLine;
                popInput.shipmentLine.DisplayShortQty = shipmentQuantity - customerPickedQty;

                var recordShortagePopupInput = {
                         modalInput: function(){
                            return popInput;
                        }   

                    };

                iscModal.openModal('store.views.shipment.common.record-shortage.record-shortage',recordShortagePopupInput,{})
                    .then(function(callBackData){
                        if(callBackData.data !== null && callBackData.data !== undefined){
                            this.recordShortageForShipment(callBackData.data,shipmentLine);
                        }
                    }.bind(this),angular.noop);

            },

            /**
             *@description This method calls mashup for shorting the shipment lines.
             *@param {Object} shortagePopupData Shortage popup data
             *@param {Object} shipmentLineToBeShorted Shipment line that needs to be shorted
             */
            recordShortageForShipment:function(shortagePopupData, shipmentLineToBeShorted) {
 
                if(shortagePopupData.RecordShortage.MarkAllLines == true){
                    var shortageInput = iscCustomerPickup.getShortAllRemainingInput(this.ui.shipmentKey,this.model.shipmentLineList,shortagePopupData.RecordShortage.ShortageReasonCode,shortagePopupData.RecordShortage.CancellationReason);
                    iscMashup.callMashup(this,"recordShortageForAllShipmentLines",shortageInput,{})
                        .then(this.postRecordShortageForShipment.bind(this, "recordShortageForAllShipmentLines"),angular.noop);
                
                }
                else{
                    var mashupArray = [];
                    mashupArray.push(iscMashup.getMashupRefObj(this,'recordShortageForAllShipmentLines',iscCustomerPickup.getShortageLineInput(this.ui.shipmentKey,shipmentLineToBeShorted.ShipmentLineKey,shortagePopupData.RecordShortage.ShortageReasonCode,shortagePopupData.RecordShortage.CancellationReason)));
                    mashupArray.push(iscMashup.getMashupRefObj(this,'getUpdatedShipmentLineDetails',iscCustomerPickup.getShipmentLineDetailsInput(this.ui.shipmentKey,shipmentLineToBeShorted.ShipmentLineKey)));

                    iscMashup.callMashups(this,mashupArray,{})
                        .then(this.postRecordShortageForShipment.bind(this, "getUpdatedShipmentLineDetails"),angular.noop);

                }
            },

            /**
             *@description Callback handler for mashup that is invoked for shorting the lines.
             *@param {String} mashupRefId Mashup ref id
             *@param {Object} response Output data
             */
            postRecordShortageForShipment:function(mashupRefId, response) {
                
                if(mashupRefId == 'recordShortageForAllShipmentLines') {
                    var output = iscMashup.getMashupOutput(response,"recordShortageForAllShipmentLines");
                    if(iscCore.getValueFromJsonPath(output, 'Shipment.ShipmentLines.ShipmentLine')){
                        for(var i=0; i < output.Shipment.ShipmentLines.ShipmentLine.length; i++){
                            this.updateShipmentLineListModel(output.Shipment.ShipmentLines.ShipmentLine[i]);
                        }
                        this.ui.selectedShipmentLineKey = "";
                    }
                    iscModal.showConfirmationMessage(iscI18n.translate('customerpickup.MESSAGE_ShortAllRemainingLinesMessage')).then(function(callBackAction){
                        if(callBackAction === 'YES'){
                            this.invokeFinish(false);
                        } else {
                            // Do nothing
                        }
                    }.bind(this));
                } else {
                    var updatedShipmentModel = iscMashup.getMashupOutput(response,mashupRefId);
                    this.updateShipmentLineListModel(updatedShipmentModel.ShipmentLines.ShipmentLine[0]);
                    this.resetData();
                }
            },
            
            
            /**
             *@description This method is invoked to pick all shipment lines together.
             */
            uiPickupAll : function(){
                var input = { Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,ShipmentLines:{}}};
                iscMashup.callMashup(this,'pickAllShipmentLines',iscCustomerPickup.getPickAllInput(this.model.shipmentDetails.Shipment.ShipmentKey,this.model.shipmentLineList),{})
                    .then(this.handlePickupAll.bind(this),angular.noop);
            },

            /**
             *@description This method is invoked after pickAllShipmentLines mashup call finishes. It is used to update the existing model for ShipmentLines with api output data. 
             *             It also checks for scan completion.
             *@param {Object} data - ouput object from mashup call.
             */
            handlePickupAll : function(data){
                var output = iscMashup.getMashupOutput(data,"pickAllShipmentLines");
                //console.log(output);
                if(iscCore.getValueFromJsonPath(output, 'Shipment.ShipmentLines.ShipmentLine')){
                    for(var i=0; i < output.Shipment.ShipmentLines.ShipmentLine.length; i++){
                        this.updateShipmentLineListModel(output.Shipment.ShipmentLines.ShipmentLine[i]);
                    }
                    this.ui.selectedShipmentLineKey = "";
                    this.checkForScanComplete();
                }
            },
            /**
             *@description This method internally calls isAllLinesComplete to check if all lines are picked up or not, if yes then it will prompt user to finish the 
             *             customer pickup process.
             */
            checkForScanComplete : function(){
                if(iscCustomerPickup.isAllLinesComplete(this.model.shipmentLineList)){
                    var confirmationMsg = iscI18n.translate('customerpickup.MESSAGE_ScanComplete');
                    var that = this;
                    iscModal.showConfirmationMessage(confirmationMsg).then(
                        function(callBackAction){
                            if(callBackAction === 'YES'){
                                that.invokeFinish(false);
                            }
                        },
                        function(callBackAction){
                            //		Do Nothing
                        }
                    );
                }
            },

            /**
             *@description This method invokes recordCustomerPickup if all validation passes and all lines are picked up.
             *@param {Boolean} checkScanComplete - Boolean attribute to tell whether checking for all lines picked up is required or not.
             */
            invokeFinish : function(checkScanComplete){
                var scanComplete = (checkScanComplete)?iscCustomerPickup.isAllLinesComplete(this.model.shipmentLineList):true;
                var customerVerificationDone = !iscCore.isVoid(this.ui.custVerificationMethod);
                if(!customerVerificationDone){
                    iscModal.showErrorMessage(iscI18n.translate('customerpickup.MESSAGE_Customer_verification_not_done'));
                }
                else if(scanComplete){
                    this.recordCustomerPickup();
                }else{
                    iscModal.showErrorMessage(iscI18n.translate('customerpickup.MESSAGE_PartiallyPickedUp'));
                    //console.log('pickup is not finished yet');
                }
            },
            /**
             *@description This method is used to invoke finish of customer pickup on click of Finish button.
             */
            uiInvokeFinish : function(){
                this.invokeFinish(true);
            },
			/**
             *@description This method is invoked to call recordCustomerPickup api.
             */
            recordCustomerPickup : function(){
                var input = {
                                "Shipment" : {
                                    "ShipmentKey" : this.model.shipmentDetails.Shipment.ShipmentKey,
                                    "Notes" : [
                                        {
                                            "Note" : {}
                                        }
                                    ]
                                }
                            };
                input.Shipment.Notes[0].Note = this.getCustomerVerificationDetails();
                iscMashup.callMashup(this,'recordCustomerPickup',input,{}).then(this.handleRecordCustomerPickup.bind(this),angular.noop);
            },

            /**
             *@description This method is used to get details for customer verification.
             */
            getCustomerVerificationDetails : function(){
                var cust = this.ui.selectedCustomerContact;
                var customerName = iscI18n.translate('address.LABEL_Display_name',{firstname: cust.FirstName,lastname: cust.LastName});
                return {
                            ContactUser : iscAppContext.getFromContext('currentLoginID'),
                            NoteText : iscI18n.translate("customerpickup.MESSAGE_Verfication_note",{customerName:customerName,verificationmethod:this.ui.custVerificationMethod.CodeShortDescription,user:iscAppContext.getFromContext('currentLoginID')}),
                            ReasonCode : "YCD_CUSTOMER_VERIFICATION",
                       };
            },
            
            
            /**
             *@description This method is invoked after recordCustomerPickup mashup call finishes. It is used to show print acknowledgement message if the call to 
             *             recordCustomerPickup api is a scuccess. It will display any error message if recordCustomerPickup didnot finish as expected.
             *@param {Object} data - ouput object from mashup call.
             */
            
            handleRecordCustomerPickup : function(controllerData){
                var shipmentStatus = iscMashup.getMashupOutput(controllerData,"recordCustomerPickup").Shipment.Status;
                if(!iscCore.isVoid(shipmentStatus)){
                    if(shipmentStatus.indexOf("9000") >-1){
                        iscModal.showInfoMessage("customerpickup.MESSAGE_Pickup_order_cancelled")
                            .then(function(action){
                                iscWizard.finishWizard();
                            }.bind(this));
                    }else if(shipmentStatus.indexOf("1400") >-1){
                        iscModal.showInfoMessage("customerpickup.MESSAGE_Pickup_success")
                            .then(function(action){
                                iscWizard.finishWizard();
                            }.bind(this));

                    }
                }
                else{
                    iscModal.showInfoMessage("customerpickup.MESSAGE_Pickup_not_processed")
                        .then(function(action){
                            iscWizard.finishWizard();
                        }.bind(this));
                }
            
            
            },
            /**
             *@description This method shows product details as popup.
             *@param {Object} itemDetails Item details of the product for which popup should be shown
             */
            uiOpenItemDetails:function(itemDetails){
                iscShipment.openProductDetail(itemDetails);
            }
			
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.global-shipment-search.global-shipment-search
 *@package store.views.shipment.global-shipment-search
 *@class global-shipment-search
 *@description Shipment search results screen is the list of Orders based on the search criteria in the global search options. 
 *
 */

angular.module("store").controller("store.views.shipment.global-shipment-search.global-shipment-search",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscAppContext","$timeout","iscShipment","$filter","iscShipmentStatus","iscStateParams",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup, iscAppContext,$timeout,iscShipment,$filter,iscShipmentStatus,iscStateParams){
		
		iscScreen.initializeScreen($scope,{  
			model:{
				/**
				 *@description Holds the Output of getShipmentList API.
				 */
				shipmentList:{},
				
				/**
				 *@description Holds the filter criteria used to filter the shipment list.
				 */
				filterOptions:{},
			},
            mashupRefs:[
                {
                	   /**
    				    *@iscdoc mashup
    		   			*@viewname store.views.shipment.global-shipment-search.global-shipment-search
    		   			*@mashupid store.views.shipment.global-shipment-search.getShipmenSearchResultList
  		   			    *@mashuprefid getShipmentList
    		   			*@description Fetches the list of shipments based on the search criteria
    		   			*/
                    mashupRefId: 'getShipmentList',
                    mashupId: 'store.views.shipment.global-shipment-search.getShipmenSearchResultList',
                    modelName:'shipmentList',
                    isPaginated: true,
					pageSize : 15,//iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					appendPath : 'Shipments.Shipment'
                }
               
            ],
			
			subscribers : [
				{
					'event':'$beforeStateChange',
					'handler':'_handleBeforeStateChange' 		
				}
			],

            ui : {
            	 /**
				 *@property {Boolean} apiCallInProgress - flag to identify if any mashup call is in progress.
				 */
                apiCallInProgress:false,
                
                /**
				 *@property {String} selectedShipmentKey - ShipmentKey of the selected shipment from the list.
				 */	
				selectedShipmentKey:"",
				
				 /**
				 *@property {Number} recordShownCount - pageSize of the shipment list for continuous scrolling.
				 */	
                recordShownCount:15, 
                
                /**
				 *@property {Number} numOfOrders - Number of orders matching the search criteria.
				 */	
                numOfOrders : -1,
                
               
				origApiInput:{},
				apiInput:{},
				
				/**
				 *@property {Object} inputStatusArray - Status filter for Orders.
				 */	
                inputStatusArray:[],
                
                /**
				 *@property {Object} inputDocumentTypeArray - Document filter for Orders.
				 */	
				inputDocumentTypeArray:[],
				
				/**
				 *@property {String} sortOptions - Holds the sorting order of shipments.
				 */	
                sortOptions:''
            },
			
            /**
			 *@description Initializes the Shipment search results screen by invoking the required mashup calls and reading the input data global search criteria.
			 */
			initialize : function(){
				
				var stateParams = iscStateParams.params;
				var stateOptions = iscStateParams.options;
				this.ui.origApiInput = stateParams.input;		
				
				//prepare input status. If coming from back action, make sure to read from state options
				this.ui.inputStatusArray = stateOptions.statusList?stateOptions.statusList:(!stateParams.status && !this.ui.origApiInput.Shipment.Status)?angular.copy(iscShipmentStatus.getShipmentStatusCodeList("All")):(!this.ui.origApiInput.Shipment.Status?stateParams.status:[this.ui.origApiInput.Shipment.Status]);
				delete this.ui.origApiInput.Shipment.Status;
				
				//prepare input for document type
				this.ui.inputDocumentTypeArray = ['0001','0006'];
				if(this.ui.origApiInput.Shipment.DocumentType){
					this.ui.inputDocumentTypeArray = [this.ui.origApiInput.Shipment.DocumentType];
				}else if(stateParams.documentTypes){
					this.ui.inputDocumentTypeArray = stateParams.documentTypes;
				}else if(stateParams.ignoreDocumentType){
					for(var i=0; i<this.ui.inputDocumentTypeArray.length; i++){
						if(this.ui.inputDocumentTypeArray[i] == stateParams.ignoreDocumentType){
							this.ui.inputDocumentTypeArray.splice(i,1);
							break;
						}
					}
				}
				delete this.ui.origApiInput.Shipment.DocumentType;
								
				//setup filters
				var shipmentStatusConfig = angular.copy(iscShipmentStatus.getShipmentStatusConfig("All"));
				var allStatusArray = shipmentStatusConfig.StatusList.Status;
				
				for(var j=0; j<allStatusArray.length; j++){
					for(var i=0; i<this.ui.inputStatusArray.length; i++){
						if(allStatusArray[j].StatusCode== this.ui.inputStatusArray[i]){
							allStatusArray[j].Checked='Y';
						}
					}
				}				
				this.model.filterOptions = shipmentStatusConfig;

				//setup sort options. If coming from back action, make sure to read from state options
				this.ui.sortOptions = (!stateOptions.sortOptions)?'N':stateOptions.sortOptions;
								
				//start pagination
				this._startShipmentPagination();
			},

			
			_startShipmentPagination: function(){
				//reset model
				this.model.shipmentList = {};
				//get input
				this.ui.apiInput = iscShipment.prepareShipmentListApiInput(this.ui.origApiInput,this.ui.inputStatusArray,this.ui.inputDocumentTypeArray,"",this.ui.sortOptions);
				//call masup				
			    iscMashup.callPaginatedMashup(this,'getShipmentList',this.ui.apiInput,"START",{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);
			},
			
			/**
			 *@description call back handler for  getShipmentList api.
			 */ 
            processPaginatedShipmentList:function(response) {
                
                this.ui.apiCallInProgress = false;
                var output = iscMashup.getMashupOutput(response,"getShipmentList");
                this.ui.numOfOrders =  $filter('number')(output.Page.Output.Shipments.TotalNumberOfRecords);
                if(output.Page.Output.Shipments.Shipment){
                	if(iscCore.isVoid(this.ui.selectedShipmentKey)){
	            		this.ui.selectedShipmentKey = output.Page.Output.Shipments.Shipment[0].ShipmentKey;
	            	}
                    this.processShipment(output.Page.Output.Shipments);
                }
            },
            
            /**
		     *@description Massage shipment object with UI attributes
			 */
            processShipment : function(shipments){
                for(var i = 0; i < shipments.Shipment.length; i++){
                    var shipment = shipments.Shipment[i];
                    shipment.OrderNoToDisplay = iscShipment.getDisplayOrderNumber(shipment.DisplayOrderNo, '|', ', ', true);
                    shipment.StatusDescriptionToDisplay = iscShipment.getShipmentStatusDescription(shipment);
                    this.setNextActionForShipment(shipment);
                }
                
            },
            
            /**
		     *@description Sets the next possible action of the shipment based on the status
			 */
            
            setNextActionForShipment:function(shipment){
            	 
            	var status = shipment.Status.Status; 
            	if(status.indexOf("1100.70.06.10") != -1 ){
            		shipment.shipmentNextactionKey ="pickorderlist.ACTION_PickOrder";
            	}else if(status.indexOf("1100.70.06.20") != -1){
            		shipment.shipmentNextactionKey ="pickorderlist.ACTION_ContinuePick";
            	}else if(status.indexOf("1100.70.06.30") != -1){
            		shipment.shipmentNextactionKey ="customerpickorderlist.LABEL_Start_Customerpick";
            	}else if(status.indexOf("1100.70.06.50") != -1){
            		shipment.shipmentNextactionKey ="packorderlist.ACTION_PackOrder";
            	}else if(status.indexOf("1100.70.06.70") != -1){
            		shipment.shipmentNextactionKey ="packorderlist.ACTION_ContinuePack";
            	}
            	
            },
            
            /**
		     *@description Opens pick,pack,customer pickup flow based on the order status
			 */
            
            uiPickOrPackOrder :function(shipment){
            	var status = shipment.Status.Status; 
            	
            	if((status.indexOf("1100.70.06.10") != -1 ) || (status.indexOf("1100.70.06.20") != -1)){
            		
            		iscState.goToState("backroomPickWizard", {input:{"Shipment" : { "ShipmentKey" : shipment.ShipmentKey}}}, {});
            		
            	}else if((status.indexOf("1100.70.06.50") != -1 ) || (status.indexOf("1100.70.06.70") != -1)){
            		
            		 iscState.goToState("containerpack", {input:{"Shipment" : { "ShipmentKey" : shipment.ShipmentKey}}}, {});
            		 
            	}else if(status.indexOf("1100.70.06.30") != -1){
            		
            		iscState.goToState("customer-pickup", {input:{"Shipment" : { "ShipmentKey" : shipment.ShipmentKey}}}, {});
            	}
            	
            },
            
            /**
			 *@description Identifies the Shipment chosen by the User from the list.
			 */
			uiSelectShipment : function(shipment){
				this.ui.selectedShipmentKey = shipment.ShipmentKey;
			},
            
			/**
			 *@description Validates if next page action should be performed by checking whether the last page is already fetched.
			 */
	        uiOrderListScrollActionValidator : function(){
	        	if (this.model.shipmentList.Page.IsLastPage !=="N" || this.ui.apiCallInProgress) {
					return false;
				}else
					return true;
	        },
	        
	        /**
			 *@description Gets the Paginated records for getShipmentList api when the next page action is performed.
			 */
	        uiGetNextSearchResultRecords: function() {
				if (this.model.shipmentList.Page.IsLastPage !=="N") {
					return;
				}
				this.ui.apiCallInProgress = true;
				iscMashup.callPaginatedMashup(this, "getShipmentList", this.ui.apiInput, "NEXT", {}) .then(this.processPaginatedShipmentList.bind(this));
			},
			
			/**
			 *@description Opens Shipment summary screen for the selected shipment from the list.
			 */
            uiGoToShipmentSummary:function(shipment){
				
				iscState.goToState('shipmentsummary',{input:
					{
						Shipment:{ShipmentKey: shipment.ShipmentKey}
					}
				},{}); 
				
			},
			
			 /**
			 *@description This method is invoked when filters are applied on the pack order list
			 */
			
			uiOnApplyFilter : function(data){
				this.model.filterOptions = data;
				var statusArray = data.StatusList.Status;
				this.ui.inputStatusArray=[];
				
				for(var j=0; j<statusArray.length; j++){
					if(statusArray[j].Checked=='Y'){
						this.ui.inputStatusArray.push(statusArray[j].StatusCode);
					}
				}
				
				this._startShipmentPagination();
			},
			
			 /**
			 *@description This method handles Sorting of Shipments.
			 */
			uiApplySortOptions : function(data){
				
				if(data.sortOption == 'NEW_TO_OLD'){
					this.ui.sortOptions = 'Y';
				}else if(data.sortOption == 'OLD_TO_NEW'){
					this.ui.sortOptions = 'N';
				}	
				this._startShipmentPagination();
			},

			/**
			 *@description This method handles on click of cancel button in cart details screen.
			 */
			uiClose : function(){
				iscState.goToState("/home", {}, {});
            },
			
			_handleBeforeStateChange : function(e, data){
				//adding search criteria (status filter and sort options) in current state's options so that it can be used when user comes back to this page
				if(!iscState.currentState.options)
					iscState.currentState.options = {};
				iscState.currentState.options.statusList = angular.copy(this.ui.inputStatusArray);
				iscState.currentState.options.sortOptions = angular.copy(this.ui.sortOptions);
			}
            
        });
    }]);
			 
			 
            

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.list.shipment-list
 *@package store.views.shipment.list
 *@class shipment-list
 *@description Provides a list of shipments for the selected fulfillment method. The different groups of shipment statuses are displayed under respective tabs.
 */
 
angular.module("store").controller("store.views.shipment.list.shipment-list", [
	"$scope", "iscScreen", "iscI18n", "iscMashup", "iscState", "iscStateParams", "iscAppInfo", "iscAppContext", "iscDialChartD3Pvdr", "iscDialChartD3Service", "iscManagerDashboardService",
	function($scope, iscScreen, iscI18n, iscMashup, iscState, iscStateParams, iscAppInfo, iscAppContext, iscDialChartD3Pvdr, iscDialChartD3Service, iscManagerDashboardService) {
		iscScreen.initializeScreen($scope, {
			model: {
				/**
                 *@iscdoc model
                 *@viewname store.views.shipment.list.shipment-list
                 *@name shipmentList_SLA
                 *@description Stores the shipmentList_getShipmentListByStatus_sla mashup output.
                 */
				"shipmentList_SLA": {},
				/**
                 *@iscdoc model
                 *@viewname store.views.shipment.list.shipment-list
                 *@name shipmentList_OS
                 *@description Stores the shipmentList_getShipmentListByStatus_orderstatus mashup output.
                 */
				"shipmentList_OS": {},
				/**
                 *@iscdoc model
                 *@viewname store.views.shipment.list.shipment-list
                 *@name shipmentCount_SLA
                 *@description Stores the sla_getShipmentCountForGivenStatuses mashup output.
                 */
				"shipmentCount_SLA": {},
				/**
                 *@iscdoc model
                 *@viewname store.views.shipment.list.shipment-list
                 *@name shipmentCount_OS
                 *@description Stores the orderstatus_getShipmentCountForGivenStatuses mashup output.
                 */
				"shipmentCount_OS": {}
			},
			mashupRefs: [{
				/**
				 *@iscdoc mashup
				 *@viewname store.views.shipment.list.shipment-list
				 *@mashupid shipmentList_getShipmentListByStatus_sla
				 *@mashuprefid sla_getShipmentListByStatus
				 *@modelname shipmentList_SLA
				 *@description Mashup used to get a list of shipments that match the required criteria for SLA view in a paginated manner.
				 */
				mashupRefId: "sla_getShipmentListByStatus",
				mashupId: "shipmentList_getShipmentListByStatus_sla",
				modelName: "shipmentList_SLA",
				isPaginated: true,
				pageSize: 15,//iscAppContext.isMobile() ? 10 : 15,
				append: false,
				appendPath: "Shipments.Shipment"
			}, {
				/**
				 *@iscdoc mashup
				 *@viewname store.views.shipment.list.shipment-list
				 *@mashupid shipmentList_getShipmentListByStatus_orderstatus
				 *@mashuprefid orderstatus_getShipmentListByStatus
				 *@modelname shipmentList_OS
				 *@description Mashup used to get a list of shipments that match the required criteria for order status view in a paginated manner.
				 */
				mashupRefId: "orderstatus_getShipmentListByStatus",
				mashupId: "shipmentList_getShipmentListByStatus_orderstatus",
				modelName: "shipmentList_OS",
				isPaginated: true,
				pageSize: 15,//iscAppContext.isMobile() ? 10 : 15,
				append: false,
				appendPath: "Shipments.Shipment"
			}, {
				/**
				 *@iscdoc mashup
				 *@viewname store.views.shipment.list.shipment-list
				 *@mashupid sla_getShipmentCountForGivenStatuses
				 *@mashuprefid sla_getShipmentCountForGivenStatuses
				 *@modelname shipmentCount_SLA
				 *@description Mashup used to get the number of shipments under each SLA category in config json for the selected fulfillment method.
				 */
				mashupRefId: "sla_getShipmentCountForGivenStatuses",
				mashupId: "sla_getShipmentCountForGivenStatuses",
				modelName: "shipmentCount_SLA"
			}, {
				/**
				 *@iscdoc mashup
				 *@viewname store.views.shipment.list.shipment-list
				 *@mashupid orderstatus_getShipmentCountForGivenStatuses
				 *@mashuprefid orderstatus_getShipmentCountForGivenStatuses
				 *@modelname shipmentCount_OS
				 *@description Mashup used to get the number of shipments under each order status category in config json for the selected fulfillment method.
				 */
				mashupRefId: "orderstatus_getShipmentCountForGivenStatuses",
				mashupId: "orderstatus_getShipmentCountForGivenStatuses",
				modelName: "shipmentCount_OS"
			}],
			ui: {
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.shipment.list.shipment-list
                 *@property {String} current_fulfillmentMethod - Fulfillment method for which the shipment list will be displayed. It is based on the portlet on the manager dashboard that contains the chart clicked by user. Expected values are sfs or bopus.
                 */
				current_fulfillmentMethod: "",//"sfs", "bopus" - affects queries only
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.shipment.list.shipment-list
                 *@property {String} current_view - The expected values are sla or orderstatus. The value is based on the user clicking on either sla or order status chart on the manager dashboard for a portlet.
                 */
				current_view: "",//"sla", "orderstatus"
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.shipment.list.shipment-list
                 *@property {String} current_selectedStatus - The value is based on the user clicked/selected region of a chart or the legend on the manager dashboard. It determines the currently selected tab.
                 */
				current_selectedStatus: "",//["lowPriority", "dueSoon", "overdue"], ["complete", "inProgress", "notStarted
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.shipment.list.shipment-list
                 *@property {Boolean} apiCallInProgress - Flag to track if a mashup call is in progress.
                 */
				apiCallInProgress: false,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.shipment.list.shipment-list
                 *@property {Boolean} apiCallInProgress - Flag to identify if the mashup call made is loading the next page for current_selectedStatus.
                 */
				isNextPageLoadCall: false,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.shipment.list.shipment-list
                 *@property {Boolean} isLastPage - Flag to identify if the data corresponds to last page.
                 */
				isLastPage: false,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.shipment.list.shipment-list
                 *@property {Boolean} noRecordsFound - Flag to identify if no shipments were found for the current_selectedStatus.
                 */
				noRecordsFound: false,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.shipment.list.shipment-list
                 *@property {Boolean} isReqdCommonCodeSLAConfigValid - Flag is set to true if the SLA configuration for enterprize matches the SLA config in manager dashboard config json. If validation returns false, the shipment list can not be displayed and appropriate message is displayed.
                 */
				isReqdCommonCodeSLAConfigValid: true,
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.shipment.list.shipment-list
                 *@property {String} pageAction - Variable used to identify if mashup should be invoked to start pagination or load next page.
                 */
				pageAction: "START", //"NEXT"
				/**
                 *@iscdoc uiattr
                 *@viewname store.views.shipment.list.shipment-list
                 *@property {Object} dataToDisplay - A json configuration object that contains information about screen title, total count, label for each of the tabs and their data.
                 */
				dataToDisplay: {
					"activeTabIndex": 0,
					"pageTitle": "shipmentList.LABEL_BOPUSOrders",
					"total_shipmentCount": 0,
					"headerLabel": iscI18n.translate("managerDashboard.LABEL_Orders"),
					"tabHeaderFulfillmentModeCss": "manager-dashboard-bopus-theme",
					"tabData": []//shipmentList: []
				}
			},
			// TODO: Document this flag in ui. later?
			_waitForShipmentCount: false,
			/**
			 *@iscdoc viewinit
			 *@viewname store.views.shipment.list.shipment-list
			 *@method initialize
			 *@description Initializes the shipment list screen by initializing UI dataToDisplay json, calling initialization mashups and validates the common code list data.
			 */
			initialize: function() {
				this.commonCodeListData = iscManagerDashboardService.getCommonCodeListData();
				if (this.commonCodeListData == null) {
					console.error("store.views.shipment.list.shipment-list: unexpected scenario. Could not get common codes for SLA. Not proceeding further.");
					return;
				}
				this.mgrDashboardConfig = iscDialChartD3Pvdr.getManagerDashboardConfig();
				
				if (!iscCore.isVoid(iscStateParams.params)) {
					this.ui.current_fulfillmentMethod = iscStateParams.params.fulfillmentMethod;
					this.ui.current_view = iscStateParams.params.view;
					this.ui.current_selectedStatus = iscStateParams.params.selectedStatus;
				} else {
					console.error("store.views.shipment.list.shipment-list: unexpected scenario. Did not receive input about which tab to open and other relevant data. Not proceeding further.");
					return;
				}
				this.initializeUIJson();
				this.callRequiredMashups();
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.shipment.list.shipment-list
			 *@method initializeUIJson
			 *@description Initializes the UI dataToDisplay json with screen title, total count, label for each of the tabs.
			 */
			initializeUIJson: function() {
				if (this.ui.current_fulfillmentMethod === "sfs") {
					this.ui.dataToDisplay["pageTitle"] = "shipmentList.LABEL_SFSOrders";
					this.ui.dataToDisplay["tabHeaderFulfillmentModeCss"] = "manager-dashboard-sfs-theme";
				}
				if (this.ui.current_view == "sla") {
					this.ui.dataToDisplay["headerLabel"] = iscI18n.translate("managerDashboard.LABEL_OrdersBySLA");
					this.ui.dataToDisplay["tabHeaderFulfillmentModeCss"] = "";
				}
				this.ui.dataToDisplay["tabData"] = iscDialChartD3Service.getLegendJsonConfigArray(this.ui.current_fulfillmentMethod, this.ui.current_view, null);
				for (var i = 0; i < this.ui.dataToDisplay["tabData"].length; i++) {
					this.ui.dataToDisplay["tabData"][i]["shipmentList"] = [];
					var aTabData = this.ui.dataToDisplay["tabData"][i];
					if (this.ui.current_selectedStatus === aTabData.statusName) {
						this.ui.dataToDisplay.activeTabIndex = i;
					}
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.shipment.list.shipment-list
			 *@method callRequiredMashups
			 *@description Calls the mashups to get the count of all statuses and the shipment list corresponding to passed status.
			 *@param {String} uiSelectedStatus - The currently selected status/tab.
			 */
			callRequiredMashups: function(uiSelectedStatus) {
				this.ui.isReqdCommonCodeSLAConfigValid = iscManagerDashboardService.validateCommonCodeListDataForFulfillmentMethod(this.ui.current_fulfillmentMethod);
				this.ui.noRecordsFound = false;
				if (uiSelectedStatus != null) {
					this.ui.current_selectedStatus = uiSelectedStatus;
				}
				var mashupRefId_shipmentCount = "orderstatus_getShipmentCountForGivenStatuses";
				var mashupRefId_shipmentList = "orderstatus_getShipmentListByStatus";
				if (this.ui.current_view === "sla") {
					mashupRefId_shipmentCount = "sla_getShipmentCountForGivenStatuses";
					mashupRefId_shipmentList = "sla_getShipmentListByStatus";
				}
				this.ui.apiCallInProgress = true;
				if (this.ui.pageAction !== "NEXT") {
					var mashupArray = [(iscMashup.getMashupRefObj(this, mashupRefId_shipmentCount, this.getShipmentCountInputJson()))];
					iscMashup.callMashups(this, mashupArray, {showMask: true}).then(this.handleMashupOutput_count.bind(this),angular.noop);
				}
				if (this.ui.isReqdCommonCodeSLAConfigValid) {
					iscMashup.callPaginatedMashup(this, mashupRefId_shipmentList, this.getShipmentListInputJson(), this.ui.pageAction, {showMask: true}).then(this.handleMashupOutput_list.bind(this),angular.noop);
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.shipment.list.shipment-list
			 *@method getShipmentCountInputJson
			 *@description This method prepares the input json required to make the mashup call to get shipment counts.
			 */
			getShipmentCountInputJson: function() {
				var reqdAttributes = this._getRequiredAttributesJson();
				var input = iscManagerDashboardService.getInputJson(reqdAttributes.reqd_mgrDashboardConfigJson_sla, reqdAttributes.reqd_mgrDashboardConfigJson_shipmentStatus, this.ui.current_fulfillmentMethod, this.ui.current_view);
				input["Shipment"]["DeliveryMethod"] = reqdAttributes.fulfillmentMethod_code;
				return input;
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.shipment.list.shipment-list
			 *@method getShipmentListInputJson
			 *@description This method prepares the input json required to make the mashup call to get shipment list.
			 */
			getShipmentListInputJson: function() {
				var combinedStatusArray = [];
				var reqdAttributes = this._getRequiredAttributesJson();
				var shipmentJson = {
					"Shipment": {
						"StatusName": this.ui.current_selectedStatus,
						"DeliveryMethod": reqdAttributes.fulfillmentMethod_code,
						"ComplexQuery": {
							"And": {
								"Or": {
									"Exp": []
								}
							}
						},
						"CommonCodeList": {
							"CommonCode": iscManagerDashboardService.getCommonCodeListDataAccordingToStatuses(reqdAttributes.reqd_mgrDashboardConfigJson_sla.displayStatuses, this.ui.current_fulfillmentMethod),
							"DeliveryMethod": reqdAttributes.fulfillmentMethod_code
						}
					}
				};
				if (this.ui.current_view === "sla") {
					var combinedStatusStr = iscManagerDashboardService.getStringOfAllActualOrderStatusesExceptExcludedInSla(reqdAttributes.reqd_mgrDashboardConfigJson_shipmentStatus, reqdAttributes.reqd_mgrDashboardConfigJson_sla);
					combinedStatusArray = combinedStatusStr.split(",");
					shipmentJson["Shipment"]["Mode"] = "sla";
					for (var i = 0; i < reqdAttributes.reqd_mgrDashboardConfigJson_sla.displayStatuses.length; i++) {
						var aDisplayStatus = reqdAttributes.reqd_mgrDashboardConfigJson_sla.displayStatuses[i];
						if (aDisplayStatus["statusName"] === this.ui.current_selectedStatus) {
							shipmentJson["Shipment"]["ThresholdTimeLimit"] = iscManagerDashboardService.getThresholdTimeLimitForStatus(reqdAttributes.reqd_mgrDashboardConfigJson_sla.displayStatuses, this.ui.current_fulfillmentMethod, aDisplayStatus["statusName"])
							break;
						}
					}
				} else {
					for (var i = 0; i < reqdAttributes.reqd_mgrDashboardConfigJson_shipmentStatus.displayStatuses.length; i++) {
						var aDisplayStatus = reqdAttributes.reqd_mgrDashboardConfigJson_shipmentStatus.displayStatuses[i];
						if (aDisplayStatus["statusName"] === this.ui.current_selectedStatus) {
							combinedStatusArray = aDisplayStatus["combinedStatusArray"];
							break;
						}
					}
				}
				
				for (var i = 0; i < combinedStatusArray.length; i++) {
					shipmentJson["Shipment"]["ComplexQuery"]["And"]["Or"]["Exp"].push({
						"Name": "Status",
						"QryType": "FLIKE",
						"Value": combinedStatusArray[i]
					});
				}
				return shipmentJson;
			},
			handleMashupOutput_count: function() {
				// Do nothing. Update all data in handleMashupOutput_list() to avoid filckering.
				// But if this._waitForShipmentCount == true, the count mashup came in late. So, we need to run the logic in handleMashupOutput_list().
				// TODO: Document this method and behavior later?
				if (this._waitForShipmentCount === true) {
					this._waitForShipmentCount = false;
					this.handleMashupOutput_list();
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.shipment.list.shipment-list
			 *@method handleMashupOutput_list
			 *@description This method is called when shipment list mashup call completes. The currently selected status/tab is updated with the shipment list and the count of shipments for each status/tab.
			 */
			handleMashupOutput_list: function() {
				this.ui.dataToDisplay["total_shipmentCount"] = 0;
				var isLastPage = "N";
				var shipmentListData = this.model.shipmentList_OS;
				var shipmentCountData = this.model.shipmentCount_OS;
				var middleAttr = "OrderStatus";
				if (this.ui.current_view === "sla") {
					shipmentListData = this.model.shipmentList_SLA;
					shipmentCountData = this.model.shipmentCount_SLA;
					middleAttr = "SLA";
				}
				if (shipmentCountData.Shipment == null) {
					// means handleMashupOutput_count() did not get invoked and we do not yet have counts. This can happen when we have 0 shipments. Wait for count to come back so set a flag.
					// TODO: Document this flag in ui. later?
					this._waitForShipmentCount = true;
					return;
				}
				this._waitForShipmentCount = false;
				isLastPage = iscCore.getValueFromJsonPath(shipmentListData, "Page.IsLastPage");
				shipmentListData = iscCore.getValueFromJsonPath(shipmentListData, "Page.Output.Shipments.Shipment");
				if (isLastPage != null && (isLastPage.toLowerCase() === "y" || isLastPage.toLowerCase() === "true" || isLastPage === true)) {
					this.ui.isLastPage = true;
				}
				if (shipmentListData == null || (shipmentListData != null && (shipmentListData.length == null || shipmentListData.length === 0))) {
					shipmentListData = [];
					this.ui.noRecordsFound = true;
				}
				shipmentListData = iscDialChartD3Service.addIconClassAttrAndStatusCssToShipmentArray(shipmentListData, this.ui.current_fulfillmentMethod, this.ui.current_view, this.ui.current_selectedStatus);
				for (var i = 0; i < this.ui.dataToDisplay["tabData"].length; i++) {
					var aTabData = this.ui.dataToDisplay["tabData"][i];
					if (this.ui.dataToDisplay.activeTabIndex === i && this.ui.current_selectedStatus === aTabData.statusName) {
						if (this.ui.isNextPageLoadCall) {
							this.ui.dataToDisplay["tabData"][i]["shipmentList"] = this.ui.dataToDisplay["tabData"][i]["shipmentList"].concat(shipmentListData);
						} else {
							this.ui.dataToDisplay["tabData"][i]["shipmentList"] = shipmentListData;
						}
					} else {
						this.ui.dataToDisplay["tabData"][i]["shipmentList"] = [];
					}
					aTabData["value"] = this._getShipmentCountFromArray(shipmentCountData.Shipment[middleAttr].DisplayStatusList.DisplayStatus, aTabData["statusName"]);
					this.ui.dataToDisplay["total_shipmentCount"] += aTabData["value"];
				}
				this.ui.apiCallInProgress = false;
				this.ui.isNextPageLoadCall = false;
			},
			_getShipmentCountFromArray: function(inputArray, statusName) {
				var val = -1;
				for (var i = 0; i < inputArray.length; i++) {
					if (inputArray[i]["StatusName"].toLowerCase() === statusName.toLowerCase()) {
						val = +inputArray[i]["Count"]
						break;
					}
				}
				return val;
			},
			_getRequiredAttributesJson: function() {
				var fulfillmentMethod_code = "PICK";
				var commonCodeListData = this.commonCodeListData["bopus"];
				var mgrDashboardConfigJson = this.mgrDashboardConfig["pickupInStore"];
				if (this.ui.current_fulfillmentMethod === "sfs") {
					fulfillmentMethod_code = "SHP";
					commonCodeListData = this.commonCodeListData["sfs"];
					mgrDashboardConfigJson = this.mgrDashboardConfig["shipFromStore"];
				}
				return {
					"fulfillmentMethod_code": fulfillmentMethod_code,
					"reqd_mgrDashboardConfigJson": mgrDashboardConfigJson,
					"reqd_mgrDashboardConfigJson_sla": mgrDashboardConfigJson["sla"],
					"reqd_mgrDashboardConfigJson_shipmentStatus": mgrDashboardConfigJson["shipmentStatus"],
					"commonCodeListData": commonCodeListData
				}
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.shipment.list.shipment-list
			 *@method uiCallRequiredMashups
			 *@description Method is invoked when user selects a new status/tab on the UI. It calls callRequiredMashups with the currently selected status/tab.
			 *@param {String} uiSelectedStatus - The currently selected status/tab.
			 */
			uiCallRequiredMashups: function(uiSelectedStatus) {
				if (this.ui.apiCallInProgress) {
					// set the original tab in focus and return
					return;
				}
				this.ui.isLastPage = false;
				this.ui.pageAction = "START";
				this.ui.isNextPageLoadCall = false;
				this.callRequiredMashups(uiSelectedStatus);
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.shipment.list.shipment-list
			 *@method uiShowManagerDashboard
			 *@description Method is invoked when user selects the dashboard chart icon to go back to the manager dashboard charts.
			 */
			uiShowManagerDashboard: function() {
				iscState.goToState("/manager-dashboard", {}, {});
			},
			/**
			 *@iscdoc method
			 *@viewname store.views.shipment.list.shipment-list
			 *@method uiGetShipmentListNext
			 *@description Method is invoked when user scroll results in request to load the next page for the currently selected status/tab. It calls the callRequiredMashups method.
			 */
			uiGetShipmentListNext: function() {
				if (this.ui.isLastPage) {
					return;
				}
			    this.ui.pageAction = "NEXT";
				this.ui.isNextPageLoadCall = true;
				this.callRequiredMashups();
	        },
			/**
			 *@iscdoc method
			 *@viewname store.views.shipment.list.shipment-list
			 *@method uiNextPageActionValidator
			 *@description As a part of isc-pagination directive, this method validates if the next page request should be sent or not. If the API call is in progress already, then the request is not made.
			 */
			uiNextPageActionValidator: function() {
				var callNextPage = true;
				if (this.ui.apiCallInProgress) {
					callNextPage = false;
				}
				return callNextPage;
			}
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.search.shipment-search
 *@package store.views.shipment.search
 *@class shipment-search
 *@description Displays shipment search criterea and search results.
 *
 */

angular.module('store').controller('store.views.shipment.search.shipment-search',
		  ['$scope','$rootScope','iscScreen','iscMashup','iscResourcePermission','iscState','iscStateParams','iscPrint','iscAppContext','iscI18n','iscModal','iscObjectUtility','iscShipment',
			function($scope,$rootScope,iscScreen,iscMashup,iscResourcePermission,iscState,iscStateParams,iscPrint,iscAppContext,iscI18n,iscModal,iscObjectUtility,iscShipment) {				
				iscScreen.initializeScreen($scope,{

					model:{
						/**
						*@iscdoc model
						*@viewname store.views.shipment.search.shipment-search
						*@name shipmentList
						*@description This model contains the getShipmentList api output from getShipmentList mashup.
						*/
						"shipmentList" : {}
					},

					mashupRefs : [
						{
							/**
							 *@iscdoc mashup
							 *@viewname store.views.shipment.search.shipment-search
							 *@mashupid shipmentSearch_getShipmentList_custom
							 *@mashuprefid getShipmentList
							 *@modelname shipmentList
							 *@description Mashup used to search for shipments for client side pagination.
							 */
							mashupRefId: 'getShipmentList',
							mashupId: 'shipmentSearch_getShipmentList_custom',
							modelName : 'shipmentList',
							handler : "massageShipmentListOutput"
						},
						{
							/**
							 *@iscdoc mashup
							 *@viewname store.views.shipment.search.shipment-search
							 *@mashupid shipmentSearch_getShipmentList_custom_paginated
							 *@mashuprefid getShipmentListPaginated
							 *@modelname shipmentList
							 *@description Mashup used to search for shipments for server side pagination.
							 */
							mashupRefId: 'getShipmentListPaginated',
							mashupId: 'shipmentSearch_getShipmentList_custom_paginated',
							modelName : 'shipmentList',
							isPaginated: true,
							pageSize : iscAppContext.isMobile()?5:20,
							append : true,
							appendPath : 'Shipments.Shipment',
							handler : "massageShipmentListPaginatedOutput"
						}
					],

					subscribers : [
						{
							'event':'$handleBackButton',
							'handler':'_handleBackButton' 		
						},
						{
							'event':'$beforeStateChange',
							'handler':'_handleBeforeStateChange' 		
						}
				    ],

					ui:{
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.search.shipment-search
						 *@property {Boolean}  showResults - Boolean value to show-hide search results.
						 */
						showResults : false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.search.shipment-search
						 *@property {String}  currentStore - Current store's ShipNode attribute.
						 */
						currentStore : iscAppContext.getFromContext("storeName"),
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.search.shipment-search
						 *@property {Object}  search - model to keep search criteria attributes.
						 */
						search : {
							OrderBy:{
								Attribute:{
									Name:"ExpectedShipmentDate",
									Desc:"Y"
								}
							},
							deliveryMethod : "",
							barCodeData : "",
							searchStatus : "",
							action : "",
							mode : "CustomerPickup"
						},
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.search.shipment-search
						 *@property {String}  barCodeType - BarCodeType for order scan.
						 */
						barCodeType : "StoreCoupon1",
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.search.shipment-search
						 *@property {Boolean}  serachInBackContext - Booleam value to track whether sarch is happening after coming back to search screen from any other screen.
						 */
						serachInBackContext : false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.search.shipment-search
						 *@property {Number}  oLineShownCount - Total number of displayed shipments in client side pagination.
						 */
						oLineShownCount : iscAppContext.isMobile()?10:20,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.search.shipment-search
						 *@property {Number}  oPageSize - Page size for client side pagination.
						 */
						oPageSize : iscAppContext.isMobile()?5:10,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.search.shipment-search
						 *@property {Boolean}  oIsServerSidePaginatedSearch - Boolean value to track if server side pagiation is implemented.
						 */
						oIsServerSidePaginatedSearch : true,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.search.shipment-search
						 *@property {String}  oPaginationAction - will contain value as START or NEXT depending on whether server side pagination is starting or already in progress.
						 */
						oPaginationAction : 'START',
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.search.shipment-search
						 *@property {Boolean} fetchNextRecords - Value used for requestedActionValidator attribute of continous scrolling directive,
						 * shows the readiness of the screen to fetch next set of paginated records when server side pagination is used.
						 */
						fetchNextRecords : true
					},

					/**
					 *@iscdoc viewinit
					 *@viewname store.views.shipment.search.shipment-search
					 *@method initialize
					 *@description Initializes the search screen. It also checks if screen is opened by clicking back button, then it will automatically fire the search to fetch results again.
					 */
					initialize : function(){
						if(iscStateParams.params){ 
							if(iscStateParams.params.searchStatus){
								this.ui.search.searchStatus = iscStateParams.params.searchStatus;
							}
							if(iscStateParams.params.deliveryMethod){
								this.ui.search.deliveryMethod = iscStateParams.params.deliveryMethod;
							}
							if(iscStateParams.params.mode){
								this.ui.search.mode = iscStateParams.params.mode;
							}
							
							if(iscStateParams.params.orderNo){
								this.ui.search.OrderNo = iscStateParams.params.orderNo;
								this.uiGetShipmentListForSearch();
							}
							
						}
						//console.log('shipment search screen initialized');
						if(iscStateParams.options && iscStateParams.options.backOptions){
							//it means page is visited by clicking on back button
							this.ui.serachInBackContext = true;
							this.ui.search = angular.copy(iscStateParams.options.backOptions);
							delete iscStateParams.options.backOptions;
							if(this.ui.search.barCodeData)
								this.ui.search.OrderNo = this.ui.search.barCodeData;//this is done for order no scanning (as ui.search.OrderNo will be set to "" when scan completes)
							this.fireSearchOnBackOrNext();
						}
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname resetBackAndPaginationAttributes
					 *@description This method resets all back and pagination related attributes when search is fired again by clickin search button or scanning order.
					 */
					resetBackAndPaginationAttributes : function(){
						//set other search related params
						this.ui.showResults = false;
						this.ui.serachInBackContext = false;
						this.ui.oLineShownCount = iscAppContext.isMobile()?10:20;
						this.ui.oPageSize = iscAppContext.isMobile()?4:5;
						this.ui.oPaginationAction='START';
						this.ui.fetchNextRecords=true;
						this.model.shipmentList = {};
					},

					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname massageShipmentListOutput
					 *@description This method massages the api output to set StatusDisplayDescription for all shipments.
					 *@param {Object} shipmentList - output shipment list.
					 */
					massageShipmentListOutput : function(shipmentList){
						if(iscCore.getValueFromJsonPath(shipmentList, 'Shipments.Shipment')){
							for(var i=0; i<shipmentList.Shipments.Shipment.length; i++){
								var shipment = shipmentList.Shipments.Shipment[i];
								shipment.StatusDisplayDescription = iscShipment.getShipmentStatusDescription(shipment);
							}
						}
						return shipmentList;
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname massageShipmentListPaginatedOutput
					 *@description This method massages the paginated api output to set StatusDisplayDescription for all shipments. It internally invokes massageShipmentListOutput method.
					 *@param {Object} pageOutput - output from paginated mashup call.
					 */
					massageShipmentListPaginatedOutput : function(pageOutput){
						if(iscCore.getValueFromJsonPath(pageOutput, 'Page.Output')){
							pageOutput.Page.Output = this.massageShipmentListOutput(pageOutput.Page.Output);
						}
						return pageOutput;
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname fireSearchOnBackOrNext
					 *@description This method massages the paginated api output to set StatusDisplayDescription for all shipments. It internally invokes massageShipmentListOutput method.
					 */
					fireSearchOnBackOrNext : function(){
						var action = this.ui.search.action;
						if(action){
							if(action === 'search')
								this.uiGetShipmentListForSearch();
							else if(action === 'scan')
								this.uiGetShipmentListForScan();
						}
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname uiGetShipmentListForSearch
					 *@description This method invokes list mashup when user clicks on Search button to search for shipments.
					 *@param {Object} event - Event object from search event.
					 */
					uiGetShipmentListForSearch : function(event){
						if(event){
							this.resetBackAndPaginationAttributes(); //if event is found then it means specific action of serach has been performed. So reset back/pagination context attribute
						}
						var that = this;
						this.ui.search.action = "search";
						this.ui.search.barCodeData = "";
						var searchInput = this.getSearchCriteria('search');
						this.invokeListMashup(searchInput, {}, 'handleSearch');
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname uiGetShipmentListForScan
					 *@description This method invokes list mashup when user scans order to search for shipments.
					 *@param {Object} event - Event object from scan event
					 */
					uiGetShipmentListForScan : function(event){
						if(event){
							this.resetBackAndPaginationAttributes(); //if event is found then it means specific action of scan has been performed. So reset back/pagination context attribute
						}
						if(!iscCore.isVoid(this.ui.search.OrderNo))
							this.ui.search.OrderNo = iscObjectUtility.trimString(this.ui.search.OrderNo);
						if(iscCore.isVoid(this.ui.search.OrderNo)){
							iscModal.showErrorMessage(iscI18n.translate('shipmentsearch.MSG_InvalidBarCodeData'));
						}else{
							this.ui.search.action = "scan";
							this.ui.search.barCodeData = this.ui.search.OrderNo;//this is done for order no is scanning (as ui.search.OrderNo will be set to "" when scan completes)
							var scanInput = this.getSearchCriteria('scan');
							scanInput.Shipment.BarCode = {"BarCodeData" : this.ui.search.OrderNo, "BarCodeType" : this.ui.barCodeType};
							this.invokeListMashup(scanInput, {}, 'handleScan');
						}
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname getSearchCriteria
					 *@description This method fetches search attributes for a given search type.
					 *@param {String} searchType - Type of search executed, search or scan
					 */
					getSearchCriteria : function(searchType){
						var shipment = {};
						if(searchType != "scan"){
							shipment =  {"Shipment":
											{
												//"AssignedToUserId":this.ui.search.AssignedToUserId,
												"ShipmentNo":this.ui.search.ShipmentNo,
												"ShipNode":(this.ui.search.inlcudeOtherShipnodes)?"":iscAppContext.getFromContext("storeName"),
												"DeliveryMethod":(!this.ui.search.deliveryMethod || this.ui.search.deliveryMethod == "BOTH")?"":this.ui.search.deliveryMethod,
												"BillToAddress":this.ui.search.BillToAddress,										
												"OrderBy":this.ui.search.OrderBy,
												"ShipmentLines":{
													"ShipmentLine":{
														"OrderNo":this.ui.search.OrderNo,
														"OrderNoQryType":"FLIKE"
													}
												}
											}
										};
						}else{
							shipment =  {"Shipment":
											{
												"ShipNode":(this.ui.search.inlcudeOtherShipnodes)?"":iscAppContext.getFromContext("storeName"),
												"DeliveryMethod":(!this.ui.search.deliveryMethod || this.ui.search.deliveryMethod == "BOTH")?"":this.ui.search.deliveryMethod,
												"OrderBy":this.ui.search.OrderBy,
											}
										};
						}
						if(this.ui.search.searchStatus){
							//if status is passed in the inpput then search for that status only
							shipment.Shipment.Status = this.ui.search.searchStatus;
						}else{
							//otherwise get the list of status applicable for a delivery method(not required as of now)
							//shipment.Shipment.StatusList = this.getShipmentStatusList(this.ui.search.deliveryMethod).StatusList;
						}
						//console.log(shipment);
						return shipment;
					},

					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname invokeListMashup
					 *@description This method invokes the list mashup, paginated or non paginated one.
					 *@param {Object} mashupInput - input for the mashup.
					 *@param {Object} mashupOptions - additional options for mashup call.
					 *@param {String} actionHandler - handler function name once mashup call gets finished
					 *@param {Boolean} isPaginated - attribute to tell whether mashup call has to be paginated or not.
					 */
					invokeListMashup : function(mashupInput, mashupOptions, actionHandler, isPaginated){
						if(!this.ui.oIsServerSidePaginatedSearch){
							iscMashup.callMashup(this, 'getShipmentList', mashupInput, mashupOptions).then(this[actionHandler].bind(this),angular.noop);
						}else{
							if (this.ui.fetchNextRecords === true) {
								iscMashup.callPaginatedMashup(this, 'getShipmentListPaginated', mashupInput, this.ui.oPaginationAction, mashupOptions).then(this[actionHandler].bind(this),angular.noop);
								this.ui.fetchNextRecords = false;
							}
						}
					},

					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname handleScan
					 *@description This method handles the scan mashup call. It internally invokes handleSearch method.
					 *@param {Object} data - ouput object from mashup call.
					 */
					handleScan : function(data){
						this.ui.search.OrderNo = "";
						this.handleSearch(data);
					},

					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname handleSearch
					 *@description This method handles the search mashup call. It internally invokes handleResults with mashup output based on whether mashup call is paginated or not.
					 *@param {Object} data - ouput object from mashup call.
					 */
					handleSearch : function(data){
						this.ui.fetchNextRecords = true;
						var output = {}, shipmentList = [];
						if(!this.ui.oIsServerSidePaginatedSearch){
							output = iscMashup.getMashupOutput(data,"getShipmentList");
							shipmentList = (iscCore.getValueFromJsonPath(output, 'Shipments.Shipment'))?output.Shipments.Shipment:[];
							this.handleResults(shipmentList);
						}else{
							output = iscMashup.getMashupOutput(data,"getShipmentListPaginated");
							shipmentList = (iscCore.getValueFromJsonPath(output,'Page.Output.Shipments.Shipment'))?output.Page.Output.Shipments.Shipment:[];
							if(this.ui.oPaginationAction === 'START'){
								this.handleResults(shipmentList);
							}
						}
						
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname handleResults
					 *@description This method handles the result from mashup call. If will show list of shipment if no of shipments returned is more than one. 
					 *             If only one shipment is returned and search is not withing back context, then it will directly go to applicable task detatils screen.
					 *             If number of shipment returned is zero then it invokes showError method to display error..
					 *@param {Object} shipmentList - ouput object from mashup call.
					 */
					handleResults: function(shipmentList){
						if(shipmentList.length > 0){
							if(shipmentList.length === 1 && !this.ui.serachInBackContext){
								if(this.ui.search.mode === 'CustomerPickup' && iscObjectUtility.stringStartsWith(shipmentList[0].Status.Status , "1100.70.06.30") && iscResourcePermission.hasPermission('WSC000001'))
									this.startCustomerPickup(shipmentList[0].ShipmentKey); //start customer pickup when there is only one result with status ready for customer
								else
									this.ui.showResults = true;
							}else{
								this.ui.showResults = true;
							}
						}else{
							this.showError();
						}
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname showError
					 *@description This method displays Shipment not found error when no of shipments is zero. 
					 */
					showError: function(){
						iscModal.showErrorMessage(iscI18n.translate('shipmentsearch.SHIPMENT_NOT_FOUND'));
					},

					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname uiFetchNextRecords
					 *@description This method is invoked from pagination directive to check if screen is ready to fetch next page or not. 
					 */
					uiFetchNextRecords: function(){
						return this.ui.fetchNextRecords;
					},

					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname uiGetShipmentListNext
					 *@description This method is invoked from pagination directive for continuous scrolling. For client side pagination this method will simply increases oLineShownCount by
					 *             defined pagesize. For Server side pagination it will invoke mashup to fetch next page.
					 */
					uiGetShipmentListNext: function(){
						if(!this.ui.oIsServerSidePaginatedSearch){
							if(this.ui.oLineShownCount <= this.model.shipmentList.Shipments.Shipment.length){
								this.ui.oLineShownCount += this.ui.oPageSize;
							}
						}else{
							this.ui.oPaginationAction = 'NEXT';
							this.fireSearchOnBackOrNext();
						}
					},

					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname getShipmentStatusList
					 *@description Returns list of applicable status based on delivery method
					 *@param {String} deliveryMethod - Delivery method for shipment.
					 */
					getShipmentStatusList : function(deliveryMethod){
					  var statusModel;
						if ( !deliveryMethod || deliveryMethod === " " || deliveryMethod === "" || deliveryMethod==="BOTH") {
							statusModel = { "StatusList" :
								{ "Status" : [
									{"StatusCode":"1100.70.06.10"},
									{"StatusCode":"1100.70.06.20"},
									{"StatusCode":"1100.70.06.30"},
									{"StatusCode":"1100.70.06.50"},
									{"StatusCode":"1100.70.06.70"},
									{"StatusCode":"1300"},
									{"StatusCode":"1400"}
								]}
							};
							return statusModel;
						} else if ( deliveryMethod === "SHP" ) {
							statusModel = { "StatusList" :
								{ "Status" : [ 
									{"StatusCode":"1100.70.06.10"},
									{"StatusCode":"1100.70.06.20"},
									{"StatusCode":"1100.70.06.50"},
									{"StatusCode":"1100.70.06.70"},
									{"StatusCode":"1300"},
									{"StatusCode":"1400"}
								]}
							};
							return statusModel;
						} else if ( deliveryMethod === "PICK" ) {
							statusModel = { "StatusList" :
								{ "Status" : [ 
									 {"StatusCode":"1100.70.06.10"},
									 {"StatusCode":"1100.70.06.20"},
									 {"StatusCode":"1100.70.06.30"},
									 {"StatusCode":"1400"}
								]}
							};
							return statusModel;				
						}
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname uiInvokeNextAction
					 *@description This method invokes applicable action based on taskId.
					 *@param {Object} shipment - Shipment object.
					 *@param {String} taskId - taskId of the applicable action.
					 */
					uiInvokeNextAction : function(shipment, taskId){
						if(taskId === 'TASK_CustomerPickup')
							this.startCustomerPickup(shipment.ShipmentKey);
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname startCustomerPickup
					 *@description This method will take the user to Customer Pickup screen.
					 *@param {String} shipmentKey - ShipmentKey of the shipment.
					 */
					startCustomerPickup : function(shipmentKey){
						iscState.goToState('customerpickup',{"ShipmentKey":shipmentKey},{});
						//this.model.shipmentList.Shipments.Shipment[0].Status.Status = "1100.70.06.30";
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname uiOpenShipmentSummary
					 *@description This method will take the user to Shipment Summary screen.
					 *@param {String} shipmentKey - ShipmentKey of the shipment.
					 *@param {Object} event - Event object for click event on order number link.
					 */
					uiOpenShipmentSummary : function(shipmentKey, event){
						iscState.goToState('shipmentsummary',{"ShipmentKey":shipmentKey},{});
					},

					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname uiShowSearch
					 *@description This method will display the search criteria screen and will hide the results screen.
					 */
					uiShowSearch : function(){
						this.ui.showResults = false;
					},

					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname _handleBackButton
					 *@description This method intercepts the global back button handling call and if results screen is displayed then it will stop the global action and will show search screen.
					 */
					_handleBackButton : function(e,data){
						if(this.ui.showResults){
						  e.preventDefault();
						  this.uiShowSearch();
						}
					},

					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.search.shipment-search
					 *@methodname _handleBeforeStateChange
					 *@description This method is invoked before state of screen is changed. It saves the search state before state changes so that this state can be reused when user comes back 
					 *             to this screen.
					 */
					_handleBeforeStateChange : function(e, data){
						//adding search criteria in current state's options so that it can be used when user comes back to this page
						if(!iscState.currentState.options)
							iscState.currentState.options = {};
						iscState.currentState.options.backOptions = angular.copy(this.ui.search);
					}					

				});
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.summary.shipment-summary
 *@package store.views.shipment.summary
 *@class shipment-summary
 *@description Displays shipment summary screen.
 *
 */

angular.module('store').controller('store.views.shipment.summary.shipment-summary',
		  ['$scope','$rootScope','iscScreen','iscMashup','iscResourcePermission','iscState','iscStateParams','iscPrint','iscAppContext','iscI18n','iscModal','iscShipment','iscAppInfo','iscPayment','iscPaymentinput','$timeout',
			function($scope,$rootScope,iscScreen,iscMashup,iscResourcePermission,iscState,iscStateParams,iscPrint,iscAppContext,iscI18n,iscModal,iscShipment,iscAppInfo,iscPayment,iscPaymentinput,$timeout) {				
				iscScreen.initializeScreen($scope,{

					model:{
					  /**
					   *@iscdoc model
					   *@viewname store.views.shipment.summary.shipment-summary
					   *@name paymentSummary
					   *@description Stores the payment details associated with the shipment
					   */
						"paymentSummary":{}
					},

					mashupRefs : [
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.summary.getShipmentDetails
							*@mashuprefid getShipmentDetails
							*@modelname shipmentModel
							*@description Gets the details associated with the shipment being loaded.
							*/
							mashupRefId: 'getShipmentDetails',
							mashupId: 'store.views.shipment.summary.getShipmentDetails',
							modelName: "shipmentModel"
						},
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.summary.getShipmentAdditionalDetails
							*@mashuprefid getShipmentAdditionalDetails
							*@modelname shipmentAdditionalDetailsModel
							*@description Gets additional details associated with the shipment to be displayed in the panel.
							*/
							mashupRefId: 'getShipmentAdditionalDetails',
							mashupId: 'store.views.shipment.summary.getShipmentAdditionalDetails',
							modelName: "shipmentAdditionalDetailsModel"
						},
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.summary.getShipmentLineList
							*@mashuprefid getShipmentLineList
							*@modelname shipmentLinesModel
							*@description Gets details to be displayed in the 'Products' panel of the summary screen.
							*/
							mashupRefId: 'getShipmentLineList',
							mashupId: 'store.views.shipment.summary.getShipmentLineList',
							modelName: "shipmentLinesModel"
						},
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.summary.getShipmentContainerList
							*@mashuprefid getShipmentContainerList
							*@modelname shipmentContainersModel
							*@description Gets details to be displayed in the 'Packages' panel of the summary screen.
							*/
							mashupRefId: 'getShipmentContainerList',
							mashupId: 'store.views.shipment.summary.getShipmentContainerList',
							modelName: "shipmentContainersModel"
						},
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.containerpack.StoreLabelReprint_94
							*@mashuprefid reprintCarrierLabel
							*@description Prints the carrier label associated with a package.
							*/
							mashupRefId: 'reprintCarrierLabel',
							mashupId: 'store.views.shipment.containerpack.StoreLabelReprint_94'
						},
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.containerpack.deleteContainer
							*@mashuprefid deleteContainerProducts
							*@description Deletes the current package from the shipment.
							*/
							mashupRefId: 'deleteContainerProducts',
							mashupId: 'store.views.shipment.containerpack.deleteContainer'
						},
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.containerpack.print_packSlip
							*@mashuprefid reprintPackSlip
							*@description Prints the pack slip associated with a package.
							*/
                        	mashupRefId: 'reprintPackSlip',
                            mashupId: 'store.views.shipment.containerpack.print_packSlip'
                        	
                        },
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.summary.getContainerShipmentLines
							*@mashuprefid getContainerShipmentLines
							*@description Gets the products associated with a particular package.
							*/
							mashupRefId: 'getContainerShipmentLines',
							mashupId: 'store.views.shipment.summary.getContainerShipmentLines'
						},
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.summary.getPaymentTypeList
							*@mashuprefid getPaymentTypeList
							*@modelname getPaymentTypeList
							*@description Gets list of payment types for the current store.
							*/
							mashupRefId: 'getPaymentTypeList',
							mashupId: 'store.views.shipment.summary.getPaymentTypeList',
							modelName : 'getPaymentTypeList'
						},
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.summary.PaymentCardTypeConfLevel
							*@mashuprefid getPaymentCardTypeList
							*@modelname getPaymentCardTypeList
							*@description Gets list of payment card types (credit card types) for the current store.
							*/
							mashupRefId: 'getPaymentCardTypeList',
							mashupId: 'store.views.shipment.summary.PaymentCardTypeConfLevel',
							modelName : 'getPaymentCardTypeList'
						},
						{
							/**
							*@iscdoc mashup
							*@viewname store.views.shipment.summary.shipment-summary
							*@mashupid store.views.shipment.summary.getShipmentPaymentDetails
							*@mashuprefid getShipmentPaymentDetails
							*@modelname getShipmentPaymentDetails
							*@description Gets list of payment methods associated with the shipment.
							*/
							mashupRefId: 'getShipmentPaymentDetails',
							mashupId: 'store.views.shipment.summary.getShipmentPaymentDetails',
							modelName : 'getShipmentPaymentDetails'
						}
					],

					ui:{
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {String} shipmentKey - Unique identifier of a shipment.
						 */
						shipmentKey: "",
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {String} StatusBundleKey - Key that computed based on shipment status. This key is read from bundle file to display appropriate shipment status on UI.
						 */
						StatusBundleKey: "",
						showBackRoomPickButton: false,
						showPackButton: false,
						showCustomerPickButton: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} showHoldLocation - Flag to decide whether staging location should be shown on UI or not. The decision is based on shipment status.
						 */
						showHoldLocation: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {String} slaImageFullURL - URL computed to show the SLA icon
						 */
						slaImageFullURL:"",
						showProductAccordion: true,
						currentAccordianTabOpen: 'PRODUCT',
						closeAllAccordianTabs: true,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} showAnotherStoreWarningMessage - Flag to decide whether warning message should be shown for shipment fulfilled by another store.
						 */
						showAnotherStoreWarningMessage: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} showOrderSLA - Flag to decide whether SLA icon should be shown or not.
						 */
						showOrderSLA: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} isPickupShipment - Flag set to true if shipment delivery method is PICK.
						 */
						isPickupShipment: false,
						pageSize: 10,
						shipmentLinesShownCount:20,
						packagesShownCount:20,
						flowName: "",
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} detailedShipmentInfoShown - Flag to toggle the Show info and Hide info links.
						 */
						detailedShipmentInfoShown: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {String} shipmentPreviewTemplate - HTML template of the pop-over that comes in mobile resolution.
						 */
						shipmentPreviewTemplate:'store/views/shipment/summary/shipment-summary-popover-preview.tpl.html',
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} showSuccessMessagePanel - Flag to decide if success message panel should be shown or not.
						 */
						showSuccessMessagePanel: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {String} successPanelMessage - Success message that shown on the summary page.
						 */
						successPanelMessage: "",
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} isShipmentCancelled - Flag set to true if shipment status is cancelled.
						 */
						isShipmentCancelled: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} isShipmentShipped - Flag set to true if shipment status is shipped.
						 */
						isShipmentShipped: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} isInProgressStatus - Flag set to true if shipment status is packing/picking in progress.
						 */
						isInProgressStatus: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} isInReadyForPickingStatus - Flag set to true if shipment status is ready for backroom pick.
						 */
						isInReadyForPickingStatus: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} isShipmentPacked - Flag set to true if shipment status is packed.
						 */
						isShipmentPacked: false,
						/**
						 *@iscdoc uiattr
						 *@viewname store.views.shipment.summary.shipment-summary
						 *@property {Boolean} showPackageContent - Flag used to reload the packages panel when a package is deleted.
						 */
						showPackageContent: true
					},
					
					/**
					 *@iscdoc viewinit
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@method initialize
					 *@description Initializes the summary screen by calling all the mashups associated with the shipment.
					 */
					initialize : function(){
						var shipmentKey = iscStateParams.params.input.Shipment.ShipmentKey;
						/*if(iscStateParams.params.input.flowName) {
							this.ui.flowName = iscStateParams.params.input.flowName;
						}*/
						this.ui.shipmentKey = shipmentKey;
						this.callInitMashups(this.ui.shipmentKey);
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname callInitMashups
					 *@description Fetches the data associated with a shipment to be shown on the summary screen. 
					 *@param {String} shipmentKey - Key to fetch the details associated with a shipment 
					 */
					callInitMashups: function(shipmentKey) {
						var shipmentSummaryMashupInput = {};
						shipmentSummaryMashupInput.Shipment = {};
						shipmentSummaryMashupInput.Shipment.ShipmentKey = shipmentKey;
						
						var getShipmentContainerListInput = {};
						getShipmentContainerListInput.Shipment = {};
						getShipmentContainerListInput.Shipment.ShipmentKey = shipmentKey;
						getShipmentContainerListInput.Shipment.isTrackingURLRequired = "Yes";
						
						var mashupArray = [];
						mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentDetails',shipmentSummaryMashupInput));
						mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentAdditionalDetails',shipmentSummaryMashupInput));
						mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentLineList',shipmentSummaryMashupInput));
						mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentContainerList',getShipmentContainerListInput));
						iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitMashupOutput.bind(this));
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname handleInitMashupOutput
					 *@description Success handler for the init mashup call.
					 */
					handleInitMashupOutput: function(data) {
						if(!iscCore.isVoid(this.model.shipmentModel.Shipment.Status) && !iscCore.isVoid(this.model.shipmentModel.Shipment.Status.Status)){
							var shipmentStatus = this.model.shipmentModel.Shipment.Status.Status;
							this.model.shipmentModel.Shipment.Status.StatusBundleKey = shipmentStatus.replace(/\./g, "_");
							if(shipmentStatus.indexOf("1400") == 0){
								this.model.shipmentModel.Shipment.Status.StatusBundleKey = this.model.shipmentModel.Shipment.Status.StatusBundleKey+"_"+this.model.shipmentModel.Shipment.DeliveryMethod;
								this.ui.isShipmentShipped = true;
							}
							
							if(shipmentStatus.indexOf("9000") == 0) {
								this.ui.isShipmentCancelled = true;
							}
							
							if(shipmentStatus.indexOf("1100.70.06.20") == 0 || shipmentStatus.indexOf("1100.70.06.70") == 0) {
								this.ui.isInProgressStatus = true;
							}
							
							if(shipmentStatus.indexOf("1100.70.06.10") == 0) {
								this.ui.isInReadyForPickingStatus = true;
							}
							
							if(shipmentStatus.indexOf("1300") == 0){
								this.ui.isShipmentPacked = true;
							}
							
							if(iscI18n.hasKey("shipmentsummary.LABEL_"+this.model.shipmentModel.Shipment.Status.StatusBundleKey)){
								this.model.shipmentModel.Shipment.Status.StatusDisplay = iscI18n.translate("shipmentsummary.LABEL_"+this.model.shipmentModel.Shipment.Status.StatusBundleKey);
							} else {
								this.model.shipmentModel.Shipment.Status.StatusDisplay = this.model.shipmentModel.Shipment.Status.Description;
							}
						}
						
						this.ui.showPackageContent = true;
						this.showDifferentStoreWarningMessage();
						this.showHoldLocationOrNot();
						iscShipment.generateProductImageURL(this.model.shipmentLinesModel);
						this.formatProductQuantity();
						this.setSLAImageURL();
						
						//this.ui.showProductAccordion = true;
						if(this.model.shipmentModel.Shipment.DeliveryMethod == 'PICK')
							this.ui.isPickupShipment = true;
						
						var shipmentPaymentMashupInput = {};
						shipmentPaymentMashupInput.Shipment = {};
						shipmentPaymentMashupInput.Shipment.ShipmentKey = this.model.shipmentModel.Shipment.ShipmentKey;
						
						var mashupArray = [];
						mashupArray.push(iscMashup.getMashupRefObj(this,"getShipmentPaymentDetails",shipmentPaymentMashupInput));
						mashupArray.push(iscMashup.getMashupRefObj(this,"getPaymentTypeList",iscPaymentinput.getPaymentTypeListInputForShipment(this.model.shipmentModel)));
						mashupArray.push(iscMashup.getMashupRefObj(this,"getPaymentCardTypeList",iscPaymentinput.getPaymentCardTypeListInputForShipment(this.model.shipmentModel)));
						iscMashup.callMashups(this,mashupArray,{}).then(function(data){
							this.setPaymentDetails(data);
						}.bind(this),angular.noop);
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname setPaymentDetails
					 *@description 	Success handler for 'getShipmentPaymentDetails' mashup that sets the model for shipment payment.
					 */
					setPaymentDetails : function(output) {
						var paymentOutput = iscMashup.getMashupOutput(output,'getShipmentPaymentDetails');
						var shipmentPaymentMethodsToShow = iscPayment.prepareShipmentPaymentData(paymentOutput,this.model.getPaymentTypeList.PaymentTypeList,this.model.getPaymentCardTypeList.PaymentCardTypeList);
						this.model.paymentSummary.paymentDetails = shipmentPaymentMethodsToShow.paymentDetails;
				  		this.model.paymentSummary.paymentMethodsAvailable= shipmentPaymentMethodsToShow.paymentMethodsAvailable;
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname setSLAImageURL
					 *@description 	Sets the SLA icon and checks if the SLA icon can be shown on UI or not.
					 */
					setSLAImageURL:function() {				
						var slaImageRelativePath = this.model.shipmentModel.Shipment.ImageUrl;
						if(slaImageRelativePath) {
							this.ui.slaImageFullURL =  window.location.protocol+"//"+window.location.host+iscAppInfo.getApplicationContext()+"/"+slaImageRelativePath;
						}
						
						var shipmentStatus = this.model.shipmentModel.Shipment.Status.Status?this.model.shipmentModel.Shipment.Status.Status:this.model.shipmentModel.Shipment.Status;
						this.ui.showOrderSLA = iscShipment.isStatusPresentInList_showSLA(shipmentStatus);
						
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname showHoldLocationOrNot
					 *@description 	Checks if the staging location be shown on UI or not based on the shipment status.
					 */
					showHoldLocationOrNot: function() {
						var shipmentStatus = this.model.shipmentModel.Shipment.Status.Status?this.model.shipmentModel.Shipment.Status.Status:this.model.shipmentModel.Shipment.Status;
						var holdLocation = this.model.shipmentModel.Shipment.HoldLocation;
						if(!iscCore.isVoid(holdLocation) && iscShipment.isStatusPresentInList_holdLocation(shipmentStatus)) {
							this.ui.showHoldLocation = true;
						}
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname showDifferentStoreWarningMessage
					 *@description 	Checks if the shipment belongs to current store. If not, sets the warning message to be shown on UI.
					 */
					showDifferentStoreWarningMessage: function() {
						var currentStoreName = iscAppContext.getFromContext("storeName");
						var shipNode = this.model.shipmentModel.Shipment.ShipNode.ShipNode;
						if(currentStoreName != shipNode) {
							this.ui.showAnotherStoreWarningMessage = true;
						}
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname formatProductQuantity
					 *@description 	Handles the logic to show picked, packed and shortage quantity on UI.
					 */
					formatProductQuantity: function() {
						var shipmentModel = this.model.shipmentModel;
						var shipmentLinesModel = this.model.shipmentLinesModel;
						var packingInProgressStatus = "1100.70.06.70";
						var shipmentpackedStatus  = "1300";
						var shippedStatus = "1400";
						var backroomPickInProgressStatus = "1100.70.06.20";
						var readyForPackingStatus = "1100.70.06.50";
						var readyForCustomerPickStatus = "1100.70.06.30";
						
						for (var i=0; i< shipmentLinesModel.ShipmentLines.ShipmentLine.length; i++) {
							var currentShipmentLine = shipmentLinesModel.ShipmentLines.ShipmentLine[i];
							currentShipmentLine.showPackedQuantity = currentShipmentLine.showPickedQuantity = false;
							var shipmentStatus = shipmentModel.Shipment.Status.Status;
							
							if(currentShipmentLine.ShortageQty && currentShipmentLine.ShortageQty > 0) {
								currentShipmentLine.showShortedQuantity = true;
							}
							
							if(shipmentStatus.match(packingInProgressStatus) || shipmentStatus.match(shipmentpackedStatus)) {
								if(currentShipmentLine.PlacedQuantity && currentShipmentLine.PlacedQuantity > 0) {
									currentShipmentLine.showPackedQuantity = true;
								}
							} else if (shipmentStatus.match(shippedStatus)) {
								currentShipmentLine.showShortedQuantity = false;
								currentShipmentLine.isShippedStatus = true;
							} else if(shipmentStatus.match(backroomPickInProgressStatus) || shipmentStatus.match(readyForPackingStatus) || shipmentStatus.match(readyForCustomerPickStatus)) {
								if(currentShipmentLine.BackroomPickedQuantity && currentShipmentLine.BackroomPickedQuantity > 0) {
									currentShipmentLine.showPickedQuantity = true;
								}
							}
						}
					},
					
					uiOpenTrackingURL: function(containerURL) {
						var height = "innerHeight" in window 
								 ? window.innerHeight
								 : document.documentElement.offsetHeight;
						var width = "innerWidth" in window 
							 ? window.innerWidth
							 : document.documentElement.offsetWidth;
						var dimensions = "width=" + width + ", height=" + height;			
						var parameters = dimensions + ",status=yes,toolbar=no,menubar=no,location=no,resizable=yes,scrollbars=yes";					
						var win = window.open(containerURL,"Product_name", parameters);
						win.focus();
					},
					
					uiGoToBackroomPickFlow: function() {
						iscState.goToState("backroomPickWizard", {
							input: {
								Shipment: {
									ShipmentKey: this.ui.shipmentKey
								}
							}
						}, {});
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname uiOpenProductDetail
					 *@description Opens the product detail pop-up when product image and link are clicked.
					 *@param {Object} shipmentLine - shipmentLine object that contains the ItemID for which pop-up needs to be opened. 
					 */
					uiOpenProductDetail: function(shipmentLine) {
						iscShipment.openProductDetail(shipmentLine);
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname uiGetContainerShipmentLines
					 *@description Calls the 'getContainerShipmentLines' mashup and loads the products associated with a package.
					 *@param {Object} container - package object with the ShipmentContainerKey for which the products are to be fetched
					 */
					uiGetContainerShipmentLines: function(container) {
						var getShipmentLineListInput = {
							ShipmentLine:{
								ShipmentContainerKey : container.ShipmentContainerKey,
								ShipmentKey : container.ShipmentKey,
								ContainerDetails:{
									ContainerDetail:{
										Container:{
											ShipmentContainerKey : container.ShipmentContainerKey,
											ShipmentKey : container.ShipmentKey
										}
										
									}
								}
							}
						};
						
						iscMashup.callMashup(this,'getContainerShipmentLines',getShipmentLineListInput,{})
						.then(function(response){
							container.shipmentContainerLineDetails = iscMashup.getMashupOutput(response,'getContainerShipmentLines');
						}.bind(this),angular.noop);
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname uiIsReprintCarrierLabelDisabled
					 *@description Enables or disables 'Reprint carrier label' related task based on the presence of tracking number.
					 *@param {Object} container - package object with the TrackingNo information
					 */
					uiIsReprintCarrierLabelDisabled : function(container){
						var isReprintCarrierLabelDisabled = iscCore.isVoid(container.TrackingNo);
						if(isReprintCarrierLabelDisabled) {
							container.isReprintCarrierLabelDisabled = true;
							return true;
						} else {
							container.isReprintCarrierLabelDisabled = false;
							return false;
						}
					},

					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname uiIsUnpackDisabled
					 *@description Enables or disables 'Unpack package' related task based on shipment status and manifest.
					 *@param {Object} container - package object with the shipment manifest information
					 */
					uiIsUnpackDisabled: function(container) {
						var currentStoreName = iscAppContext.getFromContext("storeName");
						var shipNode = this.model.shipmentModel.Shipment.ShipNode.ShipNode;
						var shipmentStatus = this.model.shipmentModel.Shipment.Status.Status?this.model.shipmentModel.Shipment.Status.Status:this.model.shipmentModel.Shipment.Status;

						if(currentStoreName == shipNode && container.IsManifested != 'Y' && !shipmentStatus.match('1400')) {
							container.isUnpackDisabled = false;
							return false;
						} else {
							container.isUnpackDisabled = true;
							return true;
						}
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname uiIsRePrintPackSlipDisabled
					 *@description Enables or disables 'Re-print packing slip' related task based on shipment status.
					 *@param {Object} container - package object 
					 */
					uiIsRePrintPackSlipDisabled: function(container) {
						var currentStoreName = iscAppContext.getFromContext("storeName");
						var shipNode = this.model.shipmentModel.Shipment.ShipNode.ShipNode;
						var shipmentStatus = this.model.shipmentModel.Shipment.Status.Status?this.model.shipmentModel.Shipment.Status.Status:this.model.shipmentModel.Shipment.Status;

						if(currentStoreName == shipNode && shipmentStatus.match('1300')) {
							container.isReprintPackSlipDisabled = false;
							return false;
						} else {
							container.isReprintPackSlipDisabled = true;
							return true;
						}

					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname uiReprintContainerLabel
					 *@description Re-prints the carrier label for the package
					 *@param {Object} container - package object with the TrackingNo
					 */
					uiReprintContainerLabel : function(container){
						if(container.isReprintCarrierLabelDisabled) {
							return;
						} else {
							if(!iscCore.isVoid(container.TrackingNo)){
								var input = {
									Container:{
										ShipmentContainerKey : container.ShipmentContainerKey,
										ShipmentKey : container.ShipmentKey
									}
								}
								iscMashup.callMashup(this,"reprintCarrierLabel",input,{})
									.then(function(controllerData){
										this.handleReprintLabel(controllerData,container);
									}.bind(this));
							}
						}
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname handleReprintLabel
					 *@description Success handler for the 'reprintCarrierLabel' mashup call.
					 */
					handleReprintLabel : function(controllerData,container){
						var labelOutput = iscMashup.getMashupOutput(controllerData,"reprintCarrierLabel");
						
						if(!iscCore.isVoid(labelOutput.Output.out)){
							iscShipment.decodeShippingLabelURL(labelOutput);
							$timeout(function(){
								iscPrint.printHtmlOutput(labelOutput);
								//highlight panel
							},0);
						}
						else{
							iscModal.showErrorMessage("shipmentsummary.MSG_PrintFailure");
							//highlight panel
						}
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname uiUnpackContainerProducts
					 *@description Unpacks and removes the package from the shipment
					 *@param {Object} container - package object with the ShipmentContainerKey to be removed
					 */
					uiUnpackContainerProducts:function(container){
						if(container.isUnpackDisabled) {
							return;
						} else {
							var that = this;
							iscModal.openModal('store.views.shipment.containerunpack.container-unpack-reason',{},{}).then(function(callBackData){
								if(!iscCore.isVoid(callBackData.data) && callBackData.data==="APPLY" && !iscCore.isVoid(callBackData.reasonCode)){
									var mashupInput = {};
									mashupInput.Shipment = {};
									mashupInput.Shipment.ShipmentKey = container.ShipmentKey;
									
									mashupInput.Shipment.Containers = {};
									mashupInput.Shipment.Containers.Container = {};
									//mashupInput.Shipment.Containers.Container.ContainerNo = container.ContainerNo;
									mashupInput.Shipment.Containers.Container.ShipmentContainerKey = container.ShipmentContainerKey;
									
									iscMashup.callMashup(that,"deleteContainerProducts",mashupInput,{})
									.then(function(controllerData){
										that.handleDeleteContainerProducts(controllerData,container.ContainerNo);
									}.bind(that),angular.noop);
								}
							}.bind(this));
						}
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname handleReprintLabel
					 *@description Success handler for the 'deleteContainerProducts' mashup call.
					 */
					handleDeleteContainerProducts: function(apiOutput,ContainerNo) {
						this.resetSummaryScreen(ContainerNo);
					},
					
					/**
					 *@iscdoc method
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname resetSummaryScreen
					 *@description Reloads the Shipment Summary screen after the package is removed and shows the updated information.
					 */
					resetSummaryScreen: function(ContainerNo) {
						this.ui.shipmentLinesShownCount = 20;
						this.ui.packagesShownCount = 20;
						this.ui.showPackageContent = false;
						this.ui.isShipmentPacked = false;
						this.callInitMashups(this.ui.shipmentKey);
						
						var deletedContainerNumber = ContainerNo;
						this.ui.successPanelMessage = iscI18n.translate('containerunpack.MSG_ContainerDeletedSuccessfully',{containerNumber:deletedContainerNumber});
						this.ui.showSuccessMessagePanel = true;
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname uiReprintPackSlip
					 *@description Re-prints the pack slip for the package
					 *@param {Object} container - package object with the ShipmentContainerKey
					 */
					uiReprintPackSlip: function(container) {
						if(container.isReprintPackSlipDisabled) {
							return;
						} else {
							var printPackSlipInput = {Shipment:{ShipmentKey:this.model.shipmentModel.Shipment.ShipmentKey, ShipmentContainerKey : container.ShipmentContainerKey }};
							//printPackSlipInput.ShipmentContainerKey = container.ShipmentContainerKey ;
									
							iscMashup.callMashup(this,"reprintPackSlip",printPackSlipInput,{}).then(function(response){
								var printPackSlipOutput = iscMashup.getMashupOutput(response,"reprintPackSlip");
								if(!iscCore.isVoid(printPackSlipOutput.Output.out)){
									$timeout(function(){
										iscPrint.printHtmlOutput(printPackSlipOutput);
									},0);
								}
								else{
									iscModal.showErrorMessage("shipmentsummary.MSG_PrintFailure");
								}
							},angular.noop								
							);
						}
					},
					
					uiGetShipmentLineListNext: function(){
						this.ui.shipmentLinesShownCount = this.ui.shipmentLinesShownCount + this.ui.pageSize;
					},
					
					uiShipmentLineScrollActionValidator: function(){
						if(this.model.shipmentLinesModel.ShipmentLines.ShipmentLine.length <= this.ui.shipmentLinesShownCount)
							return false;
						return true;
					},
					
					uiGetContainerListNext: function(){
						this.ui.packagesShownCount = this.ui.packagesShownCount + this.ui.pageSize;
					},
					
					uiContainerScrollActionValidator: function(){
						if(this.model.shipmentContainersModel.Containers.Container.length <= this.ui.packagesShownCount)
							return false;
						return true;
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname uiToggleInfo
					 *@description Toggles the showing of the details panel on click of 'Show info' and 'Hide info' links
					 */
					uiToggleInfo: function() {
						this.ui.detailedShipmentInfoShown = !this.ui.detailedShipmentInfoShown;
					},
					
					uiHandleRelatedTask: function(taskOutput) {
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.shipment.summary.shipment-summary
					 *@methodname uiGetFormattedOrderNo
					 *@description Gets the formatted order number for a shipment containing multiple order lines
					 *@param {String} displayOrderNo - order number for which the display information is needed
					 */
					uiGetFormattedOrderNo:function(displayOrderNo) {
						return iscShipment.getDisplayOrderNumber(displayOrderNo,'|',', ',false);
					}
				
				});
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodal
 *@viewname store.views.order.cancel.cancelorder
 *@package store.views.order.cancel
 *@class cancelorder
 *@description Controller used for handling cancelorder popup 
 *  
 */


angular.module('store').controller('store.views.appointments.common.add-view-notes.add-view-notes',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscModal','iscI18n',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscModal,iscI18n) {
		
	iscScreen.initializeModalScreen($scope,{
	
		model:{
			   /**
				*@description Holds the output data of getNoteList api. This is used to list the comments in the UI
				*/
				"noteList":{}
	  		},

	  		mashupRefs : [
	  		
	  				{
			  		  /**
	  		   			*@description Fetches notes for a order
	  		   			*/
	  		  		
						mashupRefId: 'getNoteList',
						mashupId: 'store.views.appointments.common.add-view-notes.getNoteList',
						modelName : 'noteList'								
					},
					
					{
						/**
                        *@description adds a note to a order
                        */
						
						mashupRefId: 'changeOrder',
						mashupId: 'store.views.appointments.common.add-view-notes.changeOrder'
						
					}
					
				],
				
				
				ui:{
					
				},
				
				/**
				 *@description Initializes the order comments modal by calling the getCancgetNoteList mashup.
				 */
				initialize : function(){
					var getNoteListInput = {};
					getNoteListInput.Note = {};
					getNoteListInput.Note.TableKey = modalInput.Order.OrderHeaderKey;
					iscMashup.callMashup(this,'getNoteList',getNoteListInput,{});
				},
				
				/**
				 *@description Handles the scenario when 'Cancel' button is clicked on the modal.
				 */
				uiClose : function () {
					$uibModalInstance.close(this.model.noteList);
				},
				
				/**
				 *@description Handles the scenario when 'post comment' button is clicked on the modal.
				 */
				uiPostComment : function(noteAPIInput){
					var changeOrderInput = {};
					changeOrderInput.Order = {};
					changeOrderInput.Order.OrderHeaderKey = modalInput.Order.OrderHeaderKey;
					changeOrderInput.Order.Notes = noteAPIInput ;
					var mashupArray = [];
					mashupArray.push(iscMashup.getMashupRefObj(this,'changeOrder',changeOrderInput));
					mashupArray.push(iscMashup.getMashupRefObj(this,'getNoteList', {"Note" : { "TableKey" : modalInput.Order.OrderHeaderKey}}));
					iscMashup.callMashups(this,mashupArray,{}).then(this.handleChangeOrder.bind(this),this.changeOrderAPIErrorCallBack.bind(this));
				},
				
				
				/**
				 *@description call Back handler of changeOrder API call.
				 */
				
				handleChangeOrder : function(data){
					$scope.$broadcast('clearNoteFields');
				},
				
				
				/**
				 *@description error call Back handler of changeOrder API call.
				 */
				
				changeOrderAPIErrorCallBack: function(response) {
					var errorMsg = response.Errors.Error[0].ErrorDescription;
		  			var errorCode = response.Errors.Error[0].ErrorCode;
		  			if(iscI18n.hasKey("apierror."+errorCode)){
		  				errorMsg = iscI18n.translate("apierror."+errorCode);
		  				iscModal.showErrorMessage(errorMsg,null,null);				
		  			}
		  			else{
		  				iscModal.showErrorMessage(errorMsg,null,null);
		  			}
					//$uibModalInstance.dismiss(response);
				}
				
	  		  
	}
	
	);
	
	}
]);

	

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.appointments.common.appointment-list.appointment-list
 *@package store.views.appointments.common.appointment-list
 *@class appointment-list
 *@description appointments screen is the list screen showing appointments for a customer. 
 *
 */


angular.module("store").controller("store.views.appointments.common.appointment-list.appointment-list",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscAppContext","iscTimezone","iscStateParams","iscResourcePermission","$timeout","iscWizard","iscShipment","iscAppointmentStatus","iscInStoreAppointment","$filter",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup, iscAppContext,iscTimezone,iscStateParams,iscResourcePermission,$timeout,iscWizard,iscShipment,iscAppointmentStatus,iscInStoreAppointment,$filter){
		
		iscScreen.initializeScreen($scope,{  
			model:{
				
				/**
				 *@description Holds the appointment list for a particular customer.
				 */
				workOrderAppointmentList:{},
				
				/**
				 *@description Holds the customer information.
				 */
				customerDetails:{},
				
				/**
				 *@description Holds the filter criteria used to filter the appointment list.
				 */
				filterOptions:{}
			},
			
            mashupRefs:[
                
               
				{
					
					   /**
	  				    *@iscdoc mashup
	  		   			*@viewname store.views.appointments.common.appointment-list.appointment-list
	  		   			*@mashupid store.views.appointments.common.appointment-list.getWorkOrderAppointmentList
			   			*@mashuprefid getWorkOrderAppointmentList
	  		   			*@description Fetches the list of appointments for a customer.
	  		   			*/
					
					    mashupRefId: 'getWorkOrderAppointmentList',
	                    mashupId: 'store.views.appointments.common.appointment-list.getWorkOrderAppointmentList',
	                    modelName:'workOrderAppointmentList',
	                    isPaginated: true,
						pageSize : 15,//iscAppContext.getFromContext("listApiPageSize"),
						append : true,
						appendPath : 'WorkOrderAppointments.WorkOrderAppointment'
				},
				
				
				
				{
					 /**
					    *@iscdoc mashup
			   			*@viewname store.views.appointments.common.appointment-list.appointment-list
			   			*@mashupid store.views.appointments.common.appointment-list.getWorkOrderAppointmentListWithFilters
			   			*@mashuprefid getWorkOrderAppointmentListWithFilters
			   			*@description Fetches the list of appointments for a customer based on filter criteria.
			   			*/
					
				    mashupRefId: 'getWorkOrderAppointmentListWithFilters',
                    mashupId: 'store.views.appointments.common.appointment-list.getWorkOrderAppointmentListWithFilters',
                    modelName:'workOrderAppointmentList',
                    isPaginated: true,
					pageSize : 15,//iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					appendPath : 'WorkOrderAppointments.WorkOrderAppointment'
			     }
			
            ],
            ui : {
            	/**
				 *@property {String} selectedWorkOrderApptKey - WorkOrderApptKey of the selected appointment from the list.
				 */	
                selectedWorkOrderApptKey:"",
                
                /**
				 *@property {String} apiPageSize - page size of the list screen.
				 */	
                apiPageSize:15,
                
                /**
				 *@property {Object} inputStatusArray - Hold the appointment status values that needs to be applied as filters for the list.
				 */	
                inputStatusArray:[],
                
                /**
				 *@property {Boolean} apiCallInProgress - indicates if a api call is in progress.
				 */	
                apiCallInProgress:false,
                
                /**
				 *@property {Object} filterOptions - it contains the filter data that will be used in isc-appointment-list-filter directive.
				 */	
                filterOptions:{}
                
			},
			
			/**
			 *@description Initializes the Appointments screen by invoking the required mashup calls and reading the input data from the calling screen.
			 */
			
			initialize : function(){
				        var stateParams = iscStateParams.params;
				        this.model.customerDetails = stateParams.input.customerDetails;
					    var appointmentStatusConfig = angular.copy(iscAppointmentStatus.getAppointmentStatusConfig());
						var allStatusArray = appointmentStatusConfig.StatusList.Status;
						for(var j=0; j<allStatusArray.length; j++){
							
							if(allStatusArray[j].StatusCode=='OPEN'){
								allStatusArray[j].Checked='Y';
							}
							else{
								allStatusArray[j].Checked='N';
							}
						}	
						this.ui.filterOptions.WorkOrderAppointment={};
						this.ui.filterOptions.WorkOrderAppointment.StatusList = appointmentStatusConfig.StatusList;
						this.model.filterOptions = appointmentStatusConfig;
						var apiInput = this.prepareGetWorkOrderListInputWithFilters();
						iscMashup.callMashup(this,"getWorkOrderAppointmentListWithFilters",apiInput,{}).then(this.processPaginatedWorkOrderAppointmentList.bind(this),angular.noop);
			},
			
			/**
			 *@description Prepares api input for getWorkOrderAppointmentList considering all the filters applied in the ui.
			 */
			
			prepareGetWorkOrderListInputWithFilters:function(){
				 var apiInput = {};
				 apiInput.WorkOrderAppointment={};
				 
				 apiInput.WorkOrderAppointment.WorkOrder={};
				 apiInput.WorkOrderAppointment.WorkOrder.Order = {};
				 apiInput.WorkOrderAppointment.WorkOrder.Order.BillToID = this.model.customerDetails.Customer.CustomerID;
				 var storeLocaleTimeZone = iscAppContext.getFromContext('storeLocaleTimeZone'); 
				 var offset = iscTimezone.getTimezoneOffset(storeLocaleTimeZone);
				 
				 if(!iscCore.isVoid(this.ui.filterOptions.WorkOrderAppointment) && !iscCore.isVoid(this.ui.filterOptions.WorkOrderAppointment.PromisedApptStartDate)&& !iscCore.isVoid(this.ui.filterOptions.WorkOrderAppointment.PromisedApptEndDate)){
					 apiInput.WorkOrderAppointment.PromisedApptStartDate= this.ui.filterOptions.WorkOrderAppointment.PromisedApptStartDate+offset;
					 apiInput.WorkOrderAppointment.PromisedApptEndDate= this.ui.filterOptions.WorkOrderAppointment.PromisedApptEndDate+offset;
				 }
				 
				 if(!iscCore.isVoid(this.ui.filterOptions.WorkOrderAppointment.StatusList)){
							var statusArray = this.ui.filterOptions.WorkOrderAppointment.StatusList.Status;
							this.ui.inputStatusArray=[];
							
							for(var j=0; j<statusArray.length; j++){
								if(statusArray[j].Checked=='Y'){
									this.ui.inputStatusArray.push(statusArray[j].StatusCode);
								}
							}
							
							var andObj = iscCore.getValueFromJsonPath(apiInput.WorkOrderAppointment,"ComplexQuery.And",true);
							andObj.Or=[];
							andObj.Or[0] = {};
							andObj.Or[0].Exp=[];
							for(var k= 0; k<this.ui.inputStatusArray.length ; k++){
								andObj.Or[0].Exp[k]={"Name":"ApptStatus","QryType":"FLIKE","Value":this.ui.inputStatusArray[k]};
							}
					 }
					 
	                 if(!iscCore.isVoid(this.ui.filterOptions.WorkOrderAppointment) && !iscCore.isVoid(this.ui.filterOptions.WorkOrderAppointment.WorkOrder) && !iscCore.isVoid(this.ui.filterOptions.WorkOrderAppointment.WorkOrder.NodeKey)){
	                	 apiInput.WorkOrderAppointment.WorkOrder.NodeKey = this.ui.filterOptions.WorkOrderAppointment.WorkOrder.NodeKey;
					 }
	               
	               return apiInput;
	               
			},
           
			/**
			 *@description call back handler for  getWorkOrderAppointmentList api.
			 */
			
			processPaginatedWorkOrderAppointmentList:function(response) {
               this.ui.apiCallInProgress = false;
               var output = iscMashup.getMashupOutput(response,"getWorkOrderAppointmentList");
               if(iscCore.isVoid(output)){
            	   var output = iscMashup.getMashupOutput(response,"getWorkOrderAppointmentListWithFilters");
               }
               if(output.Page.Output.WorkOrderAppointments.WorkOrderAppointment){
            	   
            	   if(iscCore.isVoid(this.ui.selectedWorkOrderApptKey)){
	            		this.ui.selectedWorkOrderApptKey = output.Page.Output.WorkOrderAppointments.WorkOrderAppointment[0].WorkOrderApptKey;
	            	}
            	   
            	   var workOrderAppointmentArray = [];
            	   workOrderAppointmentArray = output.Page.Output.WorkOrderAppointments.WorkOrderAppointment;
                   for(var i = 0; i < workOrderAppointmentArray.length; i++){
                       var workOrderAppointment = workOrderAppointmentArray[i];
                       this.updateWorkOrderAttr(workOrderAppointment);
                   }
               }
           },
           
           /**
			 *@description Validates if next page action should be performed by checking whether api call is in progress.
			 */
	        uiWorkOrderListScrollActionValidator : function(){
	        	if (this.model.workOrderAppointmentList.Page.IsLastPage !=="N" || this.ui.apiCallInProgress) {
					return false;
				}else
					return true;
	        },
	       
	        /**
			 *@description Gets the Paginated records for getWorkOrderAppointmentList api when the next page action is performed.
			 */
	        
           uiGetNextWorkOrderRecords:function(){
        	   if (this.model.workOrderAppointmentList.Page.IsLastPage !=="N") {
					return;
				}
				this.ui.apiCallInProgress = true;
				if(iscCore.isVoid(this.ui.filterOptions)){
				    var appointmentStatusConfig = angular.copy(iscAppointmentStatus.getAppointmentStatusConfig());
					var allStatusArray = appointmentStatusConfig.StatusList.Status;
					for(var j=0; j<allStatusArray.length; j++){
								allStatusArray[j].Checked='Y';
					}				
					this.model.filterOptions = appointmentStatusConfig;
					iscMashup.callPaginatedMashup(this, "getWorkOrderAppointmentList", apiInput, "NEXT", {}).then(this.processPaginatedWorkOrderAppointmentList.bind(this));
			   }
			   else{
				   
				   var apiInput = this.prepareGetWorkOrderListInputWithFilters();
				   iscMashup.callPaginatedMashup(this, "getWorkOrderAppointmentListWithFilters", apiInput, "NEXT", {}).then(this.processPaginatedWorkOrderAppointmentList.bind(this));
			   }
           },
           
           /**
			 *@description Massaged the appointment object with the scheduled appointment time to show in the UI.
			 */
	        
           
           updateWorkOrderAttr:function(workOrderAppointment){
        	   workOrderAppointment.isToday = moment(workOrderAppointment.PromisedApptStartDate).isSame(moment(), 'day');
               if(workOrderAppointment.isToday){
            	   workOrderAppointment.appointmentToday = iscI18n.translate('appointmentsummary.LABEL_Appointment_today',
       							{date: $filter('date')(workOrderAppointment.PromisedApptStartDate, 'longDate'),
       				});
               }
               var statusIcons = {
                   'OPEN':'app-icon-clock_30',
                   'COMPLETE':'app-icon-success_ok_30',
                   'CANCELED':'app-icon-error_30 icon-font app_alert_icon'
               }
               workOrderAppointment.ApptStatusIcon = statusIcons[workOrderAppointment.ApptStatus];
                   
               
               workOrderAppointment.appointmentScheduledTime = moment(workOrderAppointment.PromisedApptStartDate).fromNow();
           },
           
           /**
			 *@description Close button handler.
			 */
           
           uiClose : function(){
				iscState.goToState("/home", {}, {});
           },
         
           /**
			 *@description Opens Appointment summary screen for the selected appointment from the list.
			 */
           
           uiOpenAppointmentSummary:function(workOrderAppointment){
        	   var salesOrder = {Order:{OrderHeaderKey:workOrderAppointment.WorkOrder[0].Order.OrderHeaderKey, WorkOrderKey:workOrderAppointment.WorkOrder[0].WorkOrderKey}};
        	   iscInStoreAppointment.openAppointmentSummary(salesOrder);
           },
           
           /**
			 *@description Identifies the Appointment chosen by the User from the list.
			 */
           
            uiSelectAppointment : function(workOrderAppt){
				this.ui.selectedWorkOrderApptKey = workOrderAppt.WorkOrderApptKey;
			},
			
			 /**
			 *@description Opens Create appointment flow.
			 */
			
			uiCreateAppointment: function() {
				var createAppointmentInput = {
                    Customer:{
                        CustomerKey:this.model.customerDetails.Customer.CustomerKey
                    }
				};
				iscInStoreAppointment.openCreateAppointmentWizard({input:createAppointmentInput});
			},
			
			/**
			 *@description Applies filters and makes the getWorkOrderAppointmentList api call.
			 */
			
			uiApplyFilterOnAppointmentList:function(data){
			 
			  this.ui.filterOptions = {};
			  this.ui.filterOptions = data;
              this.model.workOrderAppointmentList = {};
              var apiInput = this.prepareGetWorkOrderListInputWithFilters();
              iscMashup.callMashup(this,"getWorkOrderAppointmentListWithFilters",apiInput,{}).then(this.processPaginatedWorkOrderAppointmentList.bind(this),angular.noop);
               
			}
        });
    }]);
			 
			 
            

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.appointments.common.appointment-summary.appointment-summary
 *@package store.views.appointments.common.appointment-summary
 *@class appointment-summary
 *@description Displays Appointment summary screen.
 *
 */

angular.module('store').controller('store.views.appointments.common.appointment-summary.appointment-summary',
    ['$scope','$rootScope','iscScreen','iscMashup','iscResourcePermission','iscState','iscStateParams','iscAppContext','iscI18n','iscModal','iscShipment','iscAppInfo','$timeout','iscMedia','$filter',
        function($scope,$rootScope,iscScreen,iscMashup,iscResourcePermission,iscState,iscStateParams,iscAppContext,iscI18n,iscModal,iscShipment,iscAppInfo,$timeout,iscMedia,$filter) {				
            iscScreen.initializeScreen($scope,{

                model:{
                  /**
                   *@description Stores the appointment details
                   */
                    "appointmentDetails":{}
                },
                mashupRefs : [
                    {
                        /**
                        *@description Gets the appointment details .
                        */
                        mashupRefId: 'getAppointmentDetails',
                        mashupId: 'store.views.appointments.common.appointment-summary.getAppointmentDetails',
                        modelName: "appointmentDetails"
                    }
                ],
                ui:{
                    /**
                     *@property {Boolean} showSuccessMessagePanel Flag to indicate whether to show success message or not.
                     */
                    showSuccessMessagePanel:false,
                    /**
                     *@property {String} successPanelMessage Message to show in sucess panel.
                     */
                    successPanelMessage:"",
                    /**
                     *@property {Boolean} showInfo Flag to indicate whether to show more info panel or not.
                     */
                    showInfo:true,
                    /**
                     *@property {Number} recordShownCount Number of appointment to show on load. Used for client side paginigation.
                     */
                    recordShownCount:iscMedia.isMediaEnabled('lte-480')?3:6,
                    /**
                     *@property {Boolean} showContent Flag to indicate whether to show the screen or not during initialing the screen.
                     */
                    showContent:false
                    //disableEditAppointment:false
                },
                /**
			     *@description Reads wizard model and loads appointment details .
			     */
                initialize:function(){
                    this.ui.showContent = false;
                    var getOrderInput = {
                        Order:{
                            OrderHeaderKey:iscStateParams.params.input.Order.Order.OrderHeaderKey
                        }
                    }
                    iscMashup.callMashup(this,'getAppointmentDetails',getOrderInput,{})
                        .then(function(controllerData){
                            this.ui.showContent = true;
                            //this.ui.disableEditAppointment = this.isAppointmentEditable();
                        }.bind(this),angular.noop);
                    if(!iscCore.isVoid(iscStateParams.params.message)){
                        if(iscStateParams.params.message === "CREATED_SUCCESS"){
                            this.ui.showSuccessMessagePanel = true;
                            this.ui.successPanelMessage = iscI18n.translate("appointmentsummary.MESSAGE_Appointment_created_success");
                        } else if(iscStateParams.params.message === "EDIT_SUCCESS") {
                        	 this.ui.showSuccessMessagePanel = true;
                             this.ui.successPanelMessage = iscI18n.translate("appointmentsummary.MESSAGE_Appointment_edit_success");
                        }
                    }
                },
                /**
			     *@description Gets the next count to show appointment. Used in client side pagination.
			     */
                uiGetNextAppointmentRecords:function(){
                    if(this.ui.recordShownCount <= this.model.appointmentDetails.Order.WorkOrders.WorkOrder.length){
                        this.ui.recordShownCount += iscMedia.isMediaEnabled('lte-480')?3:6;
                    }
                },
                /**
			     *@description Filter the system cancelled work orders.
			     */
                uiFilterSystemCancelledWorkOrders:function(workOrder) {
                	return (workOrder.Status.Status.match("1600") && iscCore.isVoid(workOrder.WorkOrderServiceLines.WorkOrderServiceLine)) ? false : true;
                },
                /*
                isAppointmentEditable:function() {
                	return (this.model.appointmentDetails.Order.DraftOrderFlag == 'Y' || this.model.appointmentDetails.Order.MinOrderStatus.match("3700.7777") || this.model.appointmentDetails.Order.MinOrderStatus.match("9000"));
                },
                
                uiEditAppointment:function() {
                	iscState.goToState('manage-appointment',{input:{Order:{OrderHeaderKey:this.model.appointmentDetails.Order.OrderHeaderKey}}},{});
                },
                */
                /**
			     *@description Update the attributes on work order for display purpose.
                 *@param {object} workOrder Work order details
			     */
                uiUpdateWorkOrderAttr:function(workOrder){
                    workOrder.isToday = moment(workOrder.WorkOrderAppointments.WorkOrderAppointment[0].PromisedApptStartDate).isSame(moment(), 'day');
                    if(workOrder.isToday){
                        workOrder.appointmentToday = iscI18n.translate('appointmentsummary.LABEL_Appointment_today',
            							{date: $filter('date')(workOrder.WorkOrderAppointments.WorkOrderAppointment[0].PromisedApptStartDate, 'longDate'),
            				});
                        
                    }
                    var statusIcons = {
                        'OPEN':'app-icon-clock_30',
                        'COMPLETE':'app-icon-success_ok_30',
                        'CANCELED':'app-icon-error_30 icon-font app_alert_icon'
                    }
                    workOrder.WorkOrderAppointments.WorkOrderAppointment[0].ApptStatusIcon = statusIcons[workOrder.WorkOrderAppointments.WorkOrderAppointment[0].ApptStatus];
                    workOrder.appointmentScheduledTime = moment(workOrder.WorkOrderAppointments.WorkOrderAppointment[0].PromisedApptStartDate).fromNow();
                },
                /**
                 *@description Handles successful cancellation & completion of work order by refreshing the page with updated order data.
				 *@param {Object} response - Output from the Appointment Summary Related Tasks
				 */
                uiHandleRelatedTask: function(taskOutput) {
                	
					if(taskOutput && (taskOutput.taskAPIOutput.markAsCompleteSuccess || taskOutput.taskAPIOutput.markAsCancelSuccess)) {
						/*this.ui.cancelledOrderNumber = taskOutput.taskAPIOutput.cancelledOrderNumber;
						this.ui.cancelOrderAPISuccess = true;
						this.updateOrderAfterCancellation(taskOutput.taskAPIOutput.order);*/
						this.initialize();
					}
				}
           });
        }
    ]);
               

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.appointments.common.cancel-appointment.cancel-appointment
 *@package store.views.appointments.common.cancel-appointment
 *@class cancel-appointment
 */
angular.module('store').controller('store.views.appointments.common.cancel-appointment.cancel-appointment',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscAppInfo','iscResourcePermission','iscInStoreAppointment','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscAppInfo,iscResourcePermission,iscInStoreAppointment,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{
			
  		model:{
  			/**
  			 * @description This model holds appointment cancellation reason code list
  			 */
  			appointmentCancelReasonCodeList:{},
  			/**
  			 * @description This model holds work orders to be cancelled.
  			 */
  			workOrderList:{},
  			/**
  			 * @description This method holds sales order details.
  			 */
  			salesOrderModel:{},
  			/**
  			 * @description This method holds selected work orders to be cancelled 
  			 */
  			cancelWorkOrderList:[]
  		},

  		mashupRefs : [

  		            /**
                     *@description This mashup is used to appointment cancellation reason codes.
                     */
                    {
                    	 mashupRefId: 'getAppointmentCancelReasons',
                         mashupId: 'store.views.appointments.common.cancel-appointment.getAppointmentCancelReasons',
                         modelName : 'appointmentCancelReasonCodeList'

                    },
                    {
                    	  /**
                         *@description This mashup is used to get  work orders to be cancelled.
                         */
                   	 	mashupRefId: 'getAppointmentsForCancellation',
                        mashupId: 'store.views.appointments.common.cancel-appointment.getAppointmentsForCancellation',
                        modelName : 'workOrderList'

                   },
                   {
                	   /**
                        *@description This mashup is used to cancel work orders
                        */
                   	 	mashupRefId: 'cancelAppointment',
                        mashupId: 'store.views.appointments.common.cancel-appointment.cancelAppointment'

                   }

  		              
			],


			ui:{
				/**
	  			*@property {Boolean} disableCancelAction - True if no work orders are selected for cancellation, false otherwise.
	  			 */
				disableCancelAction:false,
				/**
	  			*@property {Boolean} isCancellationReasonConfigured - True if cancellation reasons are configured, false otherwise.
	  			 */
				isCancellationReasonConfigured:true

			},
			
			/**
			 * @description This method invokes APIs to get cancellation reason code list adn work orders to be canelled.
			 */
			initialize : function(){
				
				 var mashupArray = [];
				
				 if(modalInput.appointmentModel && (modalInput.appointmentModel.OrderHeaderKey || modalInput.appointmentModel.WorkOrderKey)) {
					 
					 this.model.salesOrderModel = modalInput.appointmentModel;
					 mashupArray.push(iscMashup.getMashupRefObj(this,'getAppointmentCancelReasons',{}));
					 mashupArray.push(iscMashup.getMashupRefObj(this,'getAppointmentsForCancellation',iscInStoreAppointment.getWorkOrderListInput(this.model.salesOrderModel.OrderHeaderKey, this.model.salesOrderModel.WorkOrderKey)));
		    		 iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
		    		 
				 }
				
				
			},
			
			  /**
	         *@description This method is a callback handler for mashups invoked in initialize method.
	         * This method initializes the ui objects based on cancellation reason code list.
	         * 
	         *@param {Object} response - API response JSON object
	         */
			handleInitApiCalls:function(response) {
				
				this.ui.disableCancelAction = (this.model.workOrderList.WorkOrders.TotalNumberOfRecords > 1 && this.model.cancelWorkOrderList.length == 0);
				
				this.ui.isCancellationReasonConfigured = !(this.model.appointmentCancelReasonCodeList.CommonCodeList.TotalNumberOfRecords == 0);
					
				
			},
			
			/**
			 *@description Returns the description corresponding to the cancellation code
			 *
			 *@param {String} codeValue - cancellation code value.
			 */
			getCancellationDescription : function(codeValue) {
				var cancellationNoteDescription = "";
				angular.forEach(this.model.appointmentCancelReasonCodeList.CommonCodeList.CommonCode, function(value) {
					if(value.CodeValue == codeValue) {
						cancellationNoteDescription = value.CodeShortDescription;
					}
				});
				return cancellationNoteDescription;
			},
			
			/**
			 * @description This method is invoked on work order selection on UI
			 * 
			 * @param {Object} workOrder - work order model.
			 */
			uiOnWorkOrderSelection:function(workOrder) {

				var index = this.model.cancelWorkOrderList.indexOf(workOrder);
				
				console.log("uiOnWorkOrderSelection - ",workOrder);
				
				if(workOrder.selected && index < 0) {
					this.model.cancelWorkOrderList.push(workOrder);
				} else if(index > -1) {
					this.model.cancelWorkOrderList.splice(index, 1);
				}
				
				this.ui.disableCancelAction = (this.model.cancelWorkOrderList.length == 0) ? true : false;
				
			},
			
			/**
			 * @description This method removes the blank option in cancel reason drop down and set the first value as default.
			 * 
			 * @param {Object} workOrder - work order model.
			 */
			uiRemoveBlankOption:function(workOrder){
				if(iscCore.isVoid(workOrder.CancelReasonCode) && !iscCore.isVoid(this.model.appointmentCancelReasonCodeList.CommonCodeList.CommonCode)){
					workOrder.CancelReasonCode = this.model.appointmentCancelReasonCodeList.CommonCodeList.CommonCode[0].CodeValue;
				 }
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({data : 'CANCEL'});
			},
			
			/**
			 * @description This method invokes cancelAppointment mashup on selected work orders to be cancelled 
			 */
			markMultipleWorkOrdersAsCancelled:function() {
				
				 var mashupArray = [];
				 
				 for(var i=0;i<this.model.cancelWorkOrderList.length;i++) {
					 var workOrder = this.model.cancelWorkOrderList[i];
					 workOrder.CancelReasonDescription = this.getCancellationDescription(workOrder.CancelReasonCode);
					 mashupArray.push(iscMashup.getMashupRefObj(this,'cancelAppointment',iscInStoreAppointment.getCancelWorkOrderInput(workOrder)));
				 }
				 
	    		 iscMashup.callMashups(this,mashupArray,{isMultiAPICall:false}).then(this.afterWorkOrderCancellation.bind(this),angular.noop);
				
			},
			
			/**
			 * @description This method invokes cancelAppointment mashup on work order to be cancelled 
			 */
			markWorkOrderAsCancelled:function() {
				
				var mashupArray = [];
				 
				var workOrder = this.model.workOrderList.WorkOrders.WorkOrder[0];
				workOrder.CancelReasonDescription = this.getCancellationDescription(workOrder.CancelReasonCode);
				mashupArray.push(iscMashup.getMashupRefObj(this,'cancelAppointment',iscInStoreAppointment.getCancelWorkOrderInput(workOrder)));
				 
	    		iscMashup.callMashups(this,mashupArray,{}).then(this.afterWorkOrderCancellation.bind(this),angular.noop);
				
			},
			
			/**
			 * @description This method is a callback handler for cancelAppointment mashup. On cancelling the workorders, the popup is closed and data is sent back to invoking screen.
			 * 
			 * @param {Object} response - API response JSON object
			 */
			afterWorkOrderCancellation:function(response) {
				
				var modalResponse = {};
				modalResponse = {
					data : {
							markAsCancelSuccess:true
							}
						};
				
				
				$uibModalInstance.close(modalResponse);
				
			},
			
			/**
			 *@description OnClick handler of "Apply" button, we invoke cancelWorkOrder APi to cancel work orders.
			 */
			uiSubmit : function () {
				
				if(this.model.workOrderList.WorkOrders.TotalNumberOfRecords > 1 && this.model.cancelWorkOrderList.length > 0) {
					this.markMultipleWorkOrdersAsCancelled();
				} else if(this.model.workOrderList.WorkOrders.TotalNumberOfRecords == 1) {
					this.markWorkOrderAsCancelled();
				}
				
			}
			
			
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.appointments.common.mark-as-complete-appointment.mark-as-complete-appointment
 *@package store.views.appointments.common.mark-as-complete-appointment
 *@class mark-as-complete-appointment
 */
angular.module('store').controller('store.views.appointments.common.mark-as-complete-appointment.mark-as-complete-appointment',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscAppInfo','iscResourcePermission','iscInStoreAppointment','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscAppInfo,iscResourcePermission,iscInStoreAppointment,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{
			
  		model:{
  			/**
  			 * @description This method holds sales order details.
  			 */
  			salesOrderModel:{},
  			/**
  			 * @description This model holds work orders to be cancelled.
  			 */
  			workOrderList:{},
  			/**
  			 * @description This method holds selected work orders to be mark complete 
  			 */
  			markAsCompleteWorkOrderList:[]
  		},

  		mashupRefs : [

  		            /**
                     *@description This mashup is used to get work order list eligible for mark as complete
                     */
                    {
                    	 mashupRefId: 'getAppointmentsForMarkComplete',
                         mashupId: 'store.views.appointments.common.mark-as-complete-appointment.getAppointmentsForMarkComplete',
                         modelName : 'workOrderList'

                    },
                    {
                    	  /**
                         *@description This mashup is used to mark an appointment as complete
                         */
                   	 	mashupRefId: 'markAppointmentAsComplete',
                        mashupId: 'store.views.appointments.common.mark-as-complete-appointment.markAppointmentAsComplete'

                   },
                   {
                 	  /**
                      *@description This mashup is used to get add notes on sales order on marking an appointment complete
                      */
                	 	mashupRefId: 'addNoteForAppointmentComplete',
                     mashupId: 'store.views.appointments.common.mark-as-complete-appointment.addNoteForAppointmentComplete'

                }
  		              
			],


			ui:{
				/**
	  			*@property {Boolean} disableMarkAsComplete - True if no work orders are selected for marking complete, false otherwise.
	  			 */
				disableMarkAsComplete:false
				
			},
			
			/**
			 * @description This method invokes APIs to get work orders to be eligible to be marked as complete.
			 */
			initialize : function(){
				
				console.log(modalInput);
				
				 var mashupArray = [];
				 if(modalInput.appointmentModel && modalInput.appointmentModel.OrderHeaderKey) {
					 
					 this.model.salesOrderModel = modalInput.appointmentModel;
					 mashupArray.push(iscMashup.getMashupRefObj(this,'getAppointmentsForMarkComplete',iscInStoreAppointment.getWorkOrderListInput(this.model.salesOrderModel.OrderHeaderKey)));
		    		 iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
					 
				 }
				
				
				
			},
			
			  /**
	         *@description This method is a callback handler for mashups invoked in initialize method.
	         * This method initialize workOrder list model
	         * 
	         *@param {Object} response - mashup output JSON object
	         */
			handleInitApiCalls:function(response) {
				
				var apiOutput = iscMashup.getMashupOutput(response,"getAppointmentsForMarkComplete");
				this.model.workOrderList = apiOutput;
				if(this.model.workOrderList.WorkOrders.TotalNumberOfRecords > 1 && this.model.markAsCompleteWorkOrderList.length == 0) {
					this.ui.disableMarkAsComplete = true;
				}
				
			},
			
			/**
			 * @description This method is invoked on work order selection on UI
			 * 
			 * @param {Object} workOrder - work order model.
			 */
			uiOnWorkOrderSelection:function(workOrder) {

				var index = this.model.markAsCompleteWorkOrderList.indexOf(workOrder);
				
				if(workOrder.selected && index < 0) {
					this.model.markAsCompleteWorkOrderList.push(workOrder);
				} else if(index > -1) {
					this.model.markAsCompleteWorkOrderList.splice(index, 1);
				}
				
				this.ui.disableMarkAsComplete = (this.model.markAsCompleteWorkOrderList.length == 0) ? true : false;
				
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({data : 'CANCEL'});
			},
			
			/**
			 * @description This method invokes API for adding a note and marking an appointment complete for selected work orders
			 */
			markMultipleWorkOrdersAsCompleted:function() {
				
				 var mashupArray = [];
				 
				 for(var i=0;i<this.model.markAsCompleteWorkOrderList.length;i++) {
					 var workOrder = this.model.markAsCompleteWorkOrderList[i];
					 mashupArray.push(iscMashup.getMashupRefObj(this,'markAppointmentAsComplete',iscInStoreAppointment.getConfirmWorkOrderInput(workOrder)));
				 }
				 
				 if(this.model.markAsCompleteWorkOrderList.length > 0) {
					 mashupArray.push(iscMashup.getMashupRefObj(this,'addNoteForAppointmentComplete',iscInStoreAppointment.getAddNotesInputForMultiAppointmentComplete(this.model.markAsCompleteWorkOrderList)));
				 }
				 
	    		 iscMashup.callMashups(this,mashupArray,{}).then(this.afterWorkOrderCompletion.bind(this),angular.noop);
				
			},
			
			/**
			 * @description This method invokes API for adding a note and marking an appointment complete   
			 */
			markWorkOrderAsCompleted:function() {
				
				var mashupArray = [];
				 
				var workOrder = this.model.workOrderList.WorkOrders.WorkOrder[0];
				mashupArray.push(iscMashup.getMashupRefObj(this,'addNoteForAppointmentComplete',iscInStoreAppointment.getAddNotesInputForAppointmentComplete(workOrder)));
				mashupArray.push(iscMashup.getMashupRefObj(this,'markAppointmentAsComplete',iscInStoreAppointment.getConfirmWorkOrderInput(workOrder)));
				 
	    		iscMashup.callMashups(this,mashupArray,{}).then(this.afterWorkOrderCompletion.bind(this),angular.noop);
				
			},
			
			/**
			 * @description This method is a callback handler for markAppointmentAsComplete mashup. After API completion we propagate data back to invoking screen.
			 * 
			 * @param {Object} response - API response JSON object
			 */
			afterWorkOrderCompletion:function(response) {
				
				var modalResponse = {};
				modalResponse = {
					data : {
							markAsCompleteSuccess:true
							}
						};
				
				
				$uibModalInstance.close(modalResponse);
				
			},
			
			/**
			 * @description This method validates if Mark as compete button needs to enabled or disabled.
			 */
			uiDisableMarkAsComplete:function() {
				
				if(this.model.workOrderList.WorkOrders.TotalNumberOfRecords > 1) {
					return (this.model.markAsCompleteWorkOrderList.length == 0) ? true : false;
				} else if(this.model.workOrderList.WorkOrders.TotalNumberOfRecords == 1) {
					return false;
				}
				
			},
			
			/**
			 *@description OnClick handler of "Apply" button, we invoke confirmWorkOrder API to mark appointments as competed.
			 */
			uiSubmit : function (action) {
				
				console.log(this.model.markAsCompleteWorkOrderList);
				if(this.model.workOrderList.WorkOrders.TotalNumberOfRecords > 1 && this.model.markAsCompleteWorkOrderList.length > 0) {
					this.markMultipleWorkOrdersAsCompleted();
				} else if(this.model.workOrderList.WorkOrders.TotalNumberOfRecords == 1) {
					this.markWorkOrderAsCompleted();
				}
				
			}
			
			
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewmodal
 *@viewname store.views.appointments.common.service-description.service-description
 *@package store.views.appointments.common.service-description
 *@class service-description
 *@description Controller used for handling service description display and addition popup 
 */

angular.module('store').controller('store.views.appointments.common.service-description.service-description',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput) {	
		iscScreen.initializeModalScreen($scope,{
			ui:{
				/**
                 *@property {Object} serviceDetails - Details pertaining to the service for which the pop-up is getting opened
                 */
				serviceDetails: {}
			},
			
			/**
			*@iscdoc viewinit
			*@viewname store.views.appointments.common.service-description.service-description
			*@description Opens the pop-up and shows details pertaining to the service .
			*/
			initialize : function(){
				this.ui.serviceDetails = modalInput;
			},
			
			/**
			*@iscdoc uimethod
			*@viewname store.views.appointments.common.service-description.service-description
			*@methodname uiClose
			*@description Closes the pop-up when 'Close' button is clicked on UI.
			*/
			uiClose : function () {
				$uibModalInstance.dismiss();
			},
			
			/**
			*@iscdoc uimethod
			*@viewname store.views.appointments.common.service-description.service-description
			*@methodname uiAddService
			*@description Adds the service when 'Add Service' button is clicked on UI.
			*/
			uiAddService : function(){
				$uibModalInstance.close('ADD');
			}	
		});
	}
]);

	

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



/**
 *@iscdoc viewmodal
 *@viewname store.views.appointments.common.share-appointment.share-appointment
 *@package store.views.appointments.common.share-appointment
 *@class share-appointment
 *@description Controller used for handling share appointment popup 
 * 
 */


angular.module('store').controller('store.views.appointments.common.share-appointment.share-appointment',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscI18n','$timeout','iscDomUtility','iscPrint',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscI18n,$timeout,iscDomUtility,iscPrint) {
		
		
		iscScreen.initializeModalScreen($scope,{

			mashupRefs : [
  		  		{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.appointments.common.share-appointment.share-appointment
  		   			*@mashupid store.views.appointments.common.share-appointment.sendAppointmentAsEmail
		   			*@mashuprefid sendAppointmentAsEmail
  		   			*@description Sends appointment details as an email
  		   			*/
  		  		
					mashupRefId: 'sendAppointmentAsEmail',
					mashupId: 'store.views.appointments.common.share-appointment.sendAppointmentAsEmail'
				},
				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.appointments.common.share-appointment.share-appointment
  		   			*@mashupid store.views.appointments.common.share-appointment.printAppointmentSummary
		   			*@mashuprefid printAppointmentSummary
  		   			*@description Prints appointment summary
  		   			*/
  		  		
					mashupRefId: 'printAppointmentSummary',
					mashupId: 'store.views.appointments.common.share-appointment.printAppointmentSummary'
				}
			],


			ui:{
				/**
                 *@property {Boolean} showEmailError - flag to display email error.
                 */
                showEmailError:false,
                /**
                 *@property {Boolean} emailSent - flag to display email sent message.
                 */
                emailSent:false,
				
                /**
                 *@property {Object} emailForm -  email form object.
                 */
				emailForm: {},
				/**
                 *@property {String} emailid -  email id to send the appointment summary.
                 */
				emailid: ""
			},
			

			/**
			 *@iscdoc viewinit
			 *@viewname store.views.appointments.common.share-appointment.share-appointment
			 *@method initialize
			 *@description Initializes the share appointment modal.
			 */
			initialize : function(){
				if(modalInput.appointmentModel.CustomerEMailID) {
					this.ui.emailid = modalInput.appointmentModel.CustomerEMailID;
				}
				$timeout(function (){
					iscDomUtility.setFocus(document.getElementById("shareappointment_emailId"));
				}, 0);
			},
			
			/**
  			 *@methodname uiSendEmail
  			 *@description Validates the email form and sends email to specified email address.
  			 */	
			uiSendEmail:function(){
				var that = this;
				$timeout(function () {
					that.ui.emailForm.$setDirty();
					if(iscCore.isVoid(that.ui.emailid) || !that.ui.emailForm.$valid){
						that.ui.showEmailError=true;
						document.getElementById('shareappointment_emailId').focus();

					}else if(that.ui.emailForm.$valid){
						var inputObj = {};
						inputObj.Order={};
						inputObj.Order.OrderHeaderKey = modalInput.appointmentModel.OrderHeaderKey;
						inputObj.Order.Currency = modalInput.appointmentModel.PriceInfo.Currency;
						inputObj.Order.OrganizationCode = modalInput.appointmentModel.EnterpriseCode;
						inputObj.Order.ToEmailID = this.ui.emailid;

						iscMashup.callMashup(that,"sendAppointmentAsEmail",inputObj,{}).then(that.emailCallBackHandler.bind(that),angular.noop);
					}
				}.bind(this),200);							
			},
			
			/**
			 *@methodname uiResetEmailFlags
			 *@description Resets the email flags
			 */	
			uiResetEmailFlags : function(){
				var emailInputText = document.getElementById("shareappointment_emailId").value;
				if(!iscCore.isVoid((emailInputText))){
					this.ui.emailSent=false;
					this.ui.showEmailError=false;
				}
			  },


			/**
			 *@methodname emailCallBackHandler
			 *@description Call back handler of email service. Displays the success message if email was properly sent
			 *@param {Object} data - Outpur data of the email service.
			 */	

			emailCallBackHandler : function(data){
				var output = iscMashup.getMashupOutput(data,"sendAppointmentAsEmail");
				if(output) {
					this.ui.emailSent = true;
				}
			},
			
			/**
			 *@methodname uiPrintSummary
			 *@description Calls the mashup to get the input to the appointment summary print
			 */
			uiPrintSummary: function() {
				var inputObj = {};
				inputObj.Order={};
				inputObj.Order.OrderHeaderKey = modalInput.appointmentModel.OrderHeaderKey;
				inputObj.Order.Currency = modalInput.appointmentModel.PriceInfo.Currency;
				inputObj.Order.OrganizationCode = modalInput.appointmentModel.EnterpriseCode;

				iscMashup.callMashup(this,"printAppointmentSummary",inputObj,{}).then(this.printCallBackHandler.bind(this),angular.noop);
				
			},

			/**
			 *@methodname printCallBackHandler
			 *@description Call back handler of print service. Opens the appointment summary page for printing
			 *@param {Object} data - Outpur data of the print service.
			 */	
			printCallBackHandler : function(data){
				var output = iscMashup.getMashupOutput(data,"printAppointmentSummary");
				iscPrint.printHtmlOutput(output);
			},
		
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.appointments.common.share-appointment.share-appointment
			 *@methodname uiClose
			 *@description Closes the share pop-up on click of 'Close' button.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			}

				
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


 /**
 *@iscdoc viewmodal
 *@viewname store.views.appointments.in-store.change-store.change-store
 *@package store.views.appointments.in-store.change-store
 *@class change-store
 *@description Controller used for handling change store popup 
 * 
 * USAGE : Invoking screen will have the below code snippet to integrate with alternate store search popup : 
 *
 *	uiOpenStoreSearch: function() {
		var that = this;
		var storeSearchModalInput = {
			modalInput: function(){
				return {
					inputData : {
						Item : {ItemID:"BridalFitting",UnitOfMeasure:"HR"},//service item
						ShipNode : 'Mtrx_Store_2',//current selected store, optional, if not passed, it is defaulted to current store
						BusinessDay: '2017-09-02'//date for wich businesss hours to be shown, optional, if not passed, it is defualted to current day
					}
				};
			}
		};
		iscModal.openModal('store.views.appointments.in-store.change-store.change-store',storeSearchModalInput,{})
			 .then(function(callBackData){
					that.afterStoreSelection.call(that,callBackData.data,that.fromContext);
			  },angular.noop);
	}
 * 
 */

angular.module('store').controller('store.views.appointments.in-store.change-store.change-store',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','iscMashup','iscResourcePermission','iscAppContext','$filter','iscI18n','$timeout',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscAppContext,$filter,iscI18n,$timeout) {
		
		iscScreen.initializeModalScreen($scope,{
			
			/**
			 *ModelList
			 *Models that hold data
			 */
			model:{
				/**
				 *@description Holds the associated list of skill for a service.
				 */
				"serviceSkillList":{},

				/**
				 *@description Holds the output data of storeSelectiongetAlternateStoreAvailability mashup.
				 */
				"nearbyStoreList":{},

				/**
				 *@description Holds the output data of getDefaultRadiusValue mashup.
				 */
				"defaultRadiusValue":{},

				/**
				 *@description Holds the output data of getMaxRadiusValue mashup.
				 */
				"maxRadiusValue":{},

				/**
				 *@description Holds the distance UOM.
				 */
				"distanceUOM":{},

				/**
				 *@description Holds the output data of storeSearchgetAlternateStoreAvailability mashup.
				 */
				"searchStoreList":{},

				/**
				 *@description Holds the FulfillmentType configuration value.
				 */
				"FulfillmentType":{}
			},

			/**
		     *MashupRefs
		     *array containing the list of mashups referred in this controller
		     */
			mashupRefs : [

				{
		  		   /**
  				    *@iscdoc mashup
  		   			*@viewname store.views.appointments.in-store.change-store.change-store
  		   			*@mashupid store.views.appointments.in-store.change-store.getCurrentStoreDetails
		   			*@mashuprefid getCurrentStoreDetails
  		   			*@description Fetches store details with calendar for current store
  		   			*/
					mashupRefId: 'getCurrentStoreDetails',
					mashupId: 'store.views.appointments.in-store.change-store.getCurrentStoreDetails',
				},

				{
		  		   /**
  				    *@iscdoc mashup
  		   			*@viewname store.views.appointments.in-store.change-store.change-store
  		   			*@mashupid store.views.appointments.in-store.change-store.getServiceAvailabilityAndBusinessHours
		   			*@mashuprefid getServiceAvailabilityAndBusinessHours
  		   			*@description Fetches store details with calendar for other stores
  		   			*/
					mashupRefId: 'getServiceAvailabilityAndBusinessHours',
					mashupId: 'store.views.appointments.in-store.change-store.getServiceAvailabilityAndBusinessHours',
				},
				
				{
		  		   /**
  				    *@iscdoc mashup
  		   			*@viewname store.views.appointments.in-store.change-store.change-store
  		   			*@mashupid store.views.appointments.in-store.change-store.getKillsForServiceItem
		   			*@mashuprefid getSkillsForServiceItem
  		   			*@description Fetches sills for the service item.
  		   			*/
					mashupRefId: 'getSkillsForServiceItem',
					mashupId: 'store.views.appointments.in-store.change-store.getSkillsForServiceItem',
				},
												
				{
		  		   /**
  				    *@iscdoc mashup
  		   			*@viewname store.views.appointments.in-store.change-store.change-store
  		   			*@mashupid store.views.appointments.in-store.change-store.getRuleDetails
		   			*@mashuprefid getFulfillmentTypeForStore
		   			*@modelname FulfillmentType
  		   			*@description Fetches configured FulfillmentType/sourcing information.
  		   			*/
					mashupRefId: 'getFulfillmentTypeForStore',
					mashupId: 'store.views.appointments.in-store.change-store.getRuleDetails',
					modelName : 'FulfillmentType'
				},

				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.appointments.in-store.change-store.change-store
  		   			*@mashupid store.views.appointments.in-store.change-store.getRuleDetails
		   			*@mashuprefid getDefaultRadiusValue
		   			*@modelname defaultRadiusValue
  		   			*@description Fetches configured default radius value.
  		   			*/
					mashupRefId: 'getDefaultRadiusValue',
					mashupId: 'store.views.appointments.in-store.change-store.getRuleDetails',
					modelName : 'defaultRadiusValue'
				},
				
				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.appointments.in-store.change-store.change-store
  		   			*@mashupid store.views.appointments.in-store.change-store.getRuleDetails
		   			*@mashuprefid getMaxRadiusValue
		   			*@modelname maxRadiusValue
  		   			*@description Fetches configured maximum radius value.
  		   			*/
					mashupRefId: 'getMaxRadiusValue',
					mashupId: 'store.views.appointments.in-store.change-store.getRuleDetails',
					modelName : 'maxRadiusValue'
				},
				
				{
				  /**
				   *@iscdoc mashup
					*@viewname store.views.appointments.in-store.change-store.change-store
					*@mashupid WSC_getDistanceUOM
					*@mashuprefid getDistanceUOM
					*@modelname distanceUOM
					*@description Fetches distance UOM for store.
					*/
					mashupRefId: 'getDistanceUOM',
					mashupId: 'store.views.appointments.in-store.change-store.getDistanceUOM',
					modelName : 'distanceUOM'
				},

				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.appointments.in-store.change-store.change-store
  		   			*@mashupid store.views.appointments.in-store.change-store.getSurroundingNodeListForStore
		   			*@mashuprefid getSurroundingNodeListForStore
		   			*@modelname nearbyStoreList
  		   			*@description Fetches stores list for nearby stores tab.
  		   			*/
					mashupRefId: 'getSurroundingNodeListForStore',
					mashupId: 'store.views.appointments.in-store.change-store.getSurroundingNodeListForStore',
					modelName : 'nearbyStoreList'
				},

				{
		  		  /**
  				   *@iscdoc mashup
  		   			*@viewname store.views.appointments.in-store.change-store.change-store
  		   			*@mashupid store.views.appointments.in-store.change-store.getSurroundingNodeListForStore
		   			*@mashuprefid getSearchSurroundingNodeListForStore
		   			*@modelname searchStoreList
  		   			*@description Fetches stores list for nearby stores tab.
  		   			*/
					mashupRefId: 'getSearchSurroundingNodeListForStore',
					mashupId: 'store.views.appointments.in-store.change-store.getSurroundingNodeListForStore',
					modelName : 'searchStoreList'
				}
			],


			ui:{
				/**
				 *@property {String} currentShipNode - shipnode of current store.
				 */							
				currentShipNode : iscAppContext.getFromContext("storeName"),

				/**
				 *@property {Object} currentStore - sotre/node model for current store.
				 */							
				currentStore : {},

				/**
				 *@property {Object} currentStoreAddress - address of current store.
				 */							
				currentStoreAddress : iscAppContext.getFromContext('storeAddress').ShipNodePersonInfo,

				/**
				 *@property {String} existingSelectedShipNode - shipnode for store/node already selected.
				 */							
				existingSelectedShipNode : modalInput.inputData.ShipNode ? modalInput.inputData.ShipNode : iscAppContext.getFromContext("storeName"),

				/**
				 *@property {Object} currentSelectedStore - used as selecte store model (like nearStore and searchedStore) for current store.
				 */							
				currentSelectedStore : {},

				/**
				 *@property {Object} currentStoreSurroundingNodeList - current store model in form of getSurroundingNodeList so that isc-change-store-list can be used for current store also.
				 */
				currentStoreSurroundingNodeList : null,
				
				 /**
				 *@property {Object} selectedStore - final store/node selected to be returned from popup.
				 */							
				selectedStore : "",

				/**
				 *@property {Object} searchedStore - store/node selected on search stores tab.
				 */
				searchedStore : "",
					
				/**
				 *@property {Object} nearStore - store/node selected on nearby stores tab.
				 */
				nearStore : "",
					
				/**
				 *@property {String} nearbyView - If set to true, nearby stores tab will be active, used to switch between tabs.
				 */
				nearbyView : "true",
				
				/**
				 *@property {String} searchStore - If set to true, input form for capturing search criteria to search alternate stores will be shown.
				 */
				searchStore : null,
					
				/**
				 *@property {String} searchView - If set to true, search storestab will be active, used to switch between tabs.
				 */
				searchView : "false",
					
				/**
				 *@property {String} noOfStoresFound - Count of stores listed in nearby stores tab.
				 */
				noOfStoresFound : "",
					
				/**
				 *@property {String} noOfStoresSearched - Count of stores listed in search stores tab.
				 */
				noOfStoresSearched : "",
					
				/**
				 *@property {String} nearRadius - Radius value for which stores are listed in nearby stores tab currently.
				 */
				nearRadius : "",
					
				/**
				 *@property {String} maxNearRadius - Maximum radius till which the slider can slide upto in nearby stores tab.
				 */
				maxNearRadius : "",
					
				/**
				 *@property {String} oldNearRadius - Radius value in nearby stores tab before changing it to new value(used in watch expression).
				 */
				oldNearRadius : "",
					
				/**
				 *@property {Object} nearWach - Watch applied on radius in nearby stores tab.
				 */
				nearWach : "",
					
				/**
				 *@property {String} searchRadius - Radius value for which stores are listed in search stores tab currently.
				 */
				searchRadius : "",
					
				/**
				 *@property {String} maxSearchRadius - Maximum radius till which the slider can slide upto in search stores tab.
				 */
				maxSearchRadius : "",
					
				/**
				 *@property {String} oldSearchRadius - Radius value in search stores tab before changing it to new value(used in watch expression).
				 */
				oldSearchRadius : "",
					
				/**
				 *@property {String} distanceUOM - Distance UOM configured for store
				 */
				distanceUOM : "",
				
				/**
				 *@property {String} distanceUOMDesc - Distance UOM description configured for store
				 */
				distanceUOMDesc : "",

				/**
				 *@property {Object} searchWach - Watch applied on radius in search stores tab.
				 */
				searchWach : "",
					
				/**
				 *@property {Boolean} nearApiExecComplete - Set to true on success of initial api call for nearby stores.
				 */
				nearApiExecComplete : "true",
					
				/**
				 *@property {Boolean} searchApiExecComplete - Set to true on success of initial api call for search stores.
				 */
				searchApiExecComplete : "true",
					
				/**
				 *@property {Object} personInfo - Address object for person-info attribute of isc-Address-Filter directive, this object is used as input for searching stores.
				 */
				personInfo : {},
					
				/**
				 *@property {String} noStoreFound - "No Stores found" message displayed when there is no search results found for nearby tab.
				 */
				noNearStoreFound : "",
				
				/**
				 *@iscdoc uiattr
				 *@viewname store.views.appointments.in-store.change-store.change-store
				 *@property {String} noStoreFound - "No Stores found" message displayed when there is no search results found for search tab.
				 */
				noStoreFound : "",

				/**
				 *@property {String} errorText - Error message displayed for search stores.
				 */
				errorText : "",
				
				/**
				 *@property {String} nearErrorText - Error message displayed for nearby stores.
				 */
				nearErrorText: "",
					
				/**
				 *@property {String} searchButtonClick - Attribute used to retain the search screen if there is no search results found.
				 */
				searchButtonClick : "false",
				
				/**
				 *@property {Object} nearHighlightedStore - holds highlighted store model for nearby view.
				 */
				nearHighlightedStore: {},

				/**
				 *@property {Object} searchHighlightedStore - holds highlighted store model for saerch view.
				 */
				searchHighlightedStore: {},

				/**
				 *@property {Object} currentHighlightedStore - hold highlighted store model for current store.
				 */
				currentHighlightedStore: {},
				
				/**
				 *@property {Number} oPageSize - page size for paginated call.
				 */
				oPageSize: 15,
				
				/**
				 *@property {Number} oTotalNearStores - total stores shown in nearby view.
				 */
				oTotalNearStores: 15,
				
				/**
				 *@property {Number} oTotalSearchStores - total stores shown in search view.
				 */
				oTotalSearchStores: 15,

				/**
				 *@property {Boolean} oNearApiCallInProgress - true when paginated call for nearby stores is in progress.
				 */
				oNearApiCallInProgress: false,

				/**
				 *@property {Boolean} oSearchApiCallInProgress - true when paginated call for search stores is in progress.
				 */
				oSearchApiCallInProgress: false
			},
			
			/**
			 *@description Initializes the Alternate store selection popup by invoking the required mashup calls and reading the modal input data.
			 */
			initialize : function(){
				/**
				 * mashup calls to fetch all initial data like fulfillmentMethod, default search radius, max serach radius, distance UOM, service skills for service item
				*/
				var mashupArray = [];
				mashupArray.push(iscMashup.getMashupRefObj(this,'getFulfillmentTypeForStore',{Rules : { RuleSetFieldName : "WSC_STORE_PS_SEARCH"}}));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getDefaultRadiusValue',{Rules : { RuleSetFieldName : "WSC_STORE_DISTANCE_TO_CONSIDER"}}));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getMaxRadiusValue',{Rules : { RuleSetFieldName : "WSC_MAX_STORE_DISTANCE_TO_CONSIDER"}}));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getDistanceUOM',{Rules : { RuleSetFieldName : "WSC_STORE_DISTANCE_UOM_TO_CONSIDER"}}));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getSkillsForServiceItem',{Item : modalInput.inputData.Item}));
				
				iscMashup.callMashups(this,mashupArray,{}).then(this.onSuccessInitApis.bind(this),angular.noop);
			
			},

			/**
			 *@description Sucsess handler of init mashup calls.
			 *@param {Object} response - response of init mashup calls.
			 */
			onSuccessInitApis : function(response) {
				this.onSuccessGetMaxRadiusValue(response);
				this.onSuccessDistanceUOM(response);
				this.onSuccessGetDefaultRadiusValue(response);
				this.onSuccessGetSkillsForServiceItem(response);
				this.startWatchOnRadius();
			},

			/**
			 *@description monitors radius change and fires mashup to reload stores.
			 */
			startWatchOnRadius : function() {
				var that = this;
				this.ui.nearWach = $scope.$watch(function(that){ return that.ui.nearRadius },function(newValue, oldValue){
					that.onNearRadiusChange(newValue, oldValue);
				});
				this.ui.searchWach = $scope.$watch(function(that){ return that.ui.searchRadius },function(newValue, oldValue){
					that.onSearchRadiusChange(newValue, oldValue);
				});
			},
			
			/**
			 *@description Success handler of mashup getMaxRadiusValue, sets the radius slider max range value.
			 */
			onSuccessGetMaxRadiusValue : function() {
				this.ui.maxNearRadius = this.model.maxRadiusValue.Rules.RuleSetValue;
				this.ui.maxSearchRadius = this.model.maxRadiusValue.Rules.RuleSetValue;
			},
		
			/**
			 *@description Success handler of mashup getDistanceUOM, sets the radius slider distance UOM.
			 */
			onSuccessDistanceUOM : function() {
				this.ui.distanceUOM = this.model.distanceUOM.Rules.RuleSetValue;
				this.ui.distanceUOMDesc = this.model.distanceUOM.Rules.DistanceUOMDesc;
			},

			/**
			 *@description Success handler of mashup getDefaultRadiusValue, Fetches the stores list for the default radius.
			 */
			onSuccessGetDefaultRadiusValue : function() {
			    this.ui.nearRadius = this.model.defaultRadiusValue.Rules.RuleSetValue;
				this.ui.searchRadius = this.model.defaultRadiusValue.Rules.RuleSetValue;
			},

			/**
			 *@description Error handler of mashup getDefaultRadiusValue.
			 */
			handleGetDefaultRadiusValueError : function() {
				if(this.ui.nearWach)
				 this.ui.nearWach();
						 
				if(this.ui.searchWach)
				  this.ui.searchWach();
			
				this.ui.nearRadius = "25";
				this.ui.searchRadius = "25";
				
				this.ui.errorText = iscI18n.translate('changestore.Store_ErrMsg');
			},

			/**
			 *@description Success handler of mashup getSkillsForServiceItem, sets the radius slider max range value.
			 *@param {Object} response - response of getSkillsForServiceItem mashup call.
			 */
			onSuccessGetSkillsForServiceItem : function(response) {
				this.model.serviceSkillList.ServiceSkill = [];
				var skillsForServiceItem = iscMashup.getMashupOutput(response,"getSkillsForServiceItem");
				if(!iscCore.isVoid(skillsForServiceItem) && !iscCore.isVoid(skillsForServiceItem.ItemList) && !iscCore.isVoid(skillsForServiceItem.ItemList.Item)){
					var serviceItem = skillsForServiceItem.ItemList.Item[0];
					if(serviceItem.ItemServiceSkillList && serviceItem.ItemServiceSkillList.ItemServiceSkill)
					for(var i=0; i<serviceItem.ItemServiceSkillList.ItemServiceSkill.length; i++){
						this.model.serviceSkillList.ServiceSkill.push({ServiceSkillId:serviceItem.ItemServiceSkillList.ItemServiceSkill[i].ServiceSkillId});
					}
				}
				this.fetchCurrentNodeDetails();
				this.fetchNearbySurroundingNodeList(this.ui.nearRadius);
			},

			/**
			 *@description fetches details for current node by calling getCurrentStoreDetails mashup.
			 */
			fetchCurrentNodeDetails : function(){
				iscMashup.callMashup(this,"getCurrentStoreDetails",this.getOrgNodeDetailsInput(this.ui.currentShipNode),{}).then(this.initializeCurrentAndExistingSelectedStore.bind(this),angular.noop);
			},

			/**
			 *@description returns input to fech calendar and service availability for stores.
			 *@param {String} shipNode - node for which to fetch calendar and service availability.
			 */
			getOrgNodeDetailsInput : function(shipNode){
				var orgNodeInput = {Organization : {OrganizationCode : shipNode}};
				orgNodeInput.Organization.ServiceSkills = this.model.serviceSkillList;
				if(modalInput.inputData.BusinessDay)
					orgNodeInput.Organization.BusinessDay = modalInput.inputData.BusinessDay;
				return orgNodeInput;
			},

			/**
			 *@description sets current store and existing selected store.
			 *@param {Object} response - response of getCurrentStoreDetails mashup call.
			 */
			initializeCurrentAndExistingSelectedStore : function(response){
				var currentStoreOrgDetails = iscMashup.getMashupOutput(response, "getCurrentStoreDetails");
				this.ui.currentStore = currentStoreOrgDetails.Organization.Node;
				this.ui.currentStoreSurroundingNodeList = {"GetSurroundingNodeList":{"NodeList":{"Node":[this.ui.currentStore]}}};
				if(this.ui.currentShipNode === this.ui.existingSelectedShipNode)
					this.ui.currentSelectedStore = currentStoreOrgDetails.Organization.Node;
			},

		/** Near By Nodes view starts ****************/

			/**
			 *@description get surrounding node list for nearby tab.
			 *@param {String} radius - radius within which nearby surrounding nodes to be found.
			 */
			fetchNearbySurroundingNodeList : function(radius) {
				if(iscCore.isVoid(this.ui.currentStoreAddress.Country)) {
					this.ui.nearErrorText = iscI18n.translate('changestore.Store_ErrMsg');
				} else {
					this.ui.nearErrorText = "";
					this.ui.nearApiExecComplete = "false";
					iscMashup.callMashup(this,"getSurroundingNodeListForStore",this.getNearbyStoreInput(radius),{}).then(this.handleNearbyStoreAvailability.bind(this),angular.noop);
				}
			},

			/**
			 *@description get surrounding node list for nearby tab.
			 *@param {String} radius - radius within which nearby surrounding nodes to be found.
			 */
			getNearbyStoreInput : function(radius){
				nearByStoreInput =  {"GetSurroundingNodeList":{"InitialPageSize":this.ui.oPageSize}};
				if(modalInput.inputData.BusinessDay)
					nearByStoreInput.GetSurroundingNodeList.BusinessDay = modalInput.inputData.BusinessDay;
				nearByStoreInput.GetSurroundingNodeList.ServiceSkills = this.model.serviceSkillList;
				nearByStoreInput.GetSurroundingNodeList.FulfillmentType = this.model.FulfillmentType.Rules.RuleSetValue;
				nearByStoreInput.GetSurroundingNodeList.DistanceToConsider = radius;
				nearByStoreInput.GetSurroundingNodeList.DistanceToConsiderUOM = this.ui.distanceUOM;
				nearByStoreInput.GetSurroundingNodeList.ShipToAddress = this.ui.currentStoreAddress;
				return nearByStoreInput;
			},

			/**
			 *@description handles ouput for nearby stores output.
			 *@param {Object} response - response of  getSurroundingNodeListForStore mashup call.
			 */
			handleNearbyStoreAvailability : function(response){
				var nodeListModel = this.model.nearbyStoreList;
				var totalStores = (iscCore.isVoid(nodeListModel) || iscCore.isVoid(nodeListModel.GetSurroundingNodeList.NodeList) || !nodeListModel.GetSurroundingNodeList.NodeList.Node ||  
					!nodeListModel.GetSurroundingNodeList.NodeList.Node.length )?0:parseInt(nodeListModel.GetSurroundingNodeList.NodeList.Node.length);
				var storesWithServiceAvlb = 0;
				
				for(var i=0; i < totalStores; i++) {
					var node = nodeListModel.GetSurroundingNodeList.NodeList.Node[i];
					if(node.ServiceAvailable != 'N')
						storesWithServiceAvlb++;
					node.distanceUOMDesc = this.ui.distanceUOMDesc;
					if(totalStores <= this.ui.oPageSize && node.ServiceAvailable == 'N'){//when total store are 15 or less, show only stores where service is available
						node.displayStore = 'N';
					}else{
						node.displayStore = 'Y';
					}
					if(iscCore.isVoid(this.ui.currentSelectedStore) && (node.ShipNode === this.ui.existingSelectedShipNode)){
						this.ui.nearStore = node;
					}
				}
				var storesToBeConsidered = (totalStores <= this.ui.oPageSize)?storesWithServiceAvlb:totalStores;
				if(!storesToBeConsidered || storesToBeConsidered < 1){
					this.ui.noOfStoresFound = "";
					this.ui.noNearStoreFound = iscI18n.translate('changestore.Store_ErrMsg');
				}else{
					this.ui.noNearStoreFound= "";
					this.ui.noOfStoresFound=storesToBeConsidered;
				}
				if(!iscCore.isVoid(this.ui.currentSelectedStore)){//if the current store is selected then no need to select default node for specific nearby or search view 
					this.ui.nearStore = "";
				}

				this.ui.nearApiExecComplete = "true";
				this.ui.oldNearRadius = "";
			},

			/**
			 *@description Invoked on change of radius value in nearby stores tab, re-fetches surrounding node list.
			 *@param {String} newValue - new value for radius.
			 *@param {String} oldValue - old value for radius.
			 */
			onNearRadiusChange : function (newValue, oldValue){
				if(!(iscCore.isVoid(this.ui.oldNearRadius))){
						oldValue = this.ui.oldNearRadius;
				}
				if(!(newValue == oldValue)){
					//this.setDistanceUOMDescBasedOnValue(newValue);
					if(this.ui.nearApiExecComplete == "true"){
						this.ui.oldNearRadius = oldValue;
						this.ui.nearStore = "";
						this.model.nearbyStoreList = {};
						this.ui.oTotalNearStores = this.ui.oPageSize;
						this.ui.oNearApiCallInProgress = false;

						this.fetchNearbySurroundingNodeList(newValue);
					}
				}
								
			},

			/**
			 *@description pagination call for next set of records for nearby tab to stamp node calendar and service availability.
			 */
			uiNearNextPageCall : function(){
				this.ui.oNearApiCallInProgress = true;
				var mashupArray = [];
				var startIndex = this.ui.oTotalNearStores;
				var endIndex = (this.ui.oTotalNearStores + this.ui.oPageSize) < this.model.nearbyStoreList.GetSurroundingNodeList.NodeList.Node.length ? this.ui.oTotalNearStores + this.ui.oPageSize : this.model.nearbyStoreList.GetSurroundingNodeList.NodeList.Node.length;
				for(var i=startIndex; i<endIndex; i++){
					var node = this.model.nearbyStoreList.GetSurroundingNodeList.NodeList.Node[i];
					mashupArray.push(iscMashup.getMashupRefObj(this,'getServiceAvailabilityAndBusinessHours',this.getServiceAvlbInput(node)));
				}
				iscMashup.callMashups(this,mashupArray,{}).then(this.onSuccessNearNextPageCall.bind(this),angular.noop);
			},

			/**
			 *@description handles mashup call for pagination call for nearby tab.
			 *@param {Object} response - response of paginated mashup call for nearby view.
			 */
			onSuccessNearNextPageCall : function(response){
				this.massageNextPageOutput(this.model.nearbyStoreList, response);
				this.ui.oNearApiCallInProgress = false;
				this.ui.oTotalNearStores = this.ui.oTotalNearStores + this.ui.oPageSize;
			},

		/** Near By Nodes view ends ****************/
		/** Search Stores view starts *******************/

			/**
			 *@description hides nearby view and shown search view.
			 */
			uiOpenSearchTab : function(){
				this.ui.nearbyView = 'false';
				if(iscCore.isVoid(this.ui.searchStore))
					this.ui.searchStore = "true";
			},
			/**
			 *@description OnClick handler of "Back to Search" button, gets the search screen.
			 */
			uiBacktoSearch : function () {
				this.ui.searchStore = "true";
				this.ui.nearbyView = "false";
				this.ui.searchView = "false";
				this.ui.noStoreFound = "";
				this.ui.searchedStore="";
				this.ui.errorText = "";
				this.ui.oTotalSearchStores = this.ui.oPageSize;
				this.ui.oSearchApiCallInProgress = false;
			},

			/**
			 *@description OnClick handler of "Search" button, fetches the stores list based on the input search criteria provided by the user on search screen.
			 */
			uiSearchStore : function(){
				this.ui.searchButtonClick = "true";
				if(iscCore.isVoid(this.ui.personInfo.ZipCode) && (iscCore.isVoid(this.ui.personInfo.City) || iscCore.isVoid(this.ui.personInfo.State)) ){
					this.ui.errorText = iscI18n.translate('changestore.Address_ErrMsg');
					this.model.searchStoreList = {};
				} else {
					this.ui.errorText = "";
					this.ui.searchedStore = "";
					this.model.searchStoreList = {};
					this.ui.oTotalSearchStores = this.ui.oPageSize;
					this.ui.oSearchApiCallInProgress = false;
		
					this.fetchSearchSurroundingNodeList(this.ui.searchRadius);
				}
			},

			/**
			 *@description fetches surrounding node list for search tab.
			 *@param {String} radius - radius within wchich search surrounding nodes to be found.
			 */
			fetchSearchSurroundingNodeList : function(radius) {
				this.ui.searchApiExecComplete = "false";
				iscMashup.callMashup(this,"getSearchSurroundingNodeListForStore",this.getSearchStoreInput(radius),{}).then(this.handleSearchStoreAvailability.bind(this),angular.noop);
			},

			/**
			 *@description gets input for search store.
			 *@param {String} radius - radius within wchich search surrounding nodes to be found.
			 */
			getSearchStoreInput : function(radius){
				searchStoreInput =  {"GetSurroundingNodeList":{"InitialPageSize":this.ui.oPageSize}};
				searchStoreInput.GetSurroundingNodeList.ServiceSkills = this.model.serviceSkillList;
				if(modalInput.inputData.BusinessDay)
					searchStoreInput.GetSurroundingNodeList.BusinessDay = modalInput.inputData.BusinessDay;
				searchStoreInput.GetSurroundingNodeList.FulfillmentType = this.model.FulfillmentType.Rules.RuleSetValue;
				searchStoreInput.GetSurroundingNodeList.DistanceToConsider = radius;
				searchStoreInput.GetSurroundingNodeList.DistanceToConsiderUOM = this.ui.distanceUOM;
				var stateName = this.ui.personInfo.State ? this.ui.personInfo.State.RegionName : '';
				searchStoreInput.GetSurroundingNodeList.ShipToAddress = {"Country":this.ui.personInfo.Country, "City":this.ui.personInfo.City, "State":stateName, "ZipCode":this.ui.personInfo.ZipCode};
				return searchStoreInput;
			},

			/**
			 *@description handles output for search store mashup call.
			 */
			handleSearchStoreAvailability : function() {
				var nodeListModel = this.model.searchStoreList;
				var totalStores = (iscCore.isVoid(nodeListModel) || iscCore.isVoid(nodeListModel.GetSurroundingNodeList.NodeList) || !nodeListModel.GetSurroundingNodeList.NodeList.Node ||  
					!nodeListModel.GetSurroundingNodeList.NodeList.Node.length )?0:parseInt(nodeListModel.GetSurroundingNodeList.NodeList.Node.length);
				var storesWithServiceAvlb = 0;
				for(var i=0; i < totalStores; i++) {
					var node = nodeListModel.GetSurroundingNodeList.NodeList.Node[i];
					node.distanceUOMDesc = this.ui.distanceUOMDesc;
					if(node.ServiceAvailable != 'N')
						storesWithServiceAvlb++;
					if(totalStores <= this.ui.oPageSize && node.ServiceAvailable == 'N'){//when total store are 15 or less, show only stores where service is available
						node.displayStore = 'N';
					}else{
						node.displayStore = 'Y';
					}
					if(iscCore.isVoid(this.ui.currentSelectedStore) && (node.ShipNode === this.ui.existingSelectedShipNode)){
						this.ui.searchedStore = node;
					}
				}
				var storesToBeConsidered = (totalStores <= this.ui.oPageSize)?storesWithServiceAvlb:totalStores;
				if(!storesToBeConsidered || storesToBeConsidered < 1){
					if(this.ui.searchButtonClick == "true"){
						this.ui.errorText = "";
					}else{
						this.ui.searchButtonClick = "false";
					}
					this.ui.noStoreFound = iscI18n.translate('changestore.Store_ErrMsg');
					this.ui.noOfStoresSearched = "";
				}else{
					this.ui.errorText = "";
					this.ui.noStoreFound = "";
					this.ui.searchButtonClick = "false";
					this.ui.searchView = "true";
					this.ui.searchStore = "false";
					
					this.ui.noOfStoresSearched = storesToBeConsidered;
				}
				if(!iscCore.isVoid(this.ui.currentSelectedStore)){//if the current store is selected then no need to select default node for specific nearby or search view 
					this.ui.searchedStore = "";
				}
				
				this.ui.searchApiExecComplete = "true";
				this.ui.oldSearchRadius = "";
			},

			/**
			 *@description Invoked on change of radius value in search stores tab, fetches the next store list based on the new input radius value provided by the user.
			 *@param {String} newValue - new value for radius.
			 *@param {String} oldValue - old value for radius.
			 */
			onSearchRadiusChange : function (newValue, oldValue){
				if(!(iscCore.isVoid(this.ui.oldSearchRadius))){
					oldValue = this.ui.oldSearchRadius;
				}
				
				if(!(newValue == oldValue)){
					
					if(this.ui.searchView == 'false' || this.ui.nearbyView == 'true'){//when search list is not displayed, don't do anything
						return;
					}else if(this.ui.searchApiExecComplete == "false"){//if the api call is still going through, dont fire another
						this.ui.searchRadius = oldValue;
					}else if(this.ui.searchApiExecComplete == "true"){
						this.ui.oldSearchRadius = oldValue;
						this.ui.errorText = "";
						this.ui.searchedStore = "";
						this.model.searchStoreList = {};
						this.ui.oTotalSearchStores = this.ui.oPageSize;
						this.ui.oSearchApiCallInProgress = false;
				 
						this.fetchSearchSurroundingNodeList(newValue);
						this.ui.searchApiExecComplete = "false";
					
					}
				}
								
			},

			/**
			 *@description pagination call for next set of records for nearby tab to stamp node calendar and service availability.
			 */
			uiSearchNextPageCall : function(){
				this.ui.oSearchApiCallInProgress = true;
				var mashupArray = [];
				var startIndex = this.ui.oTotalSearchStores;
				var endIndex = (this.ui.oTotalSearchStores + this.ui.oPageSize) < this.model.searchStoreList.GetSurroundingNodeList.NodeList.Node.length ? this.ui.oTotalSearchStores + this.ui.oPageSize : this.model.searchStoreList.GetSurroundingNodeList.NodeList.Node.length;
				for(var i=startIndex; i<endIndex; i++){
					var node = this.model.searchStoreList.GetSurroundingNodeList.NodeList.Node[i];
					mashupArray.push(iscMashup.getMashupRefObj(this,'getServiceAvailabilityAndBusinessHours',this.getServiceAvlbInput(node)));
				}
				iscMashup.callMashups(this,mashupArray,{}).then(this.onSuccessSearchNextPageCall.bind(this),angular.noop);
			},

			/**
			 *@description handles mashup call for pagination call for search tab.
			 */
			onSuccessSearchNextPageCall : function(response){
				this.massageNextPageOutput(this.model.searchStoreList, response);
				this.ui.oSearchApiCallInProgress = false;
				this.ui.oTotalSearchStores = this.ui.oTotalSearchStores + this.ui.oPageSize;
			},

		/** Search Stores view ends ********************/

			/**
			 *@description returns input for getServiceAvailabilityAndBusinessHours mashup call.
			 *@param {Object} node - node object.
			 */
			getServiceAvlbInput : function(node){
				var org = node.Organization;
				var serviceAvlbInput = {"ResourcePool" : {"Node" : org.OrganizationCode, "CapacityOrganizationCode": org.CapacityOrganizationCode, "BusinessCalendarKey": org.BusinessCalendarKey}};
				serviceAvlbInput.ResourcePool.ServiceSkills = this.model.serviceSkillList;
				if(modalInput.inputData.BusinessDay)
					serviceAvlbInput.ResourcePool.BusinessDay = modalInput.inputData.BusinessDay;
				return serviceAvlbInput;
			},
			
			/**
			 *@description massages output for surrounding node list call and sets some common attributes like UOM description etc.
			 *@param {Array} surroundingNodes - list of surrounding nodes.
			 *@param {String} mode - nearby or search.
			 */
			massageOutputForAvailability : function(surroundingNodes, mode){
			},
		
			/**
			 *@description sets store model after highlighting a store.
			 *@param {Object} storeHightlighted - highlighted store object.
			 */
			uiOnStoreHighlight : function(storeHightlighted){
				var oMode = storeHightlighted.mode;
				if(oMode == 'common'){
					this.ui.nearHighlightedStore = {};
					this.ui.searchHighlightedStore = {};
				}else if(oMode == 'nearby' || oMode == 'search'){
					this.ui.currentHighlightedStore = {};
				}
			},

			/**
			 *@description sets store model after selecting a store.
			 *@param {String} mode - nearby or search.
			 */
			uiOnStoreSelection : function(mode){
				if(mode == 'common'){
					this.ui.nearStore = {};
					this.ui.searchedStore = {};
				}else if(mode == 'nearby' || mode == 'search'){
					this.ui.currentSelectedStore = {};
				}
				$timeout(this.uiSubmit.bind(this), 0);
			},

			/**
			 *@description pagination call for next set of records.
			 *@param {Object} nextCallInput - input for next paginated call.
			 */
			uiOnNextPageCall : function(nextCallInput){
				if(nextCallInput.mode == 'nearby'){
					this.uiNearNextPageCall();
				}else if(nextCallInput.mode == 'search'){
					this.uiSearchNextPageCall();
				}
			},

			/**
			 *@description massages output for pagination call.
			 *@param {Object} originalModel - original model for stores.
			 *@param {Object} controllerOutput - output for next page call.
			 */
			massageNextPageOutput : function(originalModel, controllerOutput){
				for(var i=0;i<controllerOutput.MashupRefs.MashupRef.length;i++){
					var newNode = controllerOutput.MashupRefs.MashupRef[i].Output.Node;
					for(j=0; j<originalModel.GetSurroundingNodeList.NodeList.Node.length; j++){
						var origNode = originalModel.GetSurroundingNodeList.NodeList.Node[j];
						if(origNode.ShipNode === newNode.ShipNode){
							angular.extend(origNode, newNode);
							break;
						}
					}
				}
			},

			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},

			/**
			 *@description OnClick handler of "OK" button, propagates the selected store data to invoking screen.
			 */
			uiSubmit : function () {
				if(!iscCore.isVoid(this.ui.currentSelectedStore)){//if current store is selected
					this.ui.selectedStore = this.ui.currentSelectedStore;
				}else if(this.ui.nearbyView == 'false'){//if a store in search view is selected
					this.ui.selectedStore = this.ui.searchedStore;}
				else if(this.ui.nearbyView == 'true'){//if a store in nearby view is selected
					this.ui.selectedStore = this.ui.nearStore;
				}
				if(iscCore.isVoid(this.ui.selectedStore)){
					this.ui.errorText = iscI18n.translate('changeStore.SelectStore_ErrMsg');
				}else{
					var resultdata = {data : this.ui.selectedStore};
					$uibModalInstance.close(resultdata);
				}
			}

  		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


 /**
 *@iscdoc viewinfo
 *@viewname store.views.appointments.in-store.store-appointments.appointments-calendar
 *@package store.views.appointments.in-store.store-appointments
 *@class appointments-calendar
 *@description Displays Store appointment calendar page.
 */
angular.module("store").controller("store.views.appointments.in-store.store-appointments.appointments-calendar", [
	"$scope", "$interval", "iscScreen", "moment",'iscMashup','iscState','iscI18n','iscInStoreAppointment','iscAppContext','$filter','iscTimezone','iscRule','iscResourcePermission',
	function($scope, $interval, iscScreen, moment,iscMashup,iscState,iscI18n,iscInStoreAppointment,iscAppContext,$filter,iscTimezone,iscRule,iscResourcePermission) {
		iscScreen.initializeScreen($scope, {
			model: {},
			
			mashupRefs: [
				{
				   /**
					* @iscdoc mashup
				    * @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				    * @mashupid store.views.appointments.in-store.store-appointments.getWorkOrderAppointmentsList
				    * @mashuprefid getStoreAppointmentsList
					* @description Gets list of open and completed appointments for the selected day in the current store.
					*/
					mashupRefId: 'getStoreAppointmentsList',
					mashupId: 'store.views.appointments.in-store.store-appointments.getWorkOrderAppointmentsList'
				},
				{
				   /**
					* @iscdoc mashup
				    * @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				    * @mashupid store.views.appointments.in-store.store-appointments.getOpenStoreAppointmentsCount
				    * @mashuprefid getOpenStoreAppointmentsCount
					* @description Gets count of open appointments for the selected day in the current store.
					*/
					mashupRefId: 'getOpenStoreAppointmentsCount',
					mashupId: 'store.views.appointments.in-store.store-appointments.getOpenStoreAppointmentsCount'
				},
				{
				   /**
					* @iscdoc mashup
				    * @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				    * @mashupid store.views.appointments.in-store.store-appointments.getCompletedStoreAppointmentsCount
				    * @mashuprefid getCompletedStoreAppointmentsCount
					* @description Gets count of completed appointments for the selected day in the current store.
					*/
					mashupRefId: 'getCompletedStoreAppointmentsCount',
					mashupId: 'store.views.appointments.in-store.store-appointments.getCompletedStoreAppointmentsCount'
				},
				{
				   /**
					* @iscdoc mashup
				    * @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				    * @mashupid store.views.appointments.in-store.store-appointments.getStoreAvailabilityForCurrentWeek
				    * @mashuprefid getStoreAvailabilityForCurrentWeek
					* @description Gets store opening and closing times for all days of the week. Also gets the working and non-working days for the selected week.
					*/
					mashupRefId: 'getStoreAvailabilityForCurrentWeek',
					mashupId: 'store.views.appointments.in-store.store-appointments.getStoreAvailabilityForCurrentWeek'
				}
			
			],
			
			ui: {
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {String} selectedDayString - Date selected for which the calendar view has to be displayed
				*/
				selectedDayString: "",
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {Integer} storeAppointmentCount - Count of number of open and completed appointments for the selected day in current store
				*/
				storeAppointmentCount: 0,
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {Integer} openStoreAppointmentsCount - Count of number of open appointments for the selected day in current store
				*/
				openStoreAppointmentsCount: 0,
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {Integer} completedStoreAppointmentCount - Count of number of completed appointments for the selected day in current store
				*/
				completedStoreAppointmentCount: 0,
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {String} storeBusinessCalendarKey - Calendar key associated with the store. This is used to get the opening and closing hours for the week.
				*/
				storeBusinessCalendarKey: "",
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {String} storeLocaleTimeZone - Timezone associated with logged in store. This is used to display the start and end times for each day.
				*/
				storeLocaleTimeZone: "",
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {Boolean} noAppointmentsForToday - 
				*/
				noAppointmentsForToday: true,
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {Boolean} isApiCallInProgress - 
				*/
				isApiCallInProgress: true,
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {Object} eventsData - 
				*/
				eventsData: null,
				//eventsArray: [],
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {Array} calenderWeekData - 
				*/
				calenderWeekData: [],
			   /**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {String} timezoneOffset - Timezone associated with logged in store. This is used to display the start and end times for each day.
				*/
				timezoneOffset: "",
				/**
				* @iscdoc uiattr
				* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
				* @property {Boolean} hasCreateAppointmentPermission - Flag to indicate if user has permission for 'Create Appointment' flow
				*/
				hasCreateAppointmentPermission: false,
				/**
				 * @description {Number} maxAppointmentDaysAhead - Holds number of days in advance of booking an appointment.
				 */
                maxAppointmentDaysAhead:iscRule.getRuleSetValue('maxAppointmentDaysAhead'),
                /**
                 *@property {Boolean} isSelectedDateAHoliday Flag to indicate whether the selected is a working or non-working day
                 */
                isSelectedDateAHoliday:false
			},
			
		   /**
			* @iscdoc viewinit
			* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
			* @description Reads from application context and initializes calendar key and timezone values for the store.
			*/
			initialize: function() {
				this.ui.storeBusinessCalendarKey = iscAppContext.getFromContext('storeBusinessCalendarKey');
				this.ui.storeLocaleTimeZone = iscAppContext.getFromContext('storeLocaleTimeZone');
				this.ui.timezoneOffset = iscTimezone.getTimezoneOffset(this.ui.storeLocaleTimeZone);
				if(iscResourcePermission.hasPermission('WSC000074')) {
					this.ui.hasCreateAppointmentPermission = true;
				}
			},
			
			/**
			 * @iscdoc uimethod
			 * @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
			 * @methodname uiHandleDateChange
			 * @description Calls mashups to fetch appointment counts (open and complete) and also list of appointments for the date selected.
			 * @param {Object} dateData - Date for which appointment data needs to be fetched 
			 */
			uiHandleDateChange: function(dateData){
                this.ui.selectedDayString = dateData.selectedDate;
                this.ui.isApiCallInProgress = true;
                var that = this;
				var listMashupInput = {WorkOrderAppointment:{}};
				listMashupInput.WorkOrderAppointment.FromPromisedApptStartDate = this.ui.selectedDayString+'T00:00:00'+this.ui.timezoneOffset;
				listMashupInput.WorkOrderAppointment.ToPromisedApptStartDate = this.ui.selectedDayString+'T23:59:59'+this.ui.timezoneOffset;
				var mashupArray = [];
				mashupArray.push(iscMashup.getMashupRefObj(that,'getStoreAppointmentsList',listMashupInput));
				mashupArray.push(iscMashup.getMashupRefObj(that,'getOpenStoreAppointmentsCount',listMashupInput));
				mashupArray.push(iscMashup.getMashupRefObj(that,'getCompletedStoreAppointmentsCount',listMashupInput));
				iscMashup.callMashups(that,mashupArray,{}).then(that.processListMashupOutput.bind(that),angular.noop);
            },
			
            /**
             *@description Informs whether the selected date is a working or non-working day
			 * @param {Object} holidayData - contains flag about working or non-working day
            */
			uiHandleDateSelectionChangeIsHoliday: function(holidayData){
				this.ui.isSelectedDateAHoliday = holidayData.isHoliday;
            },
            
			/**
			 * @iscdoc uimethod
			 * @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
			 * @methodname uiHandleAppointmentSelection
			 * @description Opens the summary screen for a confirmed appointment. Opens the 'Create Appointment' flow for an anonymous appointment.
			 * @param {Object} selectedEventData - Data associated with the appointment that is clicked on the list
			 */
            uiHandleAppointmentSelection: function(selectedEventData) {
				if ((selectedEventData.orderDetails && selectedEventData.customerDetails.billToId && selectedEventData.customerDetails.draftOrderFlag == 'N') || (!this.ui.hasCreateAppointmentPermission)) {
					iscInStoreAppointment.openAppointmentSummary(selectedEventData.orderDetails);
				} else {
					//iscState.goToState('manage-appointment',{input:selectedEventData.orderDetails},{});
					iscInStoreAppointment.openCreateAppointmentWizard({input:selectedEventData.orderDetails});
				}
			},
            
			/**
			 * @iscdoc uimethod
			 * @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
			 * @methodname uiHandleWeekChange
			 * @description Refreshes the page with data for the current week selected, like store opening and closing times, holidays in the week etc.
			 * @param {Object} weekData - Object containing start and end dates of the week
			 */
            uiHandleWeekChange: function(weekData) {
				var fromDate = weekData.fromDate;
				this.ui.isApiCallInProgress = true;
				var toDate = weekData.toDate;
				var that = this;
				var weeklyCalendarMashupInput = {Calendar:{}};
				weeklyCalendarMashupInput.Calendar.CalendarKey = this.ui.storeBusinessCalendarKey;
				weeklyCalendarMashupInput.Calendar.FromDate = fromDate;
				weeklyCalendarMashupInput.Calendar.ToDate = toDate;
				iscMashup.callMashup(that,"getStoreAvailabilityForCurrentWeek", weeklyCalendarMashupInput,{}).then(that.processWeeklySlotstMashupOutput.bind(that),angular.noop);
			},
            
			/**
			* @iscdoc method
			* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
			* @methodname processListMashupOutput
			* @description Callback handler for 'getStoreAppointmentsList' API mashup call
			* @param {Object} response - Output data of 'getStoreAppointmentsList' mashup call
			*/
			processListMashupOutput: function(response) {
				var storeAppointmentListOutput = iscMashup.getMashupOutput(response,"getStoreAppointmentsList");
				var openAppointmentsCountOutput = iscMashup.getMashupOutput(response,"getOpenStoreAppointmentsCount");
				var completedAppointmentsCountOutput = iscMashup.getMashupOutput(response,"getCompletedStoreAppointmentsCount");
				this.ui.openStoreAppointmentsCount = Number(openAppointmentsCountOutput.WorkOrderAppointments.TotalNumberOfRecords);
				this.ui.completedStoreAppointmentCount = Number(completedAppointmentsCountOutput.WorkOrderAppointments.TotalNumberOfRecords);
				this.ui.storeAppointmentCount = this.ui.openStoreAppointmentsCount + this.ui.completedStoreAppointmentCount;
				this.showAppointmentCalendar(storeAppointmentListOutput);
			},
			
			/**
			* @iscdoc method
			* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
			* @methodname processWeeklySlotstMashupOutput
			* @description Callback handler for 'getStoreAvailabilityForCurrentWeek' API mashup call
			* @param {Object} response - Output data of 'getStoreAvailabilityForCurrentWeek' mashup call
			*/
			processWeeklySlotstMashupOutput: function(response) {
				var storeWeekAvailability = iscMashup.getMashupOutput(response,"getStoreAvailabilityForCurrentWeek");
				var weeklyScheduleToPublish = [];
				
				if(storeWeekAvailability.Calendar.Dates.Date.length > 0) {
					for(var i=0; i< storeWeekAvailability.Calendar.Dates.Date.length; i++) {
						var currentDate = storeWeekAvailability.Calendar.Dates.Date[i];
						var currentDateObj = {};
						currentDateObj.date = currentDate.Date;
						currentDateObj.startTime = currentDate.EarliestShiftStartTime;
						currentDateObj.endTime = currentDate.LastShiftEndTime;
						currentDateObj.isWorkingDay = currentDate.Type;
						weeklyScheduleToPublish.push(currentDateObj);
					}
				}
				
				this.ui.calenderWeekData = weeklyScheduleToPublish;
				this.updateEventDataForCalendar(weeklyScheduleToPublish, null);
			},
			
			/**
			* @iscdoc method
			* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
			* @methodname updateEventDataForCalendar
			* @description Updates the model data for the calendar shell.
			* @param {Array} weeklyScheduleToPublish - 
			* @param {Array} eventsArrayToPublish - 
			*/
			updateEventDataForCalendar: function(weeklyScheduleToPublish, eventsArrayToPublish) {
				var tmpEventsData = {};
				if (weeklyScheduleToPublish != null) {
					tmpEventsData.selectedDayData = {
						"selectedDayString": this.ui.selectedDayString
					};
					for (var i = 0; i < weeklyScheduleToPublish.length; i++) {
						var aDayOfWeek = weeklyScheduleToPublish[i];
						if (tmpEventsData.selectedDayData.selectedDayString === aDayOfWeek.date) {
							tmpEventsData.selectedDayData.min = aDayOfWeek.startTime;
							tmpEventsData.selectedDayData.max = aDayOfWeek.endTime;
							break;
						}
					}
				}
				if (eventsArrayToPublish != null) {
					tmpEventsData.eventArray = eventsArrayToPublish;
				}
				if (tmpEventsData.selectedDayData != null && tmpEventsData.eventArray != null) {
					this.ui.isApiCallInProgress = false;
					this.ui.eventsData = tmpEventsData;
					if (tmpEventsData.eventArray.length === 0) {
						this.ui.noAppointmentsForToday = true;
					} else {
						this.ui.noAppointmentsForToday = false;
					}
				}
			},
			
			/**
			 * @iscdoc uimethod
			 * @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
			 * @methodname uiClose
			 * @description Closes the page and takes the user to Home page.
			 */
			uiClose: function() {
				iscState.goToState('/home',{},{});
			},
			
			/**
			* @iscdoc method
			* @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
			* @methodname showAppointmentCalendar
			* @description Constructs the model data for calendar shell directive.
			* @param {Object} storeAppointmentListOutput - Output data of 'getStoreAppointmentsList' mashup call
			*/
			showAppointmentCalendar: function(storeAppointmentListOutput) {
				var selectedDayString = this.ui.selectedDayString;
				var eventsArrayToPublish = [];
				
				if(storeAppointmentListOutput.WorkOrderAppointments.TotalNumberOfRecords > 0) {
					for(var i = 0; i < storeAppointmentListOutput.WorkOrderAppointments.TotalNumberOfRecords; i++) {
						var currentAppt = storeAppointmentListOutput.WorkOrderAppointments.WorkOrderAppointment[i];
						var currentApptEventObj = {};
						currentApptEventObj.eventName = currentAppt.WorkOrder.WorkOrderServiceLines.WorkOrderServiceLine[0].ItemShortDescription ;
						currentApptEventObj.start = $filter('date')(currentAppt.PromisedApptStartDate, 'yyyy-MM-ddTHH:mm:ss', currentAppt.WorkOrder.TimezoneOffset);
						currentApptEventObj.end = $filter('date')(currentAppt.PromisedApptEndDate, 'yyyy-MM-ddTHH:mm:ss', currentAppt.WorkOrder.TimezoneOffset);
						currentApptEventObj.status = currentAppt.ApptStatus;
						currentApptEventObj.statusBundleKey = "instoreappointment.LABEL_"+currentAppt.ApptStatus;
						currentApptEventObj.customerDetails = {};
						currentApptEventObj.customerDetails.name = iscI18n.translate("address.LABEL_Display_name", {'firstname':currentAppt.WorkOrder.Order.CustomerFirstName,'lastname':currentAppt.WorkOrder.Order.CustomerLastName});
						currentApptEventObj.customerDetails.email = currentAppt.WorkOrder.Order.CustomerEMailID;
						currentApptEventObj.customerDetails.mobile = currentAppt.WorkOrder.Order.CustomerPhoneNo;
						currentApptEventObj.customerDetails.billToId = currentAppt.WorkOrder.Order.BillToID;
						currentApptEventObj.customerDetails.draftOrderFlag = currentAppt.WorkOrder.Order.DraftOrderFlag;
						currentApptEventObj.orderDetails = {};
						currentApptEventObj.orderDetails.Order = {};
						currentApptEventObj.orderDetails.Order.OrderHeaderKey = currentAppt.WorkOrder.OrderHeaderKey;
						
						eventsArrayToPublish.push(currentApptEventObj);
					}
				} else {
					// Load no appointments message
				}
				
				this.updateEventDataForCalendar(this.ui.calenderWeekData, eventsArrayToPublish);
			},
			
			/**
			 * @iscdoc uimethod
			 * @viewname store.views.appointments.in-store.store-appointments.appointments-calendar
			 * @methodname uiCreateAppointment
			 * @description Opens the 'Create Appointment' wizard.
			 */
			uiCreateAppointment: function() {
				//iscState.goToState('manage-appointment',{},{});
				iscInStoreAppointment.openCreateAppointmentWizard({});
			}
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
 /**
 *@iscdoc viewinfo
 *@viewname store.views.customer.customer-profile.list.customer-profile-list
 *@package store.views.customer.customer-list
 *@class customer-profile-list
 *@description Displays the customer profile list when searched from Lookup Customer portlet.
 *
 */
angular.module('store').controller('store.views.customer.customer-profile.list.customer-profile-list',
  ['$scope','$rootScope','$filter','iscScreen','iscStateParams','iscMashup','iscModal','iscCustomer','iscResourcePermission','iscI18n','iscAppContext','iscState','$timeout','iscDomUtility',
	function($scope,$rootScope,$filter,iscScreen,iscStateParams,iscMashup,iscModal,iscCustomer,iscResourcePermission,iscI18n,iscAppContext,iscState,$timeout,iscDomUtility) {
		
	  iscScreen.initializeScreen($scope,{
           pageModel:{},
			model:{
                /**
                 *@description contains customer list filtered on input search criteria.
                 */
                "customerList":{},
                /**
                 *@description contains the search criteria to find customers.
                 */
                "getCustomerListInput":{}
            },
            mashupRefs:[{
                /**
                 *@description Mashup used to list customers in a paginated way
                 */
                    mashupRefId: 'getPaginatedCustomerList',
                    mashupId: 'store.views.customer.customer-profile.getPaginatedCustomerList',
                    isPaginated: true,
					pageSize : iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					setFocus:true,
					appendPath : 'CustomerList.Customer',
					modelName:"customerList"
                     

                 }],
            ui:{
                /**
                *@property {String}  pageSize -Default number of order records to be shown while loading next records.
                */
                 pageSize: Number(iscAppContext.getFromContext("masterDataPageSize")),
                /**
                 *@property {String}  recordShownCount - Total number of order records displayed in the screen
                 */
                 recordShownCount: Number(iscAppContext.getFromContext("masterDataPageSize")),
                /**
                *@property {String}   apiPageSize - Number of records to be fetched by getOrderList API in one call.
                */
                apiPageSize:  Number(iscAppContext.getFromContext("listApiPageSize")),
                /**
                *@property {String}  noOfSearchResults - Number of search results
                */
                noOfSearchResults: "-1",
                /**
                *@property {Boolean}  searchInProgress - True if mashup call is still in progress, false otherwise.
                */
                searchInProgress: false,
                /**
                 *@property {String}  hideSearch - Flag to hide or show the customer lookup in the page
                 */
                hideSearch:'N',
                /**
                 *@property {String}  customerLookupType - contains the search type (EMAILID, PHONE_NUMBER or ADV_SEARCH) based on the search operation performed in the portlet or current screen. 
                 */
                customerLookupType:'',
                /**
                 *@property {String}  searchText - contains the search result text to be displayed in screen. Eg - 3 results for "Abby Doyle"
                 */
                searchText:'',
                /**
                 *@property {String}  searchCriteriaContextKeyName - contains the context key name which stores customer search criteria.
                 */
                searchCriteriaContextKeyName: 'customerLookupSearchCriteria',
                /**
                 *@property {Boolean}  getSearchCriteriaFromContext - Flag to get search criteria from context object when this screen is loaded on click of "Back" link
                 */
                getSearchCriteriaFromContext:false,
                /**
                 *@property {Boolean}  isBackButtonClicked - Flag to check if customer profile list screen was loaded by clicking "Back" link.
                 */
                isBackButtonClicked:false
            },
            
            /**
             *@description sets the customer list model using the output sent by the return lookup header
             */
            initialize: function(){
            	
            	var openBlankPage = iscStateParams.params.openBlankPage ? true : false;
            	var pageInput = iscStateParams.params.input;
            	this.ui.isBackButtonClicked = (iscStateParams.options && iscStateParams.options.backButtonClicked) ? true : false;
            	
            	if(!openBlankPage || this.ui.isBackButtonClicked) {
            		
            		if(this.ui.isBackButtonClicked) {
            			
            			var customerLookupSearchCriteria = iscAppContext.getFromContext(this.ui.searchCriteriaContextKeyName);
    	    			if(!iscCore.isVoid(customerLookupSearchCriteria) && !iscCore.isVoid(customerLookupSearchCriteria.input)){
    	    				this.model.getCustomerListInput = customerLookupSearchCriteria.input;
    	    				this.ui.getSearchCriteriaFromContext = true;
    	    				this.ui.customerLookupType = customerLookupSearchCriteria.lookupType;
    	    			}
            			
            		} else {
            			
            			 iscAppContext.removeFromContext(this.ui.searchCriteriaContextKeyName);
            			 
            			 if(!iscCore.isVoid(pageInput) && !iscCore.isVoid(pageInput.getCustomerListInput)) {
                     		this.model.getCustomerListInput = pageInput.getCustomerListInput;
            			 } else {
            				 this.ui.noOfSearchResults = 0;
            			 }
            			
            		}
            		
            		if(pageInput.lookupType) {
            			this.ui.customerLookupType = iscStateParams.params.input.lookupType;
            		}
            		
            		iscMashup.callPaginatedMashup(this,'getPaginatedCustomerList',this.model.getCustomerListInput,"START",{}).then(
           				 this.processPaginatedCustomerList.bind(this),angular.noop);
            		
            	} else {
            		this.ui.noOfSearchResults = 0;
            	}
            	
            	
            	var that = this;
				
				$scope.$watch("ui.CustomerPaymentMethod.DisplayCreditCardNo",function(newValue, oldValue){
					if(!iscCore.isVoid(newValue) && newValue.length > 4) {       
					    that.ui.CustomerPaymentMethod.DisplayCreditCardNo = oldValue;
					  }
				});
				
				$scope.$watch("ui.showAdvanceSearch",function (newValue, oldValue) {
					
					if(newValue) {
						iscDomUtility.setFocus(document.getElementById('lookupCustomerfirstName'));
					}
					
				});
                 
            },
            
            /**
			 * @description Callback handler for
			 *              getPaginatedCustomerList mashup. This
			 *              method processes the getPaginatedCustomerList API
			 *              output and navigates to Customer Profile or
			 *              Customer List screen depending on the number of
			 *              customers returned by mashup.
			 * @param {Object}
			 *            response - mashup response JSON object
			 */
            processPaginatedCustomerList:function(response) {
            	 var output = iscMashup.getMashupOutput(response,"getPaginatedCustomerList");
            	 this.ui.noOfSearchResults =  Number(output.Page.Output.CustomerList.TotalNumberOfRecords);
            	 
            	 if(this.ui.noOfSearchResults == 1 && !this.ui.isBackButtonClicked){
		    		 iscState.goToState('customerprofilewizard',{action:'customerdetails',input:{Customer:output.Page.Output.CustomerList.Customer[0]}},{});
		    	 }else{
		    		 this.setCustomerSearchResultText();
		    		 var numOfRec = Number(output.Page.Output.CustomerList.TotalNumberOfRecords);
	     			 if(numOfRec > 0) {
	     				 this.ui.selectedCustomerKey = output.Page.Output.CustomerList.Customer[0].CustomerKey;
	     			 }
		    		 this.handleGetCustomerListOutput(output, false);
		    	 }
            	 
            	 
            },
            
            /**
             * @description This method is used to form search result text ( 3 results for "Abby Doyle") based on the search type to be displayed on the screen.
             */
            setCustomerSearchResultText:function() {
            	
            	if (this.model.getCustomerListInput && this.model.getCustomerListInput.Customer) {
            		
					if (this.ui.customerLookupType == 'EMAILID' || this.ui.customerLookupType == 'PHONE_NUMBER') {
						
						if(this.model.getCustomerListInput.Customer.CustomerContactList && this.model.getCustomerListInput.Customer.CustomerContactList.CustomerContact) {
							
							this.ui.searchText = this.model.getCustomerListInput.Customer.CustomerContactList.CustomerContact.ComplexQuery.Or.Exp[0].Value;
						}
						
					} else if(this.ui.customerLookupType == 'ADV_SEARCH') {
						
						if(this.model.getCustomerListInput.Customer.CustomerContactList && this.model.getCustomerListInput.Customer.CustomerContactList.CustomerContact) {
							
							var firstName = this.model.getCustomerListInput.Customer.CustomerContactList.CustomerContact.FirstName;
							var lastName = this.model.getCustomerListInput.Customer.CustomerContactList.CustomerContact.LastName;
							
							if(firstName) {
								this.ui.searchText = firstName;
							}
							
							if(lastName) {
								this.ui.searchText = (this.ui.searchText) ? this.ui.searchText + " "+ lastName : lastName;
							}
							
						}

						if (this.model.getCustomerListInput.Customer.CustomerPaymentMethodList
								&& this.model.getCustomerListInput.Customer.CustomerPaymentMethodList.CustomerPaymentMethod && this.model.getCustomerListInput.Customer.CustomerPaymentMethodList.CustomerPaymentMethod.DisplayCreditCardNo) {
							
							var displayCardNo = this.model.getCustomerListInput.Customer.CustomerPaymentMethodList.CustomerPaymentMethod.DisplayCreditCardNo;
							
							this.ui.searchText = (this.ui.searchText) ? this.ui.searchText + " "+ displayCardNo : displayCardNo;
							
						}
					}

				}
            	
            	
            },
            
            /**
             * @description This method sets the search lookupType(EMAILID, PHONE_NUMBER or ADV_SEARCH) based on customer search criteria 
             */
            uiInitializeCustomerLookup:function() {
            	
            	
            	if (this.model.getCustomerListInput && this.model.getCustomerListInput.Customer) {
            		
            		
					if (this.ui.customerLookupType == 'EMAILID' || this.ui.customerLookupType == 'PHONE_NUMBER') {
						
						if(this.model.getCustomerListInput.Customer.CustomerContactList && this.model.getCustomerListInput.Customer.CustomerContactList.CustomerContact) {
							this.model.lookupValue = this.model.getCustomerListInput.Customer.CustomerContactList.CustomerContact.ComplexQuery.Or.Exp[0].Value;
						}
						
					}  else if(this.ui.customerLookupType == 'ADV_SEARCH') {
						
						this.ui.search = this.model.getCustomerListInput.Customer;

						if (this.model.getCustomerListInput.Customer.CustomerPaymentMethodList
								&& this.model.getCustomerListInput.Customer.CustomerPaymentMethodList.CustomerPaymentMethod) {
							this.ui.CustomerPaymentMethod = this.model.getCustomerListInput.Customer.CustomerPaymentMethodList.CustomerPaymentMethod;
						} else {
							this.ui.CustomerPaymentMethod = {DisplayCreditCardNo:''};
						}
					}

				}
            	
            },
            
            /**
			 * @description This method invokes getCompleteCustomerList API to find customers matching the search criteria.
			 */
            uiFindCustomerBySearchCriteria:function() {
				
            	var that = this;
				var getCompleteCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:{}}}};
				
				 if(this.ui.search && this.ui.search.CustomerContactList) {
					 getCompleteCustomerListInput.Customer.CustomerContactList.CustomerContact = this.ui.search.CustomerContactList.CustomerContact;
		   		 }
				 
	   			 if(this.ui.CustomerPaymentMethod && this.ui.CustomerPaymentMethod.DisplayCreditCardNo){
	   			 	getCompleteCustomerListInput.Customer.CustomerPaymentMethodList = {CustomerPaymentMethod:this.ui.CustomerPaymentMethod};
			     }
	   			
	   			
        		iscMashup.callPaginatedMashup(this,'getPaginatedCustomerList',getCompleteCustomerListInput,"START",{}).then(
        				 this.processPaginatedCustomerList.bind(this),angular.noop);
        		
        		this.hideLookupAndSaveSearchCriteria('ADV_SEARCH',getCompleteCustomerListInput);
        		
			},
			
			/**
			 * @description This method closes the customer lookup panel and resets different attributes when a search is performed using customer lookup panel
			 */
			hideLookupAndSaveSearchCriteria:function(lookupType, searchCriteriaInput) {
				
				this.model.getCustomerListInput = searchCriteriaInput;
				iscAppContext.addToContext(this.ui.searchCriteriaContextKeyName,{input: this.model.getCustomerListInput, lookupType:lookupType});
        		this.ui.customerLookupType = lookupType;
        		this.ui.showAdvanceSearch = false;
        		this.ui.hideSearch = 'N';
        		this.ui.searchText = '';
        		this.ui.isBackButtonClicked = false;
				
			},
			
			/**
			 * @description This method is used to validate the search text entered in portlet and invoke getCompleteCustomerList API to find customers matching the search text.
			 */
			uiFindCustomers:function() {
				
				var lookupType = '';
				
				if (!iscCore.isVoid(this.model.lookupValue)) {
					
					 var getCompleteCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:{ComplexQuery:{Or:{Exp:[]}}}}}};
					 var searchCriteria = {Customer:{CustomerContactList:{CustomerContact:{}}}};
					 
					 if(this.model.lookupValue.indexOf("@") > -1) {
						 lookupType = 'EMAILID';
						 var emailExp = {Name:"EmailID",QryType:"EQ",Value:this.model.lookupValue};
						 getCompleteCustomerListInput.Customer.CustomerContactList.CustomerContact.ComplexQuery.Or.Exp.push(emailExp);
					 } else {
						 lookupType = 'PHONE_NUMBER';
						 var phoneNoExp = {Name:"DayPhone",QryType:"EQ",Value:this.model.lookupValue};
						 getCompleteCustomerListInput.Customer.CustomerContactList.CustomerContact.ComplexQuery.Or.Exp.push(phoneNoExp);
					 } 
					 
					 iscMashup.callPaginatedMashup(this,'getPaginatedCustomerList',getCompleteCustomerListInput,"START",{}).then(
	        				 this.processPaginatedCustomerList.bind(this),angular.noop);
					 
					 this.hideLookupAndSaveSearchCriteria(lookupType,getCompleteCustomerListInput);
					
				} else {
					iscModal.showErrorMessage(iscI18n.translate('customerprofile.MSG_InvalidCustomerSearchData'));
				}
				
			},
			
			
			 /**
	         *@description onclick handler of Reset button in Lookup Customer Advance Search screen. This method resets the current saved search criteria. 
	         */
			uiResetSearchCriteria:function() {

				this.ui.search.CustomerContactList.CustomerContact.FirstName = this.ui.search.CustomerContactList.CustomerContact.LastName = '';
				this.ui.CustomerPaymentMethod.DisplayCreditCardNo = '';

				iscAppContext.removeFromContext(this.ui.searchCriteriaContextKeyName);
				this.ui.getCustomerListInput = '';
			},
			
			 /**
	         *@description onclick handler of Cancel button in Lookup Customer Advance Search screen. This method closes the Advance Search screen.
	         */
			uiCloseAdvanceSearch:function() {
				 this.ui.showAdvanceSearch = false;
				 $timeout(function (){
				        document.getElementById('lookupCustomerAdvanceSearchLink').focus();
				    }, 500);
			 },
            
         /**
         *@description onclick handler of View customer profile screen
         *param {Object} customer - customer details
         */
          uiViewCustomerProfile:function(customer){
            if(!iscCore.isVoid(customer)){
            	iscState.goToState('customerprofilewizard',{action:'customerdetails',input:{Customer:customer}},{});
            } else{
            	iscModal.showErrorMessage(iscI18n.translate('return.MSG_CustomerNotFound'));
            }
        },
        
        /**
         *@description Callback handler function of continuous scroll as user scrolls customer list.
         */
        uigetNextCustomerRecords: function(){
        	var custListModel = this.model.customerList.Page.Output.CustomerList;
        	var numRecordsInModel = custListModel.Customer.length;
        	console.log("numRecordsInModel="+numRecordsInModel);
        	if(numRecordsInModel - this.ui.recordShownCount >= this.ui.pageSize ){
                this.ui.recordShownCount+=this.ui.pageSize;
                console.log("Using existing model - doing client side pagination");
              }else{
            	  if(this.model.customerList.Page.IsLastPage != 'Y'){
	  				  console.log("calling API with input="+this.model.getCustomerListInput);
	  				  this.ui.searchInProgress = true;
	  				     iscMashup.callPaginatedMashup(this,'getPaginatedCustomerList',this.model.getCustomerListInput,"NEXT",{}).then(function(data){
	  				    	this.ui.searchInProgress = false;
	  				    	this.uigetNextCustomerRecords();
		            	}.bind(this),angular.noop);
            	  }else{
            		  this.ui.recordShownCount = numRecordsInModel;
            		  console.log("not calling API but painting numItemsInModel="+numRecordsInModel+" items");
            	  }
            	 
              }
        },
        
       /**
        *@description Determines if mashup call is in progress as user scrolls customer list.
        *@return {Boolean} - True if mashup call is not in progress, false otherwise. 
        */
        uiNextPageActionValidator: function(){
            if(!this.ui.searchInProgress){
                // mashup call not in progress. call next page handler
                return true;
            }
            else if(this.ui.searchInProgress){
                //mashup call in progress 
                return false;
            }
        },
        
        /**
         *@description Updates the customer list with the output of getCustomerListPaginated mashup
         *@param {Object} output - contains the output of getCustomerListPaginated mashup
         *@param {Boolean} onNext - Flag determines if pagination is triggered via continuous scrolling or page is reloaded.
         */
            handleGetCustomerListOutput: function(output,onNext){
            	this.ui.searchInProgress = false;
     			 if(onNext){
     				//append the next page results with the total results
     				var recordList = output.Page.Output.CustomerList.Customer;
     				for(var i = 0;i < recordList.length; i++){
                           this.model.customerList.Page.Output.CustomerList.Customer.push(recordList[i]);
                   }
     				this.model.customerList.Page.PageNumber = output.Page.PageNumber;
     				this.model.customerList.Page.IsFirstPage = output.Page.IsFirstPage;
     				this.model.customerList.Page.IsLastPage = output.Page.IsLastPage;
     				this.uigetNextCustomerRecords();
     			 }else{
     				this.model.customerList =  output; 
     				//following code is to set model for a paginated mashup call
     				this.pageModel.getCustomerListPaginated={};
     				this.pageModel.getCustomerListPaginated["0"] = {};	
     				this.pageModel.getCustomerListPaginated[output.Page.PageNumber] = output.Page.LastRecord;
     				this.pageModel.getCustomerListPaginated.currentPageNumber = output.Page.PageNumber;
     				this.pageModel.getCustomerListPaginated.IsLastPage = output.Page.IsLastPage;
     				this.pageModel.getCustomerListPaginated.IsFirstPage = output.Page.IsFirstPage;
     				this.pageModel.getCustomerListPaginated.IsValidPage = output.Page.IsValidPage;
     			 }
            	 
            },
            
            /**
             *@description This method is used to set display address for a customer. 
             *Display address will be set in the priority of DefaultBillTo or DefaultShipTo or CustomerAdditionalAddress 
             *@param {Object} customer - customer details object
             */
            uiSetCustomerDisplayAddress:function(customer) {
            	return iscCustomer.getDisplayAddressForCustomer(customer);
            },
             
            /**
             *@description Cancel/Close button onclick handler for screen. Takes the user to home page.
             */
            uiCancel : function(){
            	iscState.goToState('/home',{},{});
            },
            
            /**
             *@description onclick handler to close customer lookup.
             */
            uiSearchClose:function() {
            	this.ui.hideSearch = "N";
            }
            
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodal
 *@viewname store.views.return.common.disposition.return-disposition
 *@package store.views.return.common.disposition
 *@class return-disposition
 *@description Popup to set disposition codes for return order lines
 */
angular.module('store').controller('store.views.return.common.disposition.return-disposition',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{

  		model:{
  		  /**
         *@description This model contains the list of disposition codes for the store.
         */
  		"dispositionList":{},
  		 /**
         *@description This model contains return order line list.
         */
  		"returnLineList":{}
  		},

  		mashupRefs : [
  		  		/*{
	  		  		
					mashupRefId: 'getReturnDispositionList',
					mashupId: 'returnOrder_getReturnDispositionList',
					modelName : 'dispositionList'								
				},
				{
	  		  		
					mashupRefId: 'getReturnLines',
					mashupId: 'returnOrder_getReturnOrderLines',
					modelName : 'returnLineList'								
				}*/
			],


			ui:{
				/**
    			 *@property {String} selectedDisposition - property to set first disposition code as selected one.
    			 */
				selectedDisposition:"",
				/**
    			 *@property {Boolean} showAllLines - flag to show all lines or no lines
    			 */
				showAllLines:true,
				/**
    			 *@property {Number} returnLineShownCount - pageSize of the return line list for continuous scrolling.
    			 */
				returnLineShownCount:5,
				/**
    			 *@property {String} ohkey - property to save return order header key
    			 */
				ohkey:""
			},
			

			/**
			 *@description This method initializes the return line list and disposition list. Also sets the first value as default in the disposition drop down.
			 */
			initialize : function(){
				this.ui.ohkey = modalInput.OrderHeaderKey;
				this.model.returnLineList = angular.copy(modalInput.returnLineList);
				this.model.dispositionList = modalInput.dispositionList;
				
				if(this.model.returnLineList.OrderLineList.TotalNumberOfRecords == '1'){
					this.ui.showAllLines=true;
				}
				
				if(iscCore.isVoid(this.ui.selectedDisposition)){
					 this.ui.selectedDisposition=this.model.dispositionList.ReturnDispositionList.ReturnDisposition[0].DispositionCode;
				 }
				
				
				/*if(!iscCore.isVoid(modalInput.openOverride) && typeof(modalInput.openOverride) === "boolean" && modalInput.openOverride) {
					this.ui.openOverride = modalInput.openOverride;
				} else {
					this.ui.openViolation = true;
				}*/
				
				//iscMashup.callMashup(this,'getReturnDispositionList',{},{}).then(this.setDefaultSelected.bind(this),undefined);;
				
				/*var mashupArray = [];
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getOverridePolicyViolationReasonList',{}));
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getManagerOverrideRule',{}));
	        	iscMashup.callMashups(this,mashupArray,{}).then(function(data){
	  				var output = iscMashup.getMashupOutput(data,'getOverridePolicyViolationReasonList');
            		this.setDefaultSelectedReason(output);
	            	}.bind(this));*/
			},
			
			/*setDefaultSelected:function() {
				 if(iscCore.isVoid(this.ui.selectedDisposition)){
					 this.ui.selectedDisposition=this.model.dispositionList.ReturnDispositionList.ReturnDisposition[0].DispositionCode;
				 }	 
			},
			uiShowAllLines: function(){
				this.ui.showAllLines = true;
				var inputGetReturnLines = {OrderLine:{OrderHeaderKey:this.ui.ohkey}};
				if(iscCore.isVoid(this.model.returnLineList.OrderLineList)){
					iscMashup.callMashup(this,'getReturnLines',inputGetReturnLines,{}).then({},angular.noop);
				}
			},
			uiHideAllLines : function(){
				this.ui.showAllLines = false;
			},*/
			/**
			 * @description This method removes the blank option in disposition drop down and set the first value as default.
			 */
			uiRemoveBlankOption:function(orderLine){
				if(iscCore.isVoid(orderLine.DispositionCode)){
					orderLine.DispositionCode=this.model.dispositionList.ReturnDispositionList.ReturnDisposition[0].DispositionCode;
				 }
			},
			 /**
			 *@description This method is called on click of Okay button. It forms the input to changeOrder and pass it to the main screen.
			 */
			uiSubmit:function(){
				var inputChangeOrder = {Order:{OrderHeaderKey:this.ui.ohkey,OrderLines:{OrderLine:[]}}};
				var orderLineList = this.model.returnLineList.OrderLineList.OrderLine;
				var dispCode = this.ui.selectedDisposition;
				for(i=0;i<orderLineList.length;i++){
					if(this.ui.showAllLines){
						dispCode = orderLineList[i].DispositionCode;
					}
					inputChangeOrder.Order.OrderLines.OrderLine.push({OrderLineKey:orderLineList[i].OrderLineKey,DispositionCode:dispCode});
				}
				
				var resultdata = {data:{inputChangeOrder : inputChangeOrder}};
				$uibModalInstance.close(resultdata);
			},
			
			/**
			 *@description  Shows next set of return order lines when order lines panel is scrolled.
			 */
  			uiGetReturnOrderLineListNext: function(){
            	
        	    if(this.ui.returnLineShownCount <= this.model.returnLineList.OrderLineList.OrderLine.length){
                  this.ui.returnLineShownCount+=5;
                }
            },
            
            /**
			 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
			 */
    		uiReturnOrderLineScrollActionValidator : function(){
             	return true;
             },
             
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},

			/*handleOverrideReasonWithoutValidation: function(){
				var resultdata = {};
				resultdata = {
					data : {
						value : this.ui.selectedReason,
						otherText: this.ui.otherText,
						//overrideCode:this.ui.overrideCode
							}
						};
			$uibModalInstance.close(resultdata);
			}*/
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodal
 *@viewname store.views.return.common.override.override-policy-violation
 *@package store.views.return.common.override
 *@class override-policy-violation
 */
angular.module('store').controller('store.views.return.common.override.override-policy-violation',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{


      /**
       *ModelList
       *Models that hold data
       * 
       */
  		model:{
  			 /**
	           *@description This model contains return reason common code list.
	           */
         "reasonList":{},
         /**
          *@description This model contains order line details with return policy violation.
          */
         "orderLine":{},
         /**
          *@description This model contains return order input model for createOrder/changeOrder APIs.  
          */
         "overrideInput":{},
         /**
          *@description This model contains override rule model. 
          */
         "managerOverrideRule":{},
         /**
          *@description This model contains return order details.
          */
         "order":{},
         /**
          *@description This model contains error data to be displayed when any error occurs during Override Approval.
          */
         "error":{}
  		},


  		/**
       *MashupRefs
       *array containing the list of mashups referred in this controller
       */
  		mashupRefs : [
  		  		{
  		  			
  		  		/**
					*@description This mashup is used to get policy override reason list. 
					*/
					mashupRefId: 'getOverridePolicyViolationReasonList',
					mashupId: 'returnOrder_getOverridePolicyViolationReasonList',
					modelName : 'reasonList'								
				},
				{
					/**
					*@description This mashup is used to validate manager override code.
					*/
                	mashupRefId: 'validateOverrideCode',
                	mashupId: 'returnOrder_validateOverrideCode'
                },
                {
                	/**
					*@description This mashup is used to get manager override rule configuration.
					*/
                	mashupRefId: 'getManagerOverrideRule',
                	mashupId: 'returnOrder_getManagerOverrideRule',
                	modelName: 'managerOverrideRule'
                },
                {
                	/**
					*@description This mashup is used to create a return order if policy override is successful. 
					*/
                    mashupRefId: 'createReturnOrderWithPolicyOverride',
                    mashupId: 'orderDetails_createReturnOrderWithPolicyOverride'

                },
                {
                	/**
					*@description This mashup is used to add a product to return order if policy override is successful. 
					*/
                    mashupRefId: 'changeReturnOrderWithPolicyOverride',
                    mashupId: 'orderDetails_changeReturnOrderWithPolicyOverride'

                },
                {
                	/**
					*@description This mashup is used to approve the policy violations on return order lines using manager override code.
					*/
                	mashupRefId: 'recordApprovalForReturnOrderLines',
                	mashupId: 'returnOrder_recordApprovalForReturnOrderLines'
                }
			],


			ui:{
				/**
				*@property {Object}  selectedReason - contains selected override reason code and description
				*/
				selectedReason : "",
				/**
				*@property {String}  otherText - contains the user entered text if 'Other' reason is selected.
				*/
				otherText:"",
				/**
				*@property {String}  overrideCode - contains the user entered manager override code.
				*/
				overrideCode:"",
				/**
				*@property {Boolean}  openViolation - If true Policy Violation accordian is expanded when pop-up is loaded, else this coordian is collapsed and Override Reason accordian is expanded 
				*/
				openViolation:false,
				/**
				*@property {Boolean}  openOverride - If true Override Reason accordian is expanded when pop-up is loaded, else this accordian is collapsed and Policy Violation accordian is expanded 
				*/
				openOverride:false,
				/**
				*@property {Boolean}  showInvalidError - If true invalid manager override code is entered, false otherwise.  
				*/
				showInvalidError:false,
				 /**
				*@property {Number}  orderLineShownCount - pageSize of the Order line list for continuous scrolling.
				*/
				orderLineShownCount:5,
				 /**
				*@property {String}  viewMode - If 'Y only policy violations of the order line is displayed. If 'N' Policy Violation and Override Reason accordian is displayed.
				*/
				viewMode:"N",
				 /**
				*@property {String}  multipleOrderLines - If 'Y then only policy violation of multiple return order lines (Returns List screen) is displayed in Policy Violation accordian. If 'N' then policy Violation of single return order line (Add Products to Return screen) is displayed. 
				*/
				multipleOrderLines:"N",
				/**
				*@property {Boolean}  showError - If true displays error when policy approval using manager override code fails, false otherwise.
				*/
				showError:false,
				/**
				*@property {Boolean}  showOverrideError - If true when user clicks on submit/ok button with blank/empty manager override code, false otherwise.
				*/
				showOverrideError:false,
				/**
				*@property {Object}  returnOrder - contains return order details.  
				*/
				returnOrder:""
			},
			

			  /**
	         * @scDoc Method
	         * @method initialize
	         * @description method to initialize the controller and loads the policy violation/override reason view.
	         */
			initialize : function(){
				if(!iscCore.isVoid(modalInput.viewMode) && modalInput.viewMode == 'Y') {
					this.ui.viewMode = "Y";
				}
				
				if(!iscCore.isVoid(modalInput.multipleOrderLines) && modalInput.multipleOrderLines == 'Y') {
					this.ui.multipleOrderLines = "Y";
					if(!iscCore.isVoid(modalInput.orderModel)) {
						this.model.order = modalInput.orderModel;
					}
				}
				
				this.model.orderLine = modalInput.orderLineModel;
				this.model.overrideInput = modalInput.overrideInput;
				this.ui.returnOrder = modalInput.returnOrder;
				if(!iscCore.isVoid(modalInput.openOverride) && typeof(modalInput.openOverride) === "boolean" && modalInput.openOverride) {
					this.ui.openOverride = modalInput.openOverride;
				} else {
					this.ui.openViolation = true;
				}
				
				iscMashup.callMashup(this,'getOverridePolicyViolationReasonList',{},{}).then(this.setDefaultSelectedReason.bind(this),angular.noop);
				
				/*var mashupArray = [];
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getOverridePolicyViolationReasonList',{}));
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getManagerOverrideRule',{}));
	        	iscMashup.callMashups(this,mashupArray,{}).then(function(data){
	  				var output = iscMashup.getMashupOutput(data,'getOverridePolicyViolationReasonList');	  				
            		this.setDefaultSelectedReason(output);
	            	}.bind(this));*/
			},
			
			 /**
			 *@description This method selects the 1st object in override reason list.
			 */	
			setDefaultSelectedReason:function() {
				 if(iscCore.isVoid(this.ui.selectedReason)){
				    this.ui.selectedReason=this.model.reasonList.CommonCodeList.CommonCode[0].CodeShortDescription;
				   }
			},
			
			 /**
			 *@description This method submits the popup when enter is clicked on manager override code field. OnClick handler of "Enter" action.
			 *@param {Object} form - pop-up form data.
			 */	
			uiOnEnterInputField : function (form) {
				if(form && form.$valid){
					this.uiSubmit(form);
				}
			},
			
			/**
			 *@description Shows next set of order lines when order lines panel is scrolled.
			 */
			uiGetOrderLineListNext: function(){
			    if(this.ui.orderLineShownCount <= this.model.order.Order.OrderLines.OrderLine.length){
		          this.ui.orderLineShownCount+=10;
		        }
	        },
	        
	        /**
			 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
			 */
	        
	        uiOrderLineListScrollActionValidator : function(){
	        	return true;
	        },
			

		
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				var resultdata = {};
				resultdata = {
					data : {
						returnOrder : this.ui.returnOrder
							}
						};
				$uibModalInstance.dismiss(resultdata);
			},

			/**
			 *@description This method resets the error flags and object used in the popup.
			 */
			uiResetErrorFlags:function(){
				this.ui.showError=false;
				this.ui.showOverrideError=false;
				this.model.error.msg = "";
			},
			/**
			 *@description This method appends manager override code, selected return reason to all the return order lines.
			 */
			getOverrideValidationInput: function(){
				this.model.overrideInput.Order.OrderLines.OrderLine.OverrideCode = this.ui.overrideCode;
				if(!iscCore.isVoid(this.ui.selectedReason)) {
					this.model.overrideInput.Order.OrderLines.OrderLine.Notes = {};
					this.model.overrideInput.Order.OrderLines.OrderLine.Notes.Note = {};
	            	if(this.ui.selectedReason == 'Other') {
	            		this.model.overrideInput.Order.OrderLines.OrderLine.Notes.Note.NoteText = this.ui.otherText;
	            	} else {
	            		this.model.overrideInput.Order.OrderLines.OrderLine.Notes.Note.NoteText = this.ui.selectedReason;
	            	}
	        	}
				return this.model.overrideInput;
			},
			
			/**
			 *@description OnClick handler of "Apply" button, propagates the data back to invoking screen.
			 */
			uiSubmit : function () {
				
				
				/*if(!iscCore.isVoid(this.ui.overrideCode)){
					var overrideValidationInput = this.getOverrideValidationInput();
					iscMashup.callMashup(this,"validateOverrideCode",overrideValidationInput,{}).then(this.handleOverrideCodeValidation.bind(this));
				}else{
					this.ui.showError = true;
				}*/
				if(this.ui.viewMode == 'Y') {
					$uibModalInstance.close({});
				} else {
					if(!iscCore.isVoid(this.ui.overrideCode)){
						this.handleOverrideReasonWithoutValidation();
					} else{
						this.ui.showOverrideError = true;
						this.ui.showError = true;
						this.model.error.msg = iscI18n.translate('returns.MSG_ManagerOverrideCodeRequired');
						this.ui.overrideErrorMsg = "returns.MSG_ManagerOverrideCodeRequired";
						
					}
				}
				
				
				
				/*if(this.model.managerOverrideRule.Rules.RuleSetValue == 'Y'){
					if(!iscCore.isVoid(this.ui.overrideCode)){
						var overrideValidationInput = this.getOverrideValidationInput();
						iscMashup.callMashup(this,"validateOverrideCode",overrideValidationInput,{}).then(this.handleOverrideCodeValidation.bind(this));
					}else{
						this.ui.showError = true;
					}
				}else{
					this.handleOverrideReasonWithoutValidation();
				}*/
			},
			
			/**
			 *@description Callback handler invoked after validating the manager override code.
			 *@param {Object} response - Controller data of of validate override code.
			 */
			handleOverrideCodeValidation:function(response){
				var apiOutput = iscMashup.getMashupOutput(response,"validateOverrideCode");
				if(apiOutput.Order.IsOverrideCodeValid != "Y"){
					this.ui.showInvalidError = true;
					if(!iscCore.isVoid(apiOutput.Order.ErrorCode)){
						this.ui.overrideCodeError = "apierror."+apiOutput.Order.ErrorCode;
					}else{
						this.ui.overrideCodeError = "returns.MSG_InvalidOverrideCode";
					}
						
				}else{
					this.handleOverrideReasonWithoutValidation();
				}
			},
			/**
			 *@description This method invokes record Approval API for all the violated return order lines with manager override code.
			 */
			handleOverrideReasonWithoutValidation: function(){
				
				/**
				 * Defect Changes - start
				 */
				
				var apiInput = angular.copy(this.ui.returnOrder);
				
				if(this.ui.multipleOrderLines == "Y")  {
					
					if(!iscCore.isVoid(apiInput) && !iscCore.isVoid(apiInput.Order) && !iscCore.isVoid(apiInput.Order.OrderLines)) {
			  			
			  			var numOfViolatedOrderLines = $filter('number')(apiInput.Order.OrderLines.TotalNumberOfRecords);
						if(!isNaN(numOfViolatedOrderLines) && numOfViolatedOrderLines > 0) {
							for(var j=apiInput.Order.OrderLines.OrderLine.length-1;j>=0;j--) {
								
								var orderLineWithViolation = apiInput.Order.OrderLines.OrderLine[j];
								if(!iscCore.isVoid(orderLineWithViolation.ReturnPolicyViolations) && orderLineWithViolation.ReturnPolicyViolations.CannotBeOverridden == 'Y') {
									apiInput.Order.OrderLines.OrderLine.splice(j,1);
								} else {
									
									orderLineWithViolation.OverrideCode = this.ui.overrideCode;
									orderLineWithViolation.Notes = {};
									orderLineWithViolation.Notes.Note = {};
					            	if(this.ui.selectedReason == 'Other') {
					            		orderLineWithViolation.Notes.Note.NoteText = this.ui.otherText;
					            	} else {
					            		orderLineWithViolation.Notes.Note.NoteText = this.ui.selectedReason;
					            	}
									
									delete orderLineWithViolation.ImageURL;
									delete orderLineWithViolation.VariationAttrs;
									delete orderLineWithViolation["Order"];
									delete orderLineWithViolation["ItemDetails"];
									delete orderLineWithViolation["LineOverallTotals"];
									
									
								}
							}
						}
			  		}
			  		
			  		delete apiInput.Order.OrderLines.TotalNumberOfRecords;
			  		delete apiInput.Order.ShowOverridePopup;
			  		delete apiInput.Order.ShowOverriddenLabel;
			  		
			  		apiInput = angular.copy(apiInput);
			  		
			  		iscMashup.callMashup(this,"recordApprovalForReturnOrderLines",apiInput,{}).then(this.postRecordApprovalofReturnOrder.bind(this),angular.noop);
					
					
					
				} else {
					
					this.model.overrideInput.Order.OrderLines.OrderLine.OverrideCode = this.ui.overrideCode;
					this.model.overrideInput.Order.OrderLines.OrderLine.Notes = {};
					this.model.overrideInput.Order.OrderLines.OrderLine.Notes.Note = {};
	            	if(this.ui.selectedReason == 'Other') {
	            		this.model.overrideInput.Order.OrderLines.OrderLine.Notes.Note.NoteText = this.ui.otherText;
	            	} else {
	            		this.model.overrideInput.Order.OrderLines.OrderLine.Notes.Note.NoteText = this.ui.selectedReason;
	            	}
	            	
	            	var mashupToCall = !iscCore.isVoid(this.model.overrideInput.Order.OrderHeaderKey) ? "changeReturnOrderWithPolicyOverride" : "createReturnOrderWithPolicyOverride";
	    			iscMashup.callMashup(this,mashupToCall,this.model.overrideInput,{}).then(this.postRecordApprovalofReturnOrder.bind(this),angular.noop);
					
				}
			
			},
			
			/**
			 *@description Callback handler for recordApproval API
			 *@param {Object} response - Controller data containing recordApproval API output.
			 */
			postRecordApprovalofReturnOrder:function(response) {
				var orderModel = response.MashupRefs.MashupRef[0].Output;
				var isRecordApprovalError = orderModel.Order.IsRecordApprovalError;
				var isPolicyConfigInvalid = orderModel.Order.IsPolicyConfigInvalid;
				var errorCode = orderModel.Order.ErrorCode;
				if(this.ui.multipleOrderLines != "Y")  {
					this.ui.returnOrder = orderModel;
				}
				
				if(!iscCore.isVoid(isRecordApprovalError) && isRecordApprovalError == 'Y') {
					errorCode = iscCore.isVoid(errorCode) ? 'MSG_UnableToApproveOverride' : errorCode;
					this.ui.showOverrideError = true;
					this.ui.overrideErrorMsg = "orderDetails.MSG_UnableToApproveOverride";
					//MSG_ManagerOverrideCodeRequired
				} else if(!iscCore.isVoid(isPolicyConfigInvalid) && isPolicyConfigInvalid == 'Y') {
					errorCode = iscCore.isVoid(errorCode) ? 'MSG_InvalidReturnPolicyConfiguration' : errorCode;
					//iscModal.showErrorMessage(iscI18n.translate('orderDetails.MSG_InvalidReturnPolicyConfiguration'));
					this.model.error.type = "danger";
					this.model.error.msg = iscI18n.translate('orderDetails.MSG_InvalidReturnPolicyConfiguration');
					this.ui.showError = true;

				} else {
					
					var resultdata = {};
					resultdata = {
						data : {
							response : response
								}
							};
					
					$uibModalInstance.close(resultdata);
				}
				
			}
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.return.common.reason.return-reason-multiple
 *@package store.views.return.common.reason
 *@class return-reason-multiple
 *@description Popup to set return reason for return order lines
 */
angular.module('store').controller('store.views.return.common.reason.return-reason-multiple',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{


  		model:{
  		 /**
         *@description This model has the return reason list for the store
         */
  		"reasonList":{},
  		/**
         *@description This model contains return order line list.
         */
  		"returnLineList":{}
  		},

  		mashupRefs : [
  		  		{
	  		  	/**
	  		  	 * @description This mashup is used to get return reason list for the store.
	  		  	 */
  		  		mashupRefId: 'getReturnReasonList',
				mashupId: 'returnOrder_getCommonCodeListByType',
				modelName : 'reasonList'								
				}
				/*{
	  		  		
					mashupRefId: 'getReturnLines',
					mashupId: 'returnOrder_getReturnOrderLines',
					modelName : 'returnLineList'								
				}*/
			],


			ui:{
				/**
    			 *@property {String} selectedReason - property to set first return reason code as selected one.
    			 */
				selectedReason:"",
				/**
    			 *@property {Boolean} showAllLines - flag to show all lines or no lines
    			 */
				showAllLines:false,
				/**
    			 *@property {Number} returnLineShownCount - pageSize of the return line list for continuous scrolling.
    			 */
				returnLineShownCount:5,
				/**
    			 *@property {String} ohkey - property to save return order header key
    			 */
				ohkey:""
			},
			

			/**
			 *@description This method initializes the return line list and return reason list. Also sets the first value as default in the return reason drop down.
			 */
			initialize : function(){
				this.ui.ohkey = modalInput.OrderHeaderKey;
				this.model.returnLineList = angular.copy(modalInput.returnLineList);
				
				//this.model.dispositionList = modalInput.dispositionList;
				iscMashup.callMashup(this,'getReturnReasonList',{"CommonCode":{"CodeType":"RETURN_REASON"}},{}).then(this.setDefaultSelected.bind(this),angular.noop);
				
				/*var mashupArray = [];
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getOverridePolicyViolationReasonList',{}));
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getManagerOverrideRule',{}));
	        	iscMashup.callMashups(this,mashupArray,{}).then(function(data){
	  				var output = iscMashup.getMashupOutput(data,'getOverridePolicyViolationReasonList');
            		this.setDefaultSelectedReason(output);
	            	}.bind(this));*/
			},
			
			/**
			 * @description This method sets the first return reason value as default.
			 */
			setDefaultSelected:function() {
				if(this.model.returnLineList.OrderLineList.TotalNumberOfRecords == '1'){
					this.ui.showAllLines=true;
				}
				
				if(/*iscCore.isVoid(this.ui.selectedReason) && */!iscCore.isVoid(this.model.reasonList.CommonCodeList.CommonCode)){
				    this.ui.selectedReason=this.model.reasonList.CommonCodeList.CommonCode[0].CodeValue;
				 } else{
					 iscModal.showErrorMessage(iscI18n.translate('returns.MSG_NoReturnReasonConfigured'))
					 .then(function(){
						 $uibModalInstance.dismiss('cancel');
					 });
				 }
			},
			/**
			 * @description This method removes the blank option in return reason drop down and set the first value as default.
			 */
			uiRemoveBlankOption:function(orderLine){
				if(iscCore.isVoid(orderLine.ReturnReason) && !iscCore.isVoid(this.model.reasonList.CommonCodeList.CommonCode)){
					orderLine.ReturnReason=this.model.reasonList.CommonCodeList.CommonCode[0].CodeValue;
				 }
			},
			/*uiShowAllLines: function(){
				this.ui.showAllLines = true;
				var inputGetReturnLines = {OrderLine:{OrderHeaderKey:this.ui.ohkey}};
				if(iscCore.isVoid(this.model.returnLineList.OrderLineList)){
					iscMashup.callMashup(this,'getReturnLines',inputGetReturnLines,{}).then({},undefined);
				}
			},
			uiHideAllLines : function(){
				this.ui.showAllLines = false;
			},*/
			 /**
			 *@description This method is called on click of Okay button. It forms the input to changeOrder and pass it to the main screen.
			 */
			uiSubmit:function(){
				var inputChangeOrder = {Order:{OrderHeaderKey:this.ui.ohkey,OrderLines:{OrderLine:[]}}};
				var orderLineList = this.model.returnLineList.OrderLineList.OrderLine;
				var retReason = this.ui.selectedReason;
				for(i=0;i<orderLineList.length;i++){
					if(this.ui.showAllLines){
						retReason = orderLineList[i].ReturnReason;
					}
					inputChangeOrder.Order.OrderLines.OrderLine.push({OrderLineKey:orderLineList[i].OrderLineKey,ReturnReason:retReason});
				}
				
				var resultdata = {data:{inputChangeOrder : inputChangeOrder}};
				$uibModalInstance.close(resultdata);
			},
			
			/**
			 *@description  Shows next set of return order lines when order lines panel is scrolled.
			 */
  			uiGetReturnOrderLineListNext: function(){
            	
        	    if(this.ui.returnLineShownCount <= this.model.returnLineList.OrderLineList.OrderLine.length){
                  this.ui.returnLineShownCount+=5;
                }
            },
            
            /**
			 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
			 */
    		uiReturnOrderLineScrollActionValidator : function(){
             	return true;
             },
             
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.return.common.reason.return-reason-single
 *@package store.views.return.common.reason
 *@class return-reason-single
 *@description Popup to set or modify return reason for a single return order line
 */
angular.module('store').controller('store.views.return.common.reason.return-reason-single',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n) {
		
		
		iscScreen.initializeModalScreen($scope,{


      
  		model:{
		 /**
         *@description This model has the return reason list for the store
         */
         "reasonList":{},
         //"dispositionList":{}
  		},

  		mashupRefs : [
  		  		{
  		  			/**
  		  		  	 * @description This mashup is used to get return reason list for the store.
  		  		  	 */
					mashupRefId: 'getReturnReasonList',
					mashupId: 'returnOrder_getCommonCodeListByType',
					modelName : 'reasonList'								
				},
				/*{
	  		  		
					mashupRefId: 'getReturnDispositionList',
					mashupId: 'returnOrder_getReturnDispositionList',
					modelName : 'dispositionList'								
				}*/
			],


			ui:{
				/**
    			 *@property {String} selectedReason - property to set first return reason code as selected one.
    			 */
				selectedReason : "",
				//selectedDisposition: "",
				//applyToAll:""
			},
			

			/**
			 *@description This method calls the getReturnReasonList mashup to get return reasons for the store. It also sets the selectedReason value to what is stored on return order line.
			 */
			initialize : function(){
				
				if(!iscCore.isVoid(modalInput.returnReasonCode)) {
					this.ui.selectedReason = {};
					this.ui.selectedReason.CodeValue = modalInput.returnReasonCode;
				}
				

				/*if(!iscCore.isVoid(modalInput.dispositionCode)) {
					this.ui.selectedDisposition = {};
					this.ui.selectedDisposition.DispositionCode = modalInput.dispositionCode;
				}*/
				
				var mashupArray = [];
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getReturnReasonList',{"CommonCode" : { "CodeType" : "RETURN_REASON"}}));
	        	//mashupArray.push(iscMashup.getMashupRefObj(this,'getReturnDispositionList', {}));
	        	iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
			},
			/**
			 * @description This method sets the first return reason value as default if nothing is stored on the return order line.
			 */
			handleInitApiCalls:function() {
				 if(iscCore.isVoid(this.ui.selectedReason)){
				    this.ui.selectedReason=this.model.reasonList.CommonCodeList.CommonCode[0];
				 }
				 /*if(iscCore.isVoid(this.ui.selectedDisposition)){
					 this.ui.selectedDisposition=this.model.dispositionList.ReturnDispositionList.ReturnDisposition[0];
				 }*/
			},
			
			/**
			 * @description This method submits the return reason form on enter
			 */
			uiOnEnterInputField : function (form) {
				if(form && form.$valid){
					this.uiSubmit(form);
				}
			},
			
			isDataModified:function() {
				
				var callApi = true;
				
				return callApi;
				
			},
			

		
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},

			/**
			 *@description OnClick handler of "Apply" button, propagates the data back to invoking screen.
			 */

			uiSubmit : function () {
				var resultdata = {};
				resultdata = {
					data : {
						returnReason : this.ui.selectedReason.CodeValue,
						//returnDisposition : this.ui.selectedDisposition.DispositionCode,
						//applyToAll: this.ui.applyToAll === 'Y'?true:false
						applyToAll:false
							}
						};
			$uibModalInstance.close(resultdata);
				
			}
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.backroom-pick.pick-order-list.pick-order-list
 *@package store.views.shipment.backroom-pick.pick-order-list
 *@class pick-order-list
 *@description Pick Order list screen is the list of Orders which are either Ready For picking or Picking in progress. 
 *
 */

angular.module("store").controller("store.views.shipment.backroom-pick.pick-order-list.pick-order-list",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscStateParams","iscAppContext","iscWizard","iscResourcePermission","iscPrint","$timeout","iscShipment","$filter",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup,iscStateParams,iscAppContext,iscWizard,iscResourcePermission,iscPrint,$timeout,iscShipment,$filter){
		
		iscScreen.initializeScreen($scope,{  
			model:{
				/**
				 *@description Holds the Output of getShipmentList API.
				 */
				shipmentList:{},
				
				/**
				 *@description Holds the filter criteria used to filter the shipment list.
				 */
				filterOptions:{}
				
			},
            mashupRefs:[
                {
            	    /**
  				    *@iscdoc mashup
  		   			*@viewname store.views.shipment.backroom-pick.pick-order-list.pick-order-list
  		   			*@mashupid store.views.shipment.backroomPick.pick-order-list.getPickOrderList
		   			*@mashuprefid getShipmentList
  		   			*@description Fetches the list of shipments based on the shipment status.
  		   			*/
                	
                    mashupRefId: 'getShipmentList',
                    mashupId: 'store.views.shipment.backroomPick.pick-order-list.getPickOrderList',
                    modelName:'shipmentList',
                    isPaginated: true,
					pageSize : 15,//iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					appendPath : 'Shipments.Shipment'
                },
                
                {   
                	/**
  				    *@iscdoc mashup
  		   			*@viewname store.views.shipment.backroom-pick.pick-order-list.pick-order-list
  		   			*@mashupid store.views.shipment.backroomPick.getPickOrderList
		   			*@mashuprefid getShipmentListCountForPickOrders
  		   			*@description Fetches the Count of Pickup orders .
  		   			*/
                    mashupRefId: 'getShipmentListCountForPickOrders',
                    mashupId: 'store.views.shipment.backroomPick.getPickOrderList'
                },
                
                {
                	/**
   				    *@iscdoc mashup
   		   			*@viewname store.views.shipment.backroom-pick.pick-order-list.pick-order-list
   		   			*@mashupid store.views.shipment.backroomPick.getPickOrderList
 		   			*@mashuprefid getShipmentListCountForSFSOrders
   		   			*@description Fetches the Count of SFS orders .
   		   			*/
                    mashupRefId: 'getShipmentListCountForSFSOrders',
                    mashupId: 'store.views.shipment.backroomPick.getPickOrderList'
                },
                {
                	/**
    				    *@iscdoc mashup
    		   			*@viewname store.views.shipment.pick-order-list.printPickTicketForShipment
    		   			*@mashupid store.views.shipment.backroomPick.getPickOrderList
  		   			    *@mashuprefid printPickTicketForShipment
    		   			*@description Prints pick ticket
    		   			*/
                	mashupRefId: 'printPickTicketForShipment',
                    mashupId: 'store.views.shipment.pick-order-list.printPickTicketForShipment'
               }
                
               
            ],
            ui : {
            	/**
				 *@property {String} selectedShipmentKey - ShipmentKey of the selected shipment from the list.
				 */	
                selectedShipmentKey:"",
                /**
				 *@property {Number} recordShownCount - pageSize of the shipment list for continuous scrolling.
				 */	
                recordShownCount:15,
                /**
				 *@property {Number} numOfOrders - Number of Shipments for a active tab.
				 */	
                numOfOrders : -1,
                /**
				 *@property {Object} pickOrderStatusFilter - Status filter for Pickup Orders.
				 */	
                pickOrderStatusFilter:[],
                /**
				 *@property {Object} sfsOrderStatusFilter - Status filter for SFS Orders.
				 */	
                sfsOrderStatusFilter:[],
                /**
				 *@property {Boolean} apiCallInProgress - flag to identify if any mashup call is in progress.
				 */
                apiCallInProgress: false,
				
				/**
				 *@property {Number} activeTabIndex - the index of the currently selected tab.
				 */
				activeTabIndex: 0,
				
				/**
				 *@property {Boolean} showPickupView - Flag to show Pickup Orders.
				 */
				showPickupView : true,
				/**
				 *@property {Boolean} showPickupView - Flag to show SFS Orders.
				 */
			    showSFSView:false,
			    /**
				 *@property {Number} pickOrdersCount - Number of Pickup Orders based on Status filter.
				 */	
			    pickOrdersCount:0,
			    /**
				 *@property {Number} sfsOrdersCount - Number of SFS Orders based on Status filter.
				 */	
			    sfsOrdersCount:0,
			    /**
				 *@property {String} sortOptions - Holds the sorting order of shipments.
				 */	
			    sortOptions:'N',
			    
			    /**
				 *@property {String} activeTab - Holds the value of the active tab.
				 */	
			    activeTab:'PICK',
			    /**
				 *@property {String} isBackroomPickBOPIS - Holds the value of BOPIS resource permission.
				 */	
			    isBackroomPickBOPIS:iscResourcePermission.hasPermission("WSC000057"),
			    /**
				 *@property {String} isBackroomPickSFS - Holds the value of SFS resource permission.
				 */	
			    isBackroomPickSFS:iscResourcePermission.hasPermission("WSC000058")
			},	
			
			/**
			 *@description Initializes the Pick order list screen by invoking the required mashup calls and reading the input data from the calling portlet.
			 */
			initialize : function(){
				 var params = iscStateParams.params.input.FilterOptions;
				 
				 if(params == 'All'){
					 this.model.filterOptions.inProgressFlag = 'Y';
					 this.model.filterOptions.readyForPickingFlag = 'Y';	 
					 this.ui.pickOrderStatusFilter.push('1100.70.06.10');
					 this.ui.pickOrderStatusFilter.push('1100.70.06.20');
					 this.ui.sfsOrderStatusFilter.push('1100.70.06.10');
					 this.ui.sfsOrderStatusFilter.push('1100.70.06.20');
					 
				 }else if(params == 'InProgress'){
					 
					 this.model.filterOptions.inProgressFlag = 'Y';
					 this.model.filterOptions.readyForPickingFlag = 'N';
					 this.ui.pickOrderStatusFilter.push('1100.70.06.20');
					 this.ui.sfsOrderStatusFilter.push('1100.70.06.20');
					 
				 }else if(params == 'NotStarted'){
					 
					 this.model.filterOptions.inProgressFlag = 'N';
					 this.model.filterOptions.readyForPickingFlag = 'Y';
					 this.ui.pickOrderStatusFilter.push('1100.70.06.10');
					 this.ui.sfsOrderStatusFilter.push('1100.70.06.10');
				 }
				 
				 if(!this.ui.isBackroomPickBOPIS){
					 this.ui.activeTab ='SHP';
				     this.ui.showPickupView = false;
				     this.ui.showSFSView = true;
				     var apiInput = iscShipment.prepareGetShipmentListApiInput('N','SHP',this.ui.sfsOrderStatusFilter);
				 }	
				 else{
					 var apiInput = iscShipment.prepareGetShipmentListApiInput('N','PICK',this.ui.pickOrderStatusFilter);	 
				 }
				 
				 var mashupArray = [];
		         mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentListCountForPickOrders',iscShipment.prepareGetShipmentListApiInput('','PICK',this.ui.pickOrderStatusFilter)));
		         mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentListCountForSFSOrders', iscShipment.prepareGetShipmentListApiInput('','SHP',this.ui.sfsOrderStatusFilter)));
				 iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				 
			},
			
			
			/**
			 *@description Call back handler for the apis called in initialize method.
			 */
			
			 handleInitApiCalls : function (data){
				    var mashupRef = data.MashupRefs.MashupRef;
	            	if(mashupRef !== null && mashupRef !== undefined){
	            		var len = mashupRef.length;
	            		for(var i = 0; i < len; i++){
	            			var mashupRefObj = mashupRef[i];
	            			if(mashupRefObj.mashupRefId === 'getShipmentListCountForPickOrders'){
	            				this.ui.pickOrdersCount = mashupRefObj.Output.Shipments.TotalNumberOfRecords;
	            			}else if(mashupRefObj.mashupRefId === 'getShipmentListCountForSFSOrders'){
	            				this.ui.sfsOrdersCount = mashupRefObj.Output.Shipments.TotalNumberOfRecords;
	            			}else if(mashupRefObj.mashupRefId === 'getShipmentList'){
	            				this.processPaginatedShipmentList(data);
	            			}
	            		}	
	            		
	            	}	
		  		  },
		  	
		  		/**
			     *@description Process getShipmentList api output
				 */
			processPaginatedShipmentList:function(response) {
		           
		            this.ui.apiCallInProgress = false;
		            var output = iscMashup.getMashupOutput(response,"getShipmentList");
		            this.ui.numOfOrders =  $filter('number')(output.Page.Output.Shipments.TotalNumberOfRecords);
		            if(this.ui.activeTab=='SHP'){
		            	this.ui.sfsOrdersCount = $filter('number')(output.Page.Output.Shipments.TotalNumberOfRecords);
		            }else if(this.ui.activeTab=='PICK'){
		            	this.ui.pickOrdersCount = $filter('number')(output.Page.Output.Shipments.TotalNumberOfRecords);
		            }
		            if(output.Page.Output.Shipments.Shipment){
		            	if(iscCore.isVoid(this.ui.selectedShipmentKey)){
		            		this.ui.selectedShipmentKey = output.Page.Output.Shipments.Shipment[0].ShipmentKey;
		            	}
		            	
		                this.processShipment(output.Page.Output.Shipments);
		            }
		        },
            
            
		        /**
			     *@description Massage shipment object with UI attributes
				 */
            processShipment : function(shipments){
                for(var i = 0; i < shipments.Shipment.length; i++){
                    var shipment = shipments.Shipment[i];
                    shipment.OrderNoToDisplay = iscShipment.getDisplayOrderNumber(shipment.DisplayOrderNo, '|', ', ', true);
                    shipment.StatusDescriptionToDisplay = iscShipment.getShipmentStatusDescription(shipment);
                    
                }
            },
            
           uiPrintPickList:function() {
				var that = this;
				iscModal.openModal('store.views.shipment.backroom-pick.common.print-pick-ticket.print-pick-ticket',{},{}).then(function(callBackData){
					if(callBackData.data !== null && callBackData.data !== undefined){
						that.postPrintPickTicketSelection.call(that,callBackData.data);
					}
				},angular.noop);
				
			},
			
			postPrintPickTicketSelection:function(printModalData) {
				var that = this;
				if(printModalData && printModalData.isPrintingLargeShipments) {
					iscModal.showConfirmationMessage(iscI18n.translate('pickorderlist.MSG_PrintLargeOrderConfirmation')).then(function(callBackAction){
						if(callBackAction == 'YES'){
							that.getPickTicketPrintHTML(printModalData.shipmentTypeToPrint)
						}
       				});
					
				} else {
					this.getPickTicketPrintHTML(printModalData.shipmentTypeToPrint)
				}
			},
			
			/**
			 *@description Opens Shipment summary screen for the selected shipment from the list.
			 */
			uiGoToShipmentSummary:function(shipment){
				iscState.goToState('shipmentsummary',{input:{Shipment:{ShipmentKey: shipment.ShipmentKey},flowName:'BackroomPick'}},{}); 
			},
			
			
			getPickTicketPrintHTML:function(shipmentTypeToPrint) {
				var shipmentPrintInput = {};
				if(shipmentTypeToPrint != "PRINT_ALL") {
					shipmentPrintInput = {Shipment:{ShipmentLines:{ShipmentLine:{OrderLine:{DeliveryMethod:""}}}}};
					shipmentPrintInput.Shipment.ShipmentLines.ShipmentLine.OrderLine.DeliveryMethod = shipmentTypeToPrint == 'PRINT_SFS' ? 'SHP' : 'PICK';
				}
				iscMashup.callMashup(this,"printPickTicketForShipment",shipmentPrintInput,{}).then(this.processPickTicketHTML.bind(this),angular.noop);
			},
			
			/**
			 *@description Opens Backroom pick flow for the selected shipment from the list.
			 */
			
			uipickOrder : function(shipmentKey){
				iscState.goToState("backroomPickWizard", {input:{"Shipment" : { "ShipmentKey" : shipmentKey}}}, {});
			},
			
			processPickTicketHTML:function(response) {
				 var output = iscMashup.getMashupOutput(response,"printPickTicketForShipment");
				  if(output.Shipments && output.Shipments.TotalNumberOfRecords == "0") {
					  iscModal.showWarningMessage(iscI18n.translate('pickorderlist.MSG_NoShipmentsToPrint'));
		            } else if(output.Output && output.Output.out) {
		            	iscPrint.printHtmlOutput(output);
		            }
				
			},
			
			/**
			 *@description Identifies the Shipment chosen by the User from the list.
			 */
			
			uiSelectShipment : function(shipment){
				this.ui.selectedShipmentKey = shipment.ShipmentKey;
			},
            
			/**
			 *@description Validates if next page action should be performed by checking whether the last page is already fetched.
			 */
	        
	        uiOrderListScrollActionValidator : function(){
	        	if (this.model.shipmentList.Page.IsLastPage !=="N") {
					return false;
				}else
					return true;
	        },
	        
	        /**
			 *@description Gets the Paginated records for getShipmentList api when the next page action is performed.
			 */
	        
	        uiGetNextPickingRecords: function() {
				if (this.model.shipmentList.Page.IsLastPage !=="N") {
					return;
				}
				this.ui.apiCallInProgress = true;
				var apiInput = {};
				if(this.ui.activeTab =='SHP'){
					  apiInput = iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions,this.ui.activeTab,this.ui.sfsOrderStatusFilter);
				}else if(this.ui.activeTab =='PICK'){
					  apiInput = iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions,this.ui.activeTab,this.ui.pickOrderStatusFilter);
				}
				iscMashup.callPaginatedMashup(this, "getShipmentList", apiInput, "NEXT", {}).then(this.processPaginatedShipmentList.bind(this));
			},
			
			 /**
			 *@description Initializes the active tab data by setting appropriate flags and apis.
			 */
			uiUpdateSelection : function(tab){
				this.ui.selectedShipmentKey = ''; 
				if(!this.ui.isBackroomPickBOPIS){
					 this.ui.activeTab ='SHP';
				     this.ui.showPickupView = false;
				     this.ui.showSFSView = true;
				     var apiInput = iscShipment.prepareGetShipmentListApiInput('N','SHP',this.ui.sfsOrderStatusFilter);
				     tab = "SFS";
				 }	
				
				if(tab == "Pickup"){
					this.ui.showPickupView = true;
				    this.ui.showSFSView = false;
				    this.ui.activeTab = 'PICK';
					this.model.shipmentList = {};
					var apiInput = iscShipment.prepareGetShipmentListApiInput('N','PICK',this.ui.pickOrderStatusFilter);
					iscMashup.callPaginatedMashup(this,'getShipmentList',apiInput,"START",{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);
				}else if(tab == "SFS"){
					this.ui.showSFSView = true;
					this.ui.showPickupView = false;
					 this.ui.activeTab = 'SHP';
					this.model.shipmentList = {};
					var apiInput = iscShipment.prepareGetShipmentListApiInput('N','SHP',this.ui.sfsOrderStatusFilter);
					iscMashup.callPaginatedMashup(this,'getShipmentList',apiInput,"START",{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);
				}
				
			},
			
			 /**
			 *@description This method handles on click of cancel button in cart details screen.
			 */
			uiClose : function(){
				iscState.goToState("/home", {}, {});
          },
          
            /**
			 *@description This method handles Sorting of Shipments.
			 */
          uiApplySortOptions : function(data){
        	
        	    var apiInput = {};
        		if(data.sortOption == 'NEW_TO_OLD'){
        			this.ui.sortOptions = 'Y';
    			}else if(data.sortOption == 'OLD_TO_NEW'){
    				this.ui.sortOptions = 'N';
    			}	
        		
        		var apiInput = {};
				if(this.ui.activeTab =='SHP'){
					  apiInput=iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions,this.ui.activeTab,this.ui.sfsOrderStatusFilter);
				}else if(this.ui.activeTab =='PICK'){
					  apiInput = iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions,this.ui.activeTab,this.ui.pickOrderStatusFilter);
				}
				
        	
			this.model.shipmentList = {};
			iscMashup.callMashup(this,"getShipmentList",apiInput,{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);  
		},
		
		 /**
		 *@description This method is invoked when filters are applied on the pick order list
		 */
		
		uiOnApplyFilter : function(data){
			
			  var readyForPicking = data.readyForPickingFlag;
			  var pickingInProgress = data.inProgressFlag;
			  var apiInput={};
			  if(this.ui.activeTab =='SHP'){
				  this.ui.sfsOrderStatusFilter=[];
				  
				  if(readyForPicking =='Y' && pickingInProgress == 'Y'){
						 this.model.filterOptions.inProgressFlag = 'Y';
						 this.model.filterOptions.readyForPickingFlag = 'Y';	 
						
						 this.ui.sfsOrderStatusFilter.push('1100.70.06.10');
						 this.ui.sfsOrderStatusFilter.push('1100.70.06.20');
						 
					 }else if(pickingInProgress =='Y'){
						 
						 this.model.filterOptions.inProgressFlag = 'Y';
						 this.model.filterOptions.readyForPickingFlag = 'N';
						 
						 this.ui.sfsOrderStatusFilter.push('1100.70.06.20');
						 
					 }else if(readyForPicking =='Y'){
						 
						 this.model.filterOptions.inProgressFlag = 'N';
						 this.model.filterOptions.readyForPickingFlag = 'Y';
						 this.ui.sfsOrderStatusFilter.push('1100.70.06.10');
					 }
				  
				  apiInput = iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions, this.ui.activeTab,this.ui.sfsOrderStatusFilter);
				}else if(this.ui.activeTab =='PICK'){
					this.ui.pickOrderStatusFilter=[];
					
					if(readyForPicking =='Y' && pickingInProgress == 'Y'){
						 this.model.filterOptions.inProgressFlag = 'Y';
						 this.model.filterOptions.readyForPickingFlag = 'Y';	 
						
						 this.ui.pickOrderStatusFilter.push('1100.70.06.10');
						 this.ui.pickOrderStatusFilter.push('1100.70.06.20');
						 
					 }else if(pickingInProgress =='Y'){
						 
						 this.model.filterOptions.inProgressFlag = 'Y';
						 this.model.filterOptions.readyForPickingFlag = 'N';
						 
						 this.ui.pickOrderStatusFilter.push('1100.70.06.20');
						 
					 }else if(readyForPicking =='Y'){
						 
						 this.model.filterOptions.inProgressFlag = 'N';
						 this.model.filterOptions.readyForPickingFlag = 'Y';
						 this.ui.pickOrderStatusFilter.push('1100.70.06.10');
					 }
					 apiInput = iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions, this.ui.activeTab,this.ui.pickOrderStatusFilter);	
					
				}
			     this.model.shipmentList = {};
				 var mashupArray = [];
				 if(this.ui.showSFSView){
			         mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentListCountForSFSOrders', iscShipment.prepareGetShipmentListApiInput('','SHP',this.ui.sfsOrderStatusFilter)));
 
				 }
				 if(this.ui.showPickupView){
			         mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentListCountForPickOrders',iscShipment.prepareGetShipmentListApiInput('','PICK',this.ui.pickOrderStatusFilter)));
 
				 }
		         mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentList', apiInput));
				 iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				 
		}
        });
    }]);
			 
			 
            

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.backroom-pick.pick-products.pick-products-list
 *@package store.views.shipment.backroom-pick.pick-products
 *@class pick-products-list
 *@description Displays the products to be picked. 
 *
 */

   angular.module('store').controller('store.views.shipment.backroom-pick.pick-products.pick-products-list',
		  ['$scope','$rootScope','iscScreen','iscWizard','$timeout','$filter','$locale','iscMashup','iscState','iscStateParams','iscShipment','iscResourcePermission','iscModal','iscI18n','$q','iscDomUtility','iscAppContext','iscAppInfo','iscScrollUtility',
			function($scope,$rootScope,iscScreen,iscWizard,$timeout,$filter,$locale,iscMashup,iscState,iscStateParams,iscShipment,iscResourcePermission,iscModal,iscI18n,$q, iscDomUtility, iscAppContext,iscAppInfo,iscScrollUtility) {				
				iscWizard.initializeWizardPage($scope,{
						
					  
				      model:{
				    	  /**
				      	   *@description contains shipment details to be picked
				      	   */
				    	  shipmentDetails:{},
				    	  /**
				      	   *@description contains shipment lines to be picked
				      	   */
				    	  shipmentLineList:{},
				    	  /**
				      	   *@description contains scanned barcode data
				      	   */
				    	  barCodeData:""
				      },
                        
				      
				  		mashupRefs : [
					        
				  		              
				  		              {
				  		            	 /**
								      	   *@description This mashup is used to get shipment details to be picked
								      	   */
				  		            	  	mashupRefId: 'getShipmentDetails',
										    mashupId: 'store.views.shipment.backroom-pick.getShipmentDetails'
				  		              },
				  		              {
				  		            	/**
								      	   *@description This mashup is used to get pickable shipment lines count. We exclude bundle parent from this count.
								      	   */
				  		            	  	mashupRefId: 'getPickableShipmentLineListCount',
				  		            	  	mashupId: 'store.views.shipment.backroom-pick.getShipmentLineList'
				  		              },
				  		              {
				  		            	/**
								      	   *@description This mashup is used to translate Bar Code to Product Details, validates product is part of shipment and increases the quantity if product is eligible for picking. 
								      	   */
					  		            	mashupRefId: 'registerBarcodeForBackroomPick',
				  		            	  	mashupId: 'store.views.shipment.backroom-pick.registerBarcodeForBackroomPick'
				  		            	
				  		              },
				  		              {
				  		            	/**
								      	   *@description This mashup is used to pick all the quantity of available shipment lines.
								      	   */
					  		            	mashupRefId: 'pickAllShipmentLines',
				  		            	  	mashupId: 'store.views.shipment.backroom-pick.pickAllShipmentLines'
				  		              },
				  		              {
				  		            	/**
								      	   *@description This mashup is used to change the status of BOPIS shipment to Ready for Customer Pickup after all the shipment lines are picked completely.
								      	   */
					  		            	mashupRefId: 'changeShipmentStatusToReadyForCustomerPickup',
				  		            	  	mashupId: 'store.views.shipment.backroom-pick.changeShipmentStatusToReadyForCustomerPickup'
				  		            	
				  		              },
				  		              {
				  		            	/**
								      	   *@description This mashup is used to change the status of SFS shipment to Ready for Packing after all the shipment lines are picked completely.
								      	   */
					  		            	mashupRefId: 'changeShipmentStatusToReadyForPacking',
				  		            	  	mashupId: 'store.views.shipment.backroom-pick.changeShipmentStatusToReadyForPacking'
				  		              },
				  		              {
				  		            	/**
								      	   *@description This mashup is used to get pickable shipment line list. Bunlde parent line is excluded from this lost as its not pickable.
								      	   */
					  		            	mashupRefId: 'getPickableShipmentLineList',
				  		            	  	mashupId: 'store.views.shipment.backroom-pick.getAllPickableShipmentLineList'
				  		              },
				  		              {
				  		            	/**
								      	   *@description This mashup is used to validate is picking is complete for the shipment.
								      	   */
					  		            	mashupRefId: 'validateShipmentForPickComplete',
				  		            	  	mashupId: 'store.views.shipment.backroom-pick.validateShipmentForPickComplete'
				  		              }, 
				  		              {
				  		            	/**
								      	   *@description This mashup is used to record shortage for shipment lines to be picked.
								      	   */
					  		            	mashupRefId: 'recordShortageForShipment',
				  		            	  	mashupId: 'store.views.shipment.backroom-pick.recordShortageForShipment'
				  		              }, 
				  		              {
				  		            	/**
								      	   *@description This mashup is used to update picked quantity of shipment line.
								      	   */
					  		            	mashupRefId: 'updatePickQtyForShipmentLine',
				  		            	  	mashupId: 'store.views.shipment.backroom-pick.updatePickedQuantityForShipmentLine'
				  		              },
				  		              {
				  		            	/**
								      	   *@description This mashup gets the rule value to show/hide staging location task
								      	   */
					  		            	mashupRefId: 'getStagingLocationRequiredRuleDetails',
				  		            	  	mashupId: 'store.views.shipment.getStagingLocationRequiredRuleDetails'
				  		              },
				  		              {
					  		            	/**
									      	   *@description This mashup gets the count of remaining shipment lines to be picked
									      	   */
						  		            	mashupRefId: 'getRemainingShipmentLinesCountToBePicked',
					  		            	  	mashupId: 'store.views.shipment.backroom-pick.getRemainingShipmentLinesCountToBePicked'
					  		              }

				  		],
				  		
			            ui:{
			            	/**
			      			*@property {Number} recordShownCount - count of shipment lines to be shown on load of pick products screen
			      			 */
			            	recordShownCount:10,
			            	/**
			      			*@property {String} selectedShipmentLineKey - contains currently selected shipment line key value
			      			 */
			            	selectedShipmentLineKey:"",
			            	/**
			      			*@property {Object} currentlySelectedShipmentLine - currently selected shipment line JSON model 
			      			 */
			            	currentlySelectedShipmentLine:"",
			            	/**
			      			*@property {Boolean} focusOnFirstLine - True if first shipment line is selected, false otherwise
			      			 */
			            	focusOnFirstLine:true,
			            	/**
			      			*@property {String} slaImageFullURL - contains full image URL of SLA icon
			      			 */
			            	slaImageFullURL:"",
			            	/**
			      			*@property {Number} productListIndex - contains index of shipment line used to bring in focus on scanning a product
			      			 */
			            	productListIndex:0,
			            	/**
			      			*@property {Number} numberOfPickableProducts - contains count of pickable products in shipment.
			      			 */
			            	numberOfPickableProducts:0,
			            	/**
			      			*@property {Number} ONE_QUANTITY - contains quantity value of 1
			      			 */
			            	ONE_QUANTITY:1,
			            	/**
			      			*@property {String} shipmentPreviewTemplate - contains popover html template value.
			      			 */
			            	shipmentPreviewTemplate:'store/views/shipment/backroom-pick/popover-preview.tpl.html',
			            	/**
			      			*@property {Boolean} shipmentPreviewTemplate - contains popover html template value.
			      			 */
			            	isManualPickEnabled:iscResourcePermission.hasPermission("WSC000061"),
			            	/**
			      			*@property {Boolean} isStagingLocationRuleEnabled - True if staging location task rule is enabled, false otherwise.
			      			 */
			            	isStagingLocationRuleEnabled:true
			            },
			            
			            _isInitSelection: true,
			            
				            /**
				      	   *@description This method  initialize sthe controller and invokes mashup to get shipment details, pickable shipment line list and staging location required rule details.
				      	   */
				  		    initialize : function(){
				  		    	
				  	        	var shipmentWizardInput = iscWizard.getWizardPageInput();
				  	        	
				  	        	var mashupArray = [];
								 
								mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentDetails',{Shipment:{ShipmentKey:shipmentWizardInput.Shipment.ShipmentKey}}));
								mashupArray.push(iscMashup.getMashupRefObj(this,'getPickableShipmentLineList', {ShipmentLine:{ShipmentKey:shipmentWizardInput.Shipment.ShipmentKey}}));
								mashupArray.push(iscMashup.getMashupRefObj(this,'getStagingLocationRequiredRuleDetails', {Rule:{}}));
								
								iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
								
				  			},
					  		 
				  		   /**
					      	   *@description This method is a callback handler for mashups invoked in initialize method.
					      	   * This method initializes the shipmentDetails & shipmentLineList model, sets the wizard model and sets th pickable product count.
					      	   * 
					      	   *@param {Object} response  mashup output JSON object
					      	   */
				  			handleInitApiCalls : function (response){
					  			
				  				this.model.shipmentDetails = iscMashup.getMashupOutput(response,"getShipmentDetails");
					        	this.model.shipmentLineList = iscMashup.getMashupOutput(response,"getPickableShipmentLineList");
					        	var ruleDetails = iscMashup.getMashupOutput(response,"getStagingLocationRequiredRuleDetails");
					        	this.ui.isStagingLocationRuleEnabled = (ruleDetails && ruleDetails.Rules.RuleSetValue == "Y") ? true : false;
					        	
					        	this.ui.numberOfPickableProducts = Number(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords);
					        	
					        	this.setPickableShipmentLineCount();
					        	this.setSLAImageURL();
					        	//iscDomUtility.setFocus(document.getElementById('productScanInput'));
					        	
					        	iscWizard.setWizardModel("shipmentDetails",this.model.shipmentDetails);
					        	
					        	console.log("shipmentDetails - ",this.model.shipmentDetails);
					  		},
					  		
					  		 /**
					      	   *@description This method is used to format display order number in case of a shipment having multiple order numbers
					      	   * 
					      	   *@param {String} displayOrderNo - Display order no
					      	   */
							uiGetFormattedOrderNo:function(displayOrderNo) {
								return iscShipment.getDisplayOrderNumber(displayOrderNo,'|',', ',false);
							},
							
							 /**
					      	   *@description This method is used to set pickable shipment line count and focus the first line of shipment lines
					      	   * 
					      	   */
							setPickableShipmentLineCount:function() {
								
								if(!iscCore.isVoid(this.model.shipmentLineList) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords)) {
					  	       		this.ui.numberOfPickableProducts = Number(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords);
					  				if(this.ui.focusOnFirstLine && this.ui.numberOfPickableProducts > 0) {
					  					 this.ui.currentlySelectedShipmentLine = this.model.shipmentLineList.ShipmentLines.ShipmentLine[0];
					  					 this.ui.selectedShipmentLineKey = this.ui.currentlySelectedShipmentLine.ShipmentLineKey;
					  					 this.uiStampBackoomPickQuantityAttrs(this.ui.currentlySelectedShipmentLine);
					  				}
								}
							},
							
							 /**
					      	   *@description This method is used to initialize backroom pick quantity attributes on shipment line
					      	   * 
					      	   *@param {Object} shipmentLine - Shipment line JSON model
					      	   * 
					      	   */
							uiStampBackoomPickQuantityAttrs:function(shipmentLine) {
								
								if(shipmentLine.BackroomPickedQuantity) {
									shipmentLine.EditableBackroomPickedQuantity = angular.copy(shipmentLine.BackroomPickedQuantity);
								} else {
									shipmentLine.EditableBackroomPickedQuantity = shipmentLine.BackroomPickedQuantity = "0";
								}
								
								shipmentLine.BackroomPickComplete = (shipmentLine.BackroomPickComplete) ? (shipmentLine.BackroomPickComplete) : 'N';
								
								shipmentLine.showQtyUpdate = "N";
								
							},
							
							 /**
					      	   *@description This method is used to get remaining quantity to be picekd for shipment line
					      	   * 
					      	   *@param {Object} shipmentLine - Shipment line JSON model
					      	   * 
					      	   */
							uiGetRemainingQuantity:function(shipmentLine) {
								
								 var quantity = Number(shipmentLine.Quantity);
					        	 var backroomPickedQty = Number(shipmentLine.BackroomPickedQuantity);
					        	 var remainingQty =  quantity - backroomPickedQty;
					        	 
					        	return remainingQty;
								
								
							},
							
							 /**
					      	   *@description This method is used to check if picking is complete for shipment line
					      	   * 
					      	   *@param {Object} shipmentLine - Shipment line JSON model
					      	   * 
					      	   */
							uiIsBackroomPickComplete:function(shipmentLine) {
								return (shipmentLine.BackroomPickComplete == 'Y'?true:false);
							},
					  		 
							 /**
					      	   *@description This method is used to invoke mashup for translating product barcode and increase picked quantity for associated shipment line for a valid translated productId.
					      	   * 
					      	   */
					  		uiScanBarCodeData:function() {
					  			
					  			if(!iscCore.isVoid(this.model.barCodeData)){
					  				
					  				var mashupArray = [];
					  				
					  				var that = this;
					        		var registerBarCodeForBPInput = { 'BarCode' :{'BarCodeData': this.model.barCodeData,ShipmentContextualInfo:{}}};
					        		registerBarCodeForBPInput.BarCode.ShipmentContextualInfo.ShipmentKey = this.model.shipmentDetails.Shipment.ShipmentKey; 
					        		registerBarCodeForBPInput.BarCode.ShipmentContextualInfo.SellerOrganizationCode = this.model.shipmentDetails.Shipment.SellerOrganizationCode; 
									 
									mashupArray.push(iscMashup.getMashupRefObj(this,'registerBarcodeForBackroomPick', registerBarCodeForBPInput));
									mashupArray.push(iscMashup.getMashupRefObj(this,'getRemainingShipmentLinesCountToBePicked', {ShipmentLine:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}}));
									
									iscMashup.callMashups(this,mashupArray,{}).then(this.processRegisterBarCodeOutput.bind(this),function(errorResponse) {
					            		that.handleMashupErrors(errorResponse);
					            	}); 
									
					        	}
					        	else {
					        		iscModal.showErrorMessage(iscI18n.translate('backroomPick.MSG_InvalidBarCodeData'));
								}
					  			
					  		},
					  		
					  		/**
					      	   *@description This is error callback handler for registerBarcodeForBackroomPick mashup. This method processes error response and displays appropriate error messages.
					      	   * 
					      	   *@param {Object} errorResponse - mashup error JSON object
					      	   * 
					      	   */
					  		handleMashupErrors:function(errorResponse) {
					  			
					  			var that = this;
					  			var errorMsg = errorResponse.Errors.Error[0].ErrorDescription;
					  			var errorCode = errorResponse.Errors.Error[0].ErrorCode;
					  			if(iscI18n.hasKey("apierror."+errorCode)){
					  				errorMsg = iscI18n.translate("apierror."+errorCode);
					  				iscModal.showErrorMessage(errorMsg,null,null).then(function(callbackData) {
					  					that.resetData();
					  				});				
					  			} else {
					  				iscModal.showErrorMessage(errorMsg,null,null).then(function(callbackData) {
					  					that.resetData();
					  				});				
					  			}
					  			
					  		},
					  		
					  		/**
					      	   *@description This is success callback handler for registerBarcodeForBackroomPick mashup. This method updates the shipmentLineList with the newly updated shipment line details.
					      	   * 
					      	   *@param {Object} response - mashup JSON object
					      	   * 
					      	   */
					  		processRegisterBarCodeOutput:function(response) {
					  			
					  			var apiOutput = iscMashup.getMashupOutput(response,"registerBarcodeForBackroomPick");
					  			var remainingShipmentList = iscMashup.getMashupOutput(response,"getRemainingShipmentLinesCountToBePicked");
					  			this.isShipmentPickComplete(remainingShipmentList);
					  			this.updateShipmentLineListModel(apiOutput.BarCode.Shipment);
					  			this.highlightLastPickedProduct(apiOutput.BarCode.Shipment.ShipmentLine);
					  			$timeout(function () {
					  					iscDomUtility.setFocus(document.getElementById('productScanInput'));
					  			 }, 0);
					  			this.resetData();
					  		},
					  		
					  		/**
					      	   *@description This method resets the barcode textfield data and resets dirty flag on screen
					      	   * 
					      	   */
					  		resetData:function() {
					  			
					  			this.model.barCodeData = "";
					  			if($scope.backroomPickForm) {
					  				$scope.backroomPickForm.$setPristine();
					  			}
					  			if($scope.quantityForm) {
					  				$scope.quantityForm.$setPristine();
					  			}
					  			//iscDomUtility.setFocus(document.getElementById('productScanInput'));
					  			
					  		},
					  		
					  		/**
					      	   *@description This method updates picked quantity of matching shipment line in shipmentLineList model with shipment line details model passed as parameter. 
					      	   * 
					      	   *@param {Object} updatedShipmentModel - shipment model with updated shipment line details
					      	   * 
					      	   */
					  		updateShipmentLineListModel:function(updatedShipmentModel) {
					  			
					  			if(!iscCore.isVoid(this.model.shipmentLineList) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords)) {
					  	       		 
					  	       		 var numOfShipmentLines = $filter('number')(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords);
					  	       		 for(var i=0;i<numOfShipmentLines;i++) {
					  	       			 
					  	       			 var shipmentLine = this.model.shipmentLineList.ShipmentLines.ShipmentLine[i];
					  	       			 this.ui.productListIndex++;
					  	       			 if(!iscCore.isVoid(shipmentLine) && shipmentLine.ShipmentLineKey == updatedShipmentModel.ShipmentLine.ShipmentLineKey) {
					  	       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].BackroomPickedQuantity = $filter('number') (updatedShipmentModel.ShipmentLine.BackroomPickedQuantity);
					  	       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].EditableBackroomPickedQuantity = this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].BackroomPickedQuantity;
					  	       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].Quantity = $filter('number') (updatedShipmentModel.ShipmentLine.Quantity);
					  	       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].ShortageQty = $filter('number') (updatedShipmentModel.ShipmentLine.ShortageQty);
					  	       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].OriginalQuantity = $filter('number') (updatedShipmentModel.ShipmentLine.OriginalQuantity);
					  	       				if(updatedShipmentModel.ShipmentLine.BackroomPickComplete) {
					  	       					this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].BackroomPickComplete = updatedShipmentModel.ShipmentLine.BackroomPickComplete;
					  	       				} else {
					  	       					this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].BackroomPickComplete = 'N';
					  	       				}
					  	       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].showQtyUpdate ='N';
					  	       				break;
					  	       			 }
					  	       		 }
					  	       	 }
					  			
					  		},
					  		
					  		/**
					      	   *@description This method is used to bring the last scanned product shipment line in focus 
					      	   * 
					      	   *@param {Object} updatedShipmentModel - shipment model with updated shipment line details
					      	   * 
					      	   */
					  		highlightLastPickedProduct:function(updatedShipmentLineModel) {
					  			
					  			if(this.ui.recordShownCount < this.ui.productListIndex){
									this.ui.recordShownCount = this.ui.productListIndex;
								}
					        	var that = this;
								$timeout(function(){
										iscScrollUtility.scrollToElementWIthOffset(document.getElementById('shipmentLinelist'), document.getElementById(updatedShipmentLineModel.ShipmentLineKey), 0, 100);
									}, 0);
								this.ui.productListIndex = 1;
								this.uiSelectShipmentLine(updatedShipmentLineModel);
					  			
					  		},
					  		
					  		/**
					      	   *@description This method is used to construct SLA image full URL.
					      	   * 
					      	   */
					  		setSLAImageURL:function() {
					  			
					  			var slaImageRelativePath = this.model.shipmentDetails.Shipment.ImageUrl;
					  			if(slaImageRelativePath) {
									this.ui.slaImageFullURL =  iscShipment.getFullURLForImage(slaImageRelativePath);
					  			}
					  			
					  		},
					  		
					  		/**
					      	   *@description This method checks for screen dirty before closing or exiting from backroom pick wizard.
					      	   * if screen is dirty, appropriate warning message is displayed. User can either stay at current page or exit the backroom pick flow.
					      	   * 
					      	   *@param {String} wizardAction - close or exit wizard action
					      	   * 
					      	   */
					  		checkForScreenDirtyBeforeClose:function(wizardAction) {
					  			
					  			var that = this;
					  			var isDirty = $scope.backroomPickForm.$dirty;
				            	if(isDirty) {
				            		iscModal.showConfirmationMessage(iscI18n.translate('globals.MSG_Screen_dirty')).then(function(popupAction){
				            			if(popupAction === 'YES'){
				            				wizardAction == 'close' ? iscWizard.closeWizard(): iscWizard.exitWizard();
				            			}
				            		});
				            	} else {
				            		
				            		iscModal.showConfirmationMessage(iscI18n.translate('backroomPick.MSG_CancelWarningMessage')).then(function(popupAction){
				            			if(popupAction === 'YES'){
				            				wizardAction == 'close' ? iscWizard.closeWizard(): iscWizard.exitWizard();
				            			}
				            		});
				            		
				            	}
				            	
				            	return true;
					  			
					  		},
					  		 
					  		/**
					      	   *@description This method is invoked when user clicks on Cancel button. Dirty check is performed before user close the backroom pick flow.
					      	   * 
					      	   */
					  		uiCancel:function() {
					  			this.checkForScreenDirtyBeforeClose("close");
					  		},
					  		
					  		
					  		/**
					      	   *@description This method is invoked when user clicks on Back action. Dirty check is performed before user wnats to go back to the previous screen.
					      	   * 
					      	   */
					  		handleWizardBack:function() {
					  			
								var isDirty = $scope.backroomPickForm.$dirty;
								
								if(isDirty){
									
									iscModal.showConfirmationMessage(iscI18n.translate('globals.MSG_Screen_dirty')).then(function(action){
				            			if(action === 'YES'){
				            				iscWizard.gotoPreviousPage(true);
				            			}
									});
									
									return true;
									
								} else {
									return false;
								}
					  			
					  			
					  			
					 		},
					 		
					 		/**
					      	   *@description This method is used to show/hide of picked quantity label for a shipment line.
					      	   * 
					      	   *@param {Object} shipmentLine - shipmentLine model
					      	   */
					 		uiToggleOfPickedQty:function(shipmentLine) {
					 			
					 			var showOfPickedQty = true;
					 			
					 			if(shipmentLine.BackroomPickComplete == 'Y') {
					 				showOfPickedQty = (shipmentLine.ShortageQty > 0 || shipmentLine.ShortageQty == shipmentLine.OriginalQuantity) ? true : false; 
					 			} else {
					 				showOfPickedQty = (shipmentLine.BackroomPickedQuantity == 0 && shipmentLine.ShortageQty == 0) ? false : true;
					 			}
					 			
					 			return showOfPickedQty;
					 			
					 		},
					  		
					 		/**
					      	   *@description This method is used to show/hide of picked quantity label for a shipment line.
					      	   * 
					      	   *@param {Object} shipmentLine - shipmentLine model
					      	   */
					 		
					 		uiPickAllShipmentLines:function(taskOutput) {
					  			
					  			var pickAllQtyInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
					  			iscMashup.callMashup(this,"pickAllShipmentLines",pickAllQtyInput,{}).then(this.showPickAllSuccessMessage.bind(this)); 
					  		},
					  		
					  		/**
					 		 *@description This method displays shipment is completely picked success message. 
					 		 * 
					 		 */
					  		showPickAllSuccessMessage:function() {
					  			
					  			var that = this;
					  			
					  			if(this.uiIsStagingLocationAssigned() || !this.ui.isStagingLocationRuleEnabled) {
					  				
					  				iscModal.showSuccessMessage(iscI18n.translate('backroomPick.MSG_AllPickedSuccessfully')).then(function(callBackData){
						  				if(callBackData == 'OK'){
						  					that.refreshProductListByView();
						  				}
						  			});
					  				
					  				
					  			} else {
					  				
					  				iscModal.showConfirmationMessage(iscI18n.translate('backroomPick.MSG_AllPickedSuccessfullyAssignStagingLoc')).then(function(action){
										if(action === 'YES'){
											that.uiOpenAssignStagingLocationPopup();
										}
										that.refreshProductListByView();
				            		});
						  			
					  			}
					  			
					  		},
					  		
					  		/**
					 		 *@description This method is used refresh shipment line list when the shipment is competely picked.
					 		 * 
					 		 */
					  		refreshProductListByView:function() {
					  			
					  			var shipmentLineListInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
					  			var mashupRefId = "getPickableShipmentLineList";
					  			
					  			iscMashup.callMashup(this,mashupRefId,shipmentLineListInput,{}).then(this.handleRefreshProductList.bind(this,mashupRefId)); 
					  		},
					  		
					  		/**
					 		 *@description This method is callback handler for getPickableShipmentLineList mashup.
					 		 *
					 		 *shipmentLineList model is update with mashup output and first shipment line is selected.
					 		 *
					 		 *@param {String} mashupRefId - name of mashup inoved.
					 		 *@param {Object} response - mashup output JSON object
					 		 * 
					 		 */
					  		handleRefreshProductList:function(mashupRefId, response) {
					  			
					  			this.model.shipmentLineList = iscMashup.getMashupOutput(response,mashupRefId);
					  			this._isInitSelection = true;
					  			this.ui.focusOnFirstLine = true;
					  			this.setPickableShipmentLineCount(this.model.shipmentLineList);
					  			
					  		},
					  		
					  		/**
					  		 *@description This method is onclick handler for Finish Pick action. Dirty check is performed before validating shipment for finish pick.
					  		 */
					  		uiFinishPick:function() {
					  			
					  			var isDirty = $scope.backroomPickForm.$dirty;
								var that = this;
								if(isDirty){
									iscModal.showConfirmationMessage(iscI18n.translate('globals.MSG_Screen_dirty')).then(function(action){
										if(action === 'YES'){
											that.validateShipmentForPickComplete();
										}
				            		});
								} else {
									this.validateShipmentForPickComplete();
								}
					  			
					  			
					  		},
					  		
					  		/**
					  		 * @description This method checks if picking is complete for all shipment lines.
					  		 * 
					  		 * @param remainingShipmentLineList {Object} - remaining shipment line list model to be picked
					  		 */
					  		isShipmentPickComplete:function(remainingShipmentLineList) {
					  			
					  			if(remainingShipmentLineList && remainingShipmentLineList.ShipmentLines && remainingShipmentLineList.ShipmentLines.TotalNumberOfRecords) {
					  				
					  				var remainingShipmentLinesToBePicked = Number(remainingShipmentLineList.ShipmentLines.TotalNumberOfRecords);
					  				if(remainingShipmentLinesToBePicked == 0) {
					  					this.showPickAllSuccessMessage();
					  				}
					  				
					  			}
					  		},
					  		
					  		/**
					  		 *@description This method invokes validateShipmentForPickComplete mashup for validating shipment for finish pick.
					  		 */
					  		validateShipmentForPickComplete:function() {

					  			var shipmentInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,ShipmentDeliveryMethod:this.model.shipmentDetails.Shipment.DeliveryMethod}};
					  			iscMashup.callMashup(this,"validateShipmentForPickComplete",shipmentInput,{}).then(this.processShipmentForPickComplete.bind(this)); 
					  			
					  		},
					  		
					  		/**
					  		 *@description This method is success callback handler for validateShipmentForPickComplete mashup.
					  		 * Based on shipment validation status, appropriate message is displayed.
					  		 * 
					  		 *@param {Object} response - mashup output JSON object.
					  		 */
					  		processShipmentForPickComplete:function(response) {
					  								  			
					  			var that = this;
					  			var apiOutput = iscMashup.getMashupOutput(response,"validateShipmentForPickComplete");
					  			if(apiOutput && apiOutput.ShipmentLines && apiOutput.ShipmentLines.ShipmentValidationStatus) {
					  				
					  				var validationStatus = apiOutput.ShipmentLines.ShipmentValidationStatus;
					  				if(validationStatus == "pickComplete") {
					  					iscWizard.finishWizard();
					  					
					  				} else if(validationStatus == "shipmentCancelled") {
					  					
					  					this.showShipmentCancelledPopup();
					  					
					  				} else if(validationStatus == "pickNotComplete") {
					  					
					  					 iscModal.showConfirmationMessage(iscI18n.translate('backroomPick.MSG_NotAllLinesPicked')).then(function(callBackAction){
					  						 
											if(callBackAction === 'YES'){
												iscWizard.closeWizard();
											}
											
					       				});
					  					
					  				}
					  				
					  			}
					  			
					  		},
					  		
					  		/**
					 		 *@description This method is displays shipment cancelled warning modal.
					 		 * 
					 		 */
					  		showShipmentCancelledPopup:function() {
					  			
					  			iscModal.showWarningMessage(iscI18n.translate('backroomPick.MSG_OrderWillBeCancelled')).then(function(callBackAction){
			  						
									if(callBackAction == 'OK'){
										iscWizard.finishWizard();
									}
									
			       				});
					  			
					  		},
					  		
					  		/**
					 		 *@description This method is onclick handler for shipment line panel. This method updates selectedShipmentLine model with currently selected shipment line.
					 		 *@param {Object} shipmentLine - shipment line model.
					 		 */
					  		uiSelectShipmentLine:function(shipmentLine) {
					  			this.ui.selectedShipmentLineKey = shipmentLine.ShipmentLineKey;
					  			this.uiStampBackoomPickQuantityAttrs(shipmentLine);
					  			this.ui.currentlySelectedShipmentLine = shipmentLine;
								this.ui.focusOnFirstLine = false;
								this._isInitSelection = false;
					  		},
					  		
					  		/**
					 		 *@description This method is checks if hold location is assigned to shipment.
					 		 *
					 		 */
					  		uiIsStagingLocationAssigned:function() {
					  			return (this.model.shipmentDetails.Shipment && this.model.shipmentDetails.Shipment.HoldLocation != null && this.model.shipmentDetails.Shipment.HoldLocation != '' && this.model.shipmentDetails.Shipment.HoldLocation != undefined);
					  		},
					  		
					  		uiGetDisplayStagingLocation:function() {
					  			if(!this.uiIsStagingLocationAssigned()) {
					  				return iscI18n.translate('globals.LABEL_None');
					  			} else {
					  				return this.model.shipmentDetails.Shipment.HoldLocation;
					  			}
					  		},
					  		
					  		/**
					 		 *@description This method is used to open assign staging location modal
					 		 *
					 		 */
					  		uiOpenAssignStagingLocationPopup:function() {
					  			
					  			var that=this;
								var popInput = {}
								popInput.shipment = this.model.shipmentDetails;
								
				    			var stagingLocationPopupInput = {
				    					 modalInput: function(){
				    		      			return popInput;
				    		      		}   
				    				   
				    				};
				    			
				    			iscModal.openModal('store.views.shipment.common.staging-location.staging-location',stagingLocationPopupInput,{}).then(function(callBackData){
				    				if(callBackData.data !== null && callBackData.data !== undefined){
				    					that.postStagingLocationAssignment.call(that,callBackData.data);
				    				}
				    			});
					  			
					  		},
					  		
					  		/**
					 		 *@description This method is callback handler for assign staging location modal. Shipment details modal is updated with latest hold location data passed as input.
					 		 *
					 		 *@param {String} callbackData - updated hold location.
					 		 */
					  		postStagingLocationAssignment:function(callbackData) {
					  			
					  			this.model.shipmentDetails.Shipment.HoldLocation = callbackData.StagingLocation;
					  			
					  		},
					  		
					  		/**
					 		 *@description This method is used to open product details modal
					 		 *
					 		 *@param {Object} shipmentLine - shipment line model.
					 		 */
					  		uiOpenItemDetails:function(shipmentLine) {
					  			iscShipment.openProductDetail(shipmentLine);
					  		},
					  		
					  		/**
					 		 *@description This method is handler for '-' action. This method validates picked quantity and invokes mashup to updated the picked quantity of shipment line.
					 		 *
					 		 *@param {Object} shipmentLine - shipmentLine model
					 		 */
					  		uiDecreaseQty:function(shipmentLine) {
					  			
					  			var backroomPickedQty = Number(shipmentLine.EditableBackroomPickedQuantity);
					  			var newBackroomPickQty = backroomPickedQty - this.ui.ONE_QUANTITY;
					  			
					  			if(newBackroomPickQty < 0) {
					  				iscModal.showErrorMessage(iscI18n.translate('backroomPick.MSG_NegativeQtyError'));
					  			} 
					  			
					  			//iscMashup.callMashup(this,"updatePickQtyForShipmentLine",this.getChangeShipmentInputForPickQuantityUpdate(newBackroomPickQty, shipmentLine),{}).then(this.postPickQuantityUpdate.bind(this));
					  			
					  			this.invokeMashupForPickedQuantityUpdate("updatePickQtyForShipmentLine",this.getChangeShipmentInputForPickQuantityUpdate(newBackroomPickQty, shipmentLine))
					  		},
					  		
					  		/**
					 		 *@description This method is handler for '+' action. This method validates picked quantity and invokes mashup to updated the picked quantity of shipment line.
					 		 *
					 		 *@param {Object} shipmentLine - shipmentLine model
					 		 */
					  		uiIncreaseQty:function(shipmentLine) {
					  			
					  			var backroomPickedQty = Number(shipmentLine.EditableBackroomPickedQuantity);
					  			var newBackroomPickQty = backroomPickedQty + this.ui.ONE_QUANTITY;
						  		var maxQuantity = Number(shipmentLine.Quantity);
						  			
						  		if(newBackroomPickQty > maxQuantity) {
						  			iscModal.showErrorMessage(iscI18n.translate('backroomPick.MSG_MaxQuantityError'));
						  		}
					  			
						  		//iscMashup.callMashup(this,"updatePickQtyForShipmentLine",this.getChangeShipmentInputForPickQuantityUpdate(newBackroomPickQty, shipmentLine),{}).then(this.postPickQuantityUpdate.bind(this));
						  		
						  		this.invokeMashupForPickedQuantityUpdate("updatePickQtyForShipmentLine",this.getChangeShipmentInputForPickQuantityUpdate(newBackroomPickQty, shipmentLine))
					  		},
					  		
					  		/**
					 		 *@description This method constructs changeShipment API input for updating the picked quantity of shipment line.
					 		 *
					 		 *@param {String} newPickQuantity - modified picked quantity
					 		 *@param {Object} shipmentLine - shipmentLine model
					 		 */
					  		getChangeShipmentInputForPickQuantityUpdate:function(newPickQuantity, shipmentLine) {
					  			
					  			
					  			var changeShipmentInput = {Shipment:{ShipmentLines:{ShipmentLine:[]}}};
					  			changeShipmentInput.Shipment.ShipmentKey = this.model.shipmentDetails.Shipment.ShipmentKey;
					  			changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0] = {};
					  			
					  			changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0].ShipmentLineKey = shipmentLine.ShipmentLineKey;
					  			changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0].BackroomPickedQuantity = newPickQuantity;
					  			
					  			return changeShipmentInput;
					  			
					  		},
					  		
					  		/**
					 		 *@description This method is callback handler for updatePickQtyForShipmentLine mashup. 
					 		 *
					 		 *shipmentLineList model is updated with latest shipment line details model.
					 		 *
					 		 *@param {Object} response - mashup output JSON object
					 		 */
					  		postPickQuantityUpdate:function(response) {
					  			
					  			var updatedShipmentModel = iscMashup.getMashupOutput(response,"updatePickQtyForShipmentLine");
					  			var remainingShipmentList = iscMashup.getMashupOutput(response,"getRemainingShipmentLinesCountToBePicked");
					  			this.isShipmentPickComplete(remainingShipmentList);
					  			this.updateShipmentLineListModel(updatedShipmentModel.Shipment);
					  			this.resetData();
					  		},
					  		
					  		/**
					 		 *@description This method is used to open record shortage modal for shipment line.
					 		 *
					 		 *@param {Object} shipmentLine - shipment line model.
					 		 */
					  		uiOpenRecordShortagePopup:function(shipmentLine) {
					  			
					  			
					  			var that=this;
								var popInput = {}
								popInput.codeType = 'YCD_PICK_SHORT_RESOL';
								popInput.shipmentLine = angular.copy(shipmentLine);
								popInput.shipmentLine.DisplayQty = shipmentLine.BackroomPickedQuantity;
								popInput.shipmentLine.DisplayTotalQty = shipmentLine.OriginalQuantity;
								popInput.shipmentLine.OrderLine = shipmentLine.OrderLine;
								popInput.shipmentLine.DisplayShortQty = Number(shipmentLine.OriginalQuantity) - Number(shipmentLine.BackroomPickedQuantity);
								
				    			var recordShortagePopupInput = {
				    					 modalInput: function(){
				    		      			return popInput;
				    		      		}   
				    				   
				    				};
				    			
				    			iscModal.openModal('store.views.shipment.common.record-shortage.record-shortage',recordShortagePopupInput,{}).then(function(callBackData){
				    				if(callBackData.data !== null && callBackData.data !== undefined){
				    					that.recordShortageForShipment.call(that,callBackData.data,shipmentLine);
				    				}
				    			});
					  			
					  		},
					  		
					  		/**
					 		 *@description This method is callback handler for record shortage popup. This method constructs changeShipment input required 
					 		 *for marking shipment line as shortage along with shortage reason selected in the popup.
					 		 *
					 		 *@param {Object} shortagePopupData - contains shortage reason code
					 		 *@param {Object} shipmentLineToBeShorted - shipment line model to be shorted
					 		 */
					  		recordShortageForShipment:function(shortagePopupData, shipmentLineToBeShorted) {
					  			
					  			var mashupArray = [];
								 
					  			var changeShipmentInput = {Shipment:{ShipmentLines:{ShipmentLine:[]}}};
					  			changeShipmentInput.Shipment.ShipmentKey = this.model.shipmentDetails.Shipment.ShipmentKey;
					  			changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0] = {};
					  			
					  			changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0].ShipmentLineKey = shipmentLineToBeShorted.ShipmentLineKey;
					  			changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0].OrderLineKey = shipmentLineToBeShorted.OrderLineKey;
					  			changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0].OrderHeaderKey = shipmentLineToBeShorted.OrderHeaderKey;
					  			changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0].DocumentType = shipmentLineToBeShorted.DocumentType;
					  			
					  			if(shortagePopupData.RecordShortage.ShortageReasonCode == "AllInventoryShortage") {
					  				changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0].Quantity = shipmentLineToBeShorted.BackroomPickedQuantity;
					  			} else {
					  				changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0].Quantity = shipmentLineToBeShorted.Quantity
					  			}
					  			
					  			changeShipmentInput.Shipment.ShipmentLines.ShipmentLine[0].ShortageQty =  Number(shipmentLineToBeShorted.OriginalQuantity) - Number(shipmentLineToBeShorted.BackroomPickedQuantity);
					  			
					  			changeShipmentInput.Shipment.ShortageReasonCode = shortagePopupData.RecordShortage.ShortageReasonCode;
					  			
					  			mashupArray.push(iscMashup.getMashupRefObj(this,'recordShortageForShipment',changeShipmentInput));
					  			mashupArray.push(iscMashup.getMashupRefObj(this,'getRemainingShipmentLinesCountToBePicked', {ShipmentLine:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}}));
					  			
					  			iscMashup.callMashups(this,mashupArray,{}).then(this.postRecordShortageForShipment.bind(this),angular.noop);
					  			
					  		},
					  		
					  		/**
					 		 *@description This method is callback handler for recordShortageForShipment mashup.If all the lines of shipment is shorted, then shipment is cancelled.
					 		 *If the shipment is cancelled, then Shipment Cancelled warning message is displayed.
					 		 *
					 		 *shipmentLineList model is updated with latest shipment line details model.
					 		 *
					 		 *@param {Object} response - mashup output JSON object
					 		 */
					  		postRecordShortageForShipment:function(response) {
					  			
					  			var updatedShipmentModel = iscMashup.getMashupOutput(response,"recordShortageForShipment");
					  			this.updateShipmentLineListModel(updatedShipmentModel.Shipment);
					  			var shipmentStatus = updatedShipmentModel.Shipment.Status;
					  			if(shipmentStatus.indexOf("9000") > -1) {
					  				this.showShipmentCancelledPopup();
					  			} else {
					  				var remainingShipmentList = iscMashup.getMashupOutput(response,"getRemainingShipmentLinesCountToBePicked");
						  			this.isShipmentPickComplete(remainingShipmentList);
					  			}
					  			this.resetData();
					  			
					  		},
					  		
					  		/**
					 		 *@description Shows next set of shipment lines when shipment lines panel is scrolled.
					 		 */
					  		uiGetNextShipmentLineRecords : function(){
								
							  if(this.ui.recordShownCount <= this.model.shipmentLineList.ShipmentLines.ShipmentLine.length){
				                  this.ui.recordShownCount += 5;
				                }
								  
							},
							
							  /**
					 		 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
					 		 */
							uiShipmentLineScrollActionValidator : function(){
				            	return true;
				            },
				            
				            /**
							 *@description This method is used to open shipment summary screen
							 */
				            gotoShipmentSummary:function() {
				            	iscState.goToState('shipmentsummary',{input: {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}}},{});
				            },
				            
				            /**
							 *@description This is a onFocus event handler of quantity field.
							 *@param {Object} qtyField - quantity field as JSON object. 
							 *@param {Object} shipmentLineModel - shipment line data as JSON object. 
							 */
							uiOnQuantityFieldFocus :function (qtyField,shipmentLineModel) {
								
								var formats = ""; 
								
								if(this.ui.currentlySelectedShipmentLine.ShipmentLineKey == this.model.shipmentLineList.ShipmentLines.ShipmentLine[0].ShipmentLineKey) {
					           		this._isInitSelection = false;
					           	}
								
								if($scope.backroomPickForm.$valid)
									formats = $locale.NUMBER_FORMATS;
								
					  			var oldQuantity = shipmentLineModel.EditableBackroomPickedQuantity;
					  			if(oldQuantity){
					  				oldQuantity=oldQuantity.replace(formats.GROUP_SEP, '');		
					  			}
					  			if(shipmentLineModel.showQtyUpdate !=='Y'){
					  				qtyField.oldQty = oldQuantity;
					  			}
					  			
						    },
						    
						    /**
						     *@description This is a custom validator method for picked quantity field
							 *@param {Object} validationResponseObj - default data type validation response JSON object
							 *@param {Object} angularErrorObject - datatype validation error JSON object
							 *@param {Object} modelValue - quantity field value
							 *@param {Object} viewValue - quantity value inputted in textfield
						     */
						    uiValidateQuantity : function(validationResponseObj, angularErrorObject, modelValue, viewValue){
				           	
				           	/* check if the DataType Validation is successful */
						    	
				           	if(!iscCore.isVoid(angularErrorObject) && angularErrorObject.iscDatatypeValidator)
				           		return validationResponseObj;
				           	else
				           	var isQty_a_Number = !isNaN(viewValue);
				           	if(!iscCore.isBooleanTrue(isQty_a_Number) || iscCore.isVoid(viewValue)){
				           		validationResponseObj.booleanResponse = !isNaN(viewValue) && !iscCore.isVoid(viewValue);
					            	validationResponseObj.errorMesssage = iscI18n.translate("globals.ERROR_invalid_input");
				   			} else if(!this._isInitSelection){
				   				
				   				var maxQuantity = Number(this.ui.currentlySelectedShipmentLine.Quantity);
				   				if(Number(modelValue) > maxQuantity) {
						  			validationResponseObj.booleanResponse = false;
					            	validationResponseObj.errorMesssage = iscI18n.translate("backroomPick.MSG_MaxQuantityError");
						  		}
				  				
				   				
				   				
				   			}
				           	
				           	return validationResponseObj;
				           },
				           
				           /**
							 *@description Shows/hides Update button for quantity field based on the validity of the edited quantity.
							 *@param {Object} qtyField - quantity field as JSON object. 
							 *@param {Object} shipmentLineModel - shipmentLine data as JSON object. 
							 */
					  		
					  		uiShowUpdateButton : function(qtyField,shipmentLineModel){
					  						
		  						var formats = $locale.NUMBER_FORMATS;
					  			var newQuantity = shipmentLineModel.EditableBackroomPickedQuantity;
					  			if(newQuantity)
					  				newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
					  			if((!iscCore.isVoid(newQuantity)) && qtyField.oldQty !== newQuantity && Number(shipmentLineModel.BackroomPickedQuantity) != Number(shipmentLineModel.EditableBackroomPickedQuantity))
					  				shipmentLineModel.showQtyUpdate ='Y';
					  			else
					  				shipmentLineModel.showQtyUpdate ='N';
					  			
					  		},
					  		
					  		/**
							 *@description hides Update button for quantity field.
							 *@param {Object} shipmentLineModel - shipmentLine data as JSON object. 
							 */
					  		uiHideUpdateButton : function(shipmentLineModel){
					  			shipmentLineModel.showQtyUpdate ='N';
					  		},
					  		
					  	  /**
							 *@description Validates shipment line picked quantity change and calls updatePickQtyForShipmentLine mashup to update product picked quantity .
							 *@param {Object} qtyField - quantity field as JSON object. 
							 *@param {Object} shipmentLineModel - shipmentLine data as JSON object. 
							 */
				  			uiValidateQuantityAndUpdate : function(qtyField,shipmentLine){
					  				
					  				
					  			var that = this;
					  			var formats = $locale.NUMBER_FORMATS;
					  			var newQuantity = shipmentLine.EditableBackroomPickedQuantity;
					  			if(newQuantity) {
					  				newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
					  			}
					  			if(!iscCore.isVoid(newQuantity) && qtyField.oldQty !== newQuantity && Number(shipmentLine.EditableBackroomPickedQuantity) != Number(shipmentLine.BackroomPickedQuantity)){
					  				
					  				qtyField.oldQty = newQuantity ;
					  				
						  			if (typeof newQuantity == "string") {
						  				newQuantity = parseInt(newQuantity,10);
						  			}
						  			
						  			//iscMashup.callMashup(this,"updatePickQtyForShipmentLine",this.getChangeShipmentInputForPickQuantityUpdate(newQuantity, shipmentLine),{}).then(this.postPickQuantityUpdate.bind(this));
						  			
						  			this.invokeMashupForPickedQuantityUpdate("updatePickQtyForShipmentLine",this.getChangeShipmentInputForPickQuantityUpdate(newQuantity, shipmentLine))
					  			}
						  								  			
					  		},
					  		
					  		invokeMashupForPickedQuantityUpdate:function(mashupId, mashupInput) {
					  			
				  	        	var mashupArray = [];
								 
								mashupArray.push(iscMashup.getMashupRefObj(this,mashupId,mashupInput));
								mashupArray.push(iscMashup.getMashupRefObj(this,'getRemainingShipmentLinesCountToBePicked', {ShipmentLine:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}}));
								
								iscMashup.callMashups(this,mashupArray,{}).then(this.postPickQuantityUpdate.bind(this),angular.noop);
					  			
					  		},
					  		
					  		/**
					      	   *@description This method is invoked when user clicks on application banner or hamburger icon in mobile Dirty check is performed before user can navigate away from backroom pick flow.
					      	   * 
					      	   */
					  		handleWizardExit:function() {
					  			return this.checkForScreenDirtyBeforeClose("exit");
					  		}
				            
				  			
				 });
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').controller('store.views.shipment.backroom-pick.wizard.backroom-pick-finish',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscModal','iscI18n','iscState',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams,iscModal, iscI18n, iscState) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
    	  /**
      	   *@description Stores shipment details JSON object.
      	   */
    	  shipmentDetails:{}
      },
  		mashupRefs : [
  		              
  		              {
  		            	  /**
  		            	   *@description Gets the definition if packing is done as part of the order picking process.
  		            	   */
		            	  	mashupRefId: 'getSingleProcessPickPackRuleDetails',
		            	  	mashupId: 'store.views.shipment.backroom-pick.getSingleProcessPickPackRuleDetails'
		              },
		              {	
		            	  /**
  		            	   *@description Gets the shipment details by shipment key.
  		            	   */
		            	  	mashupRefId: 'getShipmentDetails',
		            	  	mashupId: 'store.views.shipment.backroom-pick.getShipmentDetails'
		            	 
		              }
  		],
  		
  		ui:{
  			/**
  			*@property {Boolean} hasPermissionForPack - True ifuser has permission for Pack flow, false otherwise.
  			 */
  			hasPermissionForPack:iscResourcePermission.hasPermission("WSC000062")
  		},
  		
  		 /**
    	   *@description This method gets shipment details for opening pack flow if user has permission for it. Otherwise, navigates to shipment summary
    	   */
			initialize : function(){
			  
				if(iscWizard.getWizardAction()==="FINISH"){
					
					var mashupArray = [];
					this.model.shipmentDetails = iscWizard.getWizardModel('shipmentDetails');
					
					if(this.ui.hasPermissionForPack) {
						
						var shipmentInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
						mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentDetails',shipmentInput));
						mashupArray.push(iscMashup.getMashupRefObj(this,'getSingleProcessPickPackRuleDetails',{}));
						 
						iscMashup.callMashups(this,mashupArray,{}).then(this.processShipmentForPack.bind(this));
					} else {
						this.gotoShipmentSummary();
					}
					
				} else if(iscWizard.getWizardAction()==="CLOSE"){
					iscState.goToPreviousState();
				}
			  
			},
			
			 /**
	    	   *@description This method is mashup handler for mashup invoked in initialize() method.
	    	   * This method opens the pack flow if shipment is SFS, is in valid status for Pack and Single Process Pick-Pack rule is enabled. 
	    	   *@param {Object} response - Mashup output JSON object.
	    	   */
			processShipmentForPack:function(response) {
				
				var shipmentDetails = iscMashup.getMashupOutput(response,"getShipmentDetails");
	        	var ruleDetails = iscMashup.getMashupOutput(response,"getSingleProcessPickPackRuleDetails");
	        	var that = this;
	        	
	        	if(shipmentDetails.Shipment.Status.Status.indexOf("1100.70.06.50") > -1 && ruleDetails.Rules.RuleSetValue == "Y") {
	        		iscModal.showConfirmationMessage(iscI18n.translate('backroomPick.MSG_Pack_Shipment_Now')).then(function(action){
            			if(action === 'YES'){
            				that.openPackFlow(shipmentDetails);
            			} else {
            				that.gotoShipmentSummary();
            			}
            		});
	        	} else {
	        		this.gotoShipmentSummary();
	        	}
				
			},
			
			 /**
	    	   *@description This method opens the Pack flow wizard by passing shipment details.
	    	   *@param {Object} shipmentDetails - Shipment details JSON object. 
	    	   */
			openPackFlow:function(shipmentDetails) {
				iscState.goToState("containerpack", {input: {Shipment: {ShipmentKey: shipmentDetails.Shipment.ShipmentKey }}}, {});
			},
			
			 /**
	    	   *@description This method opens the Shipment Summary by passing shipment details.
	    	   */
			gotoShipmentSummary:function() {
				var shipment = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}}
				iscState.goToState('shipmentsummary',{input: shipment},{});
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

angular.module('store').controller('store.views.shipment.backroom-pick.wizard.backroom-pick-init',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscModal','iscI18n','iscState','$filter','iscStateParams',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscModal, iscI18n, iscState,$filter,iscStateParams) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
    	  /**
      	   *@description Stores shipment details JSON object.
      	   */
    	  shipmentDetails:{}
      },
  		mashupRefs : [
  		              
						{
							 /**
					      	   *@description Get Shipment details for Validating the Shipment before opening the wizard.
					      	   */
							 mashupRefId: 'validateShipmentForBackroomPick',
							 mashupId: 'store.views.shipment.backroom-pick.ValidateShipmentForBackroomPick'
						
						},
						{
							 /**
					      	   *@description Handles Start Over action of abandoned shipment popup for shipments.
					      	   */
							 mashupRefId: 'startOverShipmentForBackroomPick',
							 mashupId: 'store.views.shipment.backroom-pick.handleInProgressShipment'
						},
						{
							 /**
					      	   *@description Handles continue action of abandoned shipment popup for shipments.
					      	   */
							 mashupRefId: 'continueShipmentForBackroomPick',
							 mashupId: 'store.views.shipment.backroom-pick.handleInProgressShipment'
						},
						{
							 /**
					      	   *@description Handles Start Over action for shipments included in batch.
					      	   */
							 mashupRefId: 'removeShipmentFromBatch',
							 mashupId: 'store.views.shipment.backroom-pick.handleInProgressShipment'
						},
						{
							 /**
					      	   *@description Change the Shipment Status to Backroom Pick Progreess after validating shipment for pick
					      	   */
							 mashupRefId: 'changeShipmentStatusToPickingInProgress',
							 mashupId: 'store.views.shipment.backroom-pick.changeShipmentStatusToPickingInProgress'
						},
						{
							 /**
					      	   *@description Assign shipment to logged in user.
					      	   */
							 mashupRefId: 'assignShipmentToLoggedInUser',
							 mashupId: 'store.views.shipment.backroom-pick.assignShipmentToLoggedInUser'
						}
  		],
  		
  		ui:{
  			/**
  			*@property {Boolean} hasPermissionForBOPISPick - True if user has permission for Picking BOPIS shipments, false otherwise.
  			 */
  			hasPermissionForBOPISPick:iscResourcePermission.hasPermission("WSC000057"),
  			/**
  			*@property {Boolean} hasPermissionForSFSPick - True if user has permission for Picking SFS shipments, false otherwise.
  			 */
  			hasPermissionForSFSPick:iscResourcePermission.hasPermission("WSC000058")
  			
  		},
  		
  		 /**
    	   *@description This method invokes mashup to validate shipment is eligible for backroom pick.
    	   */
			initialize : function(){

				 var shipmentInput = iscStateParams.params.input;
				 shipmentInput = {Shipment:{ShipmentKey:shipmentInput.Shipment.ShipmentKey,Action:"BackroomPick"}};
				 
				 iscMashup.callMashup(this,"validateShipmentForBackroomPick",shipmentInput,{}).then(this.processShipmentDetailsForBackroomPick.bind(this));
			},
			
			/**
	    	   *@description This method is mashup handler for mashup invoked in initialize() method.
	    	   * This method checks if shipment has any validation errors, user has permission for pick flow and opens the wizard flow.
	    	   * In case of validation errors, appropriate error messages are displayed. 
	    	   * If user doesn't have permission for pick flow, then shipment summary is launched.
	    	   * If shipment is eligible for pick, shipment is moved to Picking in Progress status and assigned to logged in user.
	    	   * 
	    	   *@param {Object} response - mashup output JSON object. 
	    	   */
			processShipmentDetailsForBackroomPick:function(response) {
				
				var apiOutput = iscMashup.getMashupOutput(response,"validateShipmentForBackroomPick");
				this.model.shipmentDetails = apiOutput;
				if(apiOutput.Shipment.Error) {
					this.handleShipmentValidationError(apiOutput)
				} else if(this.hasPermissionForPick()){
					this.changeShipmentStatusAndAssignToUser()
				}
				
			},
			
			/**
	    	   *@description This method checks if user doesn't have permission for pick flow, then shipment summary is launched.
	    	   */
			hasPermissionForPick:function() {
				
				var deliveryMethod = this.model.shipmentDetails.Shipment.DeliveryMethod;
				if(deliveryMethod && deliveryMethod == 'PICK' && this.ui.hasPermissionForBOPISPick) {
					return true;
				} else if(deliveryMethod && deliveryMethod == 'SHP' && this.ui.hasPermissionForSFSPick) {
					return true;
				}
				
				this.gotoShipmentSummary();
				
			},
			
			/**
	    	   *@description This method invokes mashups to move shipment status to Picking in Progress status and assigns the shipment to logged in user.
	    	   */
			changeShipmentStatusAndAssignToUser:function() {
				
				var mashupArray = [];
				
				var isShipmentPickingInProgress = this.model.shipmentDetails.Shipment.Status.indexOf("1100.70.06.20") > -1;
				var changeShipmentStatus = this.getChangeShipmentStatusInput();
				
				
				if(!isShipmentPickingInProgress) {
					mashupArray.push(iscMashup.getMashupRefObj(this,'changeShipmentStatusToPickingInProgress',changeShipmentStatus));
				}
				
				if(!this.model.shipmentDetails.Shipment.AssignedToUserId) {
					mashupArray.push(iscMashup.getMashupRefObj(this,'assignShipmentToLoggedInUser', {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}}));
				}
				
				if(mashupArray.length > 0)
					iscMashup.callMashups(this,mashupArray,{isMultiAPICall:true}).then(this.afterChangeShipmentStatus.bind(this),angular.noop);
				else 
					this.gotoWizardFirstPage();
				
			},
			
			/**
	    	   *@description This method constructs the changeShipmentStatus API input required for moving the shipment status to Picking in Progress. 
	    	   */
			getChangeShipmentStatusInput:function() {
				
				var apiInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
				if(this.isTransferOrderShipment()) {
					apiInput.Shipment.TransactionId = 'YCD_BACKROOM_PICK_IN_PROGRESS.0006';
				}
				
				return apiInput;
			},
			
			/**
	    	   *@description This method checks if shipment is a Transfer Order
	    	   */
			isTransferOrderShipment:function() {
				return this.model.shipmentDetails.Shipment.DocumentType == '0006' ? true : false;
			},
			
			/**
	    	   *@description This method is a mashup handler for 'changeShipmentStatusToPickingInProgress' & 'assignShipmentToLoggedInUser' mashups. 
	    	   * On mashup success, backroom pick wizard is launched.
	    	   * 
	    	   *@param {Object} response - mashup output JSON object
	    	   */
			afterChangeShipmentStatus:function(response) {
				this.gotoWizardFirstPage();
			},
			
			/**
	    	   *@description This method launches the backroom pick wizard with pick products screen as first page.
	    	   */
			gotoWizardFirstPage:function() {
				iscWizard.startCustomWizard('pick-products', this.model.shipmentDetails, {});
			},
			
			/**
	    	   *@description This method opens shipment summary screen
	    	   */
			gotoShipmentSummary:function() {
				var shipment = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}}
				iscState.goToState('shipmentsummary',{input: shipment},{});
			},
			
			/**
	    	   *@description This method closes the backroom pick wizard.
	    	   */
			closeBackroomPickWizard:function() {
				iscWizard.setWizardModel("shipmentDetails",this.model.shipmentDetails);
				iscWizard.closeWizard();
			},
			
			/**
	    	   *@description This method processes shipment validation errors. Based on the error type appropriate error popup is displayed.
	    	   * 
	    	   *@param {Object} shipmentDetails - Shipment details JSON object
	    	   */
			handleShipmentValidationError:function(shipmentDetails) {
				
				var errorDesc = shipmentDetails.Shipment.Error.ErrorDescription;
				var action = shipmentDetails.Shipment.Error.action;
				
				if(errorDesc == "AssignedToUserIsDifferent") {
					this.openAssingedToDifferentUserPopup(shipmentDetails);
				} else if (errorDesc == "ShipmentIncludedInBatch") {
					this.openShipmentPickedInBatchPopup(shipmentDetails);
				} else if (errorDesc == "InvalidShipmentShipNode" || errorDesc.indexOf("InvalidTransactionAllowed_") > -1) {
					this.showCustomErrorModal(iscI18n.translate('backroomPick.MSG_'+errorDesc), shipmentDetails)
				} 
				
			},
			
			/**
			 *@description This method displays error modal with 'Go Back' & 'Goto Shipment Summary' modal actions.
			 * 
			 *@param {Object} shipmentDetails - Shipment details JSON object
			 *@param {String} translatedMessage - message to be displayed in modal
			 */
			showCustomErrorModal:function(translatedMessage, shipmentDetails) {
				
				var that = this;
				
				var confirmModalOptions = { 
    					options: { 
    						headerText: "modal.TITLE_Error",
    						headerIconCss: "app-glyphicons app-icon-error_30",
    						action:[
    						  {
    						    actionName:"goBack",
    						    actionLabel:"backroomPick.ACTION_GoBack"
    						  },
    						  {
      						    actionName:"gotoSummary",
      						    actionLabel:"backroomPick.ACTION_GotoShipmentSummary"
      						  }
    						]
    					},
    					settings: { 
    						size: "md", 
    						type: "error" 
    					}
				};
				
				iscModal.showConfirmationMessage(translatedMessage, confirmModalOptions).then(function(action){
					if(action == "goBack"){
						that.closeBackroomPickWizard();
        			} else if(action == "gotoSummary") {
        				that.gotoShipmentSummary();
        			}
        		});
				
				
			},
			
			/**
			 *@description This method opens shipment included in batch modal. This modal lists all the batches the shipment lines is part of.
			 * User can choose to Start Over viz remove the shipments from batch and set picked quantity as zero else can ignore picking this shipment.
			 * 
			 *@param {Object} shipmentDetails - Shipment details JSON object
			 */
			openShipmentPickedInBatchPopup:function(shipmentDetails) {
				
				var that = this;
				var popupInput = {};
				popupInput.shipmentDetails = shipmentDetails;
				
				var shipmentPickedInBatchPopup = {
					 modalInput: function(){
		      			return popupInput;
		      		}   
				   
				};
				   
				iscModal.openModal('store.views.shipment.backroom-pick.common.shipment-in-batch.shipment-in-batch',shipmentPickedInBatchPopup,{}).then(function(callBackData){
					if(callBackData.data !== null && callBackData.data !== undefined){
						that.handleShipmentPickedInBatchPopupResponse(callBackData.data);
						}
					},
					function() {
						that.closeBackroomPickWizard();
					}
				);
				
				
			},
			
			/**
			 *@description This method is a callback handler for shipment included in batch modal. If user chooses to Start Over, 
			 * then we remove the shipments from batch and set picked quantity as zero else can ignore picking this shipment.
			 * 
			 * If user selects cancel, shipment remains in the batch and we take him to the previous screen.
			 * 
			 *@param {String} action - User selected action - START_OVER or CANCEL
			 */
			handleShipmentPickedInBatchPopupResponse:function(action) {
				
				var shipmentInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,Action:"STARTOVER_FROM_BATCH_PICK",StoreBatchList:{StoreBatch:[]}}};
				var that = this;
				
				if(action == 'START_OVER'){
					
					if(!iscCore.isVoid(this.model.shipmentDetails) && !iscCore.isVoid(this.model.shipmentDetails.Shipment) && !iscCore.isVoid(this.model.shipmentDetails.Shipment.StoreBatchList) && !iscCore.isVoid(this.model.shipmentDetails.Shipment.StoreBatchList.TotalNumberOfRecords)) {
						
						var numOfBatches = $filter('number')(this.model.shipmentDetails.Shipment.StoreBatchList.TotalNumberOfRecords);
						if(numOfBatches > 0) {
							
							for(var i=0;i<numOfBatches;i++) {
								
								var batch = this.model.shipmentDetails.Shipment.StoreBatchList.StoreBatch[i];
								shipmentInput.Shipment.StoreBatchList.StoreBatch[i] = {};
								shipmentInput.Shipment.StoreBatchList.StoreBatch[i].StoreBatchKey = batch.StoreBatchKey;
								
							}
			
						}
					}
					
					console.log("shipmentInput - ",shipmentInput);
					
					iscMashup.callMashup(this,"removeShipmentFromBatch",shipmentInput,{}).then(function(response){
						that.gotoWizardFirstPage();
					});
				}
				
			},
			
			/**
			 *@description This method opens a warning modal to indicate user that shipment is assigned to different user. User can either Stat Over, Continue or close the modal to go back to previous screen..
			 * 
			 *@param {Object} shipmentDetails - Shipment details JSON object
			 */
			openAssingedToDifferentUserPopup:function(shipmentDetails) {
				
				
				var that = this;
				var popupInput = {};
				popupInput.shipmentDetails = shipmentDetails;
				popupInput.flowName = "BACKROOM_PICK";
				
				var abandonShipmentPopup = {
					 modalInput: function(){
		      			return popupInput;
		      		}   
				   
				};
				   
				iscModal.openModal('store.views.shipment.common.abandon-shipment.abandon-shipment',abandonShipmentPopup,{}).then(function(callBackData){
					if(callBackData.data !== null && callBackData.data !== undefined){
						that.handleAbandonShipmentPopupResponse(callBackData.data);
						}
					},
					function() {
						that.closeBackroomPickWizard();
					}
				);

				
				
			},
			
			/**
			 *@description This method is a callback handler for shipment assigned to different user warning modal. 
			 * If user chooses to Start Over, then we set picked quantity as zero and assign the shipment to current user. 
			 * If user chooses to continue, we assign the shipment to current user and picked quantity of the shipment is not modified.
			 * 
			 * If user selects cancel, shipment remains in the batch and we take him to the previous screen.
			 * 
			 *@param {String} action - User selected action - START_OVER, CONTINUE or CANCEL
			 */
			handleAbandonShipmentPopupResponse:function(action) {
				
				var shipmentInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
				var that = this;
				var mashupRefId = "";
					
				if(action == 'START_OVER') {
					shipmentInput.Shipment.Action = "STARTOVER";
					mashupRefId = "startOverShipmentForBackroomPick";
				} else if (action == 'CONTINUE') {
					shipmentInput.Shipment.Action = "CONTINUE";
					mashupRefId = "continueShipmentForBackroomPick";
				} 
				
				iscMashup.callMashup(this,mashupRefId,shipmentInput,{}).then(function(response){
					that.gotoWizardFirstPage();
				});
				
			}
			
			
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

 /**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.batchpick.batch-list.batch-list
 *@package store.views.shipment.batchpick.batch-list
 *@class batch-list
 *@description Displays the batch list.
 *
 */
angular.module('store').controller('store.views.shipment.batchpick.batch-list.batch-list',
  ['$scope','$rootScope','iscScreen','iscWizard','iscStateParams','iscMashup','iscModal','iscResourcePermission','iscI18n','iscAppContext','iscState','iscRule','iscShipment',
	function($scope,$rootScope,iscScreen,iscWizard,iscStateParams,iscMashup,iscModal,iscResourcePermission,iscI18n,iscAppContext,iscState,iscRule,iscShipment) {
		
		iscWizard.initializeWizardPage($scope,{
            model:{
                /**
                 *@description Stores the getBatchList mashup output.
                 */
                "batchlist":{}
            },
            mashupRefs:[{
                /**
                *@description Mashup used to search for products.
                */
                    mashupRefId: 'getBatchList',
                    mashupId: 'store.views.shipment.batchpick.batch-list.getBatchListForStore'

                },
                {
                    /**
                    *@description Mashup used to create Batch.
                    */
                        mashupRefId: 'createStoreBatch',
                        mashupId: 'store.views.shipment.batchpick.createStoreBatch'
 
                 },
                 {
                     /**
                     *@description Mashup used to assign the user to the batch.
                     */
                         mashupRefId: 'assignBatchToLoginUserId',
                         mashupId: 'store.views.shipment.batchpick.batch-list.assignBatchToLoginUserId'
  
                  }
            
            ],
            ui:{
            	
                 /**
                  *@iscdoc uiattr
                  *@viewname store.views.batchpick.batch-list.batch-list
                  *@property {String}  recordShownCount -  Total number of product records displayed in the screen
                  */
                  recordShownCount:iscAppContext.isMobile()?16:20,
                 /**
                 *@iscdoc uiattr
                 *@viewname store.views.batchpick.batch-list.batch-list
                 *@property {String} apiPageSize - Number of records to be fetched by searchCatalogIndex API in one call.
                 */
                 apiPageSize: iscAppContext.isMobile()?16:20,
                /**
                *@iscdoc uiattr
                *@viewname store.views.shipment.batchpick.batch-list.batch-list
                *@property {Boolean} searchInProgress - True if mashup call is still in progress, false otherwise.
                */
                searchInProgress: false,
                filterOptionImgPath : iscShipment.getFullURLForImage('wsc/resources/css/icons/images/filterBy_blueOn.png'),
                configureImgPath : iscShipment.getFullURLForImage('wsc/resources/css/icons/images/config_blue.png'),
                showfilter: false
            },
            /**
             *@iscdoc viewinit
             *@viewname store.views.shipment.batchpick.batch-list.batch-list
             *@description initializes Batch List screen by calling getStoreBatchList api.
             */
            initialize: function(){
            	
            	     var pageInput = iscWizard.getWizardPageInput();
            		 this.ui.configureImgPath = iscShipment.getFullURLForImage('wsc/resources/css/icons/images/config_blue.png');
               	     var mashupInput = {"StoreBatch":{"PageSize":this.ui.apiPageSize}};
                     this.callGetBatchList(mashupInput);
            },
           
            /**
			 *@description Calls getStoreBatchList API. 
			 */
             
            callGetBatchList : function(input){
            	iscMashup.callMashup(this,'getBatchList',input,{}).then(function(data){
            		var output = iscMashup.getMashupOutput(data,'getBatchList');
            		this.handleGetBatchListPaginatedOutput(output,false);
            	}.bind(this),angular.noop);
            },
        
       
            /**
			 *@description Gets the Paginated records for getStoreBatchList api when the next page action is performed.
			 */
        uiGetNextRecords: function(){
        	/*
        	 * Let's say ui.pageSize is 5 and apiPageSize is 100. If 5 records are available in the current model,
        	 * paint those. If less than 5 are available, get more records from API call and then paint 5 or less (whatever is the output)
        	 * But if this was the last of the pages (no more records are available, then paint whatever remains)
        	 */
        	var batchListModel = this.model.batchlist.Page.Output.StoreBatchList;
        	var actualRecordsInModel = batchListModel.StoreBatch.length;
        	console.log("actualRecordsInModel="+actualRecordsInModel);
        	if(actualRecordsInModel - this.ui.recordShownCount >= this.ui.pageSize ){
                this.ui.recordShownCount+=this.ui.pageSize;
                console.log("Using existing model - doing client side pagination");
              }else{
            	  if(this.model.batchlist.Page.IsLastPage != 'Y'){
            		  var currentPageNo = Number(this.model.batchlist.Page.PageNumber);
            		  var getSBListInput = {StoreBatch:{PageNumber:currentPageNo+1, PageSize:this.ui.apiPageSize,
            			  PreviousPage:{PageNumber:currentPageNo,
            				  StoreBatch:{
            					  StoreBatchKey:batchListModel.StoreBatch[actualRecordsInModel-1].StoreBatchKey,
            					  BatchNo:batchListModel.StoreBatch[actualRecordsInModel-1].BatchNo,
            					  }}
            		  		}};
            		  
  				  console.log("calling API with input="+getSBListInput);
  				  this.ui.searchInProgress = true;
  				     iscMashup.callMashup(this,'getBatchList',getSBListInput,"NEXT",{}).then(function(data){
	            		var output = iscMashup.getMashupOutput(data,'getBatchList');
	            		this.handleGetBatchListPaginatedOutput(output,true);
  				    	this.ui.searchInProgress = false;
  				    	//this.uiGetNextRecords();
	            	}.bind(this),angular.noop);
            	  }else{
            		  this.ui.recordShownCount = actualRecordsInModel;
            	  }
            	 
              }
        },
        
        /**
		 *@description Validates if next page action should be performed by checking whether the last page is already fetched.
		 */
        uiNextPageActionValidator: function(){
            if(!this.ui.searchInProgress){
                // mashup call not in progress. call next page handler
                return true;
            }
            else if(this.ui.searchInProgress){
                //mashup call in progress 
                return false;
            }
        },
        
	        /**
			 *@description call back handler for getStoreBatchList API.
			 */
            handleGetBatchListPaginatedOutput: function(output, onNext){
            	this.ui.searchInProgress = false;
            	
      			 if(onNext){
      				//append the next page results with the total results
      				var itemList = output.Page.Output.StoreBatchList.StoreBatch;
      				for(var i = 0;i < itemList.length; i++){
                            this.model.batchlist.Page.Output.StoreBatchList.StoreBatch.push(itemList[i]);
                    }
      				this.model.batchlist.Page.PageNumber = output.Page.PageNumber;
      				this.model.batchlist.Page.IsLastPage = output.Page.IsLastPage;
      				this.uiGetNextRecords();
      			 }else{
      				this.model.batchlist =  output;
      				this.updateFilterImage();
      				console.log(output);
      			 }
      			
      			this.massageBatchList();
      			this.ui.showfilter = true;
            },
            
            
            massageBatchList:function(){
             
            	var batchList = this.model.batchlist;
            	var itemList = this.model.batchlist.Page.Output.StoreBatchList.StoreBatch;
            	var batch = {};
  				for(var i = 0;i < itemList.length; i++){
                      batch =  itemList[i];
                      if(!iscCore.isVoid(batch.DepartmentDisplayDesc) && batch.DepartmentDisplayDesc.lastIndexOf(",") != -1) {
                    	  batch.uiDepartmentDisplayDesc ='MULTIPLE';
                      }else{
                    	  batch.uiDepartmentDisplayDesc = batch.DepartmentDisplayDesc;
                      }
                }
            	
            },
            
            /**
             *@iscdoc uimethod
             *@viewname store.views.shipment.batchpick.batch-list.batch-list
             *@methodname uiCancel
             *@description Cancel button onclick handler for wizard. Shows confirmation message if return order is already created.
             */
            uiCancel : function(){
            	iscWizard.exitWizard();
            },
            
            /**
             *@iscdoc method
             *@viewname store.views.shipment.batchpick.batch-list.batch-list
             *@methodname handleWizardBack
             *@description Onclick handler for the wizard back button. Takes back to the previous page. 
	  		 *If the previous page is home page and the return order is created a confirmation message is shown.
             */
            handleWizardBack:function(){
            	     iscWizard.closeWizard();
            },
            /**
             *@iscdoc method
             *@viewname store.views.shipment.batchpick.batch-list.batch-list
             *@methodname handleWizardExit
             *@description Onclick handler for the wizard exit. Shows confirmation message if return order is already created.
             */
			handleWizardExit:function(){
				iscWizard.exitWizard();
			},
			
			uiGetSLAStyling: function(imageUrl){
				if(!iscCore.isVoid(imageUrl) && imageUrl.lastIndexOf("/") != -1) {
					var cssClass = imageUrl.substring(imageUrl.lastIndexOf("/") + 1, imageUrl.indexOf("."));
					if(!iscCore.isVoid(cssClass)) {
						console.log("cssClass="+cssClass);
						return cssClass;
					}
				}
			},
			
			updateFilterImage:function(){
				var filterOptions = this.model.batchlist.Page.Output.StoreBatchList.FilterOptions;
				if(filterOptions.Picked == 'Y' && filterOptions.InProgress == 'Y' && filterOptions.NotStarted == "Y"){
					this.ui.filterOptionImgPath = iscShipment.getFullURLForImage('wsc/resources/css/icons/images/filterBy_blue.png');
				}else{
					this.ui.filterOptionImgPath = iscShipment.getFullURLForImage('wsc/resources/css/icons/images/filterBy_blueOn.png');
				}
			},
			
			/**
			 *@description Opens Filter pop-over for Batch List screen.
			 */
			uiOpenFilterPopup:function(){
				var that=this;
    			var popupInput = {FilterOptions:{}};
				popupInput.FilterOptions = this.model.batchlist.Page.Output.StoreBatchList.FilterOptions;
    			var filerBatchListPopupInput = {
    					 modalInput: function(){
    		      			return popupInput;
    		      		}   
    				   
    				};
    			
    			iscModal.openModal('store.views.shipment.batchpick.batch-list.filter.batch-list-filter',filerBatchListPopupInput,{}).then(function(callBackData){
    				if(callBackData.data !== null && callBackData.data !== undefined){
    					that.applyBatchListFilter.call(that,callBackData.data);
    				}
    			},
    				angular.noop);
			},
			
			/**
			 *@description On click handler of Apply button in filter pop-over.
			 */
			uiApplyBatchListFilter:function(data){
				var getBatchListInput = {StoreBatch:{}};
				getBatchListInput.StoreBatch.Picked = data.FilterOptions.Picked;
				getBatchListInput.StoreBatch.InProgress = data.FilterOptions.InProgress;
				getBatchListInput.StoreBatch.NotStarted = data.FilterOptions.NotStarted;
				getBatchListInput.StoreBatch.PageSize = this.ui.apiPageSize;
				this.callGetBatchList(getBatchListInput);
				
			},
			
			/**
			 *@description Opens Batch Configuration popup.
			 */
			uiOpenConfigurePopup:function(){
				var that=this;
    			var popupInput = {};
    			var configureBatchListPopupInput = {
    					 modalInput: function(){
    		      			return popupInput;
    		      		}   
    				   
    				};
    			
    			iscModal.openModal('store.views.shipment.batchpick.batch-list.pref.batch-list-preferences',configureBatchListPopupInput,{}).then(function(callBackData){
    				iscModal.showInfoMessage(iscI18n.translate('batchpick.MSG_ChangeConfigOptions'));	
    				that.applyBatchListPreferences.call(that);
    					
    			},
    				angular.noop);
			},
			
			
			/**
			 *@description Persists the Batch preferences set by the user.
			 */
			
			applyBatchListPreferences:function(){
				var getBatchListInput = {StoreBatch:{}};
				getBatchListInput.StoreBatch.PageSize = this.ui.apiPageSize;
				this.callGetBatchList(getBatchListInput);
			},
			/**
             *@iscdoc method
             *@viewname store.views.shipment.batchpick.batch-list.batch-list
             *@methodname uiPickBatch
             *@description Onclick handler for pick button. Creates a new batch and opens batch pick screen.
             */
			uiPickBatch : function (batch){
				if(iscI18n.translate('batchpick.BATCH_DRAFTED') === batch.Status){
					/* prepare input for createStoreBatch api */
					var createStoreBatchInputEle ={};
					createStoreBatchInputEle.StoreBatch = {};
					createStoreBatchInputEle.StoreBatch.ShipmentLines = batch.ShipmentLines;
					createStoreBatchInputEle.StoreBatch.StoreBatchConfigList = batch.StoreBatchConfigList;
					iscMashup.callMashup(this,"createStoreBatch",createStoreBatchInputEle,{}).then(this.handleCreateStoreBatchApiOutput.bind(this),angular.noop);
				}
			},
			
			handleCreateStoreBatchApiOutput : function(data){
				var apiOutput = iscMashup.getMashupOutput(data,"createStoreBatch");
				apiOutput.callBatchListApi = "N";
				if(apiOutput.StoreBatch.BatchType == 'SORT_WHILE_PICK'){
					iscWizard.gotoCustomPage('swpPicking',apiOutput,{});
				}else if(apiOutput.StoreBatch.BatchType == 'SORT_AFTER_PICK'){
					iscWizard.gotoCustomPage('sapPicking',apiOutput,{});
				}
				
			},
			
			/**
             *@iscdoc method
             *@viewname store.views.shipment.batchpick.batch-list.batch-list
             *@methodname uiContinueBatch
             *@description Onclick handler for continue button.
             */
			
			uiContinueBatch : function(batch){
				var loggedInUser = iscAppContext.getFromContext('currentLoginID');
				if(batch.AssignedToUserId != loggedInUser){
					var that = this;
					var msg = iscI18n.translate('batchpick.MSG_BatchAssignedToUser',{loginid:batch.AssignedToUserId})
					iscModal.showConfirmationMessage(msg).then(
							function(callBackAction){
								if(callBackAction === 'YES'){
									that.changeBatchOwner(batch,loggedInUser);
								}else if(callBackAction === 'NO'){
									//do nothing. let the user remain on the screen
								}
		       				},
		  					function(callBackAction){
		            			//		Do Nothing

		       				});
				}else
					this.openContinueBatch(batch);
				
				
			},
			changeBatchOwner:function(batch,loggedInUser){
				var input = {StoreBatch:{StoreBatchKey:batch.StoreBatchKey,
					AssignedToUserId:loggedInUser}};
				iscMashup.callMashup(this,'assignBatchToLoginUserId',input,{}).then(function(data){
            		var output = iscMashup.getMashupOutput(data,'assignBatchToLoginUserId');
            		this.openContinueBatch(batch);
            	}.bind(this),angular.noop);
			},
			
			openContinueBatch:function(batch){
				if(iscI18n.translate('batchpick.BATCH_OPEN') === batch.Status){
					batch.callBatchListApi = 'Y';
					if(batch.BatchType == 'SORT_WHILE_PICK'){
						iscWizard.gotoCustomPage('swpPicking',batch,{});
					}else{
						iscWizard.gotoCustomPage('sapPicking',batch,{});
					}
					
				}else if(iscI18n.translate('batchpick.BATCH_PICK_COMPLETE_NOT_STAGED') === batch.Status && (iscRule.getRuleSetValue('enableStagingLocation')=='Y')){
					//batch.callBatchListApi = 'Y';
					var pageInput = {StoreBatch:{StoreBatchKey:batch.StoreBatchKey,BatchNo:batch.BatchNo}};
					if(batch.BatchType == 'SORT_WHILE_PICK'){
						iscWizard.gotoCustomPage('swpStaging',pageInput,{});
					}else{
						iscWizard.gotoCustomPage('sapStaging',pageInput,{});
					}
				}
			},
			
			
			/**
             *@description Opens Department popup for a batch
             */
			uiOpenDepartmentModal: function(batch){
				var that=this;
    			var popupInput = {DepData:{}};
				popupInput.DepData.Departments = batch.DepartmentDisplayDesc;
				popupInput.DepData.BatchNo = batch.BatchNo;
    			var departmentsPopupInput = {
					 modalInput: function(){
						return popupInput;
					}   
				};
    			
    			iscModal.openModal('store.views.shipment.batchpick.batch-list.departments.batch-list-departments',departmentsPopupInput,{}).then(function(callBackData){},angular.noop);
			}
        });
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.batchpick.sap-picking.sap-picking
 *@package store.views.shipment.batchpick.sap-picking
 *@class sap-picking
 *@description Scan screen for batch lines for sort while pick batches
 *
 */

   angular.module('store').controller('store.views.shipment.batchpick.sap-picking.sap-picking',
		  ['$scope','$rootScope','iscScreen','iscWizard','$timeout','$filter','$locale','iscMashup','iscResourcePermission','iscDomUtility','iscModal','iscI18n','iscScrollUtility','iscRule','iscShipment','iscStateParams','iscAppContext',
			function($scope,$rootScope,iscScreen,iscWizard,$timeout,$filter,$locale,iscMashup,iscResourcePermission,iscDomUtility,iscModal,iscI18n,iscScrollUtility,iscRule,iscShipment,iscStateParams,iscAppContext) {				
				iscWizard.initializeWizardPage($scope,{
					model:{
					/**
					 *@description Holds the Output of getStoreBatchDetails API.
					 */		
					  "getStoreBatchDetails" : {},
					  "filtermodel":{}
					},
					
					mashupRefs:[{
							   /**
		                        *@description Gets the StoreBatch details .
		                        */
		                        mashupRefId: 'getStoreBatchDetails',
		                        mashupId: 'store.views.shipment.batchpick.getStoreBatchDetails'
					},{
						     /**
		                    *@description Calls registerBatchPick api in MANUALPICK mode.
		                    */
		                        mashupRefId: 'registerBatchPickManualMode',
		                        mashupId: 'store.views.shipment.batchpick.sap-picking.registerBatchPickManualMode'
					},{
						   /**
		                    *@description Calls registerBatchPick api in SCAN mode.
		                    */
		                        mashupRefId: 'registerBatchPickScanMode',
		                        mashupId: 'store.views.shipment.batchpick.sap-picking.registerBatchPickScanMode'
					},{
						    /**
		                    *@description records shortage of a batch line .
		                    */
		                        mashupRefId: 'recordShortageForBatchPick',
		                        mashupId: 'store.views.shipment.batchpick.sap-picking.recordShortageForBatchPick'
					},{

						 /**
		                    *@description Changes the batch status to completed.
		                    */
	                        mashupRefId: 'finishBatch',
	                        mashupId: 'store.views.shipment.batchpick.sap-picking.finishBatch'
						}
					],
					
					ui:{
						/**
		    			 *@property {Number} recordShownCount - pageSize of the batch line list for continuous scrolling.
		    			 */
						recordShownCount:5,
						
						/**
		    			 *@property {Object} selectedBatchLine - The batch line details that is currently selected in the product list.
		    			 */
						selectedBatchLine:{},
						
						/**
		    			 *@property {String} batchLineFilter - The Value of the filter applied in the batch line filter popup.
		    			 */
						batchLineFilter:'N',
						
						/**
		      			*@property {Boolean} focusOnFirstLine - True if first shipment line is selected, false otherwise
		      			 */
						focusOnFirstLine : true,
						
						filteredItems:[],
						filteredItemsLength:0
					},
					
					
					/**
					 *@description Initializes the Picking screen by calling getStoreBatchDetails api
					 */
					
					initialize : function(){
						var pageInput = iscWizard.getWizardPageInput();
						if(pageInput.callBatchListApi === 'N'){
							this.model.getStoreBatchDetails = pageInput;
							this.getBatchLineSizeAfterFilterApply();
						}else {
							var getStoreBatchApiInputElem = {'StoreBatch':{'StoreBatchKey': pageInput.StoreBatchKey}};
		                	iscMashup.callMashup(this,"getStoreBatchDetails",getStoreBatchApiInputElem,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
						}
						//TODO:highlight first line, set focus on scan
						this.initializefilterModel();
					},
				
					/**
					 *@description This method handles the on click of back  in wizard.
					 */ 	
                  handleWizardBack:function(){
						
						
						var isFirstPage = iscWizard.isFirstPage();
						 if(isFirstPage){
							 confirmationMsg = iscI18n.translate('batchpick.WarningMessage_Cancel'); 
							 iscModal.showConfirmationMessage(confirmationMsg).then(
										function(callBackAction){
											if(callBackAction === 'YES'){
												iscWizard.closeWizard();
											}
					       				});
							 return true;
						 }else if(!isFirstPage){
							 confirmationMsg = iscI18n.translate('batchpick.WarningMessage_Cancel'); 
							 iscModal.showConfirmationMessage(confirmationMsg).then(
										function(callBackAction){
											if(callBackAction === 'YES'){
												iscWizard.gotoPreviousPage(true);
											}
					       				});
							 return true;
						 }
						 
						 else{
							 
							 return false;
						 }
						
						
					},
					getBatchLineSizeAfterFilterApply:function(){
						
						if(this.ui.batchLineFilter == 'N'){
							var batchLines = this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine;
				  			var i =0;
			     		    for(var j=0; j<batchLines.length; j++){
			     		    	if(batchLines[j].BackroomPickComplete == 'N'){
			     		    		i++;
			     		    	}
			     		    }
			     		    this.ui.filteredItemsLength = i;
						}else{
							this.ui.filteredItemsLength = this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.TotalNumberOfRecords;
						}
					},
					
					/**
					 *@description Gets the Paginated records for getStoreBatchDetails api when the next page action is performed.
					 */
					
					uiGetNextBatchLineRecords : function(){
						
						  if(this.ui.recordShownCount <= this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine.length){
			                  this.ui.recordShownCount+=5;
			                }
						  
					},
					
					/**
					 *@description Sets the initial filters applied on the batch lines.
					 */
					initializefilterModel: function(){
						
						if(this.ui.batchLineFilter == 'N'){
							this.model.filtermodel.filter = 'IN_PROGRESS';
						}else{
							this.model.filtermodel.filter = 'ALL';
						}
						
						
		    			
					},
					
					/**
					 *@description callback handler for init api calls.
					 *@param {Object} data - Controller data of init api calls.
					 */	
					handleInitApiCalls : function(data){
						var apiOutput = iscMashup.getMashupOutput(data,"getStoreBatchDetails");
						iscDomUtility.setFocus(document.getElementById('productScanInput'));
						this.model.getStoreBatchDetails = apiOutput;
						this.getBatchLineSizeAfterFilterApply();
						this.checkBatchStatus();
					},
					
					checkBatchStatus : function(){
						var that = this;
						
						if(this.model.getStoreBatchDetails.StoreBatch.Status == '2000'){
							
						var enableStagingLocation = iscRule.getRuleSetValue('enableStagingLocation');
							
                        if(enableStagingLocation == 'Y'){
								
                            	
                            	var customOptions = {options:{action:[
    							            						  {
    							              						    actionName:"YES",
    							              						    actionLabel:"batchpick.ACTION_AssignStaging"
    							              						  },
    							              						  {
    							              						    actionName:"NO",
    							              						    actionLabel:"batchpick.ACTION_Finish"
    							              						  }
    							              						]}};
                            	
                            	iscModal.showConfirmationMessage(iscI18n.translate('batchpick.MSG_AllBatchLinesPicked'),customOptions).then(
    									function(callBackAction){
    										if(callBackAction === 'YES'){
    											that.uiGotoAssignStaging();
    										}else if(callBackAction === 'NO'){
    											that.finishBatch();
    										}
    				       				},
    				  					function(callBackAction){
    				            			//		Do Nothing

    				       				});
								
							}else{
								
								var customOptions = {options:{action:[
								            						  {
								              						    actionName:"YES",
								              						    actionLabel:"batchpick.ACTION_Finish"
								              						  }
								              						  
								              						]}};
								
								iscModal.showConfirmationMessage(iscI18n.translate('batchpick.MSG_AllBatchLinesPicked'),customOptions).then(
										function(callBackAction){
											if(callBackAction === 'YES'){
												that.finishBatch();
											}
					       				},
					  					function(callBackAction){
					            			//		Do Nothing

					       				});
								
							}

							
						}else if(this.model.getStoreBatchDetails.StoreBatch.Status == '9000'){
							iscModal.showInfoMessage(iscI18n.translate('batchpick.MSG_BatchCancelled')).then(
									function(callBackAction){
										//iscWizard.gotoCustomPage('batchList',{},{});;
										if(iscStateParams.params.action==="batchList"){
											iscWizard.gotoCustomPage('batchList',{},{});;	
										}else if(iscStateParams.params.action==="skipbatchList"){
											iscWizard.closeWizard();	
										}
				       				}
				  				    );
						}
					},
					uiGotoAssignStaging : function(){
						var pageInput = {StoreBatch:{StoreBatchKey:this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey}};
						iscWizard.gotoCustomPage('sapStaging',pageInput,{});
					},
					finishBatch : function(){
						var input = {StoreBatch:{StoreBatchKey:this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey}};
						iscMashup.callMashup(this,"finishBatch",input,{}).then(function(data){
							this.gotoBatchList();
						}.bind(this),angular.noop);
					},
					gotoBatchList: function(){
						//iscWizard.gotoCustomPage('batchList',{},{});
						if(iscStateParams.params.action==="batchList"){
							iscWizard.gotoCustomPage('batchList',{},{});;	
						}else if(iscStateParams.params.action==="skipbatchList"){
							iscWizard.closeWizard();	
						}
					},
					uiGetBatchLineTrackBy : function(batchLine){
						return batchLine.ItemDetails.ItemID+batchLine.ItemDetails.UnitOfMeasure;
					},
					uiSelectBatchLine : function(batchLine){
						this.ui.selectedBatchLine = this.uiGetBatchLineTrackBy(batchLine);
						this.ui.focusOnFirstLine = false;
					},
					uiScanItem: function(barcodeData){
						if(iscCore.isVoid(barcodeData)){
							iscModal.showErrorMessage(iscI18n.translate('batchpick.MSG_NoProductScanned'));
						}else{
							var input = {StoreBatch:{StoreBatchKey:this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey,
								BarCode:{BarCodeData:barcodeData}}};
							iscMashup.callMashup(this,"registerBatchPickScanMode",input,{}).then(function(data){
								this.handleRegisterBatchPickScanOutput(data);
							}.bind(this),this.handleRegisterBatchPickErrors.bind(this));
						}
						
					},
					
					 handleRegisterBatchPickErrors : function(response){
							
							if(response.Errors){
						  			var errorMsg = response.Errors.Error[0].ErrorDescription;
						  			var errorCode = response.Errors.Error[0].ErrorCode;
						  			if(errorCode == 'YCD00093'){
						  				errorMsg = iscI18n.translate("apierror."+'YCD00093_pick');
						  				iscModal.showErrorMessage(errorMsg,null,null);	
						  			}
						  			
						  			else{
						  			if(iscI18n.hasKey("apierror."+errorCode)){
						  				errorMsg = iscI18n.translate("apierror."+errorCode);
						  				iscModal.showErrorMessage(errorMsg,null,null);				
						  			}
						  			else{
						  				iscModal.showErrorMessage(errorMsg,null,null);
						  			}
						  			
							      }
						   }
							
						},
						
					handleRegisterBatchPickScanOutput:function(data){
						this.ui.barcodeData = '';
						var apiOutput = iscMashup.getMashupOutput(data,"registerBatchPickScanMode");
						console.log(apiOutput);
						this.updateBatchLine(apiOutput);
						
					},
					updateBatchLine:function(apiOutput){
						
						
						this.model.getStoreBatchDetails.StoreBatch.Status = apiOutput.StoreBatch.Status; 
						var itemID = apiOutput.StoreBatch.StoreBatchLine.ItemID;
						var uom = apiOutput.StoreBatch.StoreBatchLine.UnitOfMeasure;
						var sblineArray = this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine;
						for(var i = 0;i < sblineArray.length; i++){
                           if(sblineArray[i].ItemID == itemID && sblineArray[i].UnitOfMeasure == uom){
                        	   sblineArray[i] = apiOutput.StoreBatch.StoreBatchLine;
                        	   this.ui.focusOnFirstLine = false;
                        	   this.ui.selectedBatchLine = this.uiGetBatchLineTrackBy(sblineArray[i]);
                        	   if(sblineArray[i].BackroomPickComplete == 'Y' && this.ui.batchLineFilter == 'N'){
                        		   this.ui.filteredItemsLength-=1;
                        	   }
                        	   break;
                           }
						}
						
						/*scroll to the batch line*/
						iscScrollUtility.scrollToElementWIthOffsetAndFixedHeader(document.getElementById('batch-line-list'), document.getElementById(this.ui.selectedBatchLine), 0, 10, 40);

						
						this.checkBatchStatus();
						/*TODO
						 * check if the status has changed 2000 or 9000
						 * highlight that particular storebatchline
						 * paint the whole panel again
						 * set focus based on mode (scan or update)
						 * 
						 */
					},
					
					uiDecreaseQty : function(batchLine){
						var itemID = batchLine.ItemDetails.ItemID;
						var uom = batchLine.ItemDetails.UnitOfMeasure;
						var input = {StoreBatch:{StoreBatchKey:this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey,
							Item:{ItemID:itemID, UnitOfMeasure:uom,Action:'UNDOPICK'}}}
						var that=this;
						iscMashup.callMashup(this,"registerBatchPickManualMode",input,{}).then(function(data){
							console.log(batchLine);
							this.handleRegisterBatchPickManualOutput(data);
						}.bind(this),angular.noop);
					},
					uiIncreaseQty : function(batchLine){
						var itemID = batchLine.ItemDetails.ItemID;
						var uom = batchLine.ItemDetails.UnitOfMeasure;
						var input = {StoreBatch:{StoreBatchKey:this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey,
							Item:{ItemID:itemID, UnitOfMeasure:uom,Action:'PICK'}}}
						var that=this;
						iscMashup.callMashup(this,"registerBatchPickManualMode",input,{}).then(function(data){
							console.log(batchLine);
							this.handleRegisterBatchPickManualOutput(data);
						}.bind(this),angular.noop);
					},
					handleRegisterBatchPickManualOutput : function(data){
						var apiOutput = iscMashup.getMashupOutput(data,"registerBatchPickManualMode");
						console.log(apiOutput);
						this.updateBatchLine(apiOutput);
						
					},
					
					uiOpenFilterPopup: function(){
						var that=this;
						var popInput = {}
						if(this.ui.batchLineFilter == 'N'){
							popInput.filter = 'IN_PROGRESS';
						}else{
							popInput.filter = 'ALL';
						}
		    			var filerBatchLinesPopupInput = {
		    					 modalInput: function(){
		    		      			return popInput;
		    		      		}   
		    				   
		    				};
		    			
		    			iscModal.openModal('store.views.shipment.batchpick.common.filter.batch-line-filter',filerBatchLinesPopupInput,{}).then(function(callBackData){
		    				if(callBackData.data !== null && callBackData.data !== undefined){
		    					that.applyBatchListFilter.call(that,callBackData.data);
		    				}
		    			},
		    				angular.noop);
					},
					
					uiApplyBatchListFilter: function(data){
						if(data.filter == 'IN_PROGRESS'){
							this.ui.batchLineFilter = 'N';
						}else{
							this.ui.batchLineFilter = '';
						}
						this.getBatchLineSizeAfterFilterApply();
						//this.ui.focusOnFirstLine = true;
						this.ui.selectedBatchLine = {};
					},
					
					/*applyBatchListFilter: function(data){
						if(data.filter == 'IN_PROGRESS'){
							this.ui.batchLineFilter = 'N';
						}else{
							this.ui.batchLineFilter = '';
						}
						this.ui.focusOnFirstLine = true;
						this.ui.selectedBatchLine = {};
					},
					*/
					uiOpenRecordShortagePopup:function(batchLine){
						var that=this;
						var popInput = {}
						popInput.codeType = 'YCD_PICK_SHORT_RESOL';
						popInput.shipmentLine = angular.copy(batchLine);
						//creating OrderLine as recordShortage popup wants it
						popInput.shipmentLine.OrderLine = {};
						popInput.shipmentLine.OrderLine.ItemDetails = popInput.shipmentLine.ItemDetails;
						popInput.shipmentLine.OrderLine.variation = popInput.shipmentLine.variation;
						popInput.shipmentLine.DisplayQty = batchLine.BackroomPickedQuantity;
						popInput.shipmentLine.DisplayTotalQty = batchLine.OriginalQuantity;
						popInput.shipmentLine.DisplayShortQty = Number(batchLine.OriginalQuantity)	- Number(batchLine.BackroomPickedQuantity);
		    			var recordShortagePopupInput = {
		    					 modalInput: function(){
		    		      			return popInput;
		    		      		}   
		    				   
		    				};
		    			
		    			iscModal.openModal('store.views.shipment.common.record-shortage.record-shortage',recordShortagePopupInput,{}).then(function(callBackData){
		    				if(callBackData.data !== null && callBackData.data !== undefined){
		    					that.stampRecordShortage.call(that,callBackData.data,batchLine);
		    				}
		    			},
		    				angular.noop);
					},
					
					stampRecordShortage:function(data,batchLine){
						var itemID = batchLine.ItemDetails.ItemID;
						var uom = batchLine.ItemDetails.UnitOfMeasure;
						var input = {StoreBatch:{StoreBatchKey:this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey,
							Item:{ItemID:itemID, UnitOfMeasure:uom,ShortageReason:data.RecordShortage.ShortageReasonCode}}};
						
						iscMashup.callMashup(this,"recordShortageForBatchPick",input,{}).then(function(data){
							this.handleRecordShortage(data);
						}.bind(this),angular.noop);
					},
					
					 uiCancel : function(){
			            	/*iscModal.showConfirmationMessage(iscI18n.translate('batchpick.WarningMessage_Cancel')).then(
								function(callBackAction){
									if(callBackAction === 'YES'){
										//iscWizard.closeWizard();
										iscWizard.gotoCustomPage('batchList',{},{});;
									}
			       				},
			  					function(callBackAction){
			       				});*/
						 
						 iscModal.showConfirmationMessage(iscI18n.translate('batchpick.WarningMessage_Cancel')).then(
									function(callBackAction){
										if(callBackAction === 'YES'){
											if(iscStateParams.params.action==="batchList"){
												iscWizard.gotoCustomPage('batchList',{},{});;	
											}else if(iscStateParams.params.action==="skipbatchList"){
												
												iscWizard.closeWizard();	
											}
											
										}
				       				},
				  					function(callBackAction){
				       				});
			              },
					
			         	 /*@description This method is used to open product details modal
				 		 *
				 		 *@param {Object} shipmentLine - shipment line model.
				 		 */
				  		uiOpenItemDetails:function(batchLine) {
				  			iscShipment.openProductDetail(batchLine);
				  		},
			              
			        uiIsBackroomPickComplete : function(batchLine) {
			        	return (batchLine.BackroomPickComplete == 'Y'?true:false);  
			              },
			              
					handleRecordShortage:function(data){
						var apiOutput = iscMashup.getMashupOutput(data,"recordShortageForBatchPick");
						console.log(apiOutput);
						if(apiOutput.StoreBatch.ItemRemovedFromBatch == 'Y'){
							
						}
						var apiOutputCopy = angular.copy(apiOutput);
						apiOutputCopy.StoreBatch.StoreBatchLine = apiOutput.StoreBatch.StoreBatchLines.StoreBatchLine[0];
						delete apiOutputCopy.StoreBatch.StoreBatchLines;
						this.updateBatchLine(apiOutputCopy);
					}
				});
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 * @iscdoc viewinfo
 * @viewname store.views.shipment.batchpick.sap-staging.sap-staging
 * @package store.views.shipment.batchpick.sap-staging
 * @class sap-staging
 * @description Scan screen for batch lines for sort while pick batches
 * 
 */

angular
		.module('store')
		.controller(
				'store.views.shipment.batchpick.sap-staging.sap-staging',
				[
						'$scope',
						'$rootScope',
						'iscScreen',
						'iscWizard',
						'$timeout',
						'$filter',
						'$locale',
						'iscMashup',
						'iscResourcePermission',
						'iscDomUtility',
						'iscModal',
						'iscI18n',
						'iscScrollUtility',
						'iscAppContext',
						'iscStateParams',
						'iscShipment',
						function($scope, $rootScope, iscScreen, iscWizard,
								$timeout, $filter, $locale, iscMashup,
								iscResourcePermission, iscDomUtility, iscModal,
								iscI18n, iscScrollUtility, iscAppContext,
								iscStateParams, iscShipment) {
							iscWizard
									.initializeWizardPage(
											$scope,
											{
												model : {
													"getStoreBatchDetails" : {},
													"currentBatchLine" : {},
													"stgLocScanRule" : {},
													"filtermodel" : {}
												},

												mashupRefs : [
														{
															mashupRefId : 'getStoreBatchDetails',
															mashupId : 'store.views.shipment.batchpick.getStoreBatchDetails'
														},
														{
															mashupRefId : 'getStagingLocForBatchLine',
															mashupId : 'store.views.shipment.batchpick.sap-picking.getStagingLocForBatchLine'
														},
														{
															mashupRefId : 'updateHoldLocation',
															mashupId : 'store.views.shipment.batchpick.sap-picking.updateHoldLocation'
														},
														{

															mashupRefId : 'translateBarCodeForItem',
															mashupId : 'store.views.shipment.batchpick.sap-picking.translateBarCodeForItem'
														},
														{

															mashupRefId : 'finishBatch',
															mashupId : 'store.views.shipment.batchpick.sap-picking.finishBatch'
														},
														{
															mashupRefId : 'getRuleDetailsForStgLocScan',
															mashupId : 'store.views.shipment.batchpick.sap-picking.getRuleDetailsForStgLocScan',
															modelName : 'stgLocScanRule'
														},
														{
															mashupRefId : 'translateBarCodeForStagingLocation',
															mashupId : 'store.views.shipment.batchpick.sap-picking.translateBarCodeForStagingLocation'
														} ],

												ui : {
													recordShownCount : 5,
													selectedBatchLine : {},
													batchLineFilter : 'N',
													focusOnFirstLine : true,
													showSelectedItem : false,
													showStagingLocScanButton : false,
													filteredItems : [],
													filteredItemsLength : 0,
													focusOnScanField :true	
													
												},

												initialize : function() {
													var pageInput = iscWizard
															.getWizardPageInput();
													/*
													 * if(pageInput.callBatchListApi
													 * === 'N'){
													 * this.model.getStoreBatchDetails =
													 * pageInput; }else {
													 */

													var getStoreBatchApiInputElem = {
														'StoreBatch' : {
															'StoreBatchKey' : pageInput.StoreBatch.StoreBatchKey
														}
													};

													var mashupArray = [];
													mashupArray
															.push(iscMashup
																	.getMashupRefObj(
																			this,
																			'getStoreBatchDetails',
																			getStoreBatchApiInputElem));
													mashupArray
															.push(iscMashup
																	.getMashupRefObj(
																			this,
																			'getRuleDetailsForStgLocScan',
																			{}));

													iscMashup
															.callMashups(
																	this,
																	mashupArray,
																	{})
															.then(
																	this.handleInitApiCalls
																			.bind(this),
																	angular.noop);
													/* } */
													// TODO:highlight first
													// line, set focus on scan
													this
															.initializefilterModel();
												},

												handleInitApiCalls : function(
														data) {
													var apiOutput = iscMashup
															.getMashupOutput(
																	data,
																	"getStoreBatchDetails");
													this.model.getStoreBatchDetails = apiOutput;
													this
															.getBatchLineSizeAfterFilterApply();
													if (this.model.stgLocScanRule.Rules.RuleSetValue == 'Y') {
														this.ui.showStagingLocScanButton = true;
													}

													this
															.checkIfStagingComplete();
													$timeout(
															function() {
																iscDomUtility
																		.setFocus(document
																				.getElementById('productScanInput'));
															}, 0);

												},

												getBatchLineSizeAfterFilterApply : function() {

													if (this.ui.batchLineFilter == 'N') {
														var batchLines = this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine;
														var i = 0;
														for (var j = 0; j < batchLines.length; j++) {
															if (batchLines[j].StagingComplete == 'N') {
																i++;
															}
														}
														this.ui.filteredItemsLength = i;
													} else {
														this.ui.filteredItemsLength = this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.TotalNumberOfRecords;
													}

												},

												uiGetNextRecords : function() {

													if (this.ui.recordShownCount <= this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine.length) {
														this.ui.recordShownCount += 5;
													}

												},

												initializefilterModel : function() {

													if (this.ui.batchLineFilter == 'N') {
														this.model.filtermodel.filter = 'IN_PROGRESS';
													} else {
														this.model.filtermodel.filter = 'ALL';
													}

												},

												uiGotoAssignStaging : function() {
													var pageInput = {};
													iscWizard.gotoCustomPage(
															'sapStaging',
															pageInput, {});
												},
												uiFinishBatch : function() {

													var batchStagingProcessComplete = this.model.getStoreBatchDetails.StoreBatch.BatchStagingProcessComplete;
													var that = this;
													if ((!iscCore
															.isVoid(batchStagingProcessComplete))
															&& batchStagingProcessComplete != 'Y') {

														iscModal
																.showConfirmationMessage(
																		iscI18n
																				.translate('batchpick.Warning_stg_assign_not_finished'))
																.then(
																		function(
																				callBackAction) {
																			if (callBackAction === 'YES') {
																				var input = {
																					StoreBatch : {
																						StoreBatchKey : that.model.getStoreBatchDetails.StoreBatch.StoreBatchKey
																					}
																				};
																				iscMashup
																						.callMashup(
																								that,
																								"finishBatch",
																								input,
																								{})
																						.then(
																								function(
																										data) {
																									that
																											.gotoBatchList();
																								}
																										.bind(this),
																								angular.noop);
																			}
																		},
																		function(
																				callBackAction) {
																		});

													} else {
														var input = {
															StoreBatch : {
																StoreBatchKey : this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey
															}
														};
														iscMashup
																.callMashup(
																		this,
																		"finishBatch",
																		input,
																		{})
																.then(
																		function(
																				data) {
																			this
																					.gotoBatchList();
																		}
																				.bind(this),
																		angular.noop);
													}
												},

												gotoBatchList : function() {
													// iscWizard.gotoCustomPage('batchList',{},{});

													if (iscStateParams.params.action === "batchList") {
														iscWizard
																.gotoCustomPage(
																		'batchList',
																		{}, {});
														;
													} else if (iscStateParams.params.action === "skipbatchList") {
														iscWizard.closeWizard();
													}

												},
												uiGetBatchLineTrackBy : function(
														batchLine) {
													return batchLine.ItemDetails.ItemID
															+ batchLine.ItemDetails.UnitOfMeasure;
												},
												uiSelectBatchLine : function(
														batchLine) {
													this.ui.selectedBatchLine = this
															.uiGetBatchLineTrackBy(batchLine);
													this.ui.focusOnFirstLine = false;
												},
												uiScanItem : function(
														barcodeData) {
													if (iscCore
															.isVoid(barcodeData)) {
														iscModal
																.showErrorMessage(iscI18n
																		.translate('batchpick.MSG_NoProductScanned'));
													} else {
														var input = {
															BarCode : {
																BarCodeData : barcodeData,
																StoreBatchContextualInfo : {
																	StoreBatchKey : this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey
																}
															}
														}
														iscMashup
																.callMashup(
																		this,
																		"translateBarCodeForItem",
																		input,
																		{})
																.then(
																		function(
																				data) {
																			this
																					.handleTranslateBarCodeForItemOutput(data);
																		}
																				.bind(this),
																		this.handleTranslateBarCodeErrors
																				.bind(this));
													}
													this.ui.focusOnScanField=true;
												},
												handleTranslateBarCodeForItemOutput : function(
														data) {
													this.ui.barcodeData = '';
													var apiOutput = iscMashup
															.getMashupOutput(
																	data,
																	"translateBarCodeForItem");
													console.log(apiOutput);
													this
															.setCurrentBatchLine(apiOutput.BarCode.StoreBatch.StoreBatchLines.StoreBatchLine);
												},

												handleWizardBack : function() {

													var isFirstPage = iscWizard
															.isFirstPage();
													if (isFirstPage) {
														confirmationMsg = iscI18n
																.translate('batchpick.WarningMessage_Cancel');
														iscModal
																.showConfirmationMessage(
																		confirmationMsg)
																.then(
																		function(
																				callBackAction) {
																			if (callBackAction === 'YES') {
																				iscWizard
																						.closeWizard();
																			}
																		});
														return true;
													} else if (!isFirstPage) {
														confirmationMsg = iscI18n
																.translate('batchpick.WarningMessage_Cancel');
														iscModal
																.showConfirmationMessage(
																		confirmationMsg)
																.then(
																		function(
																				callBackAction) {
																			if (callBackAction === 'YES') {
																				iscWizard
																						.gotoPreviousPage(true);
																			}
																		});
														return true;
													}

													else {

														return false;
													}

												},

												handleTranslateBarCodeErrors : function(
														response) {

													if (response.Errors) {
														var errorMsg = response.Errors.Error[0].ErrorDescription;
														var errorCode = response.Errors.Error[0].ErrorCode;
														if (errorCode == 'YCD00093') {
															errorMsg = iscI18n
																	.translate("apierror."
																			+ 'YCD00093');
															iscModal
																	.showErrorMessage(
																			errorMsg,
																			null,
																			null);
														}

														else {
															if (iscI18n
																	.hasKey("apierror."
																			+ errorCode)) {
																errorMsg = iscI18n
																		.translate("apierror."
																				+ errorCode);
																iscModal
																		.showErrorMessage(
																				errorMsg,
																				null,
																				null);
															} else {
																iscModal
																		.showErrorMessage(
																				errorMsg,
																				null,
																				null);
															}

														}
													}

												},

												/*
												 * @description This method is
												 * used to open product details
												 * modal
												 * 
												 * @param {Object} shipmentLine -
												 * shipment line model.
												 */
												uiOpenItemDetails : function(
														batchLine) {
													iscShipment
															.openProductDetail(batchLine);
												},

												/*
												 * updateBatchLine:function(apiOutput){
												 * this.model.getStoreBatchDetails.StoreBatch.Status =
												 * apiOutput.StoreBatch.Status;
												 * var itemID =
												 * apiOutput.StoreBatch.StoreBatchLine.ItemID;
												 * var uom =
												 * apiOutput.StoreBatch.StoreBatchLine.UnitOfMeasure;
												 * var sblineArray =
												 * this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine;
												 * for(var i = 0;i <
												 * sblineArray.length; i++){
												 * if(sblineArray[i].ItemID ==
												 * itemID &&
												 * sblineArray[i].UnitOfMeasure ==
												 * uom){ sblineArray[i] =
												 * apiOutput.StoreBatch.StoreBatchLine;
												 * this.ui.focusOnFirstLine =
												 * false;
												 * this.ui.selectedBatchLine =
												 * this.uiGetBatchLineTrackBy(sblineArray[i]);
												 * break; } }
												 * this.checkBatchStatus(); TODO
												 * check if the status has
												 * changed 2000 or 9000
												 * highlight that particular
												 * storebatchline paint the
												 * whole panel again set focus
												 * based on mode (scan or
												 * update)
												 * 
												 *  },
												 */
												/*
												 * uiOpenFilterPopup:
												 * function(){ var that=this;
												 * var popInput = {}
												 * if(this.ui.batchLineFilter ==
												 * 'N'){ popInput.filter =
												 * 'IN_PROGRESS'; }else{
												 * popInput.filter = 'ALL'; }
												 * popInput.inProgressLabelBundleKey =
												 * 'batchpick.LABEL_ToBeStaged';
												 * 
												 * var filerBatchLinesPopupInput = {
												 * modalInput: function(){
												 * return popInput; }
												 *  };
												 * 
												 * iscModal.openModal('store.views.shipment.batchpick.common.filter.batch-line-filter',filerBatchLinesPopupInput,{}).then(function(callBackData){
												 * if(callBackData.data !== null &&
												 * callBackData.data !==
												 * undefined){
												 * that.applyBatchListFilter.call(that,callBackData.data); } },
												 * angular.noop); },
												 */
												/*
												 * applyBatchListFilter:
												 * function(data){
												 * if(data.filter ==
												 * 'IN_PROGRESS'){
												 * this.ui.batchLineFilter =
												 * 'N'; }else{
												 * this.ui.batchLineFilter = ''; }
												 * this.ui.focusOnFirstLine =
												 * true;
												 * this.ui.selectedBatchLine =
												 * {}; },
												 */

												uiApplyBatchListFilter : function(
														data) {
													if (data.filter == 'IN_PROGRESS') {
														this.ui.batchLineFilter = 'N';
													} else {
														this.ui.batchLineFilter = '';
													}
													this
															.getBatchLineSizeAfterFilterApply();
													this.ui.focusOnFirstLine = true;
													this.ui.selectedBatchLine = {};
												},

												uiShowSelectedItem : function(
														batchLine) {
													var itemID = batchLine.ItemID;
													var uom = batchLine.UnitOfMeasure;
													var input = {
														StoreBatch : {
															StoreBatchKey : this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey,
															StoreBatchLine : {
																ItemID : itemID,
																UnitOfMeasure : uom
															}
														}
													};
													iscMashup
															.callMashup(
																	this,
																	"getStagingLocForBatchLine",
																	input, {})
															.then(
																	function(
																			data) {
																		this
																				.handleGetStagingLocForBatchLine(data);
																	}
																			.bind(this),
																	angular.noop);
													this.ui.focusOnScanField=false;

												},
												handleGetStagingLocForBatchLine : function(
														data) {
													var apiOutput = iscMashup
															.getMashupOutput(
																	data,
																	"getStagingLocForBatchLine");
													this
															.setCurrentBatchLine(apiOutput.StoreBatch.StoreBatchLines.StoreBatchLine[0]);

												},
												setCurrentBatchLine : function(
														batchLine) {
													this.model.currentBatchLine.StoreBatchLine = batchLine;
													console
															.log(this.model.currentBatchLine.StoreBatchLine);
													this.ui.showSelectedItem = true;
													if (!iscCore
															.isVoid(this.model.currentBatchLine.StoreBatchLine.HoldLocation)) {
														/*
														 * this.ui.stagingLocationList =
														 * this.model.currentBatchLine.StoreBatchLine.HoldLocation.replace(/,
														 * /g, "<br/>");
														 */
														this.ui.stagingLocationList = {};
														this.ui.stagingLocationList.stagingLocation = [];
														var holdLocArray = this.model.currentBatchLine.StoreBatchLine.HoldLocation
																.split(',');
														for (var j = 0; j < holdLocArray.length; j++) {
															this.ui.stagingLocationList.stagingLocation[j] = {};
															this.ui.stagingLocationList.stagingLocation[j].holdLocation = holdLocArray[j];
														}

													}
													this.ui.stagingloc = this.model.currentBatchLine.StoreBatchLine.ShipmentLine.Shipment.SuggestedHoldLocation;

													$timeout(
															function() {
																iscDomUtility
																		.setFocus(
																				document
																						.getElementById('stgLocScanInput'),
																				100);
															}, 510);

												},
												uiCancel : function() {
													this.ui.showSelectedItem = false;
													
													var focusFieldId = null;
													if(this.ui.focusOnScanField){
														focusFieldId = 'productScanInput';
													}else{
														focusFieldId = 'assign'+this.model.currentBatchLine.StoreBatchLine.ItemDetails.ItemID+this.model.currentBatchLine.StoreBatchLine.ItemDetails.UnitOfMeasure;
													}
													$timeout(function(){
														iscDomUtility.setFocus(document.getElementById(focusFieldId));
								 		            }, 0);
													
													
												},

												uiScanOrSaveStagingLoc : function(
														barcodeData) {
													if (this.ui.showStagingLocScanButton
															&& barcodeData != this.model.currentBatchLine.StoreBatchLine.ShipmentLine.Shipment.SuggestedHoldLocation) {
														this
																.uiScanStagingLoc(barcodeData);
													} else {
														this
																.saveStgLoc(barcodeData);
													}

												},
												saveStgLoc : function(
														barcodeData) {

													if (!iscCore
															.isVoid(barcodeData)) {
														var stagingLocMaxLenError = false;
														var batchLine = this.model.currentBatchLine.StoreBatchLine;
														var changeShipmentInput = {
															Shipment : {
																ShipmentKey : batchLine.ShipmentLine.ShipmentKey,
																StoreBatchKey : this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey,
																ShipmentLines : {
																	ShipmentLine : [ {
																		ShipmentLineKey : batchLine.ShipmentLine.ShipmentLineKey,
																		StagedQuantity : batchLine.ShipmentLine.QuantityToBeStaged,
																		ItemID : batchLine.ItemID,
																		UnitOfMeasure : batchLine.UnitOfMeasure
																	} ]
																}
															}
														};
														var existingHoldLocationArr = iscShipment
																.getHoldLocationArr(this.model.currentBatchLine.StoreBatchLine.ShipmentLine.Shipment.HoldLocation);
														if (iscShipment
																.isHoldLocationDuplicate(
																		barcodeData,
																		existingHoldLocationArr)) {
															// NOCHANGE REQUIRED
														} else {
															var newHoldLocArr = iscShipment
																	.appendHoldLocation(
																			this.ui.stagingloc,
																			existingHoldLocationArr);
															var newHoldLocString = iscShipment
																	.getHoldLocationString(newHoldLocArr);
															if (newHoldLocString.length > 40) {
																iscModal
																		.showErrorMessage(iscI18n
																				.translate('batchpick.MSG_InvalidHoldLocationLength'));
																stagingLocMaxLenError = true;
															}

															changeShipmentInput.Shipment.HoldLocation = newHoldLocString;
														}

														if (!stagingLocMaxLenError) {
															iscMashup
																	.callMashup(
																			this,
																			"updateHoldLocation",
																			changeShipmentInput,
																			{})
																	.then(
																			function(
																					data) {
																				this
																						.handleStagingLocationUpdate(data);
																			}
																					.bind(this),
																			angular.noop);
														}

													} else {
														this.ui.showStagingLocMandatoryError = true;
													}
												},
												handleStagingLocationUpdate : function(
														data) {
													var apiOutput = iscMashup
															.getMashupOutput(
																	data,
																	"updateHoldLocation");
													var batchLine = apiOutput.Shipment.StoreBatch.StoreBatchLines.StoreBatchLine;

													this.model.getStoreBatchDetails.StoreBatch.Status = apiOutput.Shipment.StoreBatch.Status;
													this.model.getStoreBatchDetails.StoreBatch.BatchStagingProcessComplete = apiOutput.Shipment.StoreBatch.BatchStagingProcessComplete;
													var itemID = batchLine.ItemID;
													var uom = batchLine.UnitOfMeasure;
													var sblineArray = this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine;
													for (var i = 0; i < sblineArray.length; i++) {
														if (sblineArray[i].ItemID == itemID
																&& sblineArray[i].UnitOfMeasure == uom) {
															sblineArray[i] = batchLine;
															this.ui.focusOnFirstLine = false;
															this.ui.selectedBatchLine = this
																	.uiGetBatchLineTrackBy(sblineArray[i]);
															if (sblineArray[i].StagingComplete == 'Y'
																	&& this.ui.batchLineFilter == 'N') {
																this.ui.filteredItemsLength -= 1;
															}
															break;
														}
													}

													this.ui.stagingloc = '';
													this.ui.showSelectedItem = false;
													iscScrollUtility
															.scrollToElementWIthOffsetAndFixedHeader(
																	document
																			.getElementById('staging-line-list'),
																	document
																			.getElementById(this.ui.selectedBatchLine),
																	0, 10, 40);
													
													
													
													var focusFieldId = null;
													if(this.ui.focusOnScanField){
														focusFieldId = 'productScanInput';
													}else{
														focusFieldId = 'assign'+itemID+uom;
													}
													$timeout(function(){
														iscDomUtility.setFocus(document.getElementById(focusFieldId));
								 		            }, 0);
													this.checkIfStagingComplete();
												},

												uiScanStagingLoc : function(
														barcodeData) {
													if (barcodeData != this.model.currentBatchLine.StoreBatchLine.ShipmentLine.Shipment.SuggestedHoldLocation) {
														if (iscCore
																.isVoid(barcodeData)) {
															iscModal
																	.showErrorMessage(iscI18n
																			.translate('batchpick.MSG_NoStaginLocationScanned'));
														} else {
															var input = {
																BarCode : {
																	BarCodeData : barcodeData
																}
															};
															iscMashup
																	.callMashup(
																			this,
																			"translateBarCodeForStagingLocation",
																			input,
																			{})
																	.then(
																			function(
																					data) {
																				this
																						.handleStagingLocationBarcodeTranslation(data);
																			}
																					.bind(this),
																			angular.noop);
														}
													} else {
														this
																.saveStgLoc(barcodeData);
													}
												},
												handleStagingLocationBarcodeTranslation : function(
														data) {
													var apiOutput = iscMashup
															.getMashupOutput(
																	data,
																	"translateBarCodeForStagingLocation");
													if (apiOutput.BarCode.Translations.Translation) {
														if (apiOutput.BarCode.Translations.Translation.length > 1) {
															iscModal
																	.showErrorMessage(iscI18n
																			.translate('batchpick.MSG_MultipleHoldLocationsFound'));
														} else {
															// this.ui.stagingloc
															// =
															// apiOutput.BarCode.Translations.Translation.LocationContextualInfo.HoldLocationId;
															this
																	.saveStgLoc(apiOutput.BarCode.Translations.Translation[0].LocationContextualInfo.HoldLocationId);
														}

													} else {
														iscModal
																.showErrorMessage(iscI18n
																		.translate('batchpick.MSG_StagingTranslationNotFound'));
													}
												},
												uiClose : function() {
													iscModal
															.showConfirmationMessage(
																	iscI18n
																			.translate('batchpick.WarningMessage_Cancel'))
															.then(
																	function(
																			callBackAction) {
																		if (callBackAction === 'YES') {
																			if (iscStateParams.params.action === "batchList") {
																				iscWizard
																						.gotoCustomPage(
																								'batchList',
																								{},
																								{});
																				;
																			} else if (iscStateParams.params.action === "skipbatchList") {

																				iscWizard
																						.closeWizard();
																			}

																		}
																	},
																	function(
																			callBackAction) {
																	});
												},

												checkIfStagingComplete : function() {
													var that = this;

													/* show success message */
													var successMsgKey = "";
													if (iscStateParams.params.action === "batchList") {
														successMsgKey = 'batchpick.MSG_stg_loc_finished';
													} else if (iscStateParams.params.action === "skipbatchList") {
														successMsgKey = 'batchpick.MSG_stg_location_finished';
													}

													var batchNo = this.model.getStoreBatchDetails.StoreBatch.BatchNo;
													if (this.model.getStoreBatchDetails.StoreBatch.BatchStagingProcessComplete == 'Y') {
														iscModal
																.showConfirmationMessage(
																		iscI18n
																				.translate(
																						successMsgKey,
																						{
																							batchNo : batchNo
																						}))
																.then(
																		function(
																				callBackAction) {
																			if (callBackAction === 'YES') {
																				that
																						.uiFinishBatch();
																			} else if (callBackAction === 'NO') {
																				// do
																				// nothing
																			}
																		},
																		function(
																				callBackAction) {
																			// Do
																			// Nothing

																		});
													}
												}

											});
						} ]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.batchpick.swp-picking.swp-picking
 *@package store.views.shipment.batchpick.swp-picking
 *@class swp-picking
 *@description Scan screen for batch lines for sort while pick batches
 *
 */

   angular.module('store').controller('store.views.shipment.batchpick.swp-picking.swp-picking',
		  ['$scope','$rootScope','iscScreen','iscWizard','$timeout','$filter','$locale','iscMashup','iscResourcePermission','iscRule','iscDomUtility','iscModal','iscI18n','iscScrollUtility','iscShipment','iscStateParams','iscAppContext',
			function($scope,$rootScope,iscScreen,iscWizard,$timeout,$filter,$locale,iscMashup,iscResourcePermission,iscRule,iscDomUtility,iscModal,iscI18n,iscScrollUtility,iscShipment,iscStateParams,iscAppContext) {				
				iscWizard.initializeWizardPage($scope,{
					model:{
						
					/**
					 *@description Holds the Output of getStoreBatchDetails API.
					 */	
					  "getStoreBatchDetails" : {},
					  
					  /**
						 *@description Holds the Scanned Product bar code data.
						 */	
					  "scanItemInput":{
		    			  "barcodeData":""
		    		  },
		    		  
		    		  /**
						 *@description Holds the Output of getRuleDetailsForToteScan mashup.
						 */	
		    		  "getRuleDetailsForToteScan":{},
		    		  
		    		  /**
						 *@description Holds the Tote information.
						 */	
		    		  "toteDataModel":{
		    			  "toteId":""
		    		  },
		    		  "filtermodel":{},
		    		  
		    		    /**
						 *@description Holds the batch Line details of the currently scanned or picked product.
						 */	
		    		  "batchLineForCurrentItem":{}
		    		  
					},
					
					mashupRefs:[{
						   /**
	                        *@description Gets the StoreBatch details .
	                        */
		                        mashupRefId: 'getStoreBatchDetails',
		                        mashupId: 'store.views.shipment.batchpick.getStoreBatchDetails',
		                        modelName:'getStoreBatchDetails'
					},
					{
						   /**
		                    *@description Calls registerBatchPick api in SCAN mode.
		                    */
		                        mashupRefId: 'registerBatchPickInScanMode',
		                        mashupId: 'store.views.shipment.batchpick.registerBatchPickinScanMode',
		                        modelName:'registerBatchPickOutput' 	
						
					},
					{
					   /**
	                    *@description Calls getRuleDetails api for YCD_TOTE_TRANSLATION_NEEDED rule.
	                    */
						mashupRefId: 'getRuleDetailsForToteScan',
                        mashupId: 'store.views.shipment.batchpick.getRuleDetailsForToteScan',
                        modelName:'getRuleDetailsForToteScan' 	
					},
					
					{  
						/**
		                 *@description Calls translateBarcode api for translating the tote scanned.
		                 */
						mashupRefId: 'translateBarcodeForTote',
                        mashupId: 'store.views.shipment.batchpick.translateBarcodeForTote'
                       
					},
					{   
						/**
		                 *@description Calls registerBatchPick api in UPDATE mode.
		                 */
						mashupRefId: 'registerBatchPickUpdateMode',
                        mashupId: 'store.views.shipment.batchpick.registerBatchPickUpdateMode'
						
					}, 
					{
						/**
		                 *@description Calls registerBatchPick api in MANUALPICK mode.
		                 */
						mashupRefId: 'registerBatchPickInManualMode',
                        mashupId: 'store.views.shipment.batchpick.registerBatchPickInManualMode',
                        modelName:'registerBatchPickOutput'
                        	
						
					},
					{
					       /**
		                    *@description records shortage of a batch line .
		                    */
		                     mashupRefId: 'recordShortageForBatchPick',
		                     mashupId: 'store.views.shipment.batchpick.sap-picking.recordShortageForBatchPick'
					},
					{
						   /**
		                    *@description Changes the batch status to completed.
		                    */
		            	 mashupRefId: 'finishBatchPick',
	                     mashupId: 'store.views.shipment.batchpick.finishBatchPick'
		            	 
		             },
		             {     /**
		                    *@description gets the batchLocation details of the batch line with  getStoreBatchDetails api call.
		                    */
		            	 mashupRefId: 'getStoreBatchLineLocationDetailsByItemId',
	                     mashupId: 'store.views.shipment.batchpick.getStoreBatchLineLocationDetailsByItemId'
	                    	 
		            	 
		             }
						
					
					],
					
					ui:{
						
						/**
		    			 *@property {Boolean} showCurrentItem - Flag to show Current item screen.
		    			 */
						showCurrentItem : false,
						
						/**
		    			 *@property {String} currentItemMode - The context in which the current item screen is opened.
		    			 */
						currentItemMode : 'scan',
						
						/**
		    			 *@property {Number} bLineShownCount - pageSize of the batch line list for continuous scrolling.
		    			 */
						bLineShownCount: 5,
						
						/**
		    			 *@property {Object} selectedBatchLine - The batch line details that is currently selected in the product list.
		    			 */
						selectedBatchLine:{},
						
						/**
		    			 *@property {String} batchLineFilter - The Value of the filter applied in the batch line filter popup.
		    			 */
						batchLineFilter:'N',
						
						/**
		      			*@property {Boolean} focusOnFirstLine - True if first shipment line is selected, false otherwise
		      			 */
						focusOnFirstLine : true,
						
						filteredItems:[],
						
						/**
		      			 *@property {Object} orderedToteList - Array Of Totes ordered based on SLA
		      			 */
						orderedToteList:[],
						
						orderedESDToteList:[],
						deltaToteQty :0,
						showToteRearrangePopup:false,
						filteredItemsLength:0,
						/**
		      			 *@property {Boolean} focusOnScanField - Flag to set focus on scan field
		      			 */
                        focusOnScanField :true						
					},
					
					/**
					 *@description Initializes the Picking screen by calling getStoreBatchDetails api
					 */
					initialize : function(){
						var pageInput = iscWizard.getWizardPageInput();
						if(pageInput.callBatchListApi === 'N'){
							this.model.getStoreBatchDetails = pageInput;
							/*call getRuleDetailsForToteScan*/
							iscMashup.callMashup(this,"getRuleDetailsForToteScan",{},{});
							this.massageGetStoreBatchDetailsOutput(this.model.getStoreBatchDetails);
							
						}else {
							var getStoreBatchApiInputElem = {'StoreBatch':{'StoreBatchKey': pageInput.StoreBatchKey}};
		                	var mashupArray = [];
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'getStoreBatchDetails',getStoreBatchApiInputElem));
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'getRuleDetailsForToteScan', {}));
				        	iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				        	
						}
		            	
					},
					
					
					/**
					 *@description callback handler for init api calls.
					 *@param {Object} data - Controller data of init api calls.
					 */	
			  		  handleInitApiCalls : function (data){
			  			var apiOutput = iscMashup.getMashupOutput(data,"getStoreBatchDetails");
			  			this.massageGetStoreBatchDetailsOutput(apiOutput);
			  		  },
			  		  
		  		    /**
					 *@description massages getStoreBatchDetails api Output and sets the focus on scan field. 
					 */
			  		massageGetStoreBatchDetailsOutput : function (apiOutput){
			  			
			  			var batchLines = [];
			  			batchLines = apiOutput.StoreBatch.StoreBatchLines.StoreBatchLine;
						
		     		    for(var j=0; j<batchLines.length; j++){
		     		    	batchLines[j].uiBackroomPickComplete = batchLines[j].BackroomPickComplete;
		     		    }
		     		    
		     		   $timeout(function(){
							iscDomUtility.setFocus(document.getElementById('productScanInput'));
	 		            }, 0);	
			  			
		     		   this.getBatchLineSizeAfterFilterApply();
			  		},
			  		
			  		 /**
					 *@description Determines whether Batch line is eligible for editing. 
					 */
			  		uiIsBatchLineEditable : function(batchLine){
			  			return ((batchLine.BackroomPickedQuantity == '0' || batchLine.BackroomPickedQuantity == '0.00') ?true:false);  
			  		},
			  		
			  		 /**
					 *@description Saves the Tote against a Order. 
					 */
			  		
					uiHandleToteSave : function(){
						barCodeData = this.model.toteDataModel.toteId;
						var suggestedToteId = null
						if(!iscCore.isVoid(this.model.registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.StoreBatchLocation)){
							 suggestedToteId =  this.model.registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.StoreBatchLocation.ToteId;	
						}
						
						if(iscCore.isVoid(suggestedToteId)){
							if(iscCore.isVoid(barCodeData)){
								iscModal.showErrorMessage(iscI18n.translate('batchpick.MSG_NoToteScanned'));	
							}else{
								if(this.model.getRuleDetailsForToteScan.Rules.RuleSetValue === 'Y')
									this.scanToteId(barCodeData);
								else
									this.saveToteDetails(barCodeData);
							}
							
						}
			        	else 
			        		this.saveToteDetails(null);
			        	
					},
					
					
					saveToteDetails : function(toteId){
						
						var zero = 0;
						/*prepare input for registerBatchPick api for updating tote info*/
						
						var backroomPickedQty = Number(this.model.registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.BackroomPickedQty);
			        	var qtyTobePicked =  Number(this.model.registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.TranslatedQuantity);
			        	var pickedQty = (!isNaN(backroomPickedQty)?backroomPickedQty:zero) + (!isNaN(qtyTobePicked)?qtyTobePicked:zero);
			        	
						var registerBatchPickInputElem = {'StoreBatch' : {'StoreBatchKey':this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey,'Mode':'UPDATE'}};
						registerBatchPickInputElem.StoreBatch.ShipmentLines = {};
						registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine = [];
						registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0] = {};
						registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0].ShipmentLineKey = this.model.registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.ShipmentLineKey;
						registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0].BackroomPickedQty = pickedQty;
						if(!iscCore.isVoid(toteId)){
							registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0].StoreBatchLocation={};
							registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0].StoreBatchLocation.ToteId=toteId;
						}
						iscMashup.callMashup(this,"registerBatchPickUpdateMode",registerBatchPickInputElem,{}).then(this.handleRegisterBatchPickUpdate.bind(this,'registerBatchPickUpdateMode'),angular.noop);
					},
					
					
					scanToteId : function (barCodeData){
						if(!iscCore.isVoid(barCodeData)){
							
							var translateBarcodeInputElem = {'BarCode' : {'BarCodeData':barCodeData}};
							var zero = 0;
							/*prepare input for registerBatchPick api for updating tote info*/
							
							var backroomPickedQty = Number(this.model.registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.BackroomPickedQty);
				        	var qtyTobePicked =  Number(this.model.registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.TranslatedQuantity);
				        	var pickedQty = (!isNaN(backroomPickedQty)?backroomPickedQty:zero) + (!isNaN(qtyTobePicked)?qtyTobePicked:zero);
				        	
							var registerBatchPickInputElem = {'StoreBatch' : {'StoreBatchKey':this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey,'Mode':'UPDATE'}};
							registerBatchPickInputElem.StoreBatch.ShipmentLines = {};
							registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine = [];
							registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0] = {};
							registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0].ShipmentLineKey = this.model.registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.ShipmentLineKey;
							registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0].BackroomPickedQty = pickedQty;
							
							var translateBarcodeInputElem = {};
							translateBarcodeInputElem.BarCode = {}
							translateBarcodeInputElem.BarCode.BarCodeData = barCodeData;
							translateBarcodeInputElem.BarCode.registerBatchPickInputElem = registerBatchPickInputElem;
							iscMashup.callMashup(this,"translateBarcodeForTote",translateBarcodeInputElem,{}).then(this.handleRegisterBatchPickUpdate.bind(this,"translateBarcodeForTote"),angular.noop);
							
							
						}else{
							iscModal.showErrorMessage(iscI18n.translate('viewcartdetails.MSG_InvalidBarCodeData'));
						}
						
					},
					
					 /**
					 *@description Invoked when Product is scanned in the product list screen. 
					 */
					
					uiScanProduct : function(barcodedata){
						if(iscCore.isVoid(barcodedata)){
							iscModal.showErrorMessage(iscI18n.translate('batchpick.MSG_NoProductScanned'));
						}else{
						var registerBatchPickInputElem = {'StoreBatch' : {'StoreBatchKey':this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey}};
						registerBatchPickInputElem.StoreBatch.BarCode = {};
						registerBatchPickInputElem.StoreBatch.BarCode.BarCodeData = barcodedata;
						iscMashup.callMashup(this,"registerBatchPickInScanMode",registerBatchPickInputElem,{}).then(this.handleRegisterBatchPick.bind(this,'registerBatchPickInScanMode','MANUAL',null),this.handleRegisterBatchPickErrors.bind(this));
						this.model.scanItemInput.barcodeData = "";
						this.ui.focusOnScanField=true;
					}
					},
					
					 /**
					 *@description Handles Errors thrown by registerBatchPick api. 
					 */
					handleRegisterBatchPickErrors : function(response){
						
						if(response.Errors){
					  			var errorMsg = response.Errors.Error[0].ErrorDescription;
					  			var errorCode = response.Errors.Error[0].ErrorCode;
					  			if(errorCode == 'YCD00093'){
					  				errorMsg = iscI18n.translate("apierror."+'YCD00093_pick');
					  				iscModal.showErrorMessage(errorMsg,null,null);	
					  			}
					  			
					  			else{
					  			if(iscI18n.hasKey("apierror."+errorCode)){
					  				errorMsg = iscI18n.translate("apierror."+errorCode);
					  				iscModal.showErrorMessage(errorMsg,null,null);				
					  			}
					  			else{
					  				iscModal.showErrorMessage(errorMsg,null,null);
					  			}
					  			
						      }
					   }
						
					},
					
					 /**
					 *@description call back handler for registerBatchPick api. 
					 */
					
					handleRegisterBatchPick : function(mashupRefId,mode,batchLine,data){
						var apiOutput = iscMashup.getMashupOutput(data,mashupRefId);
						this.ui.showCurrentItem = true;
						
						if(iscCore.isVoid(batchLine)){
							var batchLine  = null;
							var batchLines = [];
							batchLines = this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine;
							for(var i = 0; i<batchLines.length;i++){
							  if((apiOutput.StoreBatch.ShipmentLines.ShipmentLine.ItemID == batchLines[i].ItemDetails.ItemID) && (apiOutput.StoreBatch.ShipmentLines.ShipmentLine.UnitOfMeasure == batchLines[i].ItemDetails.UnitOfMeasure)){
								  batchLine = batchLines[i];
									 break;
							  }	
							}
						}
						
						this.model.batchLineForCurrentItem = batchLine;
						var pickableQty = Number(batchLine.BackroomPickedQuantity) + Number(apiOutput.StoreBatch.ShipmentLines.ShipmentLine.TranslatedQuantity);
						this.model.batchLineForCurrentItem.pickableQty = pickableQty;
						
						if(mode === 'MANUAL'){
							this.ui.currentItemMode = 'MANUAL';
						}else if(mode === 'EDIT'){
							this.ui.currentItemMode = 'EDIT';
							/*set the tote array*/
							this.initializeToteListArray(apiOutput);
						}
						this.cloneToteScanModel(apiOutput);
						$timeout(function(){
							iscDomUtility.setFocus(document.getElementById('toteScanInput'),100);
	 		            }, 510);
					},
					
					 /**
					 *@description Cancels Tote assignment for a particular product. 
					 */
					uiCancelToteAssignment:function(){
					    
						var focusFieldId = null;
						if(this.ui.focusOnScanField){
							focusFieldId = 'productScanInput';
						}else{
							focusFieldId = 'pick'+this.model.batchLineForCurrentItem.ItemDetails.ItemID+this.model.batchLineForCurrentItem.ItemDetails.UnitOfMeasure;
						}
						$timeout(function(){
							iscDomUtility.setFocus(document.getElementById(focusFieldId));
	 		            }, 0);
						this.ui.showCurrentItem=false;
					},
					
					
					
                    initializeToteListArray:function(storeBatchModel) {
						this.ui.deltaToteQty =0;
						this.ui.showToteRearrangePopup = false;
						this.ui.orderedToteList=[];
						this.ui.orderedESDToteList=[];
						
			        		if (!iscCore.isVoid(storeBatchModel.StoreBatch.StoreBatchLocationList) && !iscCore.isVoid(storeBatchModel.StoreBatch.StoreBatchLocationList.StoreBatchLocation)
			    	 	   			&& !iscCore.isVoid(storeBatchModel.StoreBatch.StoreBatchLocationList.StoreBatchLocation.length)) {
			        			for(var i=0;i<storeBatchModel.StoreBatch.StoreBatchLocationList.StoreBatchLocation.length;i++) {
			    	       			var batchLocationModel = storeBatchModel.StoreBatch.StoreBatchLocationList.StoreBatchLocation[i];
			    	       			this.ui.orderedToteList.push(batchLocationModel.ToteId);
			            		}
			        			
			        		}
			        	
			        		
			        		if (!iscCore.isVoid(storeBatchModel.StoreBatch.StoreBatchLocationList) && !iscCore.isVoid(storeBatchModel.StoreBatch.StoreBatchLocationList.StoreBatchLocation)
			    	 	   			&& !iscCore.isVoid(storeBatchModel.StoreBatch.StoreBatchLocationList.StoreBatchLocation.length)) {
			        			
			        			//Convert Current Date to UTC/GMT			
								var currentDateUTCInMS = new Date().getTime() + new Date().getTimezoneOffset() * 60000;
								
			        			for(var i=0;i<storeBatchModel.StoreBatch.StoreBatchLocationList.StoreBatchLocation.length;i++) {
			    	       			var batchLocationModel = storeBatchModel.StoreBatch.StoreBatchLocationList.StoreBatchLocation[i];
			    	       			var expShipDate = new Date(batchLocationModel.Shipment.ExpectedShipmentDate);
			    					//Convert ExpectedShipmentDate to UTC/GMT
			    					var expShipDateUTCInMS = expShipDate.getTime() + expShipDate.getTimezoneOffset() * 60000;
			    					var diffInMS = expShipDateUTCInMS - currentDateUTCInMS;
			    	       			this.ui.orderedESDToteList.push(diffInMS);
			            		}
			        			
			        		}
			        	
					},
					
					 computeDeltaToteQtyBasedOnSLA:function(prevModifiedToteId,storeBatchModel){
				        	
				        	var priorityTote = "";
				        	if(this.ui.orderedToteList.indexOf(prevModifiedToteId) != -1 && this.ui.orderedToteList.indexOf(prevModifiedToteId) < this.ui.orderedToteList.length-1) {
				        		priorityTote = prevModifiedToteId;
				        		this.ui.deltaToteQty++;
				        	} 
				        	
				        	if(this.ui.deltaToteQty <= 2 && this.ui.orderedToteList.indexOf(priorityTote) != -1 && this.ui.orderedToteList.indexOf(priorityTote) < this.ui.orderedToteList.length-1) {
				 	       		this.ui.showToteRearrangePopup = true;
				 	       	} else if (this.ui.deltaToteQty > 2) {
				 	       		this.ui.showToteRearrangePopup = false;
				 	       	}
				        	/**
				        	 * Below logic checks if the ExpectedShipmentDate(ESD) is same for all the Totes
				        	 * If ESD is same, then we wont show Tote Rearrangment Popup.
				        	 */
				        	if(this.ui.showToteRearrangePopup) {
				        		var isESDSame = true;
				        		var index = this.ui.orderedToteList.indexOf(prevModifiedToteId);
					        		if(index > -1) {
					        			var currESD = this.ui.orderedESDToteList[index];
					        			for(var i = 0;i<this.ui.orderedESDToteList.length;i++) {
					        				if(currESD == this.ui.orderedESDToteList[i]) {
					        					continue;
					        				} else {
					        					isESDSame = false;
					        					break;
					        				}
					        			}
					        		}
				        		
				        		if(isESDSame)
				        			this.ui.showToteRearrangePopup = false;
				        	}
				        	
				        	
				        },
					
					cloneToteScanModel : function(registerBatchPickOutput){
						if(!iscCore.isVoid(registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.StoreBatchLocation)){
							this.model.toteDataModel.toteId = angular.copy(registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.StoreBatchLocation.ToteId); 
						}else{
							this.model.toteDataModel.toteId = "";
						}
					},
					
					
					 /**
					 *@description Call back handler for registerBatchPick api in UPDATE mode  
					 */
					handleRegisterBatchPickUpdate : function(mashupRefId,data){
						var apiOutput = iscMashup.getMashupOutput(data,mashupRefId);
						var apiOutputCopy = angular.copy(apiOutput);
						apiOutputCopy.StoreBatch.StoreBatchLine = apiOutput.StoreBatch.StoreBatchLines.StoreBatchLine[0];
						delete apiOutputCopy.StoreBatch.StoreBatchLines;
						this.updateBatchLine(apiOutputCopy);
						var focusFieldId = null;
						if(this.ui.focusOnScanField){
							focusFieldId = 'productScanInput';
						}else{
							focusFieldId = 'pick'+apiOutputCopy.StoreBatch.StoreBatchLine.ItemDetails.ItemID+apiOutputCopy.StoreBatch.StoreBatchLine.ItemDetails.UnitOfMeasure;
						}
						$timeout(function(){
							iscDomUtility.setFocus(document.getElementById(focusFieldId));
	 		            }, 0);
						
					},
					
					/**
					 *@description On click handler of Pick button in the products panel 
					 */
					
					uiHandleBatchLinePick : function (batchLine,mode){
						
						var isBatchLinePickComplete = batchLine.BackroomPickComplete;
						if(isBatchLinePickComplete == 'Y'){
                           /*call getStoreBatchDetails api*/
							
							var getStoreBatchDetailsInputElem = {'StoreBatch' : {'StoreBatchKey':this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey}};
							getStoreBatchDetailsInputElem.StoreBatch.StoreBatchLine = {};
							getStoreBatchDetailsInputElem.StoreBatch.StoreBatchLine.ItemID = batchLine.ItemID;
							getStoreBatchDetailsInputElem.StoreBatch.StoreBatchLine.UnitOfMeasure = batchLine.UnitOfMeasure;
							
							iscMashup.callMashup(this,"getStoreBatchLineLocationDetailsByItemId",getStoreBatchDetailsInputElem,{}).then(this.handleGetStoreBatchDetails.bind(this,batchLine),angular.noop);
							
						}else{
							
							var registerBatchPickInputElem = {'StoreBatch' : {'StoreBatchKey':this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey}};
							registerBatchPickInputElem.StoreBatch.Item = {};
							registerBatchPickInputElem.StoreBatch.Item.ItemID = batchLine.ItemID;
							registerBatchPickInputElem.StoreBatch.Item.UnitOfMeasure = batchLine.UnitOfMeasure;
							
							iscMashup.callMashup(this,"registerBatchPickInManualMode",registerBatchPickInputElem,{}).then(this.handleRegisterBatchPick.bind(this,'registerBatchPickInManualMode',mode,batchLine),angular.noop);
							
						}
						this.ui.focusOnScanField = false;

					},
					
					/**
					 *@description Call back handler for getStoreBatchLineLocationDetailsByItemId mashup
					 */
					
					handleGetStoreBatchDetails : function(batchLine,data){
						
						var apiOutput = iscMashup.getMashupOutput(data,"getStoreBatchLineLocationDetailsByItemId");
						
					    var tmpBatchLine= angular.copy(batchLine); 
					    
					    this.model.batchLineForCurrentItem = batchLine;
					    var registerBatchPickOutput = {};
					    registerBatchPickOutput.StoreBatch = {};
					    registerBatchPickOutput.StoreBatch.ShipmentLines = {};
					    registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine = [];
					    registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine= batchLine;
					    registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.ItemDetails = {};
					    registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.StoreBatchLocationList = {};
					    registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.OrderLine = {};
					    registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.OrderLine.ItemDetails = {};
					    registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.OrderLine.ItemDetails = tmpBatchLine.ItemDetails;
					    registerBatchPickOutput.StoreBatch.StoreBatchLocationList = {};
					    registerBatchPickOutput.StoreBatch.StoreBatchLocationList = apiOutput.StoreBatch.StoreBatchLines.StoreBatchLine[0].StoreBatchLocationList;
					    registerBatchPickOutput.StoreBatch.ShipmentLines.ShipmentLine.BackroomPickComplete = apiOutput.StoreBatch.StoreBatchLines.StoreBatchLine[0].BackroomPickComplete;
					    this.model.registerBatchPickOutput = registerBatchPickOutput;
					    this.ui.showCurrentItem = true;
					    this.ui.currentItemMode = 'EDIT';
					    /*set the tote array*/
					    this.initializeToteListArray(registerBatchPickOutput);
						this.cloneToteScanModel(registerBatchPickOutput);
						$timeout(function(){
							iscDomUtility.setFocus(document.getElementById('toteScanInput'),100);
	 		            }, 510);
					},
					
					
					/**
					 *@description On click handler for decrease button in the Selected Item screen
					 */
					
					uiDecreaseQty : function(storeBatchLocation){
					   var zero = 0;
			    	   var oneQty = 1;
				       var shipmentLineBPQty = Number(storeBatchLocation.LBPPShipmentLineBPQty);
			    	   shipmentLineBPQty = (!isNaN(storeBatchLocation.LBPPShipmentLineBPQty)?shipmentLineBPQty:zero);
			    	  
			    	   if(shipmentLineBPQty == 0) {
			    		   iscModal.showErrorMessage(iscI18n.translate('batchpick.MSG_NegativeQtyError'));
			    		   return;
			    	   }
			    	    shipmentLineBPQty = shipmentLineBPQty - oneQty;
			    	    var registerBatchPickInputElem = {'StoreBatch' : {'StoreBatchKey':this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey}};
						registerBatchPickInputElem.StoreBatch.ShipmentLines = {};
						registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine = [];
						registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0] = {};
						registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0].ShipmentLineKey = storeBatchLocation.LBPPShipmentLineKey;
						registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0].BackroomPickedQty = shipmentLineBPQty;
						registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0].StoreBatchLocation = {};
						registerBatchPickInputElem.StoreBatch.ShipmentLines.ShipmentLine[0].StoreBatchLocation.ToteId = storeBatchLocation.ToteId
						iscMashup.callMashup(this,"registerBatchPickUpdateMode",registerBatchPickInputElem,{}).then(this.handleRegisterBatchPickEdit.bind(this,storeBatchLocation,shipmentLineBPQty),angular.noop);
					},
					
					/**
					 *@description Call back handler for registerBatchPick api in edit mode
					 */
					
					handleRegisterBatchPickEdit : function(storeBatchLocation,shipmentLineBPQty,data){
						var apiOutput = iscMashup.getMashupOutput(data,"registerBatchPickUpdateMode");
						this.model.batchLineForCurrentItem.BackroomPickedQuantity = Number(this.model.batchLineForCurrentItem.BackroomPickedQuantity) -1;
						this.computeDeltaToteQtyBasedOnSLA(storeBatchLocation.ToteId,apiOutput);
						this.model.registerBatchPickOutput = apiOutput;
					},
					
					
					 getBatchLineSizeAfterFilterApply:function(){
							
							if(this.ui.batchLineFilter == 'N'){
								var batchLines = this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine;
					  			var i =0;
				     		    for(var j=0; j<batchLines.length; j++){
				     		    	if(batchLines[j].BackroomPickComplete == 'N'){
				     		    		i++;
				     		    	}
				     		    }
				     		    this.ui.filteredItemsLength = i;
							}else{
								this.ui.filteredItemsLength = this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.TotalNumberOfRecords;
							}
						},
						
					uiRepaintBatchLines : function(){
			        	/*show tote rearrangement popup*/
						if(this.ui.showToteRearrangePopup){
							var that = this;
							iscModal.showInfoMessage(iscI18n.translate('batchpick.MSG_HighPriorityToteEdit')).then(
									function(callBackAction){
										that.model.batchLineForCurrentItem = {};
										var getStoreBatchApiInputElem = {'StoreBatch':{'StoreBatchKey': that.model.getStoreBatchDetails.StoreBatch.StoreBatchKey}};
					                	var mashupArray = [];
							        	mashupArray.push(iscMashup.getMashupRefObj(that,'getStoreBatchDetails',getStoreBatchApiInputElem));
							        	mashupArray.push(iscMashup.getMashupRefObj(that,'getRuleDetailsForToteScan', {}));
							        	iscMashup.callMashups(that,mashupArray,{});
							        	that.ui.showCurrentItem = false;
							        	
				       				}
				  				    );
						}else{
							this.model.batchLineForCurrentItem = {};
							var getStoreBatchApiInputElem = {'StoreBatch':{'StoreBatchKey': this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey}};
		                	var mashupArray = [];
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'getStoreBatchDetails',getStoreBatchApiInputElem));
				        	mashupArray.push(iscMashup.getMashupRefObj(this,'getRuleDetailsForToteScan', {}));
				        	iscMashup.callMashups(this,mashupArray,{});
				        	this.ui.showCurrentItem = false;
							
						}
						
					},
					
					/**
					 *@description Gets the Paginated records for getStoreBatchDetails api when the next page action is performed.
					 */
					
					uiGetNextBatchLineRecords : function(){
						
						  if(this.ui.bLineShownCount <= this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine.length){
			                  this.ui.bLineShownCount+=5;
			                }
						  
					},
					
					/**
					 *@description Validates if next page action should be performed.
					 */
					uiBatchLineScrollActionValidator : function(){
		            	return true;
		            },
		            
		            /**
					 *@description Sets the initial filters applied on the batch lines.
					 */
		            initializefilterModel: function(){
						if(this.ui.batchLineFilter == 'N'){
							this.model.filtermodel.filter = 'IN_PROGRESS';
						}else{
							this.model.filtermodel.filter = 'ALL';
						}
						
					},
		            
					/**
					 *@description On click of handler of Apply button in the filter.
					 */
					uiApplyBatchListFilter: function(data){
						if(data.filter == 'IN_PROGRESS'){
							this.ui.batchLineFilter = 'N';
						}else{
							this.ui.batchLineFilter = '';
						}
						this.getBatchLineSizeAfterFilterApply();
						this.ui.focusOnFirstLine = true;
						this.ui.selectedBatchLine = {};
					},
					
					uiGetBatchLineTrackBy : function(batchLine){
						return batchLine.ItemDetails.ItemID+batchLine.ItemDetails.UnitOfMeasure;
					},
					
					 /**
					 *@description Identifies the BatchLine chosen by the User from the list.
					 */
					uiSelectBatchLine : function(batchLine){
						this.ui.selectedBatchLine = this.uiGetBatchLineTrackBy(batchLine);
						this.ui.focusOnFirstLine = false;
					},
					
					/**
					 *@description Opens the record shortage popup for the selected product.
					 */
					
					uiOpenRecordShortagePopup:function(batchLine){
						var that=this;
						var popInput = {}
						popInput.codeType = 'YCD_PICK_SHORT_RESOL';
						popInput.shipmentLine = angular.copy(batchLine);
						//creating OrderLine as recordShortage popup wants it
						popInput.shipmentLine.OrderLine = {};
						popInput.shipmentLine.OrderLine.ItemDetails = popInput.shipmentLine.ItemDetails;
						popInput.shipmentLine.OrderLine.variation = popInput.shipmentLine.variation;
						popInput.shipmentLine.DisplayQty = batchLine.BackroomPickedQuantity;
						popInput.shipmentLine.DisplayTotalQty = batchLine.OriginalQuantity;
						popInput.shipmentLine.DisplayShortQty = Number(batchLine.OriginalQuantity)	- Number(batchLine.BackroomPickedQuantity);
		    			var recordShortagePopupInput = {
		    					 modalInput: function(){
		    		      			return popInput;
		    		      		}   
		    				   
		    				};
		    			
		    			iscModal.openModal('store.views.shipment.common.record-shortage.record-shortage',recordShortagePopupInput,{}).then(function(callBackData){
		    				if(callBackData.data !== null && callBackData.data !== undefined){
		    					that.stampRecordShortage.call(that,callBackData.data,batchLine);
		    				}
		    			},
		    				angular.noop);
					},
					
					stampRecordShortage:function(data,batchLine){
						var itemID = batchLine.ItemDetails.ItemID;
						var uom = batchLine.ItemDetails.UnitOfMeasure;
						var input = {StoreBatch:{StoreBatchKey:this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey,
							Item:{ItemID:itemID, UnitOfMeasure:uom,ShortageReason:data.RecordShortage.ShortageReasonCode}}};
						
						iscMashup.callMashup(this,"recordShortageForBatchPick",input,{}).then(function(data){
							this.handleRecordShortage(data);
						}.bind(this),angular.noop);
					},
					
					
					handleRecordShortage:function(data){
						var apiOutput = iscMashup.getMashupOutput(data,"recordShortageForBatchPick");
						if(apiOutput.StoreBatch.ItemRemovedFromBatch == 'Y'){
							
						}
						var apiOutputCopy = angular.copy(apiOutput);
						apiOutputCopy.StoreBatch.StoreBatchLine = apiOutput.StoreBatch.StoreBatchLines.StoreBatchLine[0];
						delete apiOutputCopy.StoreBatch.StoreBatchLines;
						this.updateBatchLine(apiOutputCopy);
					},
					
					
					/**
					 *@description Updates the batchLine object in the getStoreBatchDetails model wheever there is any modification.
					 */
					updateBatchLine:function(apiOutput){
						this.model.getStoreBatchDetails.StoreBatch.Status = apiOutput.StoreBatch.Status; 
						var itemID = apiOutput.StoreBatch.StoreBatchLine.ItemID;
						var uom = apiOutput.StoreBatch.StoreBatchLine.UnitOfMeasure;
						var sblineArray = this.model.getStoreBatchDetails.StoreBatch.StoreBatchLines.StoreBatchLine;
						for(var i = 0;i < sblineArray.length; i++){
                           if(sblineArray[i].ItemID == itemID && sblineArray[i].UnitOfMeasure == uom){
                        	   sblineArray[i] = apiOutput.StoreBatch.StoreBatchLine;
                        	   this.ui.focusOnFirstLine = false;
                        	   this.ui.selectedBatchLine = this.uiGetBatchLineTrackBy(sblineArray[i]);
                        	   this.ui.showCurrentItem = false;
                        	   if(sblineArray[i].BackroomPickComplete == 'Y' && this.ui.batchLineFilter == 'N'){
                        		   this.ui.filteredItemsLength-=1;
                        	   }
                        	   break;
                           }
						}
						iscScrollUtility.scrollToElementWIthOffsetAndFixedHeader(document.getElementById('batch-line-list'), document.getElementById(this.ui.selectedBatchLine), 0, 10, 40);
						this.checkBatchStatus();
						
					},
					
					checkBatchStatus : function(){
						var that = this;
						if(this.model.getStoreBatchDetails.StoreBatch.Status == '2000'){
							
							var enableStagingLocation = iscRule.getRuleSetValue('enableStagingLocation');
                            if(enableStagingLocation == 'Y'){
								
                            	
                            	var customOptions = {options:{action:[
    							            						  {
    							              						    actionName:"YES",
    							              						    actionLabel:"batchpick.ACTION_AssignStaging"
    							              						  },
    							              						  {
    							              						    actionName:"NO",
    							              						    actionLabel:"batchpick.ACTION_Finish"
    							              						  }
    							              						]}};
                            	
                            	iscModal.showConfirmationMessage(iscI18n.translate('batchpick.MSG_AllBatchLinesPicked'),customOptions).then(
    									function(callBackAction){
    										if(callBackAction === 'YES'){
    											that.uiGotoAssignStaging();
    										}else if(callBackAction === 'NO'){
    											that.finishBatch();
    										}
    				       				},
    				  					function(callBackAction){
    				            			//		Do Nothing

    				       				});
								
							}else{
								
								var customOptions = {options:{action:[
								            						  {
								              						    actionName:"YES",
								              						    actionLabel:"batchpick.ACTION_Finish"
								              						  }
								              						  
								              						]}};
								
								iscModal.showConfirmationMessage(iscI18n.translate('batchpick.MSG_AllBatchLinesPicked'),customOptions).then(
										function(callBackAction){
											if(callBackAction === 'YES'){
												that.finishBatch();
											}
					       				},
					  					function(callBackAction){
					            			//		Do Nothing

					       				});
								
							}
							
							
						}else if(this.model.getStoreBatchDetails.StoreBatch.Status == '9000'){
							iscModal.showInfoMessage(iscI18n.translate('batchpick.MSG_BatchCancelled')).then(
									function(callBackAction){
										if(iscStateParams.params.action==="batchList"){
											iscWizard.gotoCustomPage('batchList',{},{});;	
										}else if(iscStateParams.params.action==="skipbatchList"){
											iscWizard.closeWizard();	
										}
				       				}
				  				    );
						}
					},
					
					
					
					uiGotoAssignStaging : function(){
						var pageInput = {StoreBatch:{StoreBatchKey:this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey,BatchNo:this.model.getStoreBatchDetails.StoreBatch.BatchNo}};
						iscWizard.gotoCustomPage('swpStaging',pageInput,{});
					},
					finishBatch : function(){
						
						if(iscStateParams.params.action==="batchList"){
	                           iscMashup.callMashup(this,"finishBatchPick",{'StoreBatch':{'StoreBatchKey': this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey}},{}).then(iscWizard.gotoCustomPage('batchList',{},{}));

							}else if(iscStateParams.params.action==="skipbatchList"){
	                          iscMashup.callMashup(this,"finishBatchPick",{'StoreBatch':{'StoreBatchKey': this.model.getStoreBatchDetails.StoreBatch.StoreBatchKey}},{}).then(iscWizard.closeWizard());

							}
						
					},
					
					/**
					 *@iscdoc uimethod
					 *@viewname store.views.order.cart-details.cart-details
					 *@methodname uiCancel
					 *@description This method handles on click of cancel button in cart details screen.
					 */
	              uiCancel : function(){
	            	iscModal.showConfirmationMessage(iscI18n.translate('batchpick.WarningMessage_Cancel')).then(
						function(callBackAction){
							if(callBackAction === 'YES'){
								if(iscStateParams.params.action==="batchList"){
									iscWizard.gotoCustomPage('batchList',{},{});;	
								}else if(iscStateParams.params.action==="skipbatchList"){
									
									iscWizard.closeWizard();	
								}
								
							}
	       				},
	  					function(callBackAction){
	       				});
	              },
				
	              /**
			 		 *@description This method is used to open product details modal
			 		 *
			 		 *@param {Object} shipmentLine - shipment line model.
			 		 */
			  		uiOpenItemDetails:function(batchLine) {
			  			iscShipment.openProductDetail(batchLine);
			  		},
			  		
			  		
	              uiIsBackroomPickComplete : function(batchLine) {
			        	return (batchLine.BackroomPickComplete == 'Y'?true:false);  
			              },
			         
		              /**
						 *@description This method handles the on click of back  in wizard.
						 */ 
			              
					handleWizardBack:function(){
						
							
						var isFirstPage = iscWizard.isFirstPage();
						 if(isFirstPage){
							 confirmationMsg = iscI18n.translate('batchpick.WarningMessage_Cancel'); 
							 iscModal.showConfirmationMessage(confirmationMsg).then(
										function(callBackAction){
											if(callBackAction === 'YES'){
												iscWizard.closeWizard();
											}
					       				});
							 return true;
						 }else if(!isFirstPage){
							 confirmationMsg = iscI18n.translate('batchpick.WarningMessage_Cancel'); 
							 iscModal.showConfirmationMessage(confirmationMsg).then(
										function(callBackAction){
											if(callBackAction === 'YES'){
												iscWizard.gotoPreviousPage(true);
											}
					       				});
							 return true;
						 }
						 
						 else{
							 
							 return false;
						 }
						
						
					}
					
					
				});
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.batchpick.swp-staging.swp-staging
 *@package store.views.shipment.batchpick.swp-staging
 *@class swp-staging
 *@description Assign Staging location screen for Sort while pick flow
 *
 */

   angular.module('store').controller('store.views.shipment.batchpick.swp-staging.swp-staging',
		  ['$scope','$rootScope','iscScreen','iscWizard','$timeout','$filter','$locale','iscMashup','iscResourcePermission','iscAppInfo','iscDomUtility','iscModal','iscI18n','iscStateParams','iscAppContext',
			function($scope,$rootScope,iscScreen,iscWizard,$timeout,$filter,$locale,iscMashup,iscResourcePermission,iscAppInfo,iscDomUtility,iscModal,iscI18n,iscStateParams,iscAppContext) {				
				iscWizard.initializeWizardPage($scope,{
					
					model:{
						/**
						 *@description Holds the Output of getStoreBatchDetails API.
						 */	
						'getStoreBatchDetails':{},
						
						/**
						 *@description Holds the Output of getStoreBatchLocationList API.
						 */
						'getStoreBatchLocationList':{},
						
						 /**
						 *@description Holds the Output of getRuleDetailsForToteScan mashup.
						 */	
						'getRuleDetailsForToteScan':{},
						
						 /**
						 *@description Holds the Output of getRuleDetailsForStagingLocScan mashup.
						 */	
						'getRuleDetailsForStagingLocScan':{},
						
						/**
						 *@description Holds the Scanned Tote bar code data.
						 */	
						'toteScanInput':{
			    			  'toteId':''
			    		  },
			    		
		    		    /**
						 *@description Holds the Tote information of the selected tote from the tote list.
						 */	  
			    		'selectedTote':{} ,
			    		
			    		/**
						 *@description Holds the Scanned Hold location bar code data.
						 */
			    		'stgLocScanInput':{
			    			  'holdLocation':''
			    		  }
						
					},
					
					mashupRefs :[
					             {
					                   /**
					                    *@description Get the list of Totes for Batch.
					                    */
					            	    mashupRefId: 'getStoreBatchLocationList',
				                        mashupId: 'store.views.shipment.batchpick.getStoreBatchLocationList',
				                        modelName:'getStoreBatchLocationList'
				                        	
					             },
					             {
					            	   /**
					                    *@description Calls getRuleDetails api for YCD_TOTE_TRANSLATION_NEEDED rule.
					                    */
					            	    mashupRefId: 'getRuleDetailsForToteScan',
				                        mashupId: 'store.views.shipment.batchpick.getRuleDetailsForToteScan',
				                        modelName:'getRuleDetailsForToteScan'
					            	 
					             },
					             {
					            	   /**
					                    *@description Calls getRuleDetails api for YCD_STAGINGLOC_TRANSLATION_NEEDED rule.
					                    */
					            	    mashupRefId: 'getRuleDetailsForStagingLocScan',
				                        mashupId: 'store.views.shipment.batchpick.getRuleDetailsForStagingLocScan',
				                        modelName:'getRuleDetailsForStagingLocScan' 
					             },
					             {      /**
					                    *@description Translates barcode for tote.
					                    */
					            	    mashupRefId: 'translateBarCodeForTote',
				                        mashupId: 'store.views.shipment.batchpick.translateBarCodeForTote',
					            	 
					             },
					             {      /**
					                    *@description Translates bar code for staging location.
					                    */
					            	    mashupRefId: 'translateBarCodeForStgLocation',
				                        mashupId: 'store.views.shipment.batchpick.translateBarCodeForStgLocation'
					            	 
					             },
					             {   
					            	   /**
					                    *@description ChangeShipment api call to record the staging location.
					                    */
					            	 mashupRefId: 'changeShipmentForStagingLoc',
				                     mashupId: 'store.views.shipment.batchpick.changeShipment'
					            	 
					             },
					             {     /**
					                    *@description Completed the Batch pick process.
					                    */
					            	 mashupRefId: 'finishBatchPick',
				                     mashupId: 'store.views.shipment.batchpick.finishBatchPick'
					            	 
					             }
					             
					             
					             ],
					             
					         ui : {
				        	    /**
				    			 *@property {Boolean} showCurrentTote - Flag to show Current Tote screen.
				    			 */
					        	showCurrentTote : false,
					        	/**
				      			*@property {Boolean} focusOnFirstLine - True if first shipment line is selected, false otherwise
				      			 */
					    	    focusOnFirstLine : true,
					    	    
					    	    /**
				    			 *@property {Object} selectedTote - The batch location details of the tote that is currently selected in the tote list.
				    			 */
					    	    selectedTote:{},
					    	    
					    	    /**
				      			 *@property {Boolean} focusOnScanField - Flag to set focus on scan field
				      			 */
					    	    focusOnScanField :true	
					    	  },
		             
					    	    /**
								 *@description This method initializes the Assign Staging Location screen by calling  getStoreBatchLocationList API.
								 */	
				               initialize : function(){
									    var pageInput = iscWizard.getWizardPageInput();
									    this.model.getStoreBatchDetails = pageInput;
									    
										var getStoreBatchLocationListApiInputElem = {'StoreBatch':{'StoreBatchKey': pageInput.StoreBatch.StoreBatchKey}};
					                	var mashupArray = [];
							        	mashupArray.push(iscMashup.getMashupRefObj(this,'getStoreBatchLocationList', getStoreBatchLocationListApiInputElem));
							        	mashupArray.push(iscMashup.getMashupRefObj(this,'getRuleDetailsForToteScan', {}));
							        	mashupArray.push(iscMashup.getMashupRefObj(this,'getRuleDetailsForStagingLocScan', {}));
							        	iscMashup.callMashups(this,mashupArray,{}).then(this.handleGetStoreBatchLocationList.bind(this),angular.noop);
								},
									
								
								/**
								 *@description Identifies the Tote chosen by the User from the Tote list.
								 */
								
									uiSelectTote : function(batchLocation){
										this.ui.selectedTote = batchLocation.StoreBatchLocationKey;
										this.ui.focusOnFirstLine = false;
									},
									
									/**
									 *@description Call back handler for getStoreBatchLocationList API.
									 */	
									
									handleGetStoreBatchLocationList : function(data){
										var apiOutput = iscMashup.getMashupOutput(data,"getStoreBatchLocationList");
										var batchLocationList = [];
										batchLocationList = apiOutput.StoreBatchLocationList.StoreBatchLocation;
										
										for(var i = 0; i < batchLocationList.length ; i++){
											batchLocationList[i].deliveryMethodURL = window.location.protocol+"//"+window.location.host+iscAppInfo.getApplicationContext()+"//"+batchLocationList[i].ImageUrl+"//"+batchLocationList[i].ImageId;
										}
										
										if(apiOutput.StoreBatchLocationList.BatchStagedCompletely == 'Y'){
											this.showBatchStagingCompletionSuccess(apiOutput,false);
										}
										
										$timeout(function(){
											iscDomUtility.setFocus(document.getElementById('toteScanInput'));
					 		            }, 0);
										
									},
								
									/**
									 *@description On click handler of Assign button in the Assign Staging Location screen.
									 */	
									
									uiHandleAssign :function(batchLocation){
										this.model.selectedTote = this.getSelectedToteModelWithModifiedImage(batchLocation);
										this.ui.showCurrentTote = true;
										$timeout(function(){
											iscDomUtility.setFocus(document.getElementById('stgLocScanInput'),100);
					 		            }, 510);
										
										this.ui.focusOnScanField=false;
									},
									
									/**
									 *@description Invoked when Tote is scanned during staging process.
									 */	
									
									uiScanTote : function(barcodeData){
									
									if(iscCore.isVoid(barcodeData)){
										iscModal.showErrorMessage(iscI18n.translate('batchpick.MSG_NoToteScanned'));		
									}else{
										if(this.model.getRuleDetailsForToteScan.Rules.RuleSetValue == 'Y'){
											   
											/* call translate Barcode api to get the translation */
											    var pageInput = iscWizard.getWizardPageInput();
											    var translateBarcodeApiInput = { 'BarCode' :{'BarCodeData': barcodeData}};
											    translateBarcodeApiInput.BarCode.ToteContextualInfo = {};
											    translateBarcodeApiInput.BarCode.ToteContextualInfo.StoreBatchKey = pageInput.StoreBatch.StoreBatchKey;
												iscMashup.callMashup(this,"translateBarCodeForTote",translateBarcodeApiInput,{}).then(this.handleToteTranslation.bind(this),angular.noop);

										}else{
											
											/* get The StoreBatchLocationKey for the tote Id*/
											var batchLocationList = this.model.getStoreBatchLocationList.StoreBatchLocationList.StoreBatchLocation;
					                        var selectedTote = null;
											for(var i=0 ; i<batchLocationList.length ; i++){
												if(batchLocationList[i]['ToteId'] === barcodeData){
													selectedTote= batchLocationList[i];
													
													break;
												}
											}
											if(!iscCore.isVoid(selectedTote)){
												this.model.selectedTote = this.getSelectedToteModelWithModifiedImage(selectedTote);
												this.ui.showCurrentTote = true;
												this.uiSelectTote(selectedTote);
												$timeout(function(){
													iscDomUtility.setFocus(document.getElementById('stgLocScanInput'),100);
							 		            }, 510);
											}else{
												
												iscModal.showErrorMessage(iscI18n.translate('batchpick.MSG_TranslationNotFoundError'));	
												
												
											}
											
											
										}	
										this.model.toteScanInput.toteId = "";
									}	
									
									   this.ui.focusOnScanField=true;
									},
									
									/**
									 *@description Invoked when Staging location is scanned during staging process.
									 */	
									
									
									uiScanStagingLocation : function(barcodeData){
									
										if(iscCore.isVoid(barcodeData)){
											iscModal.showErrorMessage(iscI18n.translate('batchpick.MSG_NoStagingLocScanned'));	
										}else{
											if(this.model.getRuleDetailsForStagingLocScan.Rules.RuleSetValue == 'Y'){
												iscMashup.callMashup(this,"translateBarCodeForStgLocation",{ 'BarCode' :{'BarCodeData': barcodeData}},{}).then(this.handleStagingLocTranslation.bind(this),angular.noop);
											}
												else{
													this.addHoldLocation(barcodeData);
												}
											this.model.stgLocScanInput.holdLocation = "";
										}
										
									},
									
									/**
									 *@description Call back handler for translateBarCodeForStgLocation Mashup.
									 */	
									
									handleStagingLocTranslation : function(data){
										
										
                                        var apiOutput = iscMashup.getMashupOutput(data,'translateBarCodeForStgLocation');
										
										if(apiOutput.BarCode.Translations.TotalNumberOfRecords=='0'){
											iscModal.showErrorMessage(iscI18n.translate('batchpick.MSG_StagingTranslationNotFound'));
										}else{
											var holdLocationId = apiOutput.BarCode.Translations.Translation[0].LocationContextualInfo.HoldLocationId;
											this.addHoldLocation(holdLocationId);
										}
										
									},
									
									addHoldLocation : function(holdLocationId){
									
										var lastScannedTote = this.model.selectedTote;
										var existingHoldLocation = lastScannedTote.Shipment.HoldLocation;
										var holdLocArray = [];
										var pageInput = iscWizard.getWizardPageInput();
										 
										var isStagingLocationDuplicate = false;
										if(!iscCore.isVoid(existingHoldLocation)){
											
											holdLocArray = existingHoldLocation.split(','); 
											for (var i = 0; i < holdLocArray.length; i++) {
											    if (holdLocArray[i].trim() == holdLocationId) {
											    	isStagingLocationDuplicate = true;
											    	break;
											    }
											}
										}
										
										if(isStagingLocationDuplicate){
											iscModal.showErrorMessage(iscI18n.translate('batchpick.MSG_DuplicateStgLocation'));
										}else{
											/*append the new hold location*/
											if(holdLocArray.length >= 1){
											   holdLocationId= existingHoldLocation+","+holdLocationId;
											}
											
											if(holdLocationId.length>40){
												iscModal.showErrorMessage(iscI18n.translate('batchpick.MSG_InvalidHoldLocationLength'));
											}else{
												/*call changeShipment api to update the shipment with hold location and staged quantity*/
												
												var changeShipmentInputElem = {};
												changeShipmentInputElem.Shipment={};
												changeShipmentInputElem.Shipment.ShipmentKey=lastScannedTote.Shipment.ShipmentKey;
												changeShipmentInputElem.Shipment.HoldLocation = holdLocationId;
												
												//add shipment lines for this tote with StagedQuantity as BackroomPickedQuantity becaue for tote case it will be assumed 
									        	//that all items that are picked are staged and we are not tracking quantity based staging
												changeShipmentInputElem.Shipment.ShipmentLines = {};
									        	var aShipmentLine = changeShipmentInputElem.Shipment.ShipmentLines.ShipmentLine = [];
									        	var scannedShpLineList = lastScannedTote.Shipment.ShipmentLines.ShipmentLine;
									        	if(!iscCore.isVoid(scannedShpLineList)){
									        		for(var i=0; i<scannedShpLineList.length; i++){
									        			var oShipmentLine = scannedShpLineList[i];
									        			var aShpLineDtl = aShipmentLine[aShipmentLine.length] = {};
									        			aShpLineDtl.ShipmentLineKey = oShipmentLine.ShipmentLineKey;
									        			if(oShipmentLine.BackroomPickedQty)
									        				aShpLineDtl.StagedQuantity = oShipmentLine.BackroomPickedQty;
									        			else
									        				aShpLineDtl.StagedQuantity = 0;
									        		}
									        	}
									        	
									        	var getStoreBatchLocationListInput = {'StoreBatchLocation':{'StoreBatchKey': pageInput.StoreBatch.StoreBatchKey,'StoreBatchLocationKey':lastScannedTote.StoreBatchLocationKey}};
									        	
									        	changeShipmentInputElem.Shipment.getStoreBatchLocationListInput = getStoreBatchLocationListInput;
									        	/*call changeShipment api*/
									        	iscMashup.callMashup(this,"changeShipmentForStagingLoc",changeShipmentInputElem,{}).then(this.handleUpdateHoldLocation.bind(this),angular.noop);
									        	
											}
										}
										
									},
									
									
									handleUpdateHoldLocation : function (data){
										var apiOutput = iscMashup.getMashupOutput(data,'changeShipmentForStagingLoc');
										var storeBatchLocationKey = apiOutput.StoreBatchLocationList.StoreBatchLocation[0].StoreBatchLocationKey;
										if(apiOutput.StoreBatchLocationList.BatchStagedCompletely == 'Y'){
											 this.showBatchStagingCompletionSuccess(apiOutput,true);
										}
										else{
										
											this.model.getStoreBatchLocationList.StoreBatchLocationList.BatchStagedCompletely = apiOutput.StoreBatchLocationList.BatchStagedCompletely; 
											storeBatchLocationKey = apiOutput.StoreBatchLocationList.StoreBatchLocation[0].StoreBatchLocationKey;
										
											var sblineArray = this.model.getStoreBatchLocationList.StoreBatchLocationList.StoreBatchLocation;
											for(var i = 0;i < sblineArray.length; i++){
					                           if(sblineArray[i].StoreBatchLocationKey == storeBatchLocationKey){
					                        	   sblineArray[i] = apiOutput.StoreBatchLocationList.StoreBatchLocation[0];
					                        	   this.ui.showCurrentTote = false;	
					                        	   
					                        	   break;
					                           }
											}
											
										}
										/*set the focus*/
										
										var focusFieldId = null;
										if(this.ui.focusOnScanField){
											focusFieldId = 'toteScanInput';
										}else{
											focusFieldId = 'tote'+storeBatchLocationKey;
										}
										$timeout(function(){
											iscDomUtility.setFocus(document.getElementById(focusFieldId));
					 		            }, 0);
										
										
									},
								
									/**
									 *@description Invoked when All the totes are completed with assigning staging location.
									 */ 	
									
									showBatchStagingCompletionSuccess : function(apiOutput,refreshToteList){
										
											/* show success message */
											var successMsgKey="";
											if(iscStateParams.params.action==="batchList"){
												successMsgKey = 'batchpick.MSG_stg_loc_finished';
											}else if(iscStateParams.params.action==="skipbatchList"){
												successMsgKey = 'batchpick.MSG_stg_location_finished';
											}
											var messageOption = { 
							    					options: { 
							    						headerText: "globals.LABEL_Success",
							    						headerIconCss: "app-glyphicons app-icon-success_ok_30"
							    					}
							    				};
											
											var pageInput = iscWizard.getWizardPageInput();
										    
											var that = this;
										    iscModal.showConfirmationMessage(iscI18n.translate(successMsgKey,{'batchNo':pageInput.StoreBatch.BatchNo}),messageOption).then(
													function(callBackAction){
														if(callBackAction === 'YES'){
															/* finish batch and go to batch list screen */
															if(iscStateParams.params.action==="batchList"){
									                           iscMashup.callMashup(that,"finishBatchPick",{'StoreBatch':{'StoreBatchKey': pageInput.StoreBatch.StoreBatchKey}},{}).then(iscWizard.gotoCustomPage('batchList',{},{}));
	
															}else if(iscStateParams.params.action==="skipbatchList"){
									                          iscMashup.callMashup(that,"finishBatchPick",{'StoreBatch':{'StoreBatchKey': pageInput.StoreBatch.StoreBatchKey}},{}).then(iscWizard.closeWizard());

															}
															
														}else if (callBackAction === 'NO' && refreshToteList){
															
															that.model.getStoreBatchLocationList.StoreBatchLocationList.BatchStagedCompletely = apiOutput.StoreBatchLocationList.BatchStagedCompletely; 
															var storeBatchLocationKey = apiOutput.StoreBatchLocationList.StoreBatchLocation[0].StoreBatchLocationKey;
														
															var sblineArray = that.model.getStoreBatchLocationList.StoreBatchLocationList.StoreBatchLocation;
															for(var i = 0;i < sblineArray.length; i++){
									                           if(sblineArray[i].StoreBatchLocationKey == storeBatchLocationKey){
									                        	   sblineArray[i] = apiOutput.StoreBatchLocationList.StoreBatchLocation[0];
									                        	   that.ui.showCurrentTote = false;	
									                        	   
									                        	   break;
									                           }
															}
														}
								       				},
								  					function(callBackAction){
								       				});
									},
									
									/**
									 *@description Call back handler translateBarCode API when Tote is scanned.
									 */ 
									
									handleToteTranslation : function(data){
										var apiOutput = iscMashup.getMashupOutput(data,'translateBarCodeForTote');
										var scannedToteKey = apiOutput.BarCode.Translations.Translation[0].ToteContextualInfo.StoreBatchLocationKey;
										var batchLocationList = this.model.getStoreBatchLocationList.StoreBatchLocationList.StoreBatchLocation;
										var selectedTote = null;
										for(var i=0 ; i<batchLocationList.length ; i++){
											if(batchLocationList[i]['StoreBatchLocationKey'] === scannedToteKey){
												selectedTote= batchLocationList[i];
												break;
											}
										}
										this.model.selectedTote = this.getSelectedToteModelWithModifiedImage(selectedTote);
										this.ui.showCurrentTote = true;
										this.uiSelectTote(selectedTote);
										$timeout(function(){
											iscDomUtility.setFocus(document.getElementById('stgLocScanInput'),100);
					 		            }, 510);
									},
									
									getSelectedToteModelWithModifiedImage : function(selectedTote){
										
							        	if(selectedTote){
							        		var clonedSelectedToteModel =  angular.copy(selectedTote);
							        		var imgaeId = clonedSelectedToteModel.ImageId;
							        		if(imgaeId){
							        			if(imgaeId ==='shipping_med.png') {
							        				clonedSelectedToteModel.ImageId= 'shipping_big.png';
							        			}else if(imgaeId ==='pickup_med.png'){
							        				clonedSelectedToteModel.ImageId='pickup_big.png';
							        			}
						        				clonedSelectedToteModel.deliveryMethodURL = window.location.protocol+"//"+window.location.host+iscAppInfo.getApplicationContext()+"//"+clonedSelectedToteModel.ImageUrl+"//"+clonedSelectedToteModel.ImageId;
							        		}
							        	}
							        	return clonedSelectedToteModel;
									},
									
									
									/**
									 *@description This method handles the on click of back  in wizard.
									 */ 	
						            
									handleWizardBack:function(){
										
										var isFirstPage = iscWizard.isFirstPage();
										 if(isFirstPage){
											 confirmationMsg = iscI18n.translate('batchpick.WarningMessage_Cancel'); 
											 iscModal.showConfirmationMessage(confirmationMsg).then(
														function(callBackAction){
															if(callBackAction === 'YES'){
																iscWizard.closeWizard();
															}
									       				});
											 return true;
										 }else if(!isFirstPage){
											 confirmationMsg = iscI18n.translate('batchpick.WarningMessage_Cancel'); 
											 iscModal.showConfirmationMessage(confirmationMsg).then(
														function(callBackAction){
															if(callBackAction === 'YES'){
																iscWizard.gotoPreviousPage(true);
															}
									       				});
											 return true;
										 }
										 
										 else{
											 
											 return false;
										 }
										
										
									},
									
									/**
									 *@description This method handles on click of cancel button.
									 */
									 uiCancel : function(){
										    iscModal.showConfirmationMessage(iscI18n.translate('batchpick.WarningMessage_Cancel')).then(
													function(callBackAction){
														if(callBackAction === 'YES'){
															if(iscStateParams.params.action==="batchList"){
																iscWizard.gotoCustomPage('batchList',{},{});;	
															}else if(iscStateParams.params.action==="skipbatchList"){
																
																iscWizard.closeWizard();	
															}
															
														}
								       				},
								  					function(callBackAction){
								       				});
										 
							              },
							              
							                /**
											 *@description This method handles on click of cancel button in Current Tote screen
											 */	
							              uiCancelStagingLocation :function(){
							            	  
							            	  var focusFieldId = null;
												if(this.ui.focusOnScanField){
													focusFieldId = 'toteScanInput';
												}else{
													focusFieldId = 'tote'+this.model.selectedTote.StoreBatchLocationKey;
												}
												$timeout(function(){
													iscDomUtility.setFocus(document.getElementById(focusFieldId));
							 		            }, 0);
												
												this.ui.showCurrentTote=false;
												
											},
							          
											/**
											 *@description This method handles on click of finish button in Assign Staging Location screen
											 */				
									    uiFinishBatch : function(){
										  var pageInput = iscWizard.getWizardPageInput();
										  if(iscStateParams.params.action==="batchList"){
					                           iscMashup.callMashup(this,"finishBatchPick",{'StoreBatch':{'StoreBatchKey': pageInput.StoreBatch.StoreBatchKey}},{}).then(iscWizard.gotoCustomPage('batchList',{},{}));
											}else if(iscStateParams.params.action==="skipbatchList"){
					                          iscMashup.callMashup(this,"finishBatchPick",{'StoreBatch':{'StoreBatchKey': pageInput.StoreBatch.StoreBatchKey}},{}).then(iscWizard.closeWizard());
											}
									}
									
									
				});
			}
		]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.shipment.common.abandon-shipment.abandon-shipment
 *@package store.views.shipment.common.abandon-shipment
 *@class abandon-shipment
 */
angular.module('store').controller('store.views.shipment.common.abandon-shipment.abandon-shipment',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{

  		model:{
  			 /**
	           *@description This model contains shipment details
	           */
         "shipmentDetails":{}
		
  		},


  		mashupRefs : [

			],


			ui:{
				/**
	  			*@property {String} flowName - Contains the flow name - BACKROOM_PICK, PACK
	  			 */
				flowName:"",
				/**
	  			*@property {String} inProgressMessageKey - contains shipment in progress message bundle key based on flowName
	  			 */
				inProgressMessageKey:"",
				/**
	  			*@property {String} inProgressTitleKey - contains shipment in progress title bundle key based on flowName
	  			 */
				inProgressTitleKey:"",
				/**
	  			*@property {String} continueActionKey - contains continue action bundle key based on flowName
	  			 */
				continueActionKey:"",

			},
			
			  /**
	         *@description method to initialize the controller and loads the appropriate message based on flowName
	         */
			initialize : function(){
				
				this.model.shipmentDetails = modalInput.shipmentDetails;
				this.ui.flowName = modalInput.flowName;
				if(this.ui.flowName == "BACKROOM_PICK") {
					this.ui.inProgressMessageKey = "abandonShipment.MSG_ShipmentPickingInProgress";
					this.ui.inProgressTitleKey = "abandonShipment.TITLE_ShipmentPickingInProgress";
					this.ui.continueActionKey = "abandonShipment.ACTION_ContinuePick";
				} else if(this.ui.flowName == "PACK") {
					this.ui.inProgressMessageKey = "abandonShipment.MSG_ShipmentPackingInProgress";
					this.ui.inProgressTitleKey = "abandonShipment.TITLE_ShipmentPackingInProgress";
					this.ui.continueActionKey = "abandonShipment.ACTION_ContinuePack";
				}
				
				console.log("Shipment Details - ",this.model.shipmentDetails);
				
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({data:'CANCEL'});
			},

			
			
			/**
			 *@description OnClick handler of "Apply" button, propagates the data back to invoking screen.
			 */
			uiSubmit : function (action) {
				$uibModalInstance.close({data:action});
			}
			
			
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/



angular.module('store').controller('store.views.shipment.common.product-details.product-details', ['$scope', '$rootScope', '$uibModalInstance', 'iscScreen','modalInput', '$filter', 'iscMashup', 'iscResourcePermission', 'iscI18n', 'iscModal', 'iscMedia','iscDomUtility','$timeout','iscState','iscProduct', function ($scope, $rootScope, $uibModalInstance, iscScreen, modalInput, $filter, iscMashup, iscResourcePermission, iscI18n, iscModal,iscMedia,iscDomUtility,$timeout,iscState,iscProduct) {
        iscScreen.initializeModalScreen($scope, {
            model: {
				/**
				 * @description contains item details model
				 */
                "itemDetails":{},
				
				/**
				 * @description contains item specs model
				 */
                "itemSpecDetails":{},
				
				/**
				 * @description contains item components model
				 */
				"itemComponentsDetails": {}
            },
            mashupRefs: [
                /**
				 * @description This mashup is used to get generic details for item.
				 */
				{
                	mashupRefId: 'getCompleteItemDetails',
                	mashupId: 'store.views.shipment.common.product-details.getProductDetails'
                },
				
				/**
				 * @description This mashup is used to get item specifications.
				 */
				{
                	mashupRefId: 'getCompleteItemSpecifications',
                	mashupId: 'store.views.shipment.common.product-details.getProductSpecifications'
                },
				
				/**
				 * @description This mashup is used to get item components.
				 */
				{
                	mashupRefId: 'getCompleteItemComponents',
                	mashupId: 'store.views.shipment.common.product-details.getProductComponents'
                }
            ],

            ui: {
                /**
				 * @property {Boolean} itemSpecsEmpty - true if there is no specifications available for item
				 */
				itemSpecsEmpty: false,
				
				/**
				 * @property {Boolean} openSpecs - true when item specification panel is clicked to open it
				 */
				openSpecs: false,
				
				/**
				 * @property {Boolean} itemSpecsFetched - true if api call to fetch item specification has already been made
				 */
				itemSpecsFetched: false,
				
				/**
				 * @property {Boolean} openComponents - true when item components panel is clicked to open it
				 */
				openComponents: false,
				
				/**
				 * @property {Boolean} showItemComponents - true if there are item components availabe and it needs to be shown on UI
				 */
				showItemComponents: false
               
            },
            
            /**
		     * @description This method initialize the controller and invokes mashup to get generic item details.
		     */
			initialize: function () {
				iscMashup.callMashup(this,'getCompleteItemDetails',this.getCompleteItemDetailsInput(),{}).then(this.initializeItemDetails.bind(this),angular.noop);
				
				var that = this;
				$scope.$watch('ui.openComponents', function(newValue) {
					if(!iscCore.isVoid(newValue)) {
						that.openItemComponents(newValue);
					}
				});
				$scope.$watch('ui.openSpecs', function(newValue) {
					if(!iscCore.isVoid(newValue)) {
						that.openItemSpecs(newValue);
					}
				});

            },
            
            /**
		     * @description This method handles the initialization mashup call and checks whether components are available for item.
		     */
			initializeItemDetails: function(response){
                var output = iscMashup.getMashupOutput(response,"getCompleteItemDetails");
				if(output){
					this.model.itemDetails.Item=output.ItemList.Item[0];
					this.model.itemDetails.Item.Currency=output.ItemList.Currency;
				}
				
				if(this.model.itemDetails.Item && this.model.itemDetails.Item.PrimaryInformation && this.model.itemDetails.Item.PrimaryInformation.KitCode && (this.model.itemDetails.Item.PrimaryInformation.KitCode == 'PK' || this.model.itemDetails.Item.PrimaryInformation.KitCode == 'BUNDLE')) {
					this.ui.showItemComponents = true;
				}
                
            },

			/**
		     * @description This method invokes mashup to fetch item specification.
		     */
			openItemSpecs: function(accordianOpen){
				if(true === accordianOpen && iscCore.isVoid(this.model.itemSpecDetails) && !this.ui.itemSpecsFetched) {
					iscMashup.callMashup(this,'getCompleteItemSpecifications',this.getCompleteItemDetailsInput(),{}).then(this.initializeItemSpecifications.bind(this),angular.noop);
				}
			},
			
			/**
		     * @description This method handles the item specification mashup call and checks whether specification are available for item.
		     */
			initializeItemSpecifications: function(response) {
				this.ui.itemSpecsFetched = true;
				var apiOutput = iscMashup.getMashupOutput(response,"getCompleteItemSpecifications");
				 
				if(apiOutput && apiOutput.ItemList.Item){
					this.model.itemSpecDetails = this.getFirstItemChildElementFromItemList(apiOutput);
				 } else {
					 console.log("ERROR: Unable to fetch Item Specs Details - ",apiOutput);
				 }
				 
				 if(iscCore.isVoid(iscCore.getValueFromJsonPath(this.model.itemSpecDetails,"Item.ItemAttributeGroupTypeList.ItemAttributeGroupType.ItemAttributeGroupList.ItemAttributeGroup"))) {
					 this.ui.itemSpecsEmpty = true;
				 }
			},

			/**
		     * @description This method invokes mashup to fetch item components.
		     */
			openItemComponents: function(accordianOpen) {
				
				if(true === accordianOpen && iscCore.isVoid(this.model.itemComponentsDetails) && this.ui.showItemComponents) {
					iscMashup.callMashup(this,'getCompleteItemComponents',this.getCompleteItemDetailsInput(),{}).then(this.initializeItemComponents.bind(this),angular.noop);
				}
				
			},
			
			/**
		     * @description This method handles the item specification mashup call and generates item image url.
		     */
			initializeItemComponents: function(response) {
				var apiOutput = iscMashup.getMashupOutput(response,"getCompleteItemComponents");
				if(apiOutput.ItemList.Item){
					var itemList = apiOutput.ItemList.Item[0];
					if(itemList.Components && itemList.Components.Component) {
						this.model.itemComponentsDetails = itemList.Components;
						iscProduct.generateComponentImageURL(this.model.itemComponentsDetails);
					} 
				}
			},
			
			/**
		     * @description This method forms the input to fetch item details.
		     */
			getCompleteItemDetailsInput:function() {
				var getCompleteItemDetailsInput = {};
				getCompleteItemDetailsInput.Item = {};
    			
    			if(!iscCore.isVoid(modalInput) && !iscCore.isVoid(modalInput.ItemDetails) && !iscCore.isVoid(modalInput.ItemDetails.ItemID) && !iscCore.isVoid(modalInput.ItemDetails.UnitOfMeasure)) {
    				getCompleteItemDetailsInput.Item.ItemID = modalInput.ItemDetails.ItemID;
    				getCompleteItemDetailsInput.Item.UnitOfMeasure = modalInput.ItemDetails.UnitOfMeasure;
    			} else {
    				console.log("ERROR: ItemID or UnitOfMeasure is null in modal input - ",modalInput.ItemDetails);
    			}
    			
    			return getCompleteItemDetailsInput;
			},
			
			/**
		     * @description This method fetches the item specifications.
		     */
			getFirstItemChildElementFromItemList: function(itemList) {
			   var itemDetails = {};
			   itemDetails.Item = itemList.ItemList.Item[0];
			   if(!iscCore.isVoid(itemList.ItemList.Item[0].ItemAttributeGroupTypeList) && !iscCore.isVoid(itemList.ItemList.Item[0].ItemAttributeGroupTypeList.ItemAttributeGroupType[0])) {
				   itemDetails.Item.ItemAttributeGroupTypeList.ItemAttributeGroupType = itemList.ItemList.Item[0].ItemAttributeGroupTypeList.ItemAttributeGroupType[0];
			   }
			   itemDetails.Item.Currency = itemList.ItemList.Currency;
			   
			   return itemDetails;
			},
			
			/**
		     * @description This method forms the item extended description.
		     */
			uiGetExtendedDescription:function(extDesc) {	
				if(!iscCore.isVoid()) {
					extDesc = extDesc.replaceAll(/\n/g, '<br />');
				}
				return extDesc;
			},
			
			/**
		     * @description This method the attribute name from given attribute element.
		     */
			uiGetAttributeName:function(itemAttribute) {
				return iscCore.isVoid(itemAttribute.Attribute.ShortDescription) ? itemAttribute.ItemAttributeName : itemAttribute.Attribute.ShortDescription;
			},
			
			/**
		     * @description This method the attribute value from given attribute element.
		     */
			uiGetAttributeValue:function(itemAttribute) {
				var attrValue = "-";
				
				if(!iscCore.isVoid(itemAttribute.AssignedValueList) && !iscCore.isVoid(itemAttribute.AssignedValueList.AssignedValue) &&  !iscCore.isVoid(itemAttribute.AssignedValueList.AssignedValue.length)) {
					
					attrValue = itemAttribute.AssignedValueList.AssignedValue[0].ShortDescription;
					if(!iscCore.isVoid(attrValue)) {
						if("Y" == attrValue) {
							attrValue = iscI18n.translate('globals.ACTION_Yes');
						} else if("N" == attrValue) {
							attrValue = iscI18n.translate('globals.ACTION_No');
						}
					} else {
						attrValue = "-";
					}
				}
               
				return attrValue;
			},
			
			/**
		     * @description This method closes the item popup.
		     */
			uiClose : function () {
				$uibModalInstance.dismiss({});
			}			
           

        });
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodal
 *@viewname store.views.shipment.common.record-shortage.record-shortage
 *@package store.views.shipment.common.record-shortage
 *@class record-shortage
 */
angular.module('store').controller('store.views.shipment.common.record-shortage.record-shortage',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal','iscScrollUtility',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal,iscScrollUtility) {
		
		
		iscScreen.initializeModalScreen($scope,{

  		model:{
  			 /**
	           *@description This model contains shortage reason common code list.
	           */
         "shortageReasonList":{},
         /**
          *@description This model contains cancellation reason common code list.
          */
         "cancelReasonList":{},
         /**
          *@description This model contains shipment line details.
          */
         "shipmentLine":{}
		
  		},

  		mashupRefs : [
  		        {
					
					/**
					*@description This mashup is used to shortage reason common code list.
					*/
					mashupRefId: 'getShortageReasonList',
					mashupId: 'store.view.shipment.getShortageReasonList',
					modelName : 'shortageReasonList'								
				},
				{
					
					/**
					*@description This mashup is used to get cancellation reason common code list.
					*/
					mashupRefId: 'getCancelReasonList',
					mashupId: 'store.view.shipment.getShortageReasonList',
					modelName : 'cancelReasonList'								
				}
			],


			ui:{
				/**
				*@property {Object}  selectedShortageReasonCode - contains selected shortage reason code and description
				*/
				selectedShortageReasonCode : "",
				/**
				*@property {String}  processType - contains process type name - BACKROOM_PICK, PACK or CUSTOMER_PICKUP
				*/
				processType: "BACKROOM_PICK",
				/**
				*@property {Boolean}  showCancelReason - Displays cancel reason code if Cancel is selected as shortage reason code for CUSTOMER_PICKUP process type
				*/
				showCancelReason:false,
				/**
				*@property {Object}  cancelReason - contains selected cancel reason code and description
				*/
				cancelReason:undefined,
				/**
				*@property {Boolean}  markAllLines - True if all remaining lines are marked as shortage
				*/
				markAllLines:false,
                showCancelReasonError:false,
                showCancelReasonErrorDesc:iscI18n.translate('shortage.MSG_CancellationReasonCode')
			},
			

			initialize : function(){
				
				var that = this;
				
				$scope.$watch('ui.selectedShortageReasonCode', function(newValue) {
					if(!iscCore.isVoid(newValue)) {
						that.onShortageReasonSelect(newValue);
					}
				});

				this.model.shipmentLine = modalInput.shipmentLine;
				var shortageReasonCodeType = modalInput.codeType;
				
				if(iscCore.isVoid(shortageReasonCodeType)) {
					shortageReasonCodeType = "YCD_PICK_SHORT_RESOL";
					this.ui.processType = "BACKROOM_PICK";
				} else if(shortageReasonCodeType.indexOf("PACK") > -1) {
					this.ui.processType = "PACK";
				} else if(shortageReasonCodeType.indexOf("YCD_SHORT_RESOLU") > -1) {
					this.ui.processType = "CUSTOMER_PICKUP";
				}
				
				var getShortageReasonListInput = {};
				getShortageReasonListInput.CommonCode = {};
				getShortageReasonListInput.CommonCode.CodeType = shortageReasonCodeType;
				getShortageReasonListInput.CommonCode.DocumentType = this.model.shipmentLine.DocumentType;
				
				iscMashup.callMashup(this,'getShortageReasonList',getShortageReasonListInput,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				
			},
			
			/**
			 *@description This is callback handler for mashups invoked in initialize method.
			 * 
			 * Sets first object of shortageReasonList model as selectedShortageReasonCode.
			 * 
			 *@param {Object} response - mashup output JSON object
			 *
			 */
			handleInitApiCalls : function(response) {
				if(iscCore.isVoid(this.ui.selectedShortageReasonCode)){
					this.ui.selectedShortageReasonCode=this.model.shortageReasonList.CommonCodeList.CommonCode[0].CodeValue;
				}
			},
			
			/**
			 *@description This method is invoked when user selects a Shortage Reason. 
			 * If Record Shortage Popup is launched during Customer Pickup flow,
			 * then Cancellation Reason dropdown will be displayed when Cancel shortage reason is selected.
			 *
			 */
			onShortageReasonSelect :function(selectedShortageReason) {
				
				if(this.ui.mode = "CUSTOMER_PICKUP" && selectedShortageReason === 'Cancel') {
					
					this.ui.showCancelReason = true;
					
					if(iscCore.isVoid(this.model.cancelReasonList)) {
						var getCancelReasonListInput = {};
						getCancelReasonListInput.CommonCode = {};
						getCancelReasonListInput.CommonCode.CodeType = "YCD_CANCEL_REASON";
						
						iscMashup.callMashup(this,'getCancelReasonList',getCancelReasonListInput,{}).then(function(data){
							
							/*if(iscCore.isVoid(this.ui.cancelReason)){
								this.ui.cancelReason=this.model.cancelReasonList.CommonCodeList.CommonCode[0];
							}*/
							
						}.bind(this),angular.noop);
					}
					
				} else {
					this.ui.showCancelReason = false;
				}
			},
			
            
            uiCancelReasonChange:function(){
                this.ui.showCancelReasonError = false;
            },
            
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({});
			},

			
			
			/**
			 *@description OnClick handler of "Apply" button, propagates the data back to invoking screen.
			 */
			uiSubmit : function () {
                var submit = true;
				var resultdata = {};
				resultdata = {
					data : {
						RecordShortage : {
							"ShortageReasonCode": this.ui.selectedShortageReasonCode,
						}
							}
						};
				if(this.ui.processType != "BACKROOM_PICK") {
					resultdata.data.RecordShortage.MarkAllLines = this.ui.markAllLines;
					if(this.ui.processType == "CUSTOMER_PICKUP" && this.ui.selectedShortageReasonCode === 'Cancel') {
                        if(!iscCore.isVoid(this.ui.cancelReason)){
                            resultdata.data.RecordShortage.CancellationReason = this.ui.cancelReason.CodeValue;
                        }
                        else{
                            submit = false;
                            this.ui.showCancelReasonError = true;
                            iscScrollUtility.scrollToElementWIthOffset(document.getElementById('model-body'), document.getElementById('cancelReasonContainer'), 0, 100);
                        }
					}
				}
				if(submit){
                    $uibModalInstance.close(resultdata);
                }
				
				
				
			}
			
			
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/**
 *@iscdoc viewmodal
 *@viewname store.views.shipment.common.staging-location.staging-location
 *@package store.views.shipment.common.staging-location
 *@class staging-location
 */
angular.module('store').controller('store.views.shipment.common.staging-location.staging-location',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{

  		model:{
  			 /**
	           *@description This model contains shipmnet details.
	           */
        "shipmentDetails":{}
		
  		},


  		mashupRefs : [
  		              {
  		            	  /**
	  		  	           *@description This mashup is used to get shipment hold location details and assigns mashup output to shipmentDetails model
	  		  	           */
			            	mashupRefId: 'getShipmentStagingLocationDetails',
						    mashupId: 'store.view.shipment.getShipmentStagingLocationDetails',
						    modelName : 'shipmentDetails'
		              },
		              {
		            	  /**
	  		  	           *@description This mashup is used to update hold location of the shipment.
	  		  	           */
  		            		mashupRefId: 'manageStagingLocationForShipment',
		            	  	mashupId: 'store.view.shipment.manageStagingLocationShipment'
		              },
		              {
		            	  /**
	  		  	           *@description This mashup is used to translate hold location barcode and if valid update hold location of shipment. if invalid, throws appropriate error.
	  		  	           */
	  		            	mashupRefId: 'translateBarCodeForStagingLocation',
			            	mashupId: 'store.view.shipment.translateBarCodeForStagingLocation'
			          },
			          {			
			        	  /**
	  		  	           *@description This mashup gets the rule value to enable staging location barcode translation.
	  		  	           */
	  		            	mashupRefId: 'getStagingLocationBarcodeTranslationRuleDetails',
  		            	  	mashupId: 'store.views.shipment.getStagingLocationBarcodeTranslationRuleDetails'
  		              } 
			],


			ui:{
				/**
				*@property {Boolean}  isStagingLocationTranlationRequired - True if staging location barcode translation is enabled otherwise false
				*/
				isStagingLocationTranlationRequired:false,
				/**
				*@property {Object}  stagingLocationErrors - object to show staging location validation errors
				*/
				stagingLocationErrors:{displayError:false,errorMsg:""}

			},
			
			  
			initialize : function(){
				
				var mashupArray = [];
				
				var shipment = modalInput.shipment;
				var shipmentInput = {Shipment:{ShipmentKey:shipment.Shipment.ShipmentKey}};
				
				mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentStagingLocationDetails', shipmentInput));
				mashupArray.push(iscMashup.getMashupRefObj(this,'getStagingLocationBarcodeTranslationRuleDetails', {Rule:{}}));
				 
				iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				
			},
			
			/**
			  *@description This method is a callback handler for mashup invoked in initialize method. 
			  * Sets isStagingLocationTranlationRequired boolean flag based on staging location barcode translation rule.
			  * 
			  *@param {Object} response - mashup output JSON object
			 */
			handleInitApiCalls : function(response) {
			
				var ruleDetails = iscMashup.getMashupOutput(response,"getStagingLocationBarcodeTranslationRuleDetails");
				this.ui.isStagingLocationTranlationRequired = (ruleDetails && ruleDetails.Rules.RuleSetValue == "Y") ? true : false;
			},
			
			/**
			  *@description This method updates the staging location on shipment. If staging location barcode translation rule is enabled then,
			  * stagingLocationToBeUpdated contains the barcode data and a custom mashup class handles barcode translation and updating hold location on shipment.
			  * 
			  * If the rule is disabled, then stagingLocationToBeUpdated contains the complete hold location model to be updated on shipment.
			  * 
			  *@param {String} stagingLocationToBeUpdated - staging location to be updated on the shipment
			  *@param {String} action -ADD or DELETE of staging location
			 */
			uiManageStagingLocation:function(stagingLocationToBeUpdated, action) {
	  			
	  			console.log("stagingLocationDetails - ",stagingLocationToBeUpdated);
	        	console.log("action - ",action);
	        	
	        	if(action == 'ADD' && this.ui.isStagingLocationTranlationRequired) {
	        		this.translateBarCodeAndSaveStagingLocation(stagingLocationToBeUpdated);
	        	} else {
	        		this.updateStagingLocationForShipment(stagingLocationToBeUpdated);
	        	}
	  		},
	  		
	  		/**
			  *@description This method updates the staging location on shipment. stagingLocationToBeUpdated contains the complete hold location model to be updated on shipment.
			  * 
			  *@param {String} stagingLocationToBeUpdated - staging location to be updated on the shipment
			 */
	  		updateStagingLocationForShipment:function(stagingLocationToBeUpdated) {
	  			
	  			var shipmentInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,HoldLocation:stagingLocationToBeUpdated}};
	        	iscMashup.callMashup(this,"manageStagingLocationForShipment",shipmentInput,{}).then(this.postStagingLocationUpdate.bind(this),function(errorResponse) {
            		that.handleMashupErrors(errorResponse);
            	}); 
		  		
	  		},
	  		
	  		/**
			  *@description This method is a error callback handler invoked in case of validation errors arised while saving the hold location on shipment.
			  * 
			  *@param {Object} errorResponse - mashup error JSON object
			 */
	  		handleMashupErrors:function(errorResponse) {
	  			
	  			
	  			var that = this;
	  			this.ui.stagingLocationErrors = {displayError:false,errorMsg:""};
	  			var errorMsg = errorResponse.Errors.Error[0].ErrorDescription;
	  			var errorCode = errorResponse.Errors.Error[0].ErrorCode;
	  			if(iscI18n.hasKey("apierror."+errorCode)){
	  				this.ui.stagingLocationErrors.displayError = true;
	  				this.ui.stagingLocationErrors.errorMsg = iscI18n.translate("apierror."+errorCode);
			
	  			} 
	  			
	  		},
	  		
	  		/**
			  *@description This method invoke mashup to translate hold location barcode data and updating hold location on shipment.
			  * 
			  *@param {String} barCodeData - scanned barcode data
			 */
	  		translateBarCodeAndSaveStagingLocation:function(barCodeData) {
	  			
	  			var that = this;
	  			var input = {BarCode:{BarCodeData: barCodeData,ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
             	iscMashup.callMashup(this,"translateBarCodeForStagingLocation",input,{}).then(this.handleStagingLocationBarcodeTranslation.bind(this),function(errorResponse) {
            		that.handleMashupErrors(errorResponse);
            	}); 
	  			
	  		},
	  		
	  		/**
			  *@description This is callback handler for translateBarCodeForStagingLocation mashup. This method updates the hold location list
			  * 
			  *@param {Object} response -mashup output JSON object
			 */
	  		handleStagingLocationBarcodeTranslation : function(response){
				var apiOutput = iscMashup.getMashupOutput(response,"translateBarCodeForStagingLocation");
				if(apiOutput.BarCode.Shipment){
					this.model.shipmentDetails.Shipment.HoldLocation = angular.copy(apiOutput.BarCode.Shipment.HoldLocation);
		  			$scope.stagingLocationForm.$setPristine();
		  			
		  			console.log("updated shipmentDetails - ",this.model.shipmentDetails);
				}
			},
	  		
			/**
			  *@description This is callback handler for manageStagingLocationForShipment mashup. This method updates the hold location list
			  * 
			  *@param {Object} response -mashup output JSON object
			 */
	  		postStagingLocationUpdate:function(response) {
	  			
	  			var updatedShipmentDetails = iscMashup.getMashupOutput(response,"manageStagingLocationForShipment");
	  			this.model.shipmentDetails.Shipment.HoldLocation = angular.copy(updatedShipmentDetails.Shipment.HoldLocation);
	  			$scope.stagingLocationForm.$setPristine();
	  			
	  			console.log("updated shipmentDetails - ",this.model.shipmentDetails);
	  		},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({});
			},

			
			
			/**
			 *@description OnClick handler of "Apply" button, propagates the data back to invoking screen.
			 */
			uiSubmit : function () {

				var resultdata = {};
				resultdata = {
					data : {
						StagingLocation : this.model.shipmentDetails.Shipment.HoldLocation
							}
						};

				
				$uibModalInstance.close(resultdata);
				
				
			}
			
			
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.containerpack.pack-order-list.pack-order-list
 *@package store.views.shipment.containerpack.pack-order-list
 *@class pack-order-list
 *@description Pack Order list screen is the list of Orders which are either Ready For packing or Packing in progress. 
 *
 */


angular.module("store").controller("store.views.shipment.containerpack.pack-order-list.pack-order-list",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscAppContext","iscStateParams","$timeout","iscShipment","iscShipmentStatus","$filter",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup, iscAppContext,iscStateParams,$timeout,iscShipment,iscShipmentStatus,$filter){
		
		iscScreen.initializeScreen($scope,{  
			model:{
				/**
				 *@description Holds the Output of getShipmentList API.
				 */
				shipmentList:{},
				
				/**
				 *@description Holds the filter criteria used to filter the shipment list.
				 */
				filterOptions:{}
			},
            mashupRefs:[
                {
                	/**
   				    *@iscdoc mashup
   		   			*@viewname store.views.shipment.containerpack.pack-order-list.pack-order-list
   		   			*@mashupid store.views.shipment.containerpack.getPackOrderList
 		   			*@mashuprefid getShipmentList
   		   			*@description Fetches the list of shipments based on the shipment status.
   		   			*/
                    mashupRefId: 'getShipmentList',
                    mashupId: 'store.views.shipment.containerpack.getPackOrderList',
                    modelName:'shipmentList',
                    isPaginated: true,
					pageSize : 15,//iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					appendPath : 'Shipments.Shipment'
                }
               
            ],
            ui : {
            	 /**
				 *@property {Boolean} apiCallInProgress - flag to identify if any mashup call is in progress.
				 */
                apiCallInProgress:false,
                
                /**
				 *@property {String} selectedShipmentKey - ShipmentKey of the selected shipment from the list.
				 */	
                selectedShipmentKey:"",
                
                /**
				 *@property {Number} recordShownCount - pageSize of the shipment list for continuous scrolling.
				 */	
                recordShownCount:15, 
                
                /**
				 *@property {Number} numOfOrders - Number of Shipments for a active tab.
				 */	
                numOfOrders : -1,
                
                /**
				 *@property {Object} statusArray - Status filter for Pack Orders.
				 */	
                statusArray:[],
                
                /**
				 *@property {String} sortOptions - Holds the sorting order of shipments.
				 */	
                sortOptions:'N'
                
			},
			
			/**
			 *@description Initializes the Pack order list screen by invoking the required mashup calls and reading the input data from the calling portlet.
			 */
			initialize : function(){
				
				var pickStatus = iscShipmentStatus.getShipmentStatusConfig("Pick");
				var packStatus = iscShipmentStatus.getShipmentStatusConfig("Pack");
				
				var params = iscStateParams.params.input.FilterOptions;
				 
				 if(params == 'All'){
					 this.model.filterOptions.inProgressFlag = 'Y';
					 this.model.filterOptions.readyForPackingFlag = 'Y';	 
					 this.ui.statusArray.push('1100.70.06.50');
					 this.ui.statusArray.push('1100.70.06.70');
				 }else if(params == 'InProgress'){
					 
					 this.model.filterOptions.inProgressFlag = 'Y';
					 this.model.filterOptions.readyForPackingFlag = 'N';
					 this.ui.statusArray.push('1100.70.06.70');
					 
				 }else if(params == 'NotStarted'){
					 
					 this.model.filterOptions.inProgressFlag = 'N';
					 this.model.filterOptions.readyForPackingFlag = 'Y';
					 this.ui.statusArray.push('1100.70.06.50');
					 
				 }
				 var apiInput = iscShipment.prepareGetShipmentListApiInput('N','SHP',this.ui.statusArray);
				 iscMashup.callMashup(this,"getShipmentList",apiInput,{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);
			},
			
			
			/**
			 *@description call back handler for  getShipmentList api.
			 */ 
           processPaginatedShipmentList:function(response) {
                
                this.ui.apiCallInProgress = false;
                var output = iscMashup.getMashupOutput(response,"getShipmentList");
                this.ui.numOfOrders =  $filter('number')(output.Page.Output.Shipments.TotalNumberOfRecords);
                if(output.Page.Output.Shipments.Shipment){
                	if(iscCore.isVoid(this.ui.selectedShipmentKey)){
	            		this.ui.selectedShipmentKey = output.Page.Output.Shipments.Shipment[0].ShipmentKey;
	            	}
                    this.processShipment(output.Page.Output.Shipments);
                }
            },
            
            /**
		     *@description Massage shipment object with UI attributes
			 */
            processShipment : function(shipments){
                for(var i = 0; i < shipments.Shipment.length; i++){
                    var shipment = shipments.Shipment[i];
                    
                    shipment.OrderNoToDisplay = iscShipment.getDisplayOrderNumber(shipment.DisplayOrderNo, '|', ', ', true);
                    shipment.StatusDescriptionToDisplay = iscShipment.getShipmentStatusDescription(shipment);
                    
                }
                
            },
          
            /**
			 *@description Identifies the Shipment chosen by the User from the list.
			 */
			uiSelectShipment : function(shipment){
				this.ui.selectedShipmentKey = shipment.ShipmentKey;
			},
            
			
			/**
			 *@description Validates if next page action should be performed by checking whether the last page is already fetched.
			 */
	        
	        uiOrderListScrollActionValidator : function(){
	        	return true;
	        },
	        
	        /**
			 *@description Gets the Paginated records for getShipmentList api when the next page action is performed.
			 */
	        uiGetNextPackingRecords: function() {
				if (this.model.shipmentList.Page.IsLastPage !=="N") {
					return;
				}
				this.ui.apiCallInProgress = true;
			    var apiInput = iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions,'SHP',this.ui.statusArray);
				iscMashup.callPaginatedMashup(this, "getShipmentList", apiInput, "NEXT", {})
                    .then(this.processPaginatedShipmentList.bind(this));
			},
			
			/**
			 *@description Opens Shipment summary screen for the selected shipment from the list.
			 */
             uiGoToShipmentSummary:function(shipment){
				
				iscState.goToState('shipmentsummary',{input:
				{
					Shipment:{ShipmentKey: shipment.ShipmentKey},
					flowName:'Pack'
				}
			},{}); 
				
				
			},
			
			 /**
			 *@description This method is invoked when filters are applied on the pack order list
			 */
			uiOnApplyFilter : function(data){
				
				  var readyForPacking = data.readyForPackingFlag;
				  var packingInProgress = data.inProgressFlag;
				  
				  this.ui.statusArray=[];
				  if(readyForPacking =='Y' && packingInProgress == 'Y'){
						 this.model.filterOptions.inProgressFlag = 'Y';
						 this.model.filterOptions.readyForPackingFlag = 'Y';	 
						 this.ui.statusArray.push('1100.70.06.50');
						 this.ui.statusArray.push('1100.70.06.70');
					 }else if(packingInProgress =='Y'){
						 
						 this.model.filterOptions.inProgressFlag = 'Y';
						 this.model.filterOptions.readyForPackingFlag = 'N';
						 this.ui.statusArray.push('1100.70.06.70');
						 
					 }else if(readyForPacking =='Y'){
						 
						 this.model.filterOptions.inProgressFlag = 'N';
						 this.model.filterOptions.readyForPackingFlag = 'Y';
						 this.ui.statusArray.push('1100.70.06.50');
						 
					 }
				     
				  this.model.shipmentList = {};
				  var apiInput = iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions,'SHP',this.ui.statusArray);
				  if(data.selectedShipmentCarrier){
					  apiInput.Shipment.SCAC=data.selectedShipmentCarrier;
				  }
				  iscMashup.callMashup(this,"getShipmentList",apiInput,{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);  
			},
			
			/**
			 *@description This method handles on click of cancel button in cart details screen.
			 */
			uiClose : function(){
				iscState.goToState("/home", {}, {});
            },
          
	        /**
			 *@description Opens pack flow for the selected shipment from the list.
			 */  
          uiOpenPackFlow : function(shipment){
        	  
        	  iscState.goToState("containerpack", {input:{"Shipment" : { "ShipmentKey" : shipment.ShipmentKey}}}, {});
          },
          
            /**
			 *@description This method handles Sorting of Shipments.
			 */
			uiApplySortOptions : function(data){
				  var apiInput = {};
	        		if(data.sortOption == 'NEW_TO_OLD'){
	        			this.ui.sortOptions = 'Y';
	    			}else if(data.sortOption == 'OLD_TO_NEW'){
	    				this.ui.sortOptions = 'N';
	    			}	
				
	        	apiInput=iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions,this.ui.activeTab,this.ui.statusArray);
				this.model.shipmentList = {};
				iscMashup.callMashup(this,"getShipmentList",apiInput,{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);  
			}
            
        });
    }]);
			 
			 
            

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/





/**
 *@iscdoc viewmodal
 *@viewname store.views.shipment.containerpack.pack-products.pack-container-products
 *@package store.views.shipment.containerpack.pack-products
 *@class pack-container-products
 */

(function(){
    'use strict';
    
    angular.module('store').controller('store.views.shipment.containerpack.pack-products.pack-container-products',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{


      /**
       *ModelList
       *Models that hold data
       * 
       */
  		model:{
            "shipmentLineDetails":{},
            "containerDetails":{}
  		},


  		/**
       *MashupRefs
       *array containing the list of mashups referred in this controller
       */
  		mashupRefs : [
  		        {
					
					/**
					*@description This mashup is used to get policy override reason list. 
					*/
					mashupRefId: 'getContainerShipmentLineList',
					mashupId: 'store.views.shipment.containerpack.getContainerShipmentLineList',
					modelName : 'shipmentLineDetails'								
				}
			],


			ui:{
				

			},
			
			  /**
	         * @scDoc Method
	         * @method initialize
	         * @description method to initialize the controller and loads the shipment lines for the container.
	         */
			initialize : function(){
				
                this.model.containerDetails = modalInput.containerDetails;
                this.ui.ScacIntegrationRequired = modalInput.ScacIntegrationRequired;
				
                var getShipmentLineListInput = {
                    ShipmentLine:{
                        ShipmentContainerKey : modalInput.ShipmentContainerKey,
                        ShipmentKey : modalInput.ShipmentKey,
                        ContainerDetails:{
                            ContainerDetail:{
                                Container:{
                                    ShipmentContainerKey : modalInput.ShipmentContainerKey,
                                    ShipmentKey : modalInput.ShipmentKey
                                }
                                
                            }
                        }
                    }
                };
                
				iscMashup.callMashup(this,'getContainerShipmentLineList',getShipmentLineListInput,{});
				
			},
			
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({});
			}

			
			
			
  	});
		
		
		
	}
]);
    
})();




/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

(function(){
    'use strict';
    
    angular.module('store').controller('store.views.shipment.containerpack.pack-products.pack-products',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscModal','iscI18n','iscState','$filter','iscShipment','iscStateParams','$locale','iscPrint','$timeout',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscModal, iscI18n, iscState,$filter,iscShipment,iscStateParams,$locale,iscPrint,$timeout) {		
		iscWizard.initializeWizardPage($scope,{      
      model:{
    	  
    	  'shipmentDetails':{},
    	  'activeContainerModel':{},
    	  'scanItemInput':{
			  'barcodeData':''
		  },
		  'lastProductScanned':{},
		  'shipmentLineList':{},
          'shipmentContainerDetails':{},
          'containerContents':{}
    	  
      },
  		mashupRefs : [
  		              
						{
							 mashupRefId: 'getShipmentDetails',
							 mashupId: 'store.views.shipment.containerpack.getShipmentDetails'
						
						},
		  		        {
							mashupRefId: 'getContainerShipmentLineList',
							mashupId: 'store.views.shipment.containerpack.getContainerShipmentLineList',
							modelName : 'containerContents'								
						},
						{
							 mashupRefId: 'registerBarcodeForPacking',
							 mashupId: 'store.views.shipment.containerpack.registerBarCodeForPacking'
							
						},
						{
							 mashupRefId: 'getShipmentLineList',
							 mashupId: 'store.views.shipment.containerpack.getShipmentLineList'
							
						},
						{
							mashupRefId: 'containerPack_packAll',
							mashupId: 'store.views.shipment.containerpack.packAll'
							
						},
                        {
                            mashupRefId: 'getShipmentContainerDetails',
                            mashupId: 'store.views.shipment.containerpack.getShipmentContainerList',
                            modelName:'shipmentContainerDetails'
                        },
                        {
                            mashupRefId: 'generateSCM',
                            mashupId: 'store.views.shipment.containerpack.generateSCM'
                        },
                        {
                            mashupRefId: 'deleteContainer',
                            mashupId: 'store.views.shipment.containerpack.deleteContainer'
                        },
                        {
                        	mashupRefId: 'manualPackForNewContainer',
                            mashupId: 'store.views.shipment.containerpack.manualPackForNewContainer'
                        	
                        },
                        {   mashupRefId: 'manualPackForExistingContainer',
                            mashupId: 'store.views.shipment.containerpack.manualPackForExistingContainer'
                        },
                        {
                        	mashupRefId: 'recordShortage',
                            mashupId: 'store.views.shipment.containerpack.recordShortage' 
                        	
                        },
                        {
                            mashupRefId: 'generateTrackingNoAndPrintLabel',
                            mashupId: 'store.views.shipment.containerpack.StoreContainerLabel_94'
                        },
                        {
                            mashupRefId: 'reprintLabel',
                            mashupId: 'store.views.shipment.containerpack.StoreLabelReprint_94'
                        },
                        {
                            mashupRefId: 'getUpdatedContainerDetails',
                            mashupId: 'store.views.shipment.containerpack.getShipmentContainerDetails'
                        },
                        {
                            mashupRefId:"changeShipmentForWeight",
                            mashupId:"store.views.shipment.containerpack.changeShipmentForWeight"
                            
                        },
                        {
                        	mashupRefId: 'getShipmentContainerList_NoScac',
                            mashupId: 'store.views.shipment.containerpack.getShipmentContainerList_NoScac'
                        },
                        {
                        	mashupRefId: 'getShipmentContainerList_Scac',
                            mashupId: 'store.views.shipment.containerpack.getShipmentContainerList_Scac'
                        },
                        {
                        	mashupRefId: 'finishpack_changeShipment',
                            mashupId: 'store.views.shipment.containerpack.finishpack_changeShipment'
                        	
                        },
                        {
                        	mashupRefId: 'voidTrackingNo',
                            mashupId: 'store.views.shipment.containerpack.voidTrackingNo'
                        	
                        },
                        {
                        	mashupRefId: 'print_packSlip',
                            mashupId: 'store.views.shipment.containerpack.print_packSlip'
                        	
                        }
  		],
  		/**
  		 *@scDoc UI
  		 */
  		ui:{
  			
  			showLastScannedProduct : false,
  			showScanAccordion: true,
  			showProductsAccordion:true,
			slaImageFullURL:'',
			activeTab: '0',
			focusOnFirstLine:true,
			selectedShipmentLineKey:"",
            contianerView:false,
  			containerShownCount:5,
            showProductView:false,
            showPackageView:true,
            totalNoOfpackages:0,
            productLineFilter:"IN_PROGRESS",
			shipmentPreviewTemplate:'store/views/shipment/containerpack/pack-products/shipment-popover-preview.tpl.html',
            isManualPackEnabled:iscResourcePermission.hasPermission("WSC000066"),
            isUnpackAllowed:iscResourcePermission.hasPermission("WSC000063"),
            isPrintAllowed:iscResourcePermission.hasPermission("WSC000064"),
            currentlySelectedShipmentLine:"",
            ONE_QUANTITY:1,
            currentContainerDetails:{},
            draftContainerDetails:{},
            productsToPack: 0,
            selectDraftContainer: false,
            allProductsPacked: false,
            showSuccessMessagePanel: false,
            displayStatus:iscI18n.translate('containerPack.LABEL_1100_70_06_70'),
            successPanelMessage: iscI18n.translate('containerPack.Message_PackCompleted'),
            callGetContainerShipmentLineList : false,
            scacIntegrationReqd:'N'
  		},
  		
  		_isInitSelection: true,
  		
			initialize : function(){
				
				var pageInput = iscWizard.getWizardPageInput();
			    var apiInput = {Shipment:{ShipmentKey:pageInput.Shipment.ShipmentKey}};
			    if(!iscCore.isVoid(pageInput.Shipment.ItemID)){
			    	apiInput.Shipment.ItemID = pageInput.Shipment.ItemID;
			    	apiInput.Shipment.UnitOfMeasure = pageInput.Shipment.UnitOfMeasure;
			    	apiInput.Shipment.Quantity = pageInput.Shipment.Quantity;
			    }
				//iscMashup.callMashup(this,"getShipmentDetails",apiInput,{}).then(this.processShipmentDetails.bind(this));
                
				var getShipmentLineListInput = {};
				getShipmentLineListInput.ShipmentLine = {}
				getShipmentLineListInput.ShipmentLine.ShipmentKey = pageInput.Shipment.ShipmentKey;//this.model.shipmentDetails.Shipment.ShipmentKey;
				
				//iscMashup.callMashup(this,"getShipmentLineList",getShipmentLineListInput,{}).then(this.processGetShipmentLineList.bind(this));

				//var pageInput = iscWizard.getWizardPageInput();
	            var getShipmentContainerDetailsApiInput = {Shipment:{ShipmentKey:pageInput.Shipment.ShipmentKey}};
	            //iscMashup.callMashup(this,"getShipmentContainerDetails",getShipmentContainerDetailsApiInput,{}).then(this.handleShipmentContainerDetails.bind(this));
	            
	        	var mashupArray = [];
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentDetails',apiInput));
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentLineList', getShipmentLineListInput));
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentContainerDetails', getShipmentContainerDetailsApiInput));
	        	//mashupArray.push(iscMashup.getMashupRefObj(this,'getNoteList', {"Note" : { "TableKey" : this.model.orderModel.Order.OrderHeaderKey}}));
	        	
	        	iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
	            
				
			},
			
			handleInitApiCalls : function(data){
				//var apiOutput = iscMashup.getMashupOutput(data,"getShipmentDetails");
				this.processShipmentDetails(data);
				
				//apiOutput = iscMashup.getMashupOutput(data,"getShipmentLineList");
				this.processGetShipmentLineList(data);
				
				//apiOutput = iscMashup.getMashupOutput(data,"getShipmentContainerDetails");
				this.handleShipmentContainerDetails(data);
				
			},			
			
  		   processShipmentDetails:function(response){

		   if (typeof String.prototype.startsWith != 'function' ) {
				  String.prototype.startsWith = function( str ) {
				    return (this.substring( 0, str.length ) === str);
				  };
			}
  			   
  			   
  			 var apiOutput = iscMashup.getMashupOutput(response,"getShipmentDetails");
		     this.model.shipmentDetails = apiOutput;
		     this.ui.scacIntegrationReqd = this.model.shipmentDetails.Shipment.ScacIntegrationRequired;
		     this.setSLAImageURL();
  			 this.initializeactiveContainerModel(apiOutput);
  			 //this.loadProductsView();
		     //this.model.shipmentDetails = apiOutput;
  			if((this.model.shipmentDetails.Shipment.Status.Status.startsWith("1100.70.06.50"))){
  				this.ui.displayStatus=iscI18n.translate('containerPack.LABEL_1100_70_06_50');
  			}
  			 
  			if(Number(apiOutput.Shipment.ShipmentContainerizedFlag) === 3){
  				this.ui.allProductsPacked = true;
  				this.ui.showSuccessMessagePanel = true;
				//var that = this;
				/*var message = iscI18n.translate('containerPack.Message_PackCompleted');
				iscModal.showSuccessMessage(message, {}).then(
						function(callBackData){
							that.ui.showPackageView = true;
	       				});*/
				
			}else{
				this.ui.allProductsPacked = false;
				this.ui.showSuccessMessagePanel = false;
				var pageInput = iscWizard.getWizardPageInput();
			    if(!iscCore.isVoid(pageInput.Shipment.ItemID)){
			    	 /*pack products*/
			    	// this.loadProductsView(this.ui.productLineFilter);
			    	 this.ui.showScanAccordion = false;
			    	 this.ui.showProductsAccordion = true;
			    }
			}
  			
  		   },

		 uiGetFormattedOrderNo:function(displayOrderNo) {
			return iscShipment.getDisplayOrderNumber(displayOrderNo,'|',', ',false);
		 },
  		  
  		 setSLAImageURL:function() {
	  			
	  			var slaImageRelativePath = this.model.shipmentDetails.Shipment.ImageUrl;
	  			if(slaImageRelativePath) {
					this.ui.slaImageFullURL =  iscShipment.getFullURLForImage(slaImageRelativePath);
	  			}
	  			
	  			//console.log("setSLAImageURL - ",this.ui.slaImageFullURL);
	  			
	  		},
	  		
  		 initializeactiveContainerModel:function(shipmentDetails){
  			 
  			
  			var activeContainerInfo = {};
			activeContainerInfo.Container = {};
				
  			if(shipmentDetails.Shipment.Containers.TotalNumberOfRecords == 0){
  				/*its a draft container*/
  				activeContainerInfo.Container.ContainerScm = shipmentDetails.Shipment.Container.ContainerScm;
  				activeContainerInfo.Container.ShipmentContainerKey = "";
  				activeContainerInfo.Container.ContainerNo = iscI18n.translate('containerPack.draftContainer');
  				activeContainerInfo.Container.ContainerDetails = {};
  				activeContainerInfo.Container.ContainerDetails.TotalNumberOfRecords = '0';
  				
  			}else{
  				activeContainerInfo.Container=shipmentDetails.Shipment.Containers.Container[0];
  				this.ui.totalNoOfpackages= shipmentDetails.Shipment.Containers.TotalNumberOfRecords;
  			}
  			this.model.activeContainerModel = activeContainerInfo; 
  			this.ui.currentContainerDetails = activeContainerInfo.Container;
  		 },
  		 
 		 
  		 uiScanProduct : function(barcodedata){
  			var mashupArray = [];
  			if(iscCore.isVoid(barcodedata)){
				iscModal.showErrorMessage(iscI18n.translate('containerPack.MSG_NoProductScanned'));
			}
  			else{
  				
	  			//var shipmentContainerKey = this.model.activeContainerModel.Container.ShipmentContainerKey;	
				var shipmentContainerKey = this.ui.currentContainerDetails.ShipmentContainerKey;
	  			var registerBarcodeForPackingInput = {'BarCode':{'BarCodeData':barcodedata}};
				registerBarcodeForPackingInput.BarCode.ShipmentContextualInfo={};
				registerBarcodeForPackingInput.BarCode.ShipmentContextualInfo.ShipmentKey=this.model.shipmentDetails.Shipment.ShipmentKey;
				
				var input = {};
				input.ShipmentLine = {}
				input.ShipmentLine.ShipmentKey = this.model.shipmentDetails.Shipment.ShipmentKey;
				
								
			
	  			if(iscCore.isVoid(shipmentContainerKey)){
					registerBarcodeForPackingInput.BarCode.ShipmentContextualInfo.ContainerScm=this.model.activeContainerModel.Container.ContainerScm;
		  			//iscMashup.callMashup(this,"registerBarcodeForPacking",registerBarcodeForPackingInput,{}).then(this.handleBarCodeScanning.bind(this,shipmentContainerKey));
					mashupArray.push(iscMashup.getMashupRefObj(this,'registerBarcodeForPacking',registerBarcodeForPackingInput));
					mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentLineList', input));
					iscMashup.callMashups(this,mashupArray,{}).then(this.handleBarCodeScanning.bind(this,shipmentContainerKey),angular.noop);
	  			}else{
	  				registerBarcodeForPackingInput.BarCode.ShipmentContextualInfo.ShipmentContainerKey=shipmentContainerKey;
	
	  	            var getShipmentLineListInput = {
	  	                    ShipmentLine:{
	  	                        ShipmentContainerKey : shipmentContainerKey,
	  	                        ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey,
	  	                        ContainerDetails:{
	  	                            ContainerDetail:{
	  	                                Container:{
	  	                                    ShipmentContainerKey : shipmentContainerKey,
	  	                                    ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey
	  	                                }
	  	                                
	  	                            }
	  	                        }
	  	                    }
	  	                };
	
	  	            
		        	mashupArray.push(iscMashup.getMashupRefObj(this,'registerBarcodeForPacking',registerBarcodeForPackingInput));
		        	mashupArray.push(iscMashup.getMashupRefObj(this,'getContainerShipmentLineList', getShipmentLineListInput));
		        	//mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentContainerDetails', getShipmentContainerDetailsApiInput));
		        	//mashupArray.push(iscMashup.getMashupRefObj(this,'getNoteList', {"Note" : { "TableKey" : this.model.orderModel.Order.OrderHeaderKey}}));
		        	mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentLineList', input));
		        	iscMashup.callMashups(this,mashupArray,{}).then(this.handleBarCodeScanning.bind(this,shipmentContainerKey),angular.noop);
	  	                
					//iscMashup.callMashup(this,'getContainerShipmentLineList',getShipmentLineListInput,{});
	  				
	  	  			//iscMashup.callMashup(this,"registerBarcodeForPacking",registerBarcodeForPackingInput,{}).then(this.handleScanOutput.bind(this,shipmentContainerKey));
	  				
	  			}
	  			this.model.scanItemInput.barcodeData = "";
  		   }
  		 },
  		 
  		 refreshCurrentContainerContents: function(){
            var getShipmentLineListInput = {
                    ShipmentLine:{
                        ShipmentContainerKey : this.ui.currentContainerDetails.ShipmentContainerKey,
                        ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey,
                        ContainerDetails:{
                            ContainerDetail:{
                                Container:{
                                    ShipmentContainerKey : this.ui.currentContainerDetails.ShipmentContainerKey,
                                    ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey
                                }
                                
                            }
                        }
                    }
                };

				iscMashup.callMashup(this,'getContainerShipmentLineList',getShipmentLineListInput,{});
  		 },
  		handleBarCodeScanning:function(shipmentContainerKey,response){
  			this.handleScanOutput(shipmentContainerKey,response);
  			if(!iscCore.isVoid(shipmentContainerKey)){
  				this.refreshCurrentContainerDetails(shipmentContainerKey);
  			}  			
  			//var apiOutput = iscMashup.getMashupOutput(response,"getContainerShipmentLineList");
  			
  			var shipmentLineKey = "";
  			var isPackComplete = 'N';
  			var apiOutput = iscMashup.getMashupOutput(response,"registerBarcodeForPacking");
  			var count = 0;
  			this.model.shipmentLineList = iscMashup.getMashupOutput(response,"getShipmentLineList");
  			if(!iscCore.isVoid(apiOutput.BarCode) && (apiOutput.BarCode.Shipment) && (apiOutput.BarCode.Shipment.ShipmentLine) && (apiOutput.BarCode.Shipment.ShipmentLine.ShipmentLineKey)){
  				
  				this.ui.selectedShipmentLineKey = apiOutput.BarCode.Shipment.ShipmentLine.ShipmentLineKey ;
  				this.ui.focusOnFirstLine = false;
  	  			shipmentLineKey = apiOutput.BarCode.Shipment.ShipmentLine.ShipmentLineKey ;
  	  			isPackComplete = apiOutput.BarCode.Shipment.ShipmentLine.IsPackComplete ;
  	  			
  	  			if(!iscCore.isVoid(this.model.shipmentLineList) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords)) {
  	  	  			var shipmentLines = [];
  	  	  			
  	  	  			shipmentLines = this.model.shipmentLineList.ShipmentLines;
  	  				
  	  	  			if(isPackComplete == 'Y'){
  	  	  	  			for(var i= 0; i < this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords; i++ ){
  	  	  	  				if(shipmentLineKey == this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].ShipmentLineKey){
  	  	  	  					this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].IsPackComplete = 'Y';
  	  	  	  				}
	  	  					if(!iscCore.isVoid(this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].IsPackComplete) && this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].IsPackComplete != 'Y'){
		  	  					count += 1;
		  	  				}else if(iscCore.isVoid(this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].IsPackComplete)){
		  	  					count += 1;
		  	  				}
  	  	  	  			}
  	  	  	  			this.ui.productsToPack = count;
  	  	  			}
  	  	  			
	  	  	  		for(var j= 0; j < this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords; j++ ){
	  	  	  			if(shipmentLineKey == this.model.shipmentLineList.ShipmentLines.ShipmentLine[j].ShipmentLineKey){
	  	  	  				var temp = this.model.shipmentLineList.ShipmentLines.ShipmentLine[j];
	  	  	  				this.model.shipmentLineList.ShipmentLines.ShipmentLine.splice(j,1);
	  	  	  				this.model.shipmentLineList.ShipmentLines.ShipmentLine.splice(0,0,temp);
	  	  	  			}	  	  	  			
	  	  	  		}
  	  			}
  	  			if(!iscCore.isVoid(apiOutput.BarCode.Shipment.ShipmentLine.Instructions) && !iscCore.isVoid(apiOutput.BarCode.Shipment.ShipmentLine.Instructions.Instruction)){
  	  				this.uiopenPackInstructions(apiOutput.BarCode.Shipment.ShipmentLine);
  	  			}
  			}
  		},

  		handleScanOutput: function(shipmentContainerKey,response){
  			
  			var apiOutput = iscMashup.getMashupOutput(response,"registerBarcodeForPacking");
  			if(iscCore.isVoid(shipmentContainerKey)){
  				
  				/*update the activeContainerModel model*/
  				this.updateActiveContainerModel(apiOutput);
  				
  			}
  			this.updateLastScannedProduct(apiOutput);
  			this.setPackableQty(this.model.lastProductScanned.ShipmentLine);
  			this.uiStampContainerDetailQty(this.model.lastProductScanned.ShipmentLine);
  			this.resetData();
  			if(Number(apiOutput.BarCode.Shipment.ShipmentContainerizedFlag) === 3){
  				this.ui.allProductsPacked = true;
  				this.ui.showSuccessMessagePanel = true;
				//var that = this;
				//var message = iscI18n.translate('containerPack.Message_PackCompleted');
				//iscModal.showSuccessMessage(message, {}).then({});
//						function(callBackData){
							/*paint packages view*/
	//						that.ui.showPackageView = true;
	  //     				}); 
			}else{
				this.ui.allProductsPacked = false;
				this.ui.showSuccessMessagePanel = false;
			}
  			var lineList = this.model.shipmentLineList.ShipmentLines ;
  			for(var i= 0; i < this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords; i++ ){
				if(!iscCore.isVoid(lineList.ShipmentLine[i].IsPackComplete) && lineList.ShipmentLine[i].IsPackComplete == 'Y' && lineList.ShipmentLine[i].ShortageQty > 0){	
					this.ui.allProductsPacked = false;
				}
  			}
  		},
  		uiDisplayContainerDetails : function(container){
  			
  			this.ui.currentContainerDetails = container;
  			
  			if(iscCore.isVoid(container.ShipmentContainerKey)){
  				this.model.containerContents.ShipmentLines.ShipmentLine = {};
                this.ui.currentContainerDetails.ContainerDetails = {};
                this.ui.currentContainerDetails.ContainerDetails.TotalNumberOfRecords = "0";
                this.ui.currentContainerDetails.ActualWeight = "0";
  			}else{
	  			var getShipmentLineListInput = {
	                    ShipmentLine:{
	                        ShipmentContainerKey : container.ShipmentContainerKey,
	                        ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey,
	                        ContainerDetails:{
	                            ContainerDetail:{
	                                Container:{
	                                    ShipmentContainerKey : container.ShipmentContainerKey,
	                                    ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey
	                                }
	                            }
	                        }
	                    }
	                };
	  			this.ui.selectDraftContainer = false;
  				iscMashup.callMashup(this,'getContainerShipmentLineList',getShipmentLineListInput,{});
  				this.refreshCurrentContainerDetails(container.ShipmentContainerKey);
  			}
  		},
  		 
  		updateActiveContainerModel :function(apiOutput){
  			
  			var containers =[] ;
  			if(!iscCore.isVoid(apiOutput.BarCode)){
  				containers= apiOutput.BarCode.Containers.Container;	
  			}else if(!iscCore.isVoid(apiOutput.Shipment)){
  				containers= apiOutput.Shipment.Containers.Container;
  			}
  			 
  			for(var j=0; j<containers.length; j++){
  				if(containers[j].ContainerScm == this.model.activeContainerModel.Container.ContainerScm ){
  					var activeContainerInfo = {};
  	  				activeContainerInfo.Container = {};
  	  			    activeContainerInfo.Container = containers[j];
  	  			    this.model.activeContainerModel = activeContainerInfo;
  	  			    //this.ui.currentContainerDetails = activeContainerInfo.Container;
  	  			    this.uiLoadShipmentContainerDetails();
  				}
  			}
  			this.model.shipmentContainerDetails.Containers.Container = containers;
  			this.ui.totalNoOfpackages = containers.length;
  		},
  		
  		
  		updateLastScannedProduct:function(apiOutput){
  		
  			var lastScannedproduct = {};
  			lastScannedproduct.ShipmentLine={};
  			lastScannedproduct.ShipmentLine=apiOutput.BarCode.Shipment.ShipmentLine;
  			this.model.lastProductScanned= lastScannedproduct;
  			this.ui.showLastScannedProduct = true;
  		},
  		
  		uiGetRemainingQuantity:function(shipmentLine) {
			
		 var quantity = Number(shipmentLine.Quantity);
       	 var backroomPickedQty = Number(shipmentLine.PlacedQuantity);
       	 var remainingQty =  quantity - backroomPickedQty;
       	 return remainingQty;
			
		},
		
		uiopenPackInstructions : function(shipmentLine){
			
			
			var messageOption = { 
					options: { 
						headerText: iscI18n.translate('containerPack.TITLE_PackInstructions'),
					    headerIconCss: "app-glyphicons app-icon-package_30"	
					},
					
				};
			
		var instructionText =  shipmentLine.Instructions.Instruction.InstructionText;
		
		if(iscCore.isVoid(instructionText)){
			instructionText = shipmentLine.Instructions.Instruction[0].InstructionText
		}
		
		iscModal.showInfoMessage(instructionText,messageOption);	
		},
		

		
		loadProductsView : function(filterData){
			
			
			var getShipmentLineListInput = {};
			getShipmentLineListInput.ShipmentLine = {}
			getShipmentLineListInput.ShipmentLine.ShipmentContainerKey = this.model.activeContainerModel.Container.ShipmentContainerKey;
			getShipmentLineListInput.ShipmentLine.ShipmentKey = this.model.shipmentDetails.Shipment.ShipmentKey;
			
			if(!iscCore.isVoid(filterData) && filterData == 'IN_PROGRESS'){
				getShipmentLineListInput.ShipmentLine.IsPackComplete='Y';
				getShipmentLineListInput.ShipmentLine.IsPackCompleteQryType='NE';
			}
			iscMashup.callMashup(this,"getShipmentLineList",getShipmentLineListInput,{}).then(this.processGetShipmentLineList.bind(this));
		},
  		
		processGetShipmentLineList:function(response){
			//this._isInitSelection = true;
			var apiOutput = iscMashup.getMashupOutput(response,"getShipmentLineList");
			this.model.shipmentLineList= {};
			this.model.shipmentLineList = apiOutput;
			this.ui.allProductsPacked = true;
			var count = 0;
			if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.ShipmentLines) && !iscCore.isVoid(apiOutput.ShipmentLines.ShipmentLine) && !iscCore.isVoid(apiOutput.ShipmentLines.ShipmentLine.length) ){
				for(var i = 0; i < apiOutput.ShipmentLines.ShipmentLine.length ; i++){
					if(!iscCore.isVoid(apiOutput.ShipmentLines.ShipmentLine[i].IsPackComplete) && apiOutput.ShipmentLines.ShipmentLine[i].IsPackComplete == 'Y' && apiOutput.ShipmentLines.ShipmentLine[i].ShortageQty == 0){
						
					}else{
						this.ui.allProductsPacked = false;
						break;
					}
				}
				for(var i = 0; i < apiOutput.ShipmentLines.ShipmentLine.length ; i++){
					if(!iscCore.isVoid(apiOutput.ShipmentLines.ShipmentLine[i].IsPackComplete) && apiOutput.ShipmentLines.ShipmentLine[i].IsPackComplete != 'Y'){
						count += 1;
					}else if(iscCore.isVoid(apiOutput.ShipmentLines.ShipmentLine[i].IsPackComplete)){
						count += 1;
					}
				}
				if(this._isInitSelection == true){
					for(var i = 0; i < apiOutput.ShipmentLines.ShipmentLine.length ; i++){
						if(!iscCore.isVoid(apiOutput.ShipmentLines.ShipmentLine[i].IsPackComplete)){
							if(apiOutput.ShipmentLines.ShipmentLine[i].IsPackComplete != 'Y'){ //ui.selectedShipmentLineKey
								this.ui.selectedShipmentLineKey=apiOutput.ShipmentLines.ShipmentLine[i].ShipmentLineKey;
								break;
							}else if(apiOutput.ShipmentLines.ShipmentLine[i].IsPackComplete == 'Y' && apiOutput.ShipmentLines.ShipmentLine[i].ShortageQty != '0'){
								this.ui.selectedShipmentLineKey=apiOutput.ShipmentLines.ShipmentLine[i].ShipmentLineKey;
								break;
							}
						}else{
							this.ui.selectedShipmentLineKey=apiOutput.ShipmentLines.ShipmentLine[i].ShipmentLineKey;
							break;
						}
					}
					this._isInitSelection = false;
				}else{
					//this.ui.selectedShipmentLineKey
					for(var k = 0; k < this.model.shipmentLineList.ShipmentLines.ShipmentLine.length ; k++){
						if(!iscCore.isVoid(this.model.shipmentLineList.ShipmentLines.ShipmentLine[k].ShipmentLineKey)){
							if(this.model.shipmentLineList.ShipmentLines.ShipmentLine[k].ShipmentLineKey == this.ui.selectedShipmentLineKey){
		  	  	  				var temp = this.model.shipmentLineList.ShipmentLines.ShipmentLine[k];
		  	  	  				this.model.shipmentLineList.ShipmentLines.ShipmentLine.splice(k,1);
		  	  	  				this.model.shipmentLineList.ShipmentLines.ShipmentLine.splice(0,0,temp);
							}
						}
					}
				}
				this.ui.productsToPack = count;
			}
			//this.ui.selectedShipmentLineKey="";
			this.ui.currentlySelectedShipmentLine = this.model.shipmentLineList.ShipmentLines.ShipmentLine[0];
			if(iscCore.isVoid(this.ui.selectedShipmentLineKey) || (this.ui.selectedShipmentLineKey == "")){
				this.ui.focusOnFirstLine = true;
			}
			this.setPackableQty(this.ui.currentlySelectedShipmentLine);
			this.uiStampContainerDetailQty(this.ui.currentlySelectedShipmentLine);
		},
		
		
		expandOrCollapseScanView:function(showScanAccordion){
			
			if(showScanAccordion === true){
			   this.ui.showLastScannedProduct = false;
			   this.model.lastProductScanned={}
			}
			
		},
  		 
		expandOrCollapseProductsView:function(showProductAccordion){
            
			if(showProductAccordion === true){
				this.loadProductsView(this.ui.productLineFilter);
			}
		},
		
		uiOnProductsTabSelection:function(){
			if(this.ui.showScanAccordion === true){
				 this.ui.showLastScannedProduct = false;
				 this.model.lastProductScanned={}
			}
			else if(this.ui.showProductsAccordion === true){
				this.resetShipmentLineSelection();
				this.loadProductsView(this.ui.productLineFilter);
			 }
			 
		},
		
		uiPackAll : function(){
			
			//var shipmentContainerKey = this.model.activeContainerModel.Container.ShipmentContainerKey;	
			var shipmentContainerKey = this.ui.currentContainerDetails.ShipmentContainerKey;
			var packAllInputModel = {};
			var mashupArray = [];
			
			packAllInputModel.Shipment= {};
			packAllInputModel.Shipment.ShipmentKey= this.model.shipmentDetails.Shipment.ShipmentKey;
			packAllInputModel.Shipment.Containers = {};
			packAllInputModel.Shipment.Containers.Container={};
			packAllInputModel.Shipment.Containers.Container.ContainerScm = this.ui.currentContainerDetails.ContainerScm;
			packAllInputModel.Shipment.Containers.Container.ShipmentContainerKey = shipmentContainerKey;
			//iscMashup.callMashup(this,"containerPack_packAll",packAllInputModel,{}).then(this.handlePackAll.bind(this,shipmentContainerKey));
			mashupArray.push(iscMashup.getMashupRefObj(this,'containerPack_packAll',packAllInputModel));
			
            var getShipmentLineListInput = {
                    ShipmentLine:{
                        ShipmentContainerKey : this.ui.currentContainerDetails.ShipmentContainerKey,
                        ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey,
                        ContainerDetails:{
                            ContainerDetail:{
                                Container:{
                                    ShipmentContainerKey : this.ui.currentContainerDetails.ShipmentContainerKey,
                                    ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey
                                }
                                
                            }
                        }
                    }
                };
            mashupArray.push(iscMashup.getMashupRefObj(this,'getContainerShipmentLineList',getShipmentLineListInput));
				//iscMashup.callMashup(this,'getContainerShipmentLineList',getShipmentLineListInput,{}).then(this.sampleHandler.bind(this));			
            iscMashup.callMashups(this,mashupArray,{}).then(this.handlePackAll.bind(this,shipmentContainerKey),angular.noop);
		},
		
		handlePackAll : function(shipmentContainerKey,response){
			var apiOutput = iscMashup.getMashupOutput(response,"containerPack_packAll");
			
			if(!iscCore.isVoid(apiOutput.Shipment.AlreadyPacked)){
				iscModal.showErrorMessage(iscI18n.translate('containerPack.MessageAllLinesPacked'));
				
			}else{
					if(iscCore.isVoid(shipmentContainerKey)){
		  				this.updateActiveContainerModel(apiOutput);
		  			} 
					if(Number(apiOutput.Shipment.ShipmentContainerizedFlag) === 3){
						this.ui.showSuccessMessagePanel = true;
						/*var that = this;
						that.ui.allProductsPacked = true;
						var message = iscI18n.translate('containerPack.Message_PackCompleted');
						iscModal.showSuccessMessage(message, {}).then(
    							function(callBackData){
    								that.ui.showPackageView = true;
			       				});*/ 
					}else{
						this.ui.allProductsPacked = false;
						this.ui.showSuccessMessagePanel = false;
					}
					this.refreshCurrentContainerDetails(shipmentContainerKey);
					this.loadProductsView();
					//this.refreshCurrentContainerContents();
			}
			
		},
		
		
		checkForScreenDirtyBeforeClose:function() {
  			
  			var that = this;
  			var isDirty = $scope.containerPackForm.$dirty;
        	if(isDirty) {
        		iscModal.showConfirmationMessage(iscI18n.translate('globals.MSG_Screen_dirty')).then(function(action){
        			if(action === 'YES'){
        				iscWizard.closeWizard();
        			}
        		});
        	} else {
        		
        		iscModal.showConfirmationMessage(iscI18n.translate('containerPack.MSG_CancelWarningMessage')).then(function(action){
        			if(action === 'YES'){
        				iscWizard.closeWizard();
        			}
        		});
        		
        	}
  			
  		},
  		 
  		uiCancel:function() {
  			this.checkForScreenDirtyBeforeClose();
  		},
  		
		
		uiApplyProductListFilter : function(callBackData){
			
 			//$scope.backroomPickForm.$setPristine();
			this.ui.productLineFilter = callBackData.filter;
  			this.loadProductsView(callBackData.filter);
  			
  		},
  		
  		handleRefreshProductList:function(mashupRefId, response) {
  			
  			this.model.shipmentLineList = iscMashup.getMashupOutput(response,mashupRefId);
  			this.setPickableShipmentLineCount(this.model.shipmentLineList);
  			this.ui.focusOnFirstLine = true;
  			this.ui.selectedShipmentLineKey = '';
  			
  		},
  		
  		handleWizardBack:function() {
  			
  			var isFirstPage = iscWizard.isFirstPage();
  			var isDirty = $scope.containerPackForm.$dirty;	
			 if(isFirstPage){
				 if(isDirty){
					iscModal.showConfirmationMessage('globals.MSG_Screen_dirty').then(
							function(callBackAction){
								if(callBackAction === 'YES'){
									iscWizard.closeWizard();
								}
		       				});
					return true;
				 }else{
						iscModal.showConfirmationMessage('containerPack.MSG_CancelWarningMessage').then(
								function(callBackAction){
									if(callBackAction === 'YES'){
										iscWizard.closeWizard();
									}
			       				});
						return true;
				 }
			} else {
				return false;
			}
 		},
  		
  		uiSelectShipmentLine:function(shipmentLine) {
  			this._isInitSelection = false;
  			this.ui.selectedShipmentLineKey = shipmentLine.ShipmentLineKey;
			this.ui.focusOnFirstLine = false;
			this.ui.currentlySelectedShipmentLine = shipmentLine;
			this.setPackableQty(shipmentLine);
			this.uiStampContainerDetailQty(shipmentLine);
  		},
  		
  		
  		resetShipmentLineSelection : function(){
  			this.ui.selectedShipmentLineKey = "";
  			this.ui.focusOnFirstLine = true;
  		},
  		
        uiLoadShipmentContainerDetails : function(){
            this.ui.contianerView = true;
            var pageInput = iscWizard.getWizardPageInput();
            var apiInput = {Shipment:{ShipmentKey:pageInput.Shipment.ShipmentKey}};
            iscMashup.callMashup(this,"getShipmentContainerDetails",apiInput,{}).then(this.handleShipmentContainerDetails.bind(this),angular.noop);   
        },    
           
        handleShipmentContainerDetails : function(controllerData){
            var output = iscMashup.getMashupOutput(controllerData,"getShipmentContainerDetails");
            if(!iscCore.isVoid(this.ui.draftContainerDetails) && !iscCore.isVoid(this.ui.draftContainerDetails.ContainerNo)){
            	//this.model.shipmentContainerDetails.Containers.Container.push(this.ui.draftContainerDetails);
            	if(iscCore.isVoid(this.model.shipmentContainerDetails.Containers)){
            		this.model.shipmentContainerDetails.Containers = {};
            		this.model.shipmentContainerDetails.Containers.Container = [];
            	}else if(iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container)){
            		this.model.shipmentContainerDetails.Containers.Container = [];
            	}
            	this.model.shipmentContainerDetails.Containers.Container.splice(0,0,this.ui.draftContainerDetails);
            	this.ui.draftContainerDetails = {};
            }
            var pageInput = iscWizard.getWizardPageInput();
            if(!iscCore.isVoid(output.Containers.Container)){
                for(var i=0;i<output.Containers.Container.length;i++){
                    this.updateContainerFlags(output.Containers.Container[i]);
                }
                this.ui.currentContainerDetails = output.Containers.Container[0];
                if(!iscCore.isVoid(output.Containers.Container[0].ShipmentContainerKey)){
                    var getShipmentLineListInput = {
                            ShipmentLine:{
                                ShipmentContainerKey : output.Containers.Container[0].ShipmentContainerKey,
                                ShipmentKey : pageInput.Shipment.ShipmentKey,
                                ContainerDetails:{
                                    ContainerDetail:{
                                        Container:{
                                            ShipmentContainerKey : output.Containers.Container[0].ShipmentContainerKey,
                                            ShipmentKey : pageInput.Shipment.ShipmentKey
                                        }
                                        
                                    }
                                }
                            }
                        };
        				iscMashup.callMashup(this,'getContainerShipmentLineList',getShipmentLineListInput,{});
                }else{
                	this.model.containerContents = {};
                }
            }
            else{
                output.Containers.Container = [];
            }
            
        },
            
        uiValidateWeightAndUpdate : function(weightField,container){

            var formats = $locale.NUMBER_FORMATS;
            var newWeight = container.ActualWeight;
            if(newWeight){
                newWeight=newWeight.replace(formats.GROUP_SEP, '');
            }
            if(!iscCore.isVoid(newWeight) && weightField.oldWeight !== newWeight ){
                //&& Number(container.ActualWeight) != Number(container.ActualWeight)
                weightField.oldWeight = newWeight ;
            
                container.ActualWeight = newWeight;
                if(weightField.oldWeight !== newWeight){
                    weightField.oldWeight = newWeight ;
                }
                if(!iscCore.isVoid(container) && !iscCore.isVoid(container.TrackingNo)){
                	if(container.TrackingNo != ''){
                		var input = {
                                Container:{
                                    ShipmentContainerKey : container.ShipmentContainerKey,
                                    ShipmentKey : container.ShipmentKey
                                }
                            };
                		iscMashup.callMashup(this,"voidTrackingNo",input,{}).then(this.updateWeightAfterVoiding.bind(this,container));
                	}else{
                		this.saveContainerWeight(container);
                	}
                }else{
            		this.saveContainerWeight(container);
                }
            }
        },
        
        updateWeightAfterVoiding : function (container,response){
        	this.saveContainerWeight(container);
        },

        saveContainerWeight : function(container){
            
            if(Number(container.ContainerDetails.TotalNumberOfRecords) ===0 ){
                iscModal.showErrorMessage("containerPack.Message_EmptyContainer");
            }
            else{
                if(iscCore.isVoid(container.ActualWeight)){
                    iscModal.showErrorMessage("containerPack.Message_NoPackageWeight");
                }
                else if(Number(container.ActualWeight) < 0){
                    iscModal.showErrorMessage("containerPack.Message_NegativePackageWeight");
                }
                /*else if(){
                   //Check for quantity has changed or not 
                }*/
                else{
                    var input = {
                        Shipment:{
                            ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,
                            Containers:{
                                Container:{
                                    ActualWeight:container.ActualWeight,
                                    ShipmentContainerKey:container.ShipmentContainerKey,
                                    ActualWeightUOM:container.ActualWeightUOM
                                
                                }
                            }
                        }
                    };
                    if(this.ui.scacIntegrationReqd==="N"){
                        input.Shipment.Containers.Container.IsPackProcessComplete = "Y";
                    }else{
                        if(!iscCore.isVoid(container.TrackingNo)){
                            input.Shipment.CallVoidTrackingNo="Y";
                        }
                    }
                    
                    
                    var container_input = {
                        Container:{
                            ShipmentContainerKey : container.ShipmentContainerKey,
                            ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey
                        }
                    };
                    
                    var mashupArray = [];
                    mashupArray.push(iscMashup.getMashupRefObj(this,'changeShipmentForWeight',input));
                    mashupArray.push(iscMashup.getMashupRefObj(this,'getUpdatedContainerDetails',container_input));

                    iscMashup.callMashups(this,mashupArray,{})
                        .then(function(controllerData){
                            this.handleContainerWeightUpdate(controllerData,container);
                        }.bind(this),angular.noop);

                    
                } 
                    
            }
            
        },
        //model.shipmentDetails.Shipment.ScacIntegrationRequired === 'Y'
        uiShowTrackingNo : function(){
        	if(!iscCore.isVoid(this.model.shipmentDetails) && !iscCore.isVoid(this.model.shipmentDetails.Shipment) && !iscCore.isVoid(this.model.shipmentDetails.Shipment.ScacIntegrationRequired) ){
        		if(this.model.shipmentDetails.Shipment.ScacIntegrationRequired == 'Y'){
        			if(!iscCore.isVoid(this.ui.currentContainerDetails.TrackingNo) && this.ui.currentContainerDetails.TrackingNo != ''){
        				return true;
        			}
        		}
        	}
        	return false;
        },
        uiScrollLeft: function(){
        	//console.log(document.getElementById('containers').scrollLeft);
        	document.getElementById('containers').scrollLeft -= 120;
        	
        },
        uiScrollRight: function(){
        	//console.log(document.getElementById('containers').scrollLeft);
        	document.getElementById('containers').scrollLeft += 120;
        },        
        handleContainerWeightUpdate : function(controllerData,container){
            var containerOutput = iscMashup.getMashupOutput(controllerData,"getUpdatedContainerDetails");
            
            container.ActualWeight = containerOutput.Container.ActualWeight;
            container.TrackingNo = containerOutput.Container.TrackingNo;
            container.TrackingURL = containerOutput.Container.TrackingURL;
            
            this.updateContainerFlags(container);
            $scope.containerPackForm.$setPristine();
        },
        
        refreshCurrentContainerDetails : function (ShipmentContainerKey){
            var container_input = {
                    Container:{
                        ShipmentContainerKey : ShipmentContainerKey,
                        ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey
                    }
                };
            
            iscMashup.callMashup(this,"getUpdatedContainerDetails",container_input,{}).then(this.handleRefreshCurrentContainerDetails.bind(this));
        	
        },
        
        handleRefreshCurrentContainerDetails: function(response){
            var containerOutput = iscMashup.getMashupOutput(response,"getUpdatedContainerDetails");
            
            if(!iscCore.isVoid(containerOutput) && !iscCore.isVoid(containerOutput.Container)){
            	this.ui.currentContainerDetails = containerOutput.Container;
            }
        },
            
        uiShowWeightUpdateButton : function(weightField,container){
            var formats = $locale.NUMBER_FORMATS;
            var newWeight = container.ActualWeight;
  			if(newWeight){
  				newWeight=newWeight.replace(formats.GROUP_SEP, '');
            }
  			if((!iscCore.isVoid(newWeight)) && Number(weightField.oldWeight) !== Number(newWeight))
                container.showWeightUpdate ='Y';
            else
                container.showWeightUpdate ='N';
        },

        /**
         *@iscdoc uimethod
         *@viewname store.views.order.cart-details.cart-details
         *@methodname uiHideUpdateButton.
         *@description hides Update button for quantity field.
         *@param {Object} orderlineModel - orderLine data as JSON object. 
         */

        uiHideWeightUpdateButton : function(container){
            container.showWeightUpdate ='N';
        },
  		
        uiValidateWeight : function(validationResponseObj, angularErrorObject, modelValue, viewValue){
				            	
            /* check if the DataType Validation is successful */

            if(!iscCore.isVoid(angularErrorObject) && angularErrorObject.iscDatatypeValidator)
                return validationResponseObj;
            else
            var isWeight_a_Number = !isNaN(viewValue);
            if(!iscCore.isBooleanTrue(isWeight_a_Number) || iscCore.isVoid(viewValue)){
                validationResponseObj.booleanResponse = !isNaN(viewValue) && !iscCore.isVoid(viewValue);
                validationResponseObj.errorMesssage = iscI18n.translate("containerPack.ERROR_invalid_input");
            }

            return validationResponseObj;
        },
            
       
            
        uiAddNewContainer : function(){
        	
        	if(!iscCore.isVoid(this.ui.currentContainerDetails) && !iscCore.isVoid(this.ui.currentContainerDetails.ShipmentContainerKey) && !(this.ui.currentContainerDetails.ShipmentContainerKey == "") ){
        		if(this.model.shipmentContainerDetails.Containers.Container.length > 1){
            		if(this.isDraftContainerPresent()){
            			//this.uiDisplayContainerDetails(this.model.shipmentContainerDetails.Containers.Container
            			if(!iscCore.isVoid(this.model.shipmentContainerDetails) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers) && 
            					!iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container.length) ){
            				if(this.model.shipmentContainerDetails.Containers.Container.length > 1){
            					this.uiDisplayContainerDetails(this.model.shipmentContainerDetails.Containers.Container[0]);
            				}
            			}
            			document.getElementById('containers').scrollLeft = 0;
            		}else{
                        var apiInput = {
                                generateSCM : {
                                    ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,
                                    EnterpriseCode:this.model.shipmentDetails.Shipment.EnterpriseCode
                                }
                                
                            };
                        iscMashup.callMashup(this,"generateSCM",apiInput,{}).then(this.handleGenerateSCM.bind(this),angular.noop);  
            		}
        		}else{
                    var apiInput = {
                            generateSCM : {
                                ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,
                                EnterpriseCode:this.model.shipmentDetails.Shipment.EnterpriseCode
                            }
                            
                        };
                    iscMashup.callMashup(this,"generateSCM",apiInput,{}).then(this.handleGenerateSCM.bind(this),angular.noop);  
        		}
        	}
        },
        isDraftContainerPresent : function(){
        	var containerList = this.model.shipmentContainerDetails.Containers.Container;
        	
        	for(var i=0;i<containerList.length;i++){
        		if(containerList[i].ShipmentContainerKey == ""){
        			return true;
        		}
        	}
        },
        handleGenerateSCM : function(controllerData){
            
            var output = iscMashup.getMashupOutput(controllerData,"generateSCM");
            
            if(!iscCore.isVoid(iscCore.getValueFromJsonPath(output,"SCMs.SCM.SCM"))){
                this.model.activeContainerModel = {
                    Container:{}
                };
                this.model.activeContainerModel.Container.ContainerScm = output.SCMs.SCM.SCM;
                this.model.activeContainerModel.Container.ContainerNo = iscI18n.translate('containerPack.draftContainer');
                this.ui.currentContainerDetails = this.model.activeContainerModel.Container;
                this.ui.currentContainerDetails.ShipmentContainerKey = "";
                this.ui.selectDraftContainer = true;
                
                if(iscCore.isVoid(iscCore.getValueFromJsonPath(this.model.shipmentContainerDetails,"Containers.Container"))){
                    this.model.shipmentContainerDetails.Containers = {
                        Container : []
                    }
                }
                
                //this.model.shipmentContainerDetails.Containers.Container.push(this.model.activeContainerModel.Container);
                this.model.shipmentContainerDetails.Containers.Container.unshift(this.model.activeContainerModel.Container);
                this.model.shipmentContainerDetails.Containers.TotalNumberOfRecords = this.model.shipmentContainerDetails.Containers.Container.length;
                
                this.ui.showPackageView = false;
                this.ui.showProductView = true;
                this.uiOnProductsTabSelection();
                this.model.containerContents.ShipmentLines.ShipmentLine = {};
                this.ui.currentContainerDetails.ContainerDetails = {};
                this.ui.currentContainerDetails.ContainerDetails.TotalNumberOfRecords = "0";
                this.ui.currentContainerDetails.ActualWeight = "0";
                
                
            }
            
        },
            
        updateContainerFlags : function(container){
            
            if(this.ui.scacIntegrationReqd === "Y"){
                if(!iscCore.isVoid(container.TrackingNo)){
                    container.isComplete = true;
                }
                else{
                    container.isComplete = false;
                }
            }
            else{
                if(!iscCore.isVoid(container.ActualWeight) && Number(container.ActualWeight) > 0){
                    container.isComplete = true;
                }
                else{
                    container.isComplete = false;
                }
            }
            container.showWeightUpdate = "N"; 
            
        },
        
        uiGenerateTrackingNo : function(container){
        	if(!iscCore.isVoid(container.ShipmentContainerKey)){
                if(iscCore.isVoid(container.ActualWeight) || Number(container.ActualWeight) === 0){
                    iscModal.showErrorMessage("containerPack.Message_ContainerNotweighed");
                }
                else{
                    var input = {
                        Container:{
                            ShipmentContainerKey : container.ShipmentContainerKey,
                            ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey
                        }
                    }

                    var mashupArray = [];
                    mashupArray.push(iscMashup.getMashupRefObj(this,'generateTrackingNoAndPrintLabel',input));
                    mashupArray.push(iscMashup.getMashupRefObj(this,'getUpdatedContainerDetails',input));

                    iscMashup.callMashups(this,mashupArray,{})
                        .then(function(controllerData){
                            this.handleGenerateTrackingNo(controllerData,container);
                        }.bind(this),angular.noop);
                }
        	}
        },
            
            
        handleGenerateTrackingNo : function(controllerData,container){
            var containerOutput = iscMashup.getMashupOutput(controllerData,"getUpdatedContainerDetails");
            var labelOutput = iscMashup.getMashupOutput(controllerData,"generateTrackingNoAndPrintLabel");
            
            this.updateContainerFlags(containerOutput.Container); 
            
            if(!iscCore.isVoid(containerOutput.Container.TrackingNo)){
                container.TrackingNo = containerOutput.Container.TrackingNo;
                container.TrackingURL = containerOutput.Container.TrackingURL;
            }
            this.ui.currentContainerDetails = container;
            if(!iscCore.isVoid(labelOutput.Output.out)){
            	iscShipment.decodeShippingLabelURL(labelOutput);
                $timeout(function(){
                    iscPrint.printHtmlOutput(labelOutput);
                    //highlight panel
                },0);
            }
            else{
                iscModal.showErrorMessage("containerPack.Message_Print_failure");
                //highlight panel
            }
            
            
        },
        
        uiIsScacIntegrationRequired: function(){
        	if(!iscCore.isVoid(this.model.shipmentDetails) && !iscCore.isVoid(this.model.shipmentDetails.Shipment) && !iscCore.isVoid(this.model.shipmentDetails.Shipment.ScacIntegrationRequired) ){
        		return (this.model.shipmentDetails.Shipment.ScacIntegrationRequired == 'Y'?true:false);
        	}else{
        		return false;
        	}
        	
        },
        uiNoInstructions : function(shipmentLine){
        	if(!iscCore.isVoid(shipmentLine.Instructions) && !iscCore.isVoid(shipmentLine.Instructions.Instruction)){
        		return false;
        	}else{
        		return true;
        	}        	
        },     
        uiPackagesCount : function(count){
        	var newCount = Number(count);
        	
        	if(!iscCore.isVoid(this.model.shipmentContainerDetails) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container)){
            	for(var i = 0; i < this.model.shipmentContainerDetails.Containers.Container.length; i++){
            		if(this.model.shipmentContainerDetails.Containers.Container[i].ContainerNo == iscI18n.translate('containerPack.draftContainer')){
            			newCount = newCount + 1 ;
            		}
            	}
        	}
        	
        	return newCount;
        },
        uiViewContainerProducts:function(container){
            var that = this;
            var input = {
                     modalInput: function(){
                        return {
                            ShipmentContainerKey : container.ShipmentContainerKey,
                            ShipmentKey : that.model.shipmentDetails.Shipment.ShipmentKey,
                            containerDetails : container,
                            ScacIntegrationRequired : that.model.shipmentDetails.Shipment.ScacIntegrationRequired
                        };
                    }   

                };

            //iscModal.openModal('store.views.shipment.containerpack.pack-products.pack-container-products',input,{})
            
            
        },
        uiAddMoreContainerProducts:function(container){
            var active = this.selectActiveContainer(container.ShipmentContainerKey,this.model.shipmentContainerDetails);
            this.setActiveContainer(active);
            //goto products views
            this.ui.showPackageView = false;
            this.ui.showProductView = true;
            this.uiOnProductsTabSelection();
        },
        
        uiUnpackContainerProducts:function(container){
        	var draftContainerPresent = false;
        	this.model.shipmentContainerDetails.Containers.Container
        	if(!iscCore.isVoid(this.model.shipmentContainerDetails) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container.length) ){
        		if(this.model.shipmentContainerDetails.Containers.Container.length > 0){
        			for(var i = 0; i < Number(this.model.shipmentContainerDetails.Containers.Container.length); i++){
        				if(this.model.shipmentContainerDetails.Containers.Container[i].ContainerNo == iscI18n.translate('containerPack.draftContainer')){
        					this.ui.draftContainerDetails = this.model.shipmentContainerDetails.Containers.Container[i];
        					draftContainerPresent = true;
        					break;
        				}
        			}
        		}
        	}
        	if(!iscCore.isVoid(container.ShipmentContainerKey)){
                iscModal.showConfirmationMessage("containerPack.Message_Delete_container")
                .then(
                    function(action){
                        if(action === "YES"){
                            var input = {
                                Shipment:{
                                    ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,
                                    Containers:{
                                        Container:{
                                            ShipmentContainerKey:container.ShipmentContainerKey
                                        }
                                    },
                                    isDraftContainer : container.ShipmentContainerKey === ""?"Y":"N"
                                }
                            };
                            this.ui.deletedShipmentContainerKey = container.ShipmentContainerKey;
                            iscMashup.callMashup(this,"deleteContainer",input,{})
                                .then(this.handleDeleteContainer.bind(this),angular.noop);
                        }
                    }.bind(this),angular.noop
                );
        	}
        },
        removeEmptyContainer:function(container){
        	if(!iscCore.isVoid(container.ShipmentContainerKey)){
                var input = {
                    Shipment:{
                        ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,
                        Containers:{
                            Container:{
                                ShipmentContainerKey:container.ShipmentContainerKey
                            }
                        },
                        isDraftContainer : container.ShipmentContainerKey === ""?"Y":"N"
                    }
                };
                this.ui.deletedShipmentContainerKey = container.ShipmentContainerKey;
                iscMashup.callMashup(this,"deleteContainer",input,{});
                    //.then(this.handleDeleteContainer.bind(this),angular.noop);
        	}
        },
        
        uiIsGenerateTrackingNoDisabled : function(container){
            return !iscCore.isVoid(container.TrackingNo);
        }, 
        
        uiIsReprintDisabled : function(container){
            return iscCore.isVoid(container.TrackingNo);
        },
        
        uiReprintContainerLabel : function(container){
            
            if(!iscCore.isVoid(container.TrackingNo)){
                var input = {
                    Container:{
                        ShipmentContainerKey : container.ShipmentContainerKey,
                        ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey
                    }
                }
                iscMashup.callMashup(this,"reprintLabel",input,{})
                    .then(function(controllerData){
                        this.handleReprintLabel(controllerData,container);
                    }.bind(this),angular.noop);
            }
            
            
        },
        
        handleReprintLabel : function(controllerData,container){
            var labelOutput = iscMashup.getMashupOutput(controllerData,"reprintLabel");
            
            if(!iscCore.isVoid(labelOutput.Output.out)){
            	iscShipment.decodeShippingLabelURL(labelOutput);
                $timeout(function(){
                    iscPrint.printHtmlOutput(labelOutput);
                    //highlight panel
                },0);
            }
            else{
                iscModal.showErrorMessage("containerPack.Message_Print_failure");
                //highlight panel
            }
        },
  		
		handleDeleteContainer : function(controllerData){
            var ouput = iscMashup.getMashupOutput(controllerData,"deleteContainer");
            if(Number(ouput.Shipment.ShipmentContainerizedFlag) === 1){
                if(this.model.activeContainerModel.Container.ShipmentContainerKey === ""){
                    var active = this.selectActiveContainer("",this.model.shipmentContainerDetails);
                    this.setActiveContainer(active);
                    //this.model.shipmentContainerDetails.Containers.Container.push(this.model.activeContainerModel.Container);
                    this.ui.selectDraftContainer = true;
                    this.ui.currentContainerDetails = this.model.activeContainerModel.Container;
                    this.ui.currentContainerDetails.ShipmentContainerKey = "";
                    this.model.containerContents.ShipmentLines.ShipmentLine = {};
                    this.ui.currentContainerDetails.ContainerDetails.TotalNumberOfRecords = "0";
                    this.ui.currentContainerDetails.ActualWeight = "0";
                }
                else{
                    this.model.activeContainerModel = {
                        Container:ouput.Shipment.Containers.Container[0]
                    };
                    
                    this.model.activeContainerModel.Container.ContainerNo = iscI18n.translate('containerPack.draftContainer');
                    this.model.activeContainerModel.Container.ShipmentContainerKey = "";

                    if(iscCore.isVoid(iscCore.getValueFromJsonPath(this.model.shipmentContainerDetails,"Containers.Container"))){
                        this.model.shipmentContainerDetails.Containers = {
                            Container : []
                        }
                    }

                    this.model.shipmentContainerDetails.Containers.Container.push(this.model.activeContainerModel.Container);
                    this.model.shipmentContainerDetails.Containers.TotalNumberOfRecords = this.model.shipmentContainerDetails.Containers.Container.length;
                    this.model.containerContents.ShipmentLines.ShipmentLine = {};
                    this.ui.currentContainerDetails = this.model.activeContainerModel.Container;
                    this.ui.currentContainerDetails.ContainerDetails = {};
                    this.ui.currentContainerDetails.ContainerDetails.TotalNumberOfRecords = "0";
                    this.ui.currentContainerDetails.ActualWeight = "0";
                    this.ui.selectDraftContainer = true;
                }
            }
            else{
                if(this.model.activeContainerModel.Container.ShipmentContainerKey === this.ui.deletedShipmentContainerKey){
                    if(ouput.Shipment.Containers.Container.length > 0){
                        this.model.activeContainerModel = {};
                        this.model.activeContainerModel.Container = ouput.Shipment.Containers.Container[0];
                        this.ui.currentContainerDetails = ouput.Shipment.Containers.Container[0];
                    }
                }
                
            }
            this.ui.showSuccessMessagePanel = false;
            this.model.shipmentContainerDetails.Containers.TotalNumberOfRecords = ouput.Shipment.Containers.TotalNumberOfRecords;
            //update container view
            this.ui.totalNoOfpackages = this.model.shipmentContainerDetails.Containers.TotalNumberOfRecords;
            this.uiLoadShipmentContainerDetails();
            this.loadProductsView();
        },
            
            
        selectActiveContainer : function(shipmentContainerKey,containerList){
            var activeContainer = null;
            
            for(var i=0;i<containerList.Containers.Container.length;i++){
                var containrInfo = containerList.Containers.Container[i];
                
                if(iscCore.isVoid(shipmentContainerKey) && iscCore.isVoid(containrInfo.ShipmentContainerKey)){
                    activeContainer = {}
                    activeContainer.Container = containrInfo;
                    break;
                }
                else if(shipmentContainerKey === containrInfo.ShipmentContainerKey){
                    activeContainer = {}
                    activeContainer.Container = containrInfo;
                    break;
                }
                
            }
            return activeContainer;
            
        },
            
        uiOnWeightFieldFocus:function (weightField,containerModel) {
			
			var formats = ""; 
			if($scope.containerPackForm.$valid)
				formats = $locale.NUMBER_FORMATS;
			
  			var oldWeight = containerModel.ActualWeight;
  			if(!iscCore.isVoid(oldWeight) && formats){
  				oldWeight=oldWeight.replace(formats.GROUP_SEP, '');		
  			}
  			if(containerModel.showWeightUpdate !=='Y'){
  				weightField.oldWeight = oldWeight;
  			}
			
	    },
            
        setActiveContainer : function(containerInfo){
            this.model.activeContainerModel = containerInfo;
        },
        
        uiIsShipmentLinePackComplete:function(shipmentLine) {
			return (shipmentLine.IsPackComplete == 'Y'?true:false);
		},
		
		
		uiOnQuantityFieldFocus :function (qtyField,shipmentLineModel) {
			
			var formats = ""; 
			if($scope.containerPackForm.$valid)
				formats = $locale.NUMBER_FORMATS;
			
  			var oldQuantity = shipmentLineModel.ContainerDetail.QuantityPlaced;
  			if(!iscCore.isVoid(oldQuantity) && formats){
  				oldQuantity=oldQuantity.replace(formats.GROUP_SEP, '');		
  			}
  			if(shipmentLineModel.showQtyUpdate !=='Y'){
  				qtyField.oldQty = oldQuantity;
  			}
			
	    },
	    
	    uiShowUpdateButton : function(qtyField,shipmentLineModel){
				
		    var formats = $locale.NUMBER_FORMATS;
  			var newQuantity = shipmentLineModel.ContainerDetail.QuantityPlaced;
  			if(newQuantity)
  				newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
  			if((!iscCore.isVoid(newQuantity)) && qtyField.oldQty !== newQuantity && Number(shipmentLineModel.ContainerDetail.QuantityPlaced) != Number(shipmentLineModel.ContainerDetail.EditableQtyPlaced))
  				shipmentLineModel.showQtyUpdate ='Y';
  			else
  				shipmentLineModel.showQtyUpdate ='N';
  			
  		},
  		
  		
  		uiHideUpdateButton : function(shipmentLineModel){
  			shipmentLineModel.showQtyUpdate ='N';
  		},
		
  		uiValidateQuantityAndUpdate : function(qtyField,shipmentLine){
				
				
  			var that = this;
  			var formats = $locale.NUMBER_FORMATS;
  			var newQuantity = shipmentLine.ContainerDetail.QuantityPlaced;
  			if(newQuantity) {
  				newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
  			}
  			if(!iscCore.isVoid(newQuantity) && qtyField.oldQty !== newQuantity && Number(shipmentLine.ContainerDetail.QuantityPlaced) != Number(shipmentLine.ContainerDetail.EditableQtyPlaced)){
  				
  				qtyField.oldQty = newQuantity ;
  				
	  			if (typeof newQuantity == "string") {
	  				newQuantity = parseInt(newQuantity,10);
	  			}
	  			var totalQty = Number(shipmentLine.PlacedQuantity);
	  			var containerDetailQty = 0;
	  			if(!iscCore.isVoid(shipmentLine.ContainerDetail)) {
		        	 containerDetailQty = Number(shipmentLine.ContainerDetail.EditableQtyPlaced);
				 } 
		         
		         var packedQtyinOtherContainer = totalQty -containerDetailQty;

		         var maxPackableQty = Number(shipmentLine.Quantity) - packedQtyinOtherContainer;	  			
	  			
		  		if(newQuantity > maxPackableQty) {
		  			iscModal.showErrorMessage(iscI18n.translate('containerPack.MSG_MaxQuantityError'));
		  		}else{
		  			this.callChangeShipmentForManualPack(shipmentLine,newQuantity);
		  		}	  		  			
	  			//this.callChangeShipmentForManualPack(shipmentLine,newQuantity);
	  			
	  			
  			}
	  								  			
  		},
  		uiShowBorderForHoldLocation : function(){
  			//(model.shipmentDetails.Shipment.HoldLocation == '')
  			if(!iscCore.isVoid(this.model.shipmentDetails.Shipment) && !iscCore.isVoid(this.model.shipmentDetails.Shipment.HoldLocation)){
  				if(this.model.shipmentDetails.Shipment.HoldLocation != ''){
  					return false;
  				}else{
  					return true;
  				}
  			}else{
  				return true;
  			}
  		},
  		uiValidateQuantity : function(validationResponseObj, angularErrorObject, modelValue, viewValue){
           	
           	/* check if the DataType Validation is successful */
		    
  			
           	if(!iscCore.isVoid(angularErrorObject) && angularErrorObject.iscDatatypeValidator)
           		return validationResponseObj;
           	else
           	var isQty_a_Number = !isNaN(viewValue);
           	if(!iscCore.isBooleanTrue(isQty_a_Number) || iscCore.isVoid(viewValue)){
           		validationResponseObj.booleanResponse = !isNaN(viewValue) && !iscCore.isVoid(viewValue);
	            validationResponseObj.errorMesssage = iscI18n.translate("containerPack.ERROR_invalid_input");
   			} 
           	/*else{
   				
   				var maxQuantity = 0;
   				if(this.ui.showScanAccordion){
   					 maxQuantity = this.model.lastProductScanned.ShipmentLine.maxPackableQty;
   				}else{
   	   				 maxQuantity = this.ui.currentlySelectedShipmentLine.maxPackableQty;
   				}
   				if(Number(modelValue) > maxQuantity) {
		  			validationResponseObj.booleanResponse = false;
	            	validationResponseObj.errorMesssage = iscI18n.translate("containerPack.MSG_MaxQuantityError");
		  		}
   			}*/
           	return validationResponseObj;
           },
           
  		
  		uiStampContainerDetailQty:function(shipmentLine) {
			if(iscCore.isVoid(shipmentLine.ContainerDetail)) {
				shipmentLine.ContainerDetail ={};
				shipmentLine.ContainerDetail.QuantityPlaced =0;
			} 
			shipmentLine.ContainerDetail.EditableQtyPlaced = angular.copy(shipmentLine.ContainerDetail.QuantityPlaced);
			shipmentLine.showQtyUpdate = "N";
		},
		
		setPackableQty:function(shipmentLine){
			
			 var totalPlacedqty = Number(shipmentLine.PlacedQuantity);
	         var containerDetailQty = 0;
	         if(!iscCore.isVoid(shipmentLine.ContainerDetail)) {
	        	 containerDetailQty = Number(shipmentLine.ContainerDetail.QuantityPlaced);
			 } 
	         
	         var packedQtyinOtherContainer = totalPlacedqty -containerDetailQty;

	         var maxPackableQty = Number(shipmentLine.Quantity) - packedQtyinOtherContainer;
	         shipmentLine.maxPackableQty = maxPackableQty;
		},
		
		uiDecreaseQty:function(shipmentLine) {
  			
  			var containerDetailQty = Number(shipmentLine.ContainerDetail.EditableQtyPlaced);
  			var newContainerDetailQty = containerDetailQty - this.ui.ONE_QUANTITY;
  			
  			if(newContainerDetailQty < 0) {
  				iscModal.showErrorMessage(iscI18n.translate('containerPack.MSG_NegativeQtyError'));
  			} 
  			
  			this.callChangeShipmentForManualPack(shipmentLine,newContainerDetailQty);
  		},
  		
  		uiIncreaseQty:function(shipmentLine) {
  			
  			var containerDetailQty = Number(shipmentLine.ContainerDetail.EditableQtyPlaced);
  			var newContainerDetailQty = containerDetailQty + this.ui.ONE_QUANTITY;
	  		var maxQuantity = Number(shipmentLine.maxPackableQty);
	  			
	  		if(newContainerDetailQty > maxQuantity) {
	  			iscModal.showErrorMessage(iscI18n.translate('containerPack.MSG_MaxQuantityError'));
	  		}
	  		
	  		this.callChangeShipmentForManualPack(shipmentLine,newContainerDetailQty);
  			

  		},
  		
  		uiPackOneQty:function(shipmentLine) {
  			var containerDetailQty = 0;
  			
  			var currentContainerLines;
  			
  			if (!iscCore.isVoid(this.model.containerContents) && !iscCore.isVoid(this.model.containerContents.ShipmentLines) && !iscCore.isVoid(this.model.containerContents.ShipmentLines.ShipmentLine) ){
  				for(var i=0;i<this.model.containerContents.ShipmentLines.ShipmentLine.length;i++){
  					if(shipmentLine.ShipmentLineKey == this.model.containerContents.ShipmentLines.ShipmentLine[i].ShipmentLineKey){
  						containerDetailQty = Number(this.model.containerContents.ShipmentLines.ShipmentLine[i].ContainerDetail.QuantityPlaced) ;
  						break;
  					}
  				}
  			}
  			var newContainerDetailQty = containerDetailQty + this.ui.ONE_QUANTITY;
  			this.callChangeShipmentForManualPack(shipmentLine,newContainerDetailQty);

  			if(!iscCore.isVoid(shipmentLine.Instructions) && !iscCore.isVoid(shipmentLine.Instructions.Instruction)){
  				this.uiopenPackInstructions(shipmentLine);
  			}
  		},
  		
  		callChangeShipmentForManualPack:function(shipmentLine,newContainerDetailQty) {
  		    
  			//var shipmentContainerKey = this.model.activeContainerModel.Container.ShipmentContainerKey;	
  			var shipmentContainerKey =  this.ui.currentContainerDetails.ShipmentContainerKey;
  			var apiInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
  			apiInput.Shipment.Containers = {};
  			apiInput.Shipment.Containers.Container = {};
  			var mashupRefId = null;
  			
  			if(iscCore.isVoid(shipmentContainerKey)){
  				apiInput.Shipment.Containers.Container.ContainerScm=this.model.activeContainerModel.Container.ContainerScm;
  				mashupRefId = "manualPackForNewContainer";
  			}else{
  				apiInput.Shipment.Containers.Container.ShipmentContainerKey=shipmentContainerKey;
  				if(this.ui.showProductsAccordion){
  					apiInput.Shipment.Containers.Container.VoidTrackingNo='Y';
  				}
  				mashupRefId = "manualPackForExistingContainer";
  			}
  			apiInput.Shipment.Containers.Container.ContainerDetails = {};
  			apiInput.Shipment.Containers.Container.ContainerDetails.ContainerDetail ={};
  			apiInput.Shipment.Containers.Container.ContainerDetails.ContainerDetail.Quantity = newContainerDetailQty;
  			apiInput.Shipment.Containers.Container.ContainerDetails.ContainerDetail.QuantityPlaced =newContainerDetailQty;
  			apiInput.Shipment.Containers.Container.ContainerDetails.ContainerDetail.ShipmentLineKey =shipmentLine.ShipmentLineKey;
  			this.ui.selectedShipmentLineKey = shipmentLine.ShipmentLineKey;
  			this.ui.focusOnFirstLine = false;
  			
  //		    iscMashup.callMashup(this,mashupRefId,apiInput,{}).then(this.postPackQuantityUpdate.bind(this,shipmentContainerKey,mashupRefId));
  			var getContainerShipmentLineListInput = {};
        	var mashupArray = [];
        	mashupArray.push(iscMashup.getMashupRefObj(this,mashupRefId,apiInput));
        	
  			if(iscCore.isVoid(shipmentContainerKey)){
  				this.ui.callGetContainerShipmentLineList = true;
  				
  			}else{
  				getContainerShipmentLineListInput = {
  	                    ShipmentLine:{
  	                        ShipmentContainerKey : shipmentContainerKey,
  	                        ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey,
  	                        ContainerDetails:{
  	                            ContainerDetail:{
  	                                Container:{
  	                                    ShipmentContainerKey : shipmentContainerKey,
  	                                    ShipmentKey : this.model.shipmentDetails.Shipment.ShipmentKey
  	                                }
  	                                
  	                            }
  	                        }
  	                    }
  	                };
  	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getContainerShipmentLineList', getContainerShipmentLineListInput));
  			}
  			
			var getShipmentLineListInput = {};
			getShipmentLineListInput.ShipmentLine = {}
			getShipmentLineListInput.ShipmentLine.ShipmentKey = this.model.shipmentDetails.Shipment.ShipmentKey;//this.model.shipmentDetails.Shipment.ShipmentKey;
			
			//iscMashup.callMashup(this,"getShipmentLineList",getShipmentLineListInput,{}).then(this.processGetShipmentLineList.bind(this));
  			
                
//			iscMashup.callMashup(this,'getContainerShipmentLineList',getShipmentLineListInput,{});
        	mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentLineList', getShipmentLineListInput));
        	
        	iscMashup.callMashups(this,mashupArray,{}).then(this.handleMultiApiCalls.bind(this,shipmentContainerKey,mashupRefId),angular.noop);
            
  		},

  		handleMultiApiCalls : function(shipmentContainerKey,mashupRefId,response){
			this.postPackQuantityUpdate(shipmentContainerKey,mashupRefId,response);
			this.processGetShipmentLineList(response);
			this.refreshCurrentContainerDetails(shipmentContainerKey); 
		},			
  		
  		
  		postPackQuantityUpdate : function(shipmentContainerKey,mashupRefId,response){
			var apiOutput = iscMashup.getMashupOutput(response,mashupRefId);
			
					if(iscCore.isVoid(shipmentContainerKey)){
		  				this.updateActiveContainerModel(apiOutput);
		  			}
					if(this.ui.showScanAccordion){
						this.model.lastProductScanned.ShipmentLine = apiOutput.Shipment.ShipmentLine;
						this.model.lastProductScanned.ShipmentLine.showQtyUpdate ='N';
						this.setPackableQty(this.model.lastProductScanned.ShipmentLine);
  	  			        this.uiStampContainerDetailQty(this.model.lastProductScanned.ShipmentLine);
	   				}else{
	   					this.updateShipmentLineListModel(apiOutput.Shipment);
	   				}
		  			this.resetData();
		  			
					if(Number(apiOutput.Shipment.ShipmentContainerizedFlag) === 3){
						this.ui.showSuccessMessagePanel = true;
						var that = this;
						that.ui.allProductsPacked = true;
						/*var message = iscI18n.translate('containerPack.Message_PackCompleted');
						iscModal.showSuccessMessage(message, {}).then(
    							function(callBackData){
    								that.ui.showPackageView = true;
			       				});*/ 
					}else{
						this.ui.allProductsPacked = false;
						this.ui.showSuccessMessagePanel = false;
					}
			
		},
		
		updateShipmentLineListModel:function(updatedShipmentModel) {
  			
  			if(!iscCore.isVoid(this.model.shipmentLineList) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines) && !iscCore.isVoid(this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords)) {
  	       		 
  	       		 var numOfShipmentLines = this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords;
  	       		 for(var i=0;i<numOfShipmentLines;i++) {
  	       			 var shipmentLine = this.model.shipmentLineList.ShipmentLines.ShipmentLine[i];
  	       			 if(!iscCore.isVoid(shipmentLine) && shipmentLine.ShipmentLineKey == updatedShipmentModel.ShipmentLine.ShipmentLineKey) {
  	       			    this.model.shipmentLineList.ShipmentLines.ShipmentLine[i] = updatedShipmentModel.ShipmentLine;
  	       			    this.ui.currentlySelectedShipmentLine = updatedShipmentModel.ShipmentLine;
  	       				this.model.shipmentLineList.ShipmentLines.ShipmentLine[i].showQtyUpdate ='N';
  	       			    this.setPackableQty(updatedShipmentModel.ShipmentLine);
  	  			        this.uiStampContainerDetailQty(updatedShipmentModel.ShipmentLine);
  	       				break;
  	       			 }
  	       		 }
  	       	 }
  			
  		},
		
  		resetData:function() {
  			if($scope.containerPackForm) {
  				$scope.containerPackForm.$setPristine();
  			}
  			if($scope.quantityForm) {
  				$scope.quantityForm.$setPristine();
  			}
  			if($scope.scanQuantityForm) {
  				$scope.scanQuantityForm.$setPristine();
  			}
  		},
  		
  		uiOpenRecordShortagePopup:function(shipmentLine) {
  			
  			
  			var that=this;
			var popInput = {}
			popInput.codeType = 'YCD_PACK_SHORT_RESOL';
			popInput.shipmentLine = angular.copy(shipmentLine);

			popInput.shipmentLine.DisplayQty = shipmentLine.PlacedQuantity;
			popInput.shipmentLine.OrderLine = shipmentLine.OrderLine;
			popInput.shipmentLine.DisplayTotalQty = Number(shipmentLine.Quantity);
			popInput.shipmentLine.DisplayShortQty = Number(shipmentLine.Quantity) - Number(shipmentLine.PlacedQuantity);
			
			var recordShortagePopupInput = {
					 modalInput: function(){
		      			return popInput;
		      		}   
				   
				};
			
			iscModal.openModal('store.views.shipment.common.record-shortage.record-shortage',recordShortagePopupInput,{}).then(function(callBackData){
				if(callBackData.data !== null && callBackData.data !== undefined){
					that.recordShortageForShipmentLine.call(that,callBackData.data,shipmentLine);
				}
			});
  			
  		},
  		
  		
  		recordShortageForShipmentLine:function(shortagePopupData,shipmentLineToBeShorted) {
  			
  			//var shipmentContainerKey = this.model.activeContainerModel.Container.ShipmentContainerKey;
  			var shipmentContainerKey = this.ui.currentContainerDetails.ShipmentContainerKey;
  			var recordShortageApiInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
  			recordShortageApiInput.Shipment.ShipmentLines = {};
  			recordShortageApiInput.Shipment.ShipmentLines.ShipmentLine = {};
  			recordShortageApiInput.Shipment.ShipmentLines.ShipmentLine.ShipmentLineKey = shipmentLineToBeShorted.ShipmentLineKey;
  			recordShortageApiInput.Shipment.ShipmentLines.ShipmentLine.ShortageReason = shortagePopupData.RecordShortage.ShortageReasonCode;
  			if(!iscCore.isVoid(shipmentContainerKey)){
  				recordShortageApiInput.Shipment.ShipmentContainerKey = shipmentContainerKey;
  			}
  			
  			iscMashup.callMashup(this,"recordShortage",recordShortageApiInput,{}).then(this.postRecordShortageForShipmentLine.bind(this));
  		},
  		
  		postRecordShortageForShipmentLine:function(response) {
  			
  			var apiOutput = iscMashup.getMashupOutput(response,"recordShortage");
             if(apiOutput.Shipment.Status == '9000'){
            	 /*shipment is cancelled*/
            	var that = this;
  				var message = iscI18n.translate('containerPack.MSG_ShipmentCancelled');
  				iscModal.showInfoMessage(message, {}).then(
  						function(callBackData){
  							/*go to shipmentsummary*/
  							iscState.goToState("shipmentsummary", {
  								input: {
  									Shipment: {
  										ShipmentKey: that.model.shipmentDetails.Shipment.ShipmentKey
  									}
  								}
  							}, {}); 
  	       				}); 
             }
             else{
            	 this.updateShipmentLineListModel(apiOutput.Shipment);
       			 if(Number(apiOutput.Shipment.ShipmentContainerizedFlag) === 3){
       				this.ui.showSuccessMessagePanel = true;
     				var that = this;
     				that.ui.allProductsPacked = true;
     				if(!iscCore.isVoid(that.model.shipmentLineList) && !iscCore.isVoid(that.model.shipmentLineList.ShipmentLines) && !iscCore.isVoid(that.model.shipmentLineList.ShipmentLines.ShipmentLine) && !iscCore.isVoid(that.model.shipmentLineList.ShipmentLines.ShipmentLine.length) ){
     					for(var i = 0; i < that.model.shipmentLineList.ShipmentLines.ShipmentLine.length ; i++){
     						if(!iscCore.isVoid(that.model.shipmentLineList.ShipmentLines.ShipmentLine[i].IsPackComplete) && that.model.shipmentLineList.ShipmentLines.ShipmentLine[i].IsPackComplete == 'Y' && that.model.shipmentLineList.ShipmentLines.ShipmentLine[i].ShortageQty == 0){
     							
     						}else{
     							that.ui.allProductsPacked = false;
     							break;
     						}
     					}
     				}
     				/*var message = iscI18n.translate('containerPack.Message_PackCompleted');
     				iscModal.showSuccessMessage(message, {}).then(
     						function(callBackData){
     							that.ui.showPackageView = true;
     	       				}); */
     			}else{
     				this.ui.allProductsPacked = false;
     				this.ui.showSuccessMessagePanel = false;
     			} 
       			this.refreshCurrentContainerDetails(this.ui.currentContainerDetails.ShipmentContainerKey);
       			this.refreshCurrentContainerContents();
             }
  			
  		},
  		
  		uiFinishPack : function(){
  			var isDirty = $scope.containerPackForm.$dirty;
  			var that = this;
  			var apiInput = {};
  			var mashupRefId = "";
  			var mashupArray = [];
        	if(isDirty) {
        		iscModal.showConfirmationMessage(iscI18n.translate('globals.MSG_Screen_dirty')).then(function(action){
        			//var that = this;
          			var apiInput1 = {};
          			var mashupRefId1 = "";
          			var mashupArray1 = [];
        			if(action === 'YES'){
        	        	apiInput1 = {Container:{ShipmentKey:that.model.shipmentDetails.Shipment.ShipmentKey}};
        				if (that.ui.scacIntegrationReqd == 'N') {
        					mashupRefId1 = "getShipmentContainerList_NoScac";
        					mashupArray1.push(iscMashup.getMashupRefObj(that,'getShipmentContainerList_NoScac',apiInput1));
        					//iscMashup.callMashup(that,"getShipmentContainerList_NoScac",apiInput,{}).then(that.handleGetShipmentContainerList.bind(that,"getShipmentContainerList_NoScac"));
        				} else if (that.ui.scacIntegrationReqd == 'Y') {
        					mashupRefId1 = "getShipmentContainerList_Scac";
        					mashupArray1.push(iscMashup.getMashupRefObj(that,'getShipmentContainerList_Scac',apiInput1));
        					//iscMashup.callMashup(that,"getShipmentContainerList_Scac",apiInput,{}).then(that.handleGetShipmentContainerList.bind(that,"getShipmentContainerList_Scac"));
        				}
        	        	var getShipmentContainerDetailsApiInput = {Shipment:{ShipmentKey:that.model.shipmentDetails.Shipment.ShipmentKey}};
        	        	mashupArray1.push(iscMashup.getMashupRefObj(that,'getShipmentContainerDetails', getShipmentContainerDetailsApiInput));
        	        	iscMashup.callMashups(that,mashupArray1,{}).then(that.handleGetShipmentContainerList.bind(that,mashupRefId1),angular.noop);
        			}
        		});
        	} else {
            	apiInput = {Container:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
    			if (this.ui.scacIntegrationReqd == 'N') {
    				mashupRefId = "getShipmentContainerList_NoScac";
    				mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentContainerList_NoScac',apiInput));
    				//iscMashup.callMashup(that,"getShipmentContainerList_NoScac",apiInput,{}).then(that.handleGetShipmentContainerList.bind(that,"getShipmentContainerList_NoScac"));
    			} else if (this.ui.scacIntegrationReqd == 'Y') {
    				mashupRefId = "getShipmentContainerList_Scac";
    				mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentContainerList_Scac',apiInput));
    				//iscMashup.callMashup(that,"getShipmentContainerList_Scac",apiInput,{}).then(that.handleGetShipmentContainerList.bind(that,"getShipmentContainerList_Scac"));
    			}
    			var getShipmentContainerDetailsApiInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'getShipmentContainerDetails', getShipmentContainerDetailsApiInput));
	        	iscMashup.callMashups(this,mashupArray,{}).then(this.handleGetShipmentContainerList.bind(this,mashupRefId),angular.noop);
        	}
        	
        	
  		},
  		
  		handleGetShipmentContainerList : function(mashupRefId,response){
  			
  			var apiOutput = iscMashup.getMashupOutput(response,mashupRefId);
            if(Number(apiOutput.Containers.ShipmentContainerizedFlag) === 3){
            	this.ui.allProductsPacked = true;
            	var actualContainersWithOutWeight = 0;
            	if(!iscCore.isVoid(this.model.shipmentContainerDetails) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container)){
                	for(var i = 0; i < this.model.shipmentContainerDetails.Containers.Container.length; i++){
                		if(Number(this.model.shipmentContainerDetails.Containers.Container[i].ActualWeight) == '0' && this.model.shipmentContainerDetails.Containers.Container[i].ContainerDetails.TotalNumberOfRecords != '0'){
                			actualContainersWithOutWeight = actualContainersWithOutWeight + 1;
                		}
                		if(this.ui.scacIntegrationReqd == 'Y'){
                			if(iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container[i].TrackingNo)){
                				actualContainersWithOutWeight = actualContainersWithOutWeight + 1;
                			}else if(this.model.shipmentContainerDetails.Containers.Container[i].TrackingNo == ''){
                				actualContainersWithOutWeight = actualContainersWithOutWeight + 1;
                			}
                		}
                		
                	}
            	}	
            	//if(Number(apiOutput.Containers.TotalNumberOfRecords) > 0){
            	if(Number(actualContainersWithOutWeight) > 0){	
            		 var that = this;
            		 if(this.ui.scacIntegrationReqd == 'N') {
                     	iscModal.showConfirmationMessage(iscI18n.translate('containerPack.MSG_NotAllContainersWeighed')).then(function(action){
                 			if(action === 'YES'){
                 				iscState.goToState("shipmentsummary", {input: {Shipment: {ShipmentKey: that.model.shipmentDetails.Shipment.ShipmentKey}}}, {}); 
                 			}else{
                 				that.ui.showPackageView = true;
                 			}
                 		});
            			 
            		 }else if(this.ui.scacIntegrationReqd == 'Y'){

                      	iscModal.showConfirmationMessage(iscI18n.translate('containerPack.MSG_NotAllContainersTracked')).then(function(action){
                  			if(action === 'YES'){
                  				iscState.goToState("shipmentsummary", {input: {Shipment: {ShipmentKey: that.model.shipmentDetails.Shipment.ShipmentKey}}}, {}); 
                  			}else{
                  				that.ui.showPackageView = true;
                  			}
                  		});
            		 }
            		
            	}else{
            		
            		var changeShipmentInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey}};
            		var mashupArray = [];
            		var input = {};
            		
            		if(!iscCore.isVoid(this.model.shipmentContainerDetails) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers) && !iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container)){
                    	for(var i = 0; i < this.model.shipmentContainerDetails.Containers.Container.length; i++){
                    		if(!iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container[i].ContainerDetails) && this.model.shipmentContainerDetails.Containers.Container[i].ContainerNo != iscI18n.translate('containerPack.draftContainer')){
                        		if(this.model.shipmentContainerDetails.Containers.Container[i].ContainerDetails.TotalNumberOfRecords == '0'){
                        			//this.removeEmptyContainer(this.model.shipmentContainerDetails.Containers.Container[i]);
                        			if(!iscCore.isVoid(this.model.shipmentContainerDetails.Containers.Container[i].ShipmentContainerKey)){
                                        input = {
                                            Shipment:{
                                                ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,
                                                Containers:{
                                                    Container:{
                                                        ShipmentContainerKey:this.model.shipmentContainerDetails.Containers.Container[i].ShipmentContainerKey
                                                    }
                                                },
                                                isDraftContainer : this.model.shipmentContainerDetails.Containers.Container[i].ShipmentContainerKey === ""?"Y":"N"
                                            }
                                        };
                                        mashupArray.push(iscMashup.getMashupRefObj(this,'deleteContainer',input));
                        			}                        			
                        		}
                    		}
                    	}
                	}
            		mashupArray.push(iscMashup.getMashupRefObj(this,'finishpack_changeShipment',changeShipmentInput));
            		iscMashup.callMashups(this,mashupArray,{}).then(this.handleFinishPack.bind(this),angular.noop);
            		//iscMashup.callMashup(this,"finishpack_changeShipment",changeShipmentInput,{}).then(this.handleFinishPack.bind(this));
            	}
            	
            } else {
            	this.ui.allProductsPacked = false;
            	var that = this;
            	iscModal.showConfirmationMessage(iscI18n.translate('containerPack.MSG_NotAllLinesPacked')).then(function(action){
        			if(action === 'YES'){
        				iscState.goToState("shipmentsummary", {input: {Shipment: {ShipmentKey: that.model.shipmentDetails.Shipment.ShipmentKey}}}, {}); 
  		}	
  		
    });
	}
  		
  		},
  		
  		
  		handleFinishPack : function(){
  		/*	var that = this;
  			iscModal.showConfirmationMessage(iscI18n.translate('containerPack.MSG_PackComplete')).then(function(action){
    			if(action === 'YES'){
    				var storePackSlipInput = {Shipment:{ShipmentKey:that.model.shipmentDetails.Shipment.ShipmentKey}};
            		iscMashup.callMashup(that,"print_packSlip",storePackSlipInput,{}).then(that.handlePrintPackSlip.bind(this,that.model.shipmentDetails.Shipment.ShipmentKey));
            		
    				//iscState.goToState("shipment-summary", {input: {Shipment: {ShipmentKey: that.model.shipmentDetails.Shipment.ShipmentKey}}}, {}); 
    			}
    			else{
    	  			iscState.goToState("shipmentsummary", {input: {Shipment: {ShipmentKey: that.model.shipmentDetails.Shipment.ShipmentKey}}}, {}); 
    			}
    		});
    	*/	
  			iscState.goToState("shipmentsummary", {input: {Shipment: {ShipmentKey: this.model.shipmentDetails.Shipment.ShipmentKey}}}, {}); 
  		},
  		
  		handlePrintPackSlip : function(shipmentKey,response){
  			
  			var packSlipOutput = iscMashup.getMashupOutput(response,"print_packSlip");
  			if(!iscCore.isVoid(packSlipOutput.Output.out)){
                $timeout(function(){
                    iscPrint.printHtmlOutput(packSlipOutput);
                },0);
            //iscState.goToState("shipmentsummary", {input: {Shipment: {ShipmentKey: shipmentKey}}}, {});      
            }
            else{
                iscModal.showErrorMessage("containerPack.Message_Print_failure");
            }
  			
  		},
  		uiHideNavigation: function(){
  			
  			var width = Number(document.getElementById('containers').offsetWidth);
  			var pkgCount = Number(this.uiPackagesCount(this.ui.totalNoOfpackages));
  			
  			if(width > (pkgCount * 100)){
  				return true;
  			}else{
  				return false;
  			}
  			
  			
  		},
  		
  		uiPrintPackSlip: function(container){
  			if(!iscCore.isVoid(container.ContainerDetails)){
  	  			if(!iscCore.isVoid(container.ContainerDetails.TotalNumberOfRecords)){
  	    			if(container.ContainerDetails.TotalNumberOfRecords != 0){
  	    				var storePackSlipInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey, ShipmentContainerKey : container.ShipmentContainerKey }};
  	    				//storePackSlipInput.ShipmentContainerKey = container.ShipmentContainerKey ;
  	    	    		iscMashup.callMashup(this,"print_packSlip",storePackSlipInput,{}).then(this.handlePrintPackSlip.bind(this,this.model.shipmentDetails.Shipment.ShipmentKey));
  	    			}else{
  	                  iscModal.showErrorMessage("containerPack.Message_Empty_Package");
  	              }

  	  			}
  			}
  		},
  		
  		uiOpenItemDetails: function(shipmentLine){
  			//iscShipment.openProductDetail(shipmentLine);
  		}
  		
  		
  		
    });
	}
]);
    
})();



/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.shipment.customer-pickup.customer-pick-order-list.customer-pick-order-list
 *@package store.views.shipment.customer-pickup.customer-pick-order-list
 *@class customer-pick-order-list
 *@description Customer pickup orders screen is the list of Orders which are in Ready for customer pick. 
 *
 */

angular.module("store").controller("store.views.shipment.customer-pickup.customer-pick-order-list.customer-pick-order-list",[
	"$scope","iscScreen","iscState","iscModal","iscI18n","iscMashup","iscAppContext","$timeout","iscShipment","$filter",
	function($scope,iscScreen,iscState,iscModal,iscI18n, iscMashup, iscAppContext,$timeout,iscShipment,$filter){
		
		iscScreen.initializeScreen($scope,{  
			model:{
				/**
				 *@description Holds the Output of getShipmentList API.
				 */
				shipmentList:{}
			},
            mashupRefs:[
                {
            	   /**
				    *@iscdoc mashup
		   			*@viewname store.views.shipment.customer-pickup.customer-pick-order-list.customer-pick-order-list
		   			*@mashupid store.views.shipment.customer-pick-order-list.getPickupOrderList
	   			    *@mashuprefid getShipmentList
		   			*@description Fetches the list of shipments based on the shipment status.
		   			*/
                    mashupRefId: 'getShipmentList',
                    mashupId: 'store.views.shipment.customer-pick-order-list.getPickupOrderList',
                    modelName:'shipmentList',
                    isPaginated: true,
					pageSize : 15,//iscAppContext.getFromContext("listApiPageSize"),
					append : true,
					appendPath : 'Shipments.Shipment'
                }
               
            ],
            ui : {
            	/**
				 *@property {Boolean} apiCallInProgress - flag to identify if any mashup call is in progress.
				 */
                apiCallInProgress:false,
                
                /**
				 *@property {String} selectedShipmentKey - ShipmentKey of the selected shipment from the list.
				 */	
                selectedShipmentKey:"",
                
                /**
				 *@property {Number} recordShownCount - pageSize of the shipment list for continuous scrolling.
				 */	
                recordShownCount:15, 
                
                /**
				 *@property {Number} numOfOrders - Number of Shipments for a active tab.
				 */	
                numOfOrders : -1,
                
                /**
				 *@property {Object} statusArray - Status filter for Pickup Orders.
				 */	
                statusArray:[],
                
                /**
				 *@property {String} sortOptions - Holds the sorting order of shipments.
				 */	
                sortOptions:'N'
			},
			
			/**
			 *@description Initializes the Customer pickup orders screen by invoking the required mashup calls.
			 */
			initialize : function(){
				 this.ui.statusArray.push('1100.70.06.30');
				 var apiInput = iscShipment.prepareGetShipmentListApiInput('N','PICK',this.ui.statusArray);
			     iscMashup.callPaginatedMashup(this,'getShipmentList',apiInput,"START",{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);
			},
		
			/**
			*@description call back handler for  getShipmentList api.
			 */ 	
           processPaginatedShipmentList:function(response) {
                this.ui.apiCallInProgress = false;
                var output = iscMashup.getMashupOutput(response,"getShipmentList");
                this.ui.numOfOrders =  $filter('number')(output.Page.Output.Shipments.TotalNumberOfRecords);
                if(output.Page.Output.Shipments.Shipment){
                	if(iscCore.isVoid(this.ui.selectedShipmentKey)){
	            		this.ui.selectedShipmentKey = output.Page.Output.Shipments.Shipment[0].ShipmentKey;
	            	}
                    this.processShipment(output.Page.Output.Shipments);
                }
            },
            
            /**
			 *@description This method handles on click of cancel button in cart details screen.
			 */
			uiClose : function(){
				iscState.goToState("/home", {}, {});
            },
         
            /**
		     *@description Massage shipment object with UI attributes
			 */
            processShipment : function(shipments){
                for(var i = 0; i < shipments.Shipment.length; i++){
                    var shipment = shipments.Shipment[i];
                    shipment.OrderNoToDisplay = iscShipment.getDisplayOrderNumber(shipment.DisplayOrderNo, '|', ', ', true);
                    shipment.StatusDescriptionToDisplay = iscShipment.getShipmentStatusDescription(shipment);
                }
                
            },
            
            /**
			 *@description Identifies the Shipment chosen by the User from the list.
			 */
			uiSelectShipment : function(shipment){
				this.ui.selectedShipmentKey = shipment.ShipmentKey;
			},
            
			/**
			 *@description Validates if next page action should be performed by checking whether the last page is already fetched.
			 */
	        uiOrderListScrollActionValidator : function(){
	        	return true;
	        },
	        
	        /**
			 *@description Gets the Paginated records for getShipmentList api when the next page action is performed.
			 */
	        uiGetNextPickingRecords: function() {
				if (this.model.shipmentList.Page.IsLastPage !=="N") {
					return;
				}
				this.ui.apiCallInProgress = true;
				apiInput=iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions,'PICK',this.ui.statusArray);
				
				iscMashup.callPaginatedMashup(this, "getShipmentList", apiInput, "NEXT", {}) .then(this.processPaginatedShipmentList.bind(this));
			},
		
			/**
			 *@description Opens Customer pickup flow for the selected shipment from the list.
			 */	
           uipickOrder : function(shipmentKey){
				iscState.goToState("customer-pickup", {input:{"Shipment" : { "ShipmentKey" : shipmentKey}}}, {});
			},
		
			/**
			 *@description Opens Shipment summary screen for the selected shipment from the list.
			 */	
           uiGoToShipmentSummary:function(shipment){
				iscState.goToState('shipmentsummary',{input:{Shipment:{ShipmentKey: shipment.ShipmentKey},flowName:'CustomerPickup'}},{}); 
			},
			
			/**
			 *@description This method handles Sorting of Shipments.
			 */
			uiApplySortOptions : function(data){
				  var apiInput = {};
	        		if(data.sortOption == 'NEW_TO_OLD'){
	        			this.ui.sortOptions = 'Y';
	    			}else if(data.sortOption == 'OLD_TO_NEW'){
	    				this.ui.sortOptions = 'N';
	    			}	
				
	        	apiInput=iscShipment.prepareGetShipmentListApiInput(this.ui.sortOptions,'PICK',this.ui.statusArray);
				this.model.shipmentList = {};
				iscMashup.callMashup(this,"getShipmentList",apiInput,{}).then(this.processPaginatedShipmentList.bind(this),angular.noop);  

			}
            
        });
    }]);
			 
			 
            

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.appointments.in-store.manage-appointment.customer-lookup.customer-lookup
 *@package store.views.appointments.in-store.manage-appointment.customer-lookup
 *@class customer-lookup
 *@description appointments screen is the list screen showing appointments for a customer. 
 *
 */


angular.module("store").controller("store.views.appointments.in-store.manage-appointment.customer-lookup",[
	"$scope","iscScreen","iscState","iscI18n","iscMashup","iscAppContext","$timeout","iscShipment","iscWizard","iscShipmentStatus","iscInStoreAppointment","iscModal","$filter",
	function($scope,iscScreen,iscState,iscI18n, iscMashup, iscAppContext,$timeout,iscShipment,iscWizard,iscShipmentStatus,iscInStoreAppointment,iscModal,$filter){
		
		iscWizard.initializeWizardPage($scope,{  
			model:{
				
				/**
				 *@description Holds the customer list for based on the search criteria.
				 */
				customerList:{},
				
				/**
				 *@description Holds the newly created customer record information.
				 */
				newCustomer:{},
				
				/**
				 *@description Holds the selected Customer info from the customer list.
				 */
				selectedCustomer:{}
			},
            mashupRefs:[
                        
                        
				 {
					 /**
	   				    *@iscdoc mashup
	   		   			*@viewname store.views.appointments.in-store.manage-appointment.customer-lookup.customer-lookup
	   		   			*@mashupid store.views.manage-appointment.findCustomerProfileBySearchCriteria
	 		   			*@mashuprefid findCustomerProfileBySearchCriteria
	   		   			*@description this mashup is used to find customers based on search criteria.
	   		   			*/    
					 
	                    mashupRefId: 'findCustomerProfileBySearchCriteria',
	                    mashupId: 'store.views.manage-appointment.findCustomerProfileBySearchCriteria',
	                    modelName:'customerList'
	                    
	              },
	              
	              {
	            	  
	            	  /**
	   				    *@iscdoc mashup
	   		   			*@viewname store.views.appointments.in-store.manage-appointment.customer-lookup.customer-lookup
	   		   			*@mashupid store.views.manage-appointment.findCustomerProfileBySearchCriteria
	 		   			*@mashuprefid findCustomerProfileBySearchCriteria
	   		   			*@description Mashup used to list customers in a paginated way.
	   		   			*/  
	            	  
                        mashupRefId: 'getPaginatedCustomerList',
                        mashupId: 'store.views.manage-appointment.findCustomerProfileByPhoneCriteria',
                        isPaginated: true,
	  					pageSize : 15,
	  					append : true,
	  					setFocus:true,
	  					appendPath : 'CustomerList.Customer',
	  					modelName:"customerList"
	                       

	              },
	              
	              {
	            	  /**
	   				    *@iscdoc mashup
	   		   			*@viewname store.views.appointments.in-store.manage-appointment.customer-lookup.customer-lookup
	   		   			*@mashupid store.views.manage-appointment.manageCustomer
	 		   			*@mashuprefid manageCustomer
	   		   			*@description Mashup used to create a new customer record.
	   		   			*/  
	            	  	mashupRefId: 'manageCustomer',
					    mashupId: 'store.views.manage-appointment.manageCustomer'
		          },
		          
		          {
		        	  /**
	   				    *@iscdoc mashup
	   		   			*@viewname store.views.appointments.in-store.manage-appointment.customer-lookup.customer-lookup
	   		   			*@mashupid store.views.manage-appointment.manageCustomerForEdit
	 		   			*@mashuprefid manageCustomerForEdit
	   		   			*@description Mashup used to edit the newly created customer record.
	   		   			*/  
		            	  	mashupRefId: 'manageCustomerForEdit',
						    mashupId: 'store.views.manage-appointment.manageCustomerForEdit'
			          },
		         
		          
		          {
			        	  /**
		   				    *@iscdoc mashup
		   		   			*@viewname store.views.appointments.in-store.manage-appointment.customer-lookup.customer-lookup
		   		   			*@mashupid store.views.manage-appointment.customer-lookup.changeOrder
		 		   			*@mashuprefid changeOrder
		   		   			*@description Mashup used to associate customer on the order.
		   		   			*/  
	            	  	mashupRefId: 'changeOrder',
					    mashupId: 'store.views.manage-appointment.customer-lookup.changeOrder'  
		        	  
		          },
		          {
		        	  /**
	   				    *@iscdoc mashup
	   		   			*@viewname store.views.appointments.in-store.manage-appointment.customer-lookup.customer-lookup
	   		   			*@mashupid store.views.manage-appointment.confirmDraftOrder
	 		   			*@mashuprefid confirmDraftOrder
	   		   			*@description Mashup used to confirm the draft order for the appointment.
	   		   			*/  
	            	  	mashupRefId: 'confirmDraftOrder',
					    mashupId: 'store.views.manage-appointment.confirmDraftOrder' 
		        	  
		          },
		          
		          {
		        	  /**
	   				    *@iscdoc mashup
	   		   			*@viewname store.views.appointments.in-store.manage-appointment.customer-lookup.customer-lookup
	   		   			*@mashupid store.views.appointments.in-store.deleteAppointmentSalesOrder
	 		   			*@mashuprefid deleteDraftAppntSalesOrder
	   		   			*@description Mashup used to delete the draft order for the appointment when user chooses to exit the flow with out saving the data.
	   		   			*/  
		            	mashupRefId: 'deleteDraftAppntSalesOrder',
						mashupId: 'store.views.appointments.in-store.deleteAppointmentSalesOrder',
		          },
	              {
		            	 /**
							*@iscdoc mashup
						    *@mashupid store.views.appointments.in-store.getAndDeletePendingWorkOrderLines
						    *@mashuprefid getAndDeletePendingWorkOrderLines
							*@description getAndDeletePendingWorkOrderLines.
							*/
		            	mashupRefId: 'getAndDeletePendingWorkOrderLines',
						mashupId: 'store.views.appointments.in-store.getAndDeletePendingWorkOrderLines',
		              }
				 
            ],
           
            	 /**
        		 *@iscdoc uiattr
        		 *@viewname store.views.common.customer.customerpopup
        		 *@property {Object}  selectedAddress - user selected address in the pop up.
        		 *@property {Object}  selectedCustomer - user selected customer in the pop up.
        		 *@property {Boolean} showSearchCriteria - Flag to hide/show search criteria.
        		 *@property {Boolean} showAdvanceSearch - Flag to hide/show advance search criteria.
        		 *@property {String}  lookupType - indicates whether the search is performed using basic or advance search criteria.
        		 *@property {Boolean} showNewCustomerPreview - Flag to indicate the new customer record is to be shown in update mode or preview mode.
        		 *@property {String} newCustomerKey - Primary Key of the newly created Customer record.
        		 */ 
        		 
        	     ui:{
        			selectedAddress:{},
        			selectedCustomer:{},
        			showSearchCriteria:true,
        			showAdvanceSearch:false,
        			lookupType:'BASIC_SEARCH',
        			showNewCustomerPreview:false,
        			newCustomerKey:null
        			
        		 },
                
			
        		 /**
     			 *@description Initializes the Customer lookup screen.
     			 */
        		 initialize : function(){
        			 $scope.$on('AddressVerified',function(event,args){
        			   
        			        $scope.formScope = args.formScope;
        			 
        			       if (args){
        				          var selectedCustomer = {"customer":{},"addressSelected":args.data}; 
        				          if(args.State == "SINGLE_ADDRESS"){
        						      if($scope.formScope.addressCapture.$invalid){
        						         console.log("screen in error");
        						      }else{
        							    var resultdata = { data : selectedCustomer};	
        							    $scope.uiCallManageApi(resultdata);
        							  }
        						  }else if (args.State == "MULTI_ADDRESS"){
        							 $scope.currentSelection = { data : selectedCustomer};
        							 $scope.uiChangeScreenState("AddressMatchSelected");
        						  }else if (args.State == "MODIFY_ADDRESS"){
        							 $scope.currentSelection = { data : selectedCustomer};
        							 $scope.uiChangeScreenState("AddressBeingModified");
        						  }
        				   }
        					 		 
        				 });	 
        			},
			
        			
        			/**
        			 *@description Gets the Paginated records for getCompleteCustomerList api when the next page action is performed.
        			 */
        			
        			uiGetNextCustomerRecords:function(){
        				
        				if (this.model.customerList.Page.IsLastPage !=="N") {
        					return;
        				}
        				this.ui.apiCallInProgress = true;
        				var apiInput = {};  
        				if(this.ui.lookupType =='BASIC_SEARCH'){
        					   this.uiFindCustomers('NEXT');
        				}else if(this.ui.lookupType =='ADV_SEARCH'){
        					this.uiFindCustomerBySearchCriteria('NEXT');
        				}
        			},
        			
        			/**
        			 *@description Validates if next page action should be performed by checking whether the last page is already fetched.
        			 */
        			
        			uiCustomerListScrollActionValidator:function(){
        			
        				if (this.model.customerList.Page.IsLastPage !=="N") {
        					return false;
        				}else
        					return true;
        			},
        			
        			/**
        			 * @description This method is used to validate the search text entered  and invoke getCompleteCustomerList API to find customers matching the search text.
        			 */
        			uiFindCustomers:function(paginationStrategy) {
        				
        				if (!iscCore.isVoid(this.model.lookupValue)) {
        					
        					 var getCompleteCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:{ComplexQuery:{Or:{Exp:[]}}}}}};
        					 if(this.model.lookupValue.indexOf("@") > -1) {
        						 var emailExp = {Name:"EmailID",QryType:"EQ",Value:this.model.lookupValue};
        						 getCompleteCustomerListInput.Customer.CustomerContactList.CustomerContact.ComplexQuery.Or.Exp.push(emailExp);
        					 } else {
        						 var phoneNoExp = {Name:"DayPhone",QryType:"EQ",Value:this.model.lookupValue};
        						 getCompleteCustomerListInput.Customer.CustomerContactList.CustomerContact.ComplexQuery.Or.Exp.push(phoneNoExp);
        					 } 
        					 
        					this.ui.lookupType = 'BASIC_SEARCH'; 
        					if(paginationStrategy=='START'){
        						this.model.customerList = {};	
        					}
        					
        					if(!iscCore.isVoid(this.ui.search)&& !iscCore.isVoid(this.ui.search.CustomerContactList)){
      			    			this.ui.search.CustomerContactList.CustomerContact = {};
      			    		}
        					this.ui.CustomerPaymentMethod='';
        					iscMashup.callPaginatedMashup(this,'getPaginatedCustomerList',getCompleteCustomerListInput,paginationStrategy,{}).then(
        	           				 this.processCustomerProfileSearchResult.bind(this),angular.noop);
        				} else {
        					iscModal.showErrorMessage(iscI18n.translate('customerprofile.MSG_InvalidCustomerSearchData'));
        				}
        				
        			},
        			
        			
        			
        			/*uiStampCustomerOnAppointment:function(){
        				var selectedCustomer = angular.copy(this.ui.selectedCustomer);
        			},*/
        			
        			/**
        			 * @description This method invokes getCompleteCustomerList API to find customers matching the search criteria.
        			 */
        			uiFindCustomerBySearchCriteria:function(paginationStrategy) {
        				
        				 this.ui.lookupType = 'ADV_SEARCH';
        				 this.model.lookupValue = '';
        				 var getCompleteCustomerListInput = {Customer:{CustomerContactList:{CustomerContact:{}}}};
        				
        				 if(this.ui.search && this.ui.search.CustomerContactList) {
        					 getCompleteCustomerListInput.Customer.CustomerContactList.CustomerContact = this.ui.search.CustomerContactList.CustomerContact;
        		   		 }
        				 
        	   			 if(this.ui.search && this.ui.search.CustomerPaymentMethod && this.ui.search.CustomerPaymentMethod.DisplayCreditCardNo){
        	   			 	getCompleteCustomerListInput.Customer.CustomerPaymentMethodList = {CustomerPaymentMethod:this.ui.search.CustomerPaymentMethod};
        			     }
        	   			
        	   			if(paginationStrategy=='START'){
    						this.model.customerList = {};	
    					}
        	   			 iscMashup.callPaginatedMashup(this,"getPaginatedCustomerList",getCompleteCustomerListInput,paginationStrategy,{}).then(this.processCustomerProfileSearchResult.bind(this),angular.noop);
        			},
        			
        			 /**
    				 * @description Callback handler for findCustomerProfileBySearchCriteria mashup. 
    				 */
    			processCustomerProfileSearchResult:function(response) {
    				 this.ui.showSearchCriteria = false;
    				 var apiOutput = iscMashup.getMashupOutput(response,"getPaginatedCustomerList");
    				 this.ui.selectedCustomer = this.model.customerList.Page.Output.CustomerList.Customer[0];
    				 this.uiOnCustomerSelection(this.model.customerList.Page.Output.CustomerList.Customer[0]);
    				 $scope.customerLookup.$setPristine();
   			    },
    			 
   			    /**
    			 * @description This method broadcasts the callVerifyAddress event when new customer record is created or edited.
    			 */
    			uiCreateCustomer:function(){
    				 
    					if($scope.formScope && $scope.formScope.addressCapture && $scope.formScope.addressCapture.$invalid){
    						  console.log("Screen is in error");	
    					}
    			       else {
    					      $scope.$broadcast('callVerifyAddress',{'id':'1'});
    				    }
    			 },
    			 
    			 /**
     			 * @description This method is invoked on successful validation of the customer address.
     			 */
    			 
    			 uiCallManageApi : function(resultdata){
    				 
    				    var record = resultdata.data.addressSelected;
    				    var mashupInput = {};
    					mashupInput.Customer = {};
    					mashupInput.Customer = record;   
    					var orderModel = iscWizard.getWizardModel('createAppointmentOrderModel');
    					mashupInput.Customer.OrderHeaderKey=orderModel.Order.OrderHeaderKey;
    					
    				   if(iscCore.isVoid(this.model.selectedCustomer.Customer)){
       					iscMashup.callMashup(this,"manageCustomer",mashupInput,{}).then(this.successHandler.bind(this),angular.noop);
    				  
    				   }else{
					    mashupInput.Customer.CustomerKey = this.model.selectedCustomer.Customer.CustomerKey;
					    mashupInput.Customer.CustomerContactID = this.model.selectedCustomer.Customer.CustomerContactList.CustomerContact[0].CustomerContactID;
					    iscMashup.callMashup(this,"manageCustomer",mashupInput,{}).then(this.successHandler.bind(this),angular.noop);
					   
    					   
    				   }
   				       
    			 },
    			
    			 
    			 /**
      			 * @description This method is the callback handler for the manageCustomer mashup.
      			 */ 
    			successHandler : function (response){
    				
    				 var newCustomer = iscMashup.getMashupOutput(response,"manageCustomer");
    				 this.ui.newCustomerKey = newCustomer.Customer.CustomerKey;
 					 var newAddress =  newCustomer.Customer.CustomerContactList.CustomerContact[0].CustomerAdditionalAddressList.CustomerAdditionalAddress[0];
 					 var selectedCustomer = {"customerModel":newCustomer,"addressSelected":newAddress}; 
 				     var resultdata = { data : selectedCustomer}; 
 				     this.model.newCustomer = newCustomer;
 				     this.model.selectedCustomer = newCustomer;
 				     this.ui.showNewCustomerPreview = true;
 				     iscWizard.setWizardModel('createAppointmentCustomerModel',newCustomer);
 				     $scope.customerLookup.$setPristine();
 				     
    				},
    				
    				
    				/**
          			 * @description This method is the callback handler for the manageCustomerForEdit mashup.
          			 */ 
    				
    				editAddresssuccessHandler:function(response){
    					 var newCustomer = iscMashup.getMashupOutput(response,"manageCustomerForEdit");
     					 var newAddress =  newCustomer.Customer.CustomerContactList.CustomerContact[0].CustomerAdditionalAddressList.CustomerAdditionalAddress[0];
     					 var selectedCustomer = {"customerModel":newCustomer,"addressSelected":newAddress}; 
     				     var resultdata = { data : selectedCustomer}; 
     				     this.model.newCustomer = newCustomer;
     				     this.model.selectedCustomer = newCustomer;
     				     this.ui.showNewCustomerPreview = true;
    				},
    				
    				
    				/**
					 *@description Opens the newly created customer record in edit mode 
				    */
		          
    			  uiEditCustomerInfo: function(){
    				   this.ui.showNewCustomerPreview = false;
		          },
		     	
		          /**
					 *@description This method stamps the customer on the appointment and confirms the order.
				    */
		          
  			      uiStampCustomerAndConfirmDraftOrder: function(){
  			    	  
  			    	  var orderModel = iscWizard.getWizardModel('createAppointmentOrderModel');
  			    	  if(!iscCore.isVoid("this.ui.newCustomerKey") && this.ui.newCustomerKey == this.model.selectedCustomer.Customer.CustomerKey){
  			    		/*call confirm draft order*/
  			    		var confirmDraftOrderApiInput= {};
  			    		confirmDraftOrderApiInput.ConfirmDraftOrder={};
  			    		confirmDraftOrderApiInput.ConfirmDraftOrder.OrderHeaderKey=orderModel.Order.OrderHeaderKey;
  			    		iscMashup.callMashup(this,"confirmDraftOrder",confirmDraftOrderApiInput,{}).then(this.handlechangeOrderForCustomer.bind(this),angular.noop);  
  			    	  }
  			    	  
  			    	  else{
  			    		
  			    	   var customerModel= {};
 		        	   customerModel = angular.copy(this.model.selectedCustomer);
 		        	   var modifyFulfillmentOptionsInput  = {};
 		          	   modifyFulfillmentOptionsInput.Order ={};
 		          	   
 		          	   modifyFulfillmentOptionsInput.Order.OrderHeaderKey=orderModel.Order.OrderHeaderKey;
 		          	   modifyFulfillmentOptionsInput.Order.BillToID = customerModel.Customer.CustomerID; 
 			           modifyFulfillmentOptionsInput.Order.PersonInfoBillTo={};
 				  	   modifyFulfillmentOptionsInput.Order.PersonInfoBillTo = angular.copy(customerModel.Customer.CustomerContactList.CustomerContact[0].CustomerAdditionalAddressList.CustomerAdditionalAddress[0].PersonInfo);
 		          		
 		      	       if(customerModel.Customer.CustomerType === '02' || (customerModel.Customer.CustomerContactList &&  customerModel.Customer.CustomerContactList.CustomerContact && customerModel.Customer.CustomerContactList.CustomerContact.length === 1)){
 		  				modifyFulfillmentOptionsInput.Order.CustomerContactID =  customerModel.Customer.CustomerContactList.CustomerContact[0].CustomerContactID;
 		  				modifyFulfillmentOptionsInput.Order.CustomerFirstName =  customerModel.Customer.CustomerContactList.CustomerContact[0].FirstName;
 		     	    	modifyFulfillmentOptionsInput.Order.CustomerLastName  =  customerModel.Customer.CustomerContactList.CustomerContact[0].LastName;
 		     	    	modifyFulfillmentOptionsInput.Order.CustomerEMailID   =  customerModel.Customer.CustomerContactList.CustomerContact[0].EmailID;
 		     	        modifyFulfillmentOptionsInput.Order.CustomerZipCode   =  customerModel.Customer.CustomerContactList.CustomerContact[0].CustomerAdditionalAddressList.CustomerAdditionalAddress[0].PersonInfo.ZipCode;
 		      	       }
 		          	 
 		      	      iscMashup.callMashup(this,"changeOrder",modifyFulfillmentOptionsInput,{}).then(this.handlechangeOrderForCustomer.bind(this),angular.noop);  
  			    	  }
		        	   
		          },
  			   
		          /**
					 *@description This method exits the create appointment wizard when confirmDraftOrder mashup call is succesful.
				    */
		          
		          handlechangeOrderForCustomer:function(){
                      iscWizard.finishWizard();
		          },
		         
		          /**
					 *@description This method handles the tab selection when new or existing customer tabs chosen.
				    */
		          
  			    uiUpdateSelection : function(tab){
  			    	if(tab == 'New_Customer'){
  			    		if(!iscCore.isVoid(this.ui.newCustomerKey)){
  			    			this.model.selectedCustomer = this.model.newCustomer;
  			    			this.ui.showNewCustomerPreview = true;
  			    		}else{
  			    			if(!this.ui.showSearchCriteria){
  	  			    			this.ui.selectedCustomer = {};
  	  	  			    		this.model.selectedCustomer = {};
  	  	  			    	    this.ui.showNewCustomerPreview = false;
  	  			    		}
  			    		}
  			    	}else if(tab == 'Existing_Customer'){
  			    		this.ui.showSearchCriteria = true;
  			    		this.ui.showAdvanceSearch = false;
  			    		if(!iscCore.isVoid(this.ui.search)&& !iscCore.isVoid(this.ui.search.CustomerContactList)){
  			    			this.ui.search.CustomerContactList.CustomerContact = {};
  			    		}
    					this.ui.CustomerPaymentMethod='';
    					this.model.lookupValue = '';
  			    	}
  			    	
  			    },
  			    
  			    /**
				 *@description This method gets the wizard model
			    */
  			    
  			    getAppointmentSalesOrderWizardModel:function() {
  			    	return iscWizard.getWizardModel('createAppointmentOrderModel');
  			  	},
 			 
  			     /**
				 *@description Close button handler.
			    */
  			  	
 			 	uiClose: function() {
 					
 					var confirmationMsg = iscI18n.translate('instoreappointment.MSG_ExitAppointmentCreationFlow');
 					iscModal.showConfirmationMessage(confirmationMsg).then(function(callBackAction){									
 						if(callBackAction === 'YES'){
 							iscWizard.closeWizard();
 						}
 		       		});
 					
				},
				
				/**
				 *@description handles the wizard back button in customer lookup screen.
			    */
				
				handleWizardBack:function(){
					
					var isFirstPage = iscWizard.isFirstPage();
					var isDirty = $scope.customerLookup.$dirty;
					if(isDirty){
						var confirmationMsg = null;
						if(isFirstPage){
							confirmationMsg = iscI18n.translate('order.WarningMessage_Cancel');
							iscModal.showConfirmationMessage(confirmationMsg).then(
									function(callBackAction){
										if(callBackAction === 'YES'){
											iscWizard.closeWizard();
										}
				       				});
						}
						else{
							iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){
	            			if(iscCore.isBooleanTrue(action)){
	            				iscWizard.gotoPreviousPage(true);
	            			}
	            		});
						}
						return true;
					}
					else if(isFirstPage) {	        		
						var confirmationMsg = iscI18n.translate('instoreappointment.MSG_ExitAppointmentCreationFlow');
						iscModal.showConfirmationMessage(confirmationMsg).then(function(callBackAction){									
							if(callBackAction === 'YES'){
								iscWizard.closeWizard();
							}
			       		});
						return true;
		        	} else {
		        		return false;
		        	}
					
				},
				
				/**
				 *@description This method is invoked when the user chooses a customer from the search results and the selectedCustomer model with the chosen result.
			    */
				
				uiOnCustomerSelection:function(customerObj){
					var customer = {};
					customer.Customer = {};
					customer.Customer = customerObj;
					this.model.selectedCustomer = customer;
				},
				
				/**
				 *@description This method is invoked when Back to search button is clicked.
			    */
				
				uiShowSearchCriteria:function(){
					this.ui.showSearchCriteria = true;
					this.model.selectedCustomer = {};
				},
				
				/**
				 *@description This method is invoked when finish clicked.
			     */
				
				uiCheckDirtyStateBeforeConfirmDraftOrder:function(){		
  			    			
					/* Check whether the screen is dirty before navigating to payment screen*/		
	            	 		
	            	 var isDirty = $scope.customerLookup.$dirty;	
	            	 
	            	 if(!this.ui.showNewCustomerPreview && !this.ui.showSearchCriteria){
	            		 isDirty = false;
	            	 }
	            	 if(isDirty){		
	            		 var that = this;		
	            		 iscModal.showConfirmationMessage(iscI18n.translate('addItems.MSG_Screen_dirty')).then(function(action){		
		            			if(iscCore.isBooleanTrue(action)){		
		            				that.uiStampCustomerAndConfirmDraftOrder();		
		            			}		
	            	 });		
	            	 }else{		
	            		 this.uiStampCustomerAndConfirmDraftOrder();		
	            	 }			
							
  			    }, 
				
  			     /**
  			     *@description This method handles the on click of cancel button in wizard.
				 */ 
				handleWizardExit:function() {
					
					var that = this;
					
					var confirmationMsg = iscI18n.translate('instoreappointment.MSG_ExitAppointmentCreationFlow');
					iscModal.showConfirmationMessage(confirmationMsg).then(function(callBackAction){									
						if(callBackAction === 'YES'){
							that.cleanupPendingData();
						}
		       		});
					
					return true;
					
				},
				
				cleanupPendingData:function() {
					
					var mashupArray = [];
					var salesOrder = iscWizard.getWizardModel('createAppointmentOrderModel');
					
					if(!iscCore.isVoid(salesOrder)) {

						if(iscInStoreAppointment.isDraftAppointmentSalesOrder()) {
							mashupArray.push(iscMashup.getMashupRefObj(this,'deleteDraftAppntSalesOrder',iscInStoreAppointment.getDeleteAppointmentSalesOrderInput(salesOrder)));
						} else {
							mashupArray.push(iscMashup.getMashupRefObj(this,'getAndDeletePendingWorkOrderLines',{WorkOrder:{OrderHeaderKey:salesOrder.Order.OrderHeaderKey}}));
						}
						
						if(mashupArray.length > 0) {
							iscMashup.callMashups(this,mashupArray,{}).then(function(response){									
								iscWizard.exitWizard();
				       		},angular.noop);
						} else {
							iscWizard.exitWizard();
						}
						
					} else {
						iscWizard.exitWizard();
					}
					
				},
				
       
        });
    }]);
			 
			 
            

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewinfo
 *@viewname store.views.appointments.in-store.manage-appointment.schedule.appointment-schedule
 *@package store.views.appointments.in-store.manage-appointment.schedule
 *@class appointment-schedule
 *@description Displays 'Schedule Appointment' page of the 'Manage appointent' wizard.
 */

angular.module('store').controller('store.views.appointments.in-store.manage-appointment.schedule.appointment-schedule',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscModal','iscI18n','iscState','$filter','iscStateParams','$interval','$timeout','iscAppointment','iscObjectUtility','iscInStoreAppointment','iscAppContext','iscRule',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscModal, iscI18n, iscState,$filter,iscStateParams,$interval,$timeout,iscAppointment,iscObjectUtility,iscInStoreAppointment,iscAppContext,iscRule) {		
		iscWizard.initializeWizardPage($scope,{      
            model:{
                /**
				*@description Contains the 'getAppointmentDetails' mashup output for appointent details.
				*/
                "appointmentDetails":{},
                /**
				*@description Contains the 'getAppointmentOptions' mashup output for appointent options.
				*/
                "appointmentOptions":{},
                /**
				*@description Contains the calender week data.
				*/
                "calenderWeekData":{},
                /**
				*@description Contains the Customer details.
				*/
				"customerDetails":{}
            },
            mashupRefs : [
                {
                    /**
                    *@description Gets the appointment details .
                    */
                    mashupRefId: 'getAppointmentDetails',
                    mashupId: 'store.views.appointments.in-store.manage-appointment.schedule.getAppointmentDetails',
                    modelName: "appointmentDetails"
                },
                {
                    /**
                    *@description Gets the appointment options .
                    */
                    mashupRefId: 'getAppointmentOptions',
                    mashupId: 'store.views.appointments.in-store.manage-appointment.schedule.getAppointmentOptions',
                    modelName:"appointmentOptions"
                },
                {
                    /**
                    *@description Update the appointment details .
                    */
                    mashupRefId: 'updateAppointmentDetails',
                    mashupId: 'store.views.appointments.in-store.manage-appointment.schedule.updateAppointmentDetails'
                },
                {
                    /**
                    *@description Delete the appointment details .
                    */
                    mashupRefId: 'removeServiceFromDraftOrder',
                    mashupId: 'store.views.appointments.in-store.manage-appointment.schedule.deleteAppointmentDetails'
                },
                {
                    /**
                    *@description Get Store availability for the week.
                    */
					mashupRefId: 'getStoreAvailabilityForWeek',
					mashupId: 'store.views.appointments.in-store.manage-appointment.schedule.getStoreAvailabilityForWeek'
				},
                {
                    /**
                    *@description Confirm the appointment.
                    */
					mashupRefId: 'confirmAppointment',
					mashupId: 'store.views.appointments.in-store.manage-appointment.schedule.confirmAppointment'
				},
				{
					/**
                    *@description Delete unconfirmed appointment.
                    */
					mashupRefId: 'deleteServiceFromConfirmedOrder',
					mashupId: 'store.views.appointments.in-store.manage-appointment.schedule.deleteUnconfirmedAppointment'
				},
				{
                    /**
                    *@description Delete Draft sales order created as part of appointment.
                    */
	            	mashupRefId: 'deleteDraftAppntSalesOrder',
					mashupId: 'store.views.appointments.in-store.deleteAppointmentSalesOrder',
                },
                {
                    /**
                    *@description Gets the store work orders by service
                    */
                     mashupRefId: 'getStoreWorkOrderListByService',
                     mashupId: 'store.views.appointments.in-store.manage-appointment.schedule.getStoreWorkOrderListByService',
                },
                {
	               /**
				    *@description Gets and deletes the pending work order lines
				    */
	            	mashupRefId: 'getAndDeletePendingWorkOrderLines',
					mashupId: 'store.views.appointments.in-store.getAndDeletePendingWorkOrderLines',
                }
            ],
            ui:{
                /**
                 *@property {Boolean} initalDataLoaded Flag to inidicate initial data is loaded or not.
                 */
                initalDataLoaded:false,
                /**
                 *@property {String} selectedDate Holds selected Date.
                 */
                selectedDate:"",
                /**
                 *@property {Object} selectedWorkOrder Holds selected work order.
                 */
                selectedWorkOrder:undefined,
                /**
                 *@property {Number} selectedWorkOrderIndex Holds selected work order index.
                 */
                selectedWorkOrderIndex:0,
                /**
                 *@property {Obect} workOrder Work order that is current being active for modifcations.
                 */
                workOrder:undefined,
                /**
                 *@property {Boolean} loadingCalenderWeekData Flag to inidicate calender week data is loaded or not.
                 */
                loadingCalenderWeekData:true,
                /**
                 *@property {Boolean} loadingTimeSlotData Flag to inidicate time slot data is loaded or not.
                 */
                loadingTimeSlotData:false,
                /**
                 *@property {Boolean} showFinish Flag to inidicate finish button should be shown or continue button should be shown.
                 */
                showFinish:false,
                /**
                 *@property {Boolean} isDraftAppointmentSalesOrder Flag to inidicate sales is draft or not.
                 */
                isDraftAppointmentSalesOrder:true,
                /**
                 *@property {Boolean} customerIdentified Flag to inidicate whether customer is identified or not.
                 */
                customerIdentified: false,
                /**
                 *@property {Object} currentStore Current store details.
                 */
                currentStore:iscAppContext.getFromContext('storeName'),
                /**
                 *@property {String} maxAppointmentDaysAhead Maximum days till which appointment can be booked.
                 */
                maxAppointmentDaysAhead:iscRule.getRuleSetValue('maxAppointmentDaysAhead'),
                /**
                 *@property {String} unavailableReason Holds the reason code for service unavailability.
                 */
                unavailableReason:"",
                /**
                 *@property {Boolean} isSelectedDateAHoliday - Flag to indicate whether the selected is a working or non-working day
                 */
                isSelectedDateAHoliday: false,
                /**
                 *@property {Boolean} loadingWeekData - Flag to indicate whether the full page is still loading.
                 */               
                loadingWeekData: true
            },
            /**
			*@description Reads wizard model and loads initial appointment details.
			*/
			initialize : function(){
                var input = iscWizard.getWizardModel('createAppointmentOrderModel');
                iscMashup.callMashup(this,'getAppointmentDetails',{Order:{OrderHeaderKey:input.Order.OrderHeaderKey}},{})
                    .then(this.handleGetAppointmentDetials.bind(this),angular.noop);
				
                this.model.customerDetails = iscWizard.getWizardModel('createAppointmentCustomerModel');
				if(!iscCore.isVoid(this.model.customerDetails)){
					this.ui.customerIdentified = true;
				}
               
                $scope.$watch("ui.workOrder",function(newValue){
                        if(newValue !== undefined && newValue.WorkOrderKey !==undefined && !iscCore.isVoid(iscCore.getValueFromJsonPath(newValue,"selectedTimeSlot.slot.Date",false))){
                            this.ui.selectedDate = newValue.selectedTimeSlot.slot.Date;
                        }
                        $timeout(this.handleWorkOrderChange.bind(this),0);
                    }.bind(this));
			},
            /**
			 *@description Hanldes date change from the date selector.
			 *@param {Object} response - Output data of 'getStoreAvailabilityForWeek' mashup call
			 */
            uiHandleDateChange : function(dateData){
                this.ui.selectedDate = dateData.selectedDate;    
				this.handleWorkOrderChange();
            },
            /**
              *@description Informs whether the selected date is a working or non-working day
			 * @param {Object} holidayData - contains flag about working or non-working day
             */
            uiHandleDateSelectionChangeIsHoliday : function(holidayData){
            	this.ui.isSelectedDateAHoliday = holidayData.isHoliday;
            },
            /**
			 *@description Hanldes week change from the date selector.
			 *@param {Object} response - Output data of 'getStoreAvailabilityForWeek' mashup call
			 */
            uiHandleWeekChange:function(weekData){
                var weeklyCalendarMashupInput = {
                    Calendar:{
                        CalendarKey : this.ui.workOrder.NodeBusinessCalendarKey,// iscAppContext.getFromContext('storeBusinessCalendarKey'),
                        FromDate : weekData.fromDate,
                        ToDate : weekData.toDate
                    }
                };
                this.ui.loadingCalenderWeekData = true;
				iscMashup.callMashup(this,"getStoreAvailabilityForWeek", weeklyCalendarMashupInput,{})
                    .then(this.processWeeklySlotsMashupOutput.bind(this),angular.noop);
            },
            /**
			 *@description Callback handler for 'getStoreAvailabilityForWeek' API mashup call made from the 'initialize' method.
			 *@param {Object} response - Output data of 'getStoreAvailabilityForWeek' mashup call
			 */
            processWeeklySlotsMashupOutput: function(response) {
				var storeWeekAvailability = iscMashup.getMashupOutput(response,"getStoreAvailabilityForWeek");
				this.ui.calenderWeekData = iscAppointment.getCalenderWeekData(storeWeekAvailability);
                this.ui.loadingCalenderWeekData = false;
			},
            
            /**
			 *@description Handles work order change
			 */
            handleWorkOrderChange:function(){
            	this.ui.loadingWeekData = false;
                if(this.ui.workOrder !== undefined && this.ui.workOrder.WorkOrderKey !==undefined 
                        && !this.ui.workOrder.DisplayAppointmentInPastWarning && !iscCore.isVoid(this.ui.selectedDate)){
                    var input = {
                        Promise:{
                            WorkOrderKey:this.ui.workOrder.WorkOrderKey,
                            Overrides:{
                                ReqDeliveryDate:this.ui.selectedDate.substring(0,10)+'T00:00:00',//+this.ui.workOrder.TimezoneOffset,
                                Timezone:this.ui.workOrder.Timezone
                            } 
                        }
                    }
                    this.ui.loadingTimeSlotData = true;
                    iscMashup.callMashup(this,'getAppointmentOptions',input,{showMask:false})
                        .then(this.handleGetAppointmentOptions.bind(this),angular.noop);
                }
            },
            /**
			 *@description Callback handler for 'getAppointmentDetails' API mashup call.
             *@param {Object} response - Output data of 'getAppointmentDetails' mashup call
			 */
            handleGetAppointmentDetials:function(controllerData){
                this.ui.initalDataLoaded = true;
                var appointmentDetails = iscMashup.getMashupOutput(controllerData,"getAppointmentDetails");
                
                this.ui.isDraftAppointmentSalesOrder = iscInStoreAppointment.isDraftAppointmentSalesOrder(appointmentDetails);
                this.removeCancelledWorkOrders(appointmentDetails.Order.WorkOrders);
                
                this.ui.workOrder = appointmentDetails.Order.WorkOrders.WorkOrder[this.ui.selectedWorkOrderIndex];
                this.ui.showFinish = !iscCore.isVoid(appointmentDetails.Order.BillToID);
                
                
                for(var i=0;i<appointmentDetails.Order.WorkOrders.WorkOrder.length;i++){
                    var workOrder = appointmentDetails.Order.WorkOrders.WorkOrder[i];
                    if(workOrder.WorkOrderAppointments && workOrder.WorkOrderAppointments.WorkOrderAppointment && workOrder.WorkOrderAppointments.WorkOrderAppointment[0]){
                        var startTime = workOrder.WorkOrderAppointments.WorkOrderAppointment[0].PromisedApptStartDate;
                        var endTime = workOrder.WorkOrderAppointments.WorkOrderAppointment[0].PromisedApptEndDate;
                        workOrder.selectedTimeSlot = iscAppointment.getTimeSlotData(startTime,endTime,workOrder.TimezoneOffset);
                        workOrder.isAppointmentDateInPast = iscAppointment.isAppointmentTimePassed(startTime, workOrder.TimezoneOffset);
                        workOrder.DisplayAppointmentInPastWarning = workOrder.isAppointmentDateInPast;
                        workOrder._hasConfirmedAppointment = true;
                    } else if(!this.ui.isDraftAppointmentSalesOrder) {
                    	workOrder._hasConfirmedAppointment = false;
                    }
                    workOrder.selectedShipNode = workOrder.WorkOrderServiceLines.WorkOrderServiceLine[0].OrderLine.Shipnode;
                }
            },
            /**
			 *@description Callback handler for 'getAppointmentOptions' API mashup call.
             *@param {Object} response - Output data of 'getAppointmentOptions' mashup call
			 */
            handleGetAppointmentOptions:function(controllerData){
                var appointmentOptions = iscMashup.getMashupOutput(controllerData,"getAppointmentOptions");
                var timezoneOffset = appointmentOptions.Promise.Overrides.ReqDeliveryDate.substring(19,25);
                if(iscCore.isBooleanFalse(appointmentOptions.Promise.SuggestedOption.Option.HasAnyUnavailableQty)){
                    var slotArray = appointmentOptions.Promise.SuggestedOption.Option.PromiseServiceLines.PromiseServiceLine[0].Slots;
                    slotArray.TimezoneOffset = timezoneOffset;
                    this.ui.slotGroupData = iscAppointment.getSlotGroupData(slotArray);
                }
                else{
                    this.ui.slotGroupData = {hasAnyAvailableSlot:false};
                }
                this.ui.unavailableReason = "";
                if(!iscCore.isVoid(iscCore.getValueFromJsonPath(appointmentOptions,"Promise.SuggestedOption.UnavailableLines.UnavailableLine"))){
                   this.ui.unavailableReason = appointmentOptions.Promise.SuggestedOption.UnavailableLines.UnavailableLine[0].Reasons.Reason[0].Text
                }
                this.ui.loadingTimeSlotData = false;
            },
            /**
			 *@description Selects previous appointment .
			 */
            uiSelectPreviousAppointment:function(){
                this.ui.selectedWorkOrderIndex = this.ui.selectedWorkOrderIndex > 0 ?this.ui.selectedWorkOrderIndex-1:this.ui.selectedWorkOrderIndex;
                this.ui.workOrder = this.model.appointmentDetails.Order.WorkOrders.WorkOrder[this.ui.selectedWorkOrderIndex];
            },
            /**
			 *@description Selects next appointment .
			 */
            uiSelectNextAppointment:function(){
                this.ui.selectedWorkOrderIndex = this.ui.selectedWorkOrderIndex < (this.model.appointmentDetails.Order.WorkOrders.WorkOrder.length -1) ? this.ui.selectedWorkOrderIndex+1:this.ui.selectedWorkOrderIndex;
                this.ui.workOrder = this.model.appointmentDetails.Order.WorkOrders.WorkOrder[this.ui.selectedWorkOrderIndex];
            },
            
            uiOnSlotSelectionChange:function(){
                console.log(this.ui.workOrder.selectedTimeSlot);  
            },
            /**
			 *@description Hanlder for 'Continue' button.
			 */
            uiContinue:function(){
                this.updateWorkOrderDetails();
            },
            /**
			 *@description Hanlder for 'Reschedule' button.
			 */
            uiReschedule:function() {
            	this.ui.workOrder.DisplayAppointmentInPastWarning = false;
            	this.handleWorkOrderChange();
            },
            /**
			 *@description Hanlder for 'Cancel' button.
			 */
            uiCancelAppointment:function() {
            	
            	var that = this;
            	this.ui.workOrder.deleteWorkOrder = true;
				var popInput = {appointmentModel:{OrderHeaderKey:this.model.appointmentDetails.Order.OrderHeaderKey, WorkOrderKey:this.ui.workOrder.WorkOrderKey}};
				var cancelAppointmentPopupInput = {
					 modalInput: function(){
						return popInput;
					}   
				};
				iscModal.openModal('store.views.appointments.common.cancel-appointment.cancel-appointment',cancelAppointmentPopupInput,{}).then(function(callBackData){
					if(callBackData.data !== null && callBackData.data !== undefined && callBackData.data.markAsCancelSuccess){
						that.handleCancelAppointment();
					}
				},angular.noop);
				
            },
            /**
			 *@description Handles for cancel appoinment action.
			 */
            handleCancelAppointment:function() {
            	this.removeCancelledWorkOrders(this.model.appointmentDetails.Order.WorkOrders);
            },
            /**
			 *@description Hanlder for 'Remove' button.
			 */
            uiDeleteAppointment:function(){
                
                iscModal.showConfirmationMessage("appointmentschedule.MESSAGE_Remove_appointment")
                    .then(function(action){
                        if(action === "YES"){
                            this.ui.workOrder.deleteWorkOrder = true;
                            var mashupId = (this.ui.isDraftAppointmentSalesOrder) ? 'removeServiceFromDraftOrder' : 'deleteServiceFromConfirmedOrder';
                            var deleteAppointentInput = iscInStoreAppointment.deleteAppointmentInput(this.ui.workOrder);
                            iscMashup.callMashup(this,mashupId,deleteAppointentInput,{})
                                .then(this.handleDeleteAppointment.bind(this),angular.noop);
                        }
                    }.bind(this),angular.noop)
                
            },
            /**
			 *@description Callback handler for 'removeServiceFromDraftOrder' or 'deleteServiceFromConfirmedOrder' API mashup call.
             *@param {Object} response - Output data of 'removeServiceFromDraftOrder' or 'deleteServiceFromConfirmedOrder' mashup call
			 */
            handleDeleteAppointment:function(controllerData){
                
                this.removeCancelledWorkOrders(this.model.appointmentDetails.Order.WorkOrders);
                
            },
            /**
			 *@description Removes the cancelled and completed work orders from the work order list.
             *@param {Object} workOrders Work order list
			 */
            removeCancelledWorkOrders : function(workOrders){
                for(var i=0;i<workOrders.WorkOrder.length;i++){
                	var workOrder = workOrders.WorkOrder[i];

                    if( workOrder.Status.Status.match("1400") || workOrder.Status.Status.match("1600") || iscCore.isVoid(workOrder.WorkOrderServiceLines.WorkOrderServiceLine)){
                        workOrders.WorkOrder.splice(i, 1);
                        i--;
                    }
                    if(workOrder.deleteWorkOrder){
                        workOrders.WorkOrder.splice(i, 1);
                        i--;
                    }
                }
                if(this.ui.selectedWorkOrderIndex > 0 && this.ui.selectedWorkOrderIndex >= workOrders.WorkOrder.length){
                    this.ui.selectedWorkOrderIndex = this.ui.selectedWorkOrderIndex - 1;
                }
                
                
                if(workOrders.WorkOrder.length === 0){
                	
                	if(iscInStoreAppointment.isDraftAppointmentSalesOrder(this.model.appointmentDetails)) {
                		
                		 iscModal.showWarningMessage("appointmentschedule.MESSAGE_No_services_available")
                         .then(function(action){
                             iscWizard.gotoPreviousPage(true);
                         }.bind(this),angular.noop);
                		
                	} else {
                		
                		iscModal.showWarningMessage("appointmentschedule.MESSAGE_AppointmentCancelled")
                        .then(function(action){
                            iscWizard.finishWizard();
                        }.bind(this),angular.noop);
                		
                	}
                   
                }
                else{
                    this.ui.workOrder = workOrders.WorkOrder[this.ui.selectedWorkOrderIndex]; 
                }
                
            },
            /**
			 *@description Validates the work orders and updates the work orders.
			 */
            updateWorkOrderDetails : function(){
               
                var hasAnyUnscheduledAppointment = false;
                var unscheduledAppointmentIndex = null;
                var mashupArray = [];
                for(var i=0;i<this.model.appointmentDetails.Order.WorkOrders.WorkOrder.length;i++){
                    var workOrder = this.model.appointmentDetails.Order.WorkOrders.WorkOrder[i];
                	if(iscCore.isVoid(iscCore.getValueFromJsonPath(workOrder,"selectedTimeSlot.slot.Date"))){
                        hasAnyUnscheduledAppointment = true;
                        unscheduledAppointmentIndex = i;
                        break;
                    }
                    else{
                        var scheduleAppInput = iscInStoreAppointment.getScheduleAppointmentInput(workOrder);
                        if(!iscCore.isVoid(scheduleAppInput)){
                            mashupArray.push(iscMashup.getMashupRefObj(this,'updateAppointmentDetails',scheduleAppInput));
                        }
                    }
                }
                
                if(!hasAnyUnscheduledAppointment){
                    console.log(mashupArray);
                    if(mashupArray.length > 0){
                        iscMashup.callMashups(this,mashupArray,{isMultiAPICall:true})
                            .then(this.handleUpdateWorkOrderDetails.bind(this),this.handleUpdateWorkOrderDetailsError.bind(this));
                    } else{
   						this.processPendingWorkOrderServiceLines();
                    }
                }
                else{
                    iscModal.showErrorMessage("appointmentschedule.MESSAGE_Unsheduled_appointments")
                        .then(function(){
                            this.ui.selectedWorkOrderIndex = unscheduledAppointmentIndex;
                            this.ui.workOrder = this.model.appointmentDetails.Order.WorkOrders.WorkOrder[this.ui.selectedWorkOrderIndex]; 
                        }.bind(this));
                }
                
            },
            
            /**
             * @description This method deletes sales order line with unconfirmed appointments and navigates to next screen in wizard.
             */
            processPendingWorkOrderServiceLines:function() {
            	iscMashup.callMashup(this,'getAndDeletePendingWorkOrderLines',{WorkOrder:{OrderHeaderKey:this.model.appointmentDetails.Order.OrderHeaderKey}},{})
				.then(this.processAppointmentSalesOrderAndGotoNextScreen.bind(this),angular.noop);
            },
            
            /**
             * @description This method is a callback handler for updateAppointmentDetails mashup which invokes another method for process appointment sales order and navigating further in the appointment wizard flow.
             * 
             * @param {Object} controllerData - API response JSON data
             */
            handleUpdateWorkOrderDetails:function(controllerData){
            	this.processAppointmentSalesOrderAndGotoNextScreen();
            },
            
            /**
             * @description This method validates sales order and navigates to:
             * 		1. Customer Lookup - Sales order is in draft status and customer is not identified.
             * 		2. Finishes the wizard - Sales order is in draft status and customer is identified.
             * 		3. Exits the wizard - Sales order is in confirmed.
             */
            processAppointmentSalesOrderAndGotoNextScreen: function() {
            	
            	if(iscInStoreAppointment.isDraftAppointmentSalesOrder(this.model.appointmentDetails)) {
            		
            		if(this.ui.showFinish){
                        var orderInput = iscWizard.getWizardModel('createAppointmentOrderModel');
                        iscMashup.callMashup(this,'confirmAppointment',{Order:{OrderHeaderKey:orderInput.Order.OrderHeaderKey}},{})
                            .then(function(){
                                iscWizard.finishWizard();
                            }.bind(this),angular.noop);
                    }
                    else{
                    	this.gotoCustomerLookup();
                    }
            		
            	} else {
            		iscWizard.finishWizard();
            	}
            	
            },
            
            /**
             * @description This method is used to navigate to customer identify screen
             */
            gotoCustomerLookup:function() {
            	
            	iscWizard.gotoCustomPage('customer-lookup',{},{})
            },
            
            /**
             * @description This method is error callback handler for   updateAppointmentDetails mashup. This method handles error thrown by modifyWorkOrder API and displays suitable message on UI.
             * 
             * @param {Object} controllerError - API error response JSON object
             */
            handleUpdateWorkOrderDetailsError:function(controllerError){
                if(controllerError.Errors.Attributes.ErrorCode === "VAS00066"){
                    var workOrderNo = controllerError.Errors.Attributes.WorkOrderNo;
                    for(var i=0;i<this.model.appointmentDetails.Order.WorkOrders.WorkOrder.length;i++){
                        var workOrder = this.model.appointmentDetails.Order.WorkOrders.WorkOrder[i];
                        if(workOrder.WorkOrderNo === workOrderNo){
                            iscModal.showErrorMessage(iscI18n.translate("appointmentschedule.MESSAGE_No_slot_available",{service:workOrder.WorkOrderServiceLines.WorkOrderServiceLine[0].ItemShortDescription}));
                        }
                    }
                } 
                else{
                    iscMashup.handleMashupError(controllerError);
                }
            },
            
            /**
             * @description This method is used to launch Change store popup.
             * 
             * @param {Object} workOrder - work order model.
             */
            uiSelectStore:function(workOrder) {
            	
            	var that = this;
            	var orderLine = this.ui.workOrder.WorkOrderServiceLines.WorkOrderServiceLine[0].OrderLine;
				var storeSearchModalInput = {
						modalInput: function(){
							return {
									inputData : {
													Item : {ItemID:orderLine.ItemDetails.ItemID,UnitOfMeasure:orderLine.ItemDetails.UnitOfMeasure},
													ShipNode : orderLine.Shipnode.ShipNode
												}
								};
						}
				};
				iscModal.openModal('store.views.appointments.in-store.change-store.change-store',storeSearchModalInput,{})
						 .then(function(callBackData){
								that.afterStoreSelection.call(that,callBackData.data);
						  },angular.noop);
            	
            },
            
            /**
             * @description This method is callback handler invoked after selecting the store. This method invokes API to create a sales order line for selected store or check for existing sales order line in the selected store.
             * 
             *  @param {Object} shipNodeDetails - selected store model
             */
            afterStoreSelection:function(shipNodeDetails) {
            	
            	var getWorkOrderListInput = iscInStoreAppointment.getStoreWorkOrderByserviceInput(shipNodeDetails, this.ui.workOrder);
            	iscMashup.callMashup(this,'getStoreWorkOrderListByService',getWorkOrderListInput,{}).then(this.processWorkOrderList.bind(this),angular.noop);
            	
            },
            
            /**
             * @description This method is a callback handler for getStoreWorkOrderListByService mashup. This method updates appointmentDetails model with the workOrder which was created for the selected store
             * and also oints ui.workOrder to point to work order of changed store.
             * 
             * @param {Object} response - API response object
             */
            processWorkOrderList:function(response) {
            	
            	var apiOutput = iscMashup.getMashupOutput(response,"getStoreWorkOrderListByService");
            	console.log("WorkOrderList - ",apiOutput);
            	if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.WorkOrders) && !iscCore.isVoid(apiOutput.WorkOrders.WorkOrder[0])) {
            		var workOrderForChangedStore = apiOutput.WorkOrders.WorkOrder[0];
            		
            		if(workOrderForChangedStore.WorkOrderAppointments && workOrderForChangedStore.WorkOrderAppointments.WorkOrderAppointment && workOrderForChangedStore.WorkOrderAppointments.WorkOrderAppointment[0]){
                        var startTime = workOrderForChangedStore.WorkOrderAppointments.WorkOrderAppointment[0].PromisedApptStartDate;
                        var endTime = workOrderForChangedStore.WorkOrderAppointments.WorkOrderAppointment[0].PromisedApptEndDate;
                        workOrderForChangedStore.selectedTimeSlot = iscAppointment.getTimeSlotData(startTime,endTime,workOrderForChangedStore.TimezoneOffset);
                        workOrderForChangedStore.isAppointmentDateInPast = iscAppointment.isAppointmentTimePassed(startTime, workOrderForChangedStore.TimezoneOffset);
                        workOrderForChangedStore.DisplayAppointmentInPastWarning = workOrderForChangedStore.isAppointmentDateInPast;
                        workOrderForChangedStore._hasConfirmedAppointment = true;
                    } else {
                    	workOrderForChangedStore._hasConfirmedAppointment = false;
                    }
            		
            		workOrderForChangedStore.selectedShipNode = workOrderForChangedStore.WorkOrderServiceLines.WorkOrderServiceLine[0].OrderLine.Shipnode;
                	this.model.appointmentDetails.Order.WorkOrders.WorkOrder[this.ui.selectedWorkOrderIndex] = workOrderForChangedStore;
                	this.ui.workOrder = workOrderForChangedStore;            	
            	} 
            	
            	
            },
            
            /**
             * @description This method is a onclick handler on click of finish button. This method invokes API to saves appointment slot timings on work order.
             */
            uiFinish : function(){
                this.updateWorkOrderDetails();
            },
            
            /**
             * @description This method handles wizard exit. Displays appropriate confirmation messages before closing the appointment wizard
             */
            handleWizardExit:function() {
				
            	var that = this;
				
				var confirmationMsg = iscI18n.translate('instoreappointment.MSG_ExitAppointmentCreationFlow');
				iscModal.showConfirmationMessage(confirmationMsg).then(function(callBackAction){									
					if(callBackAction === 'YES'){
						that.cleanupPendingData();
					}
	       		});
				
				return true;
				
			},
			
			 /**
             * @description This method deletes the draft sales order or deletes sales order lines with unconfirmed appointments before closing the wizard.
             */
			cleanupPendingData:function() {
				
				var mashupArray = [];
				var salesOrder = iscWizard.getWizardModel('createAppointmentOrderModel');
				
				if(!iscCore.isVoid(salesOrder)) {

					if(iscInStoreAppointment.isDraftAppointmentSalesOrder()) {
						mashupArray.push(iscMashup.getMashupRefObj(this,'deleteDraftAppntSalesOrder',iscInStoreAppointment.getDeleteAppointmentSalesOrderInput(salesOrder)));
					} else {
						mashupArray.push(iscMashup.getMashupRefObj(this,'getAndDeletePendingWorkOrderLines',{WorkOrder:{OrderHeaderKey:salesOrder.Order.OrderHeaderKey}}));
					}
					
					if(mashupArray.length > 0) {
						iscMashup.callMashups(this,mashupArray,{}).then(function(response){									
							iscWizard.exitWizard();
			       		},angular.noop);
					} else {
						iscWizard.exitWizard();
					}
					
				} else {
					iscWizard.exitWizard();
				}
				
			},
			
			 /**
             * @description This method is a onclick handler of Close button. Displays appropriate confirmation messages before closing the appointment wizard
             */
			uiCancel: function() {
				
				var confirmationMsg = iscI18n.translate('instoreappointment.MSG_ExitAppointmentCreationFlow');
				iscModal.showConfirmationMessage(confirmationMsg).then(function(callBackAction){									
					if(callBackAction === 'YES'){
						iscWizard.closeWizard();
					}
	       		});
				
				
			},
			
			 /**
             * @description This method handles wizard back link click. Displays appropriate confirmation messages before going to previous page.
             * If user chooses to navigate to previous page, we invoke API to delete sales order line with unconfirmed appointments.
             * 
             */
			handleWizardBack:function(){
				
				var isFirstPage = iscWizard.isFirstPage();
				
				if(isFirstPage) {	        		
					var confirmationMsg = iscI18n.translate('instoreappointment.MSG_ExitAppointmentCreationFlow');
					iscModal.showConfirmationMessage(confirmationMsg).then(function(callBackAction){									
						if(callBackAction === 'YES'){
							iscWizard.closeWizard();
						}
		       		});
					return true;
	        	} else {
	        		
                    var confirmationMsg = iscI18n.translate('globals.MSG_BackClickDirtyMessage');
					iscModal.showConfirmationMessage(confirmationMsg).then(function(callBackAction){									
						if(callBackAction === 'YES'){
							/**
                             *  Delete all pending WOs created other than for current store (if any)
                             */
                            iscMashup.callMashup(this,'getAndDeletePendingWorkOrderLines',{WorkOrder:{OrderHeaderKey:this.model.appointmentDetails.Order.OrderHeaderKey,NodeKey:this.ui.currentStore, NodeKeyQryType:"NE"}},{})
                                .then(function(callbackData){
                                    iscWizard.gotoPreviousPage(true);
                                },angular.noop);

                        }
		       		}.bind(this));
                    
                    
	        		
	        		return true;
	        	}
				
				
			}
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
 *@package store.views.appointments.manage-appointment.select-services
 *@class select-services
 *@description Displays 'Select appointment type' page of the 'Create Appointment' wizard.
 */
angular.module("store").controller("store.views.appointments.in-store.manage-appointment.select-services.select-services", [
	"$scope", "iscScreen", "moment",'iscMashup','iscState','iscI18n','iscInStoreAppointment','iscAppContext','iscWizard','iscModal','iscObjectUtility','iscDomUtility','iscMedia',
	function($scope, iscScreen, moment,iscMashup,iscState,iscI18n,iscInStoreAppointment,iscAppContext,iscWizard,iscModal, iscObjectUtility,iscDomUtility,iscMedia) {
		iscWizard.initializeWizardPage($scope, {
			model: {
				/**
				*@iscdoc model
				*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
				*@name configuredServices
				*@description Contains the 'getCompleteItemList' mashup output of all services configured for the store.
				*/
				'configuredServices': {},
				
				/**
				*@iscdoc model
				*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
				*@name appointmentSalesOrderDetails
				*@description contains sales order details
				*/
				'appointmentSalesOrderDetails':{},
				
				/**
				*@iscdoc model
				*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
				*@name customerDetails
				*@description Contains data about the customer for whom the appointment is getting created .
				*/
				'customerDetails': {}
			},
			
			mashupRefs: [
				{
					/**
					*@iscdoc mashup
				    *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
				    *@mashupid store.views.appointments.in-store.manage-appointment.select-services.getCompleteItemList
				    *@mashuprefid getCompleteItemList
					*@modelname configuredServices
					*@description Gets list of all configured serrvices for the store.
					*/
					mashupRefId: 'getCompleteItemList',
					mashupId: 'store.views.appointments.in-store.manage-appointment.select-services.getCompleteItemList',
					modelName: 'configuredServices'
				},
				{
					/**
					*@iscdoc mashup
				    *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
				    *@mashupid store.views.appointments.in-store.manage-appointment.select-services.createOrder
				    *@mashuprefid createAppntSalesOrder
					*@description this mashup is sued to create sales order in draft status.
					*/
					mashupRefId: 'createAppntSalesOrder',
					mashupId: 'store.views.appointments.in-store.manage-appointment.select-services.createOrder',
				},
				{
					/**
					*@iscdoc mashup
				    *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
				    *@mashupid store.views.appointments.in-store.manage-appointment.select-services.getAppointmentDetails
				    *@mashuprefid getAppointmentSalesOrderDetails
					*@description This mashup is used to get sales order details.
					*/
					mashupRefId: 'getAppointmentSalesOrderDetails',
					mashupId: 'store.views.appointments.in-store.manage-appointment.select-services.getAppointmentDetails',
				},
				{
					/**
					*@iscdoc mashup
				    *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
				    *@mashupid store.views.appointments.in-store.manage-appointment.select-services.modifyAppntSalesOrder
				    *@mashuprefid modifyAppntSalesOrder
					*@description This mashup is used to REMOVE or ADD new sales order lines to existing sales order.
					*/
					mashupRefId: 'modifyAppntSalesOrder',
					mashupId: 'store.views.appointments.in-store.manage-appointment.select-services.modifyAppntSalesOrder',
				},
				{
					/**
					*@iscdoc mashup
				    *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
				    *@mashupid store.views.appointments.in-store.manage-appointment.select-services.updateInstructionsOnWorkOrder
				    *@mashuprefid updateInstructionsOnWorkOrder
					*@description This mashup is used to modify service instructions on work orderss.
					*/
					mashupRefId: 'updateInstructionsOnWorkOrder',
					mashupId: 'store.views.appointments.in-store.manage-appointment.select-services.updateInstructionsOnWorkOrder',
				},
				{
					/**
					*@iscdoc mashup
				    *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
				    *@mashupid store.views.appointments.in-store.manage-appointment.select-services.deleteServiceOrderLine
				    *@mashuprefid deleteServiceOrderLine
					*@description This mashup is used to delete sales order lines from existing sales order.
					*/
					mashupRefId: 'deleteServiceOrderLine',
					mashupId: 'store.views.appointments.in-store.manage-appointment.select-services.deleteServiceOrderLine',
				},
				{
					/**
					*@iscdoc mashup
				    *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
				    *@mashupid store.views.appointments.in-store.deleteAppointmentSalesOrder
				    *@mashuprefid deleteDraftAppntSalesOrder
					*@description This mashup is used to delete draft sales order.
					*/
	            	mashupRefId: 'deleteDraftAppntSalesOrder',
					mashupId: 'store.views.appointments.in-store.deleteAppointmentSalesOrder',
	             },
	              {
	            	 /**
						*@iscdoc mashup
					    *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
					    *@mashupid store.views.appointments.in-store.getAndDeletePendingWorkOrderLines
					    *@mashuprefid getAndDeletePendingWorkOrderLines
						*@description This mashup is sied to delete sales order line with unconfirmed appointments.
						*/
	            	mashupRefId: 'getAndDeletePendingWorkOrderLines',
					mashupId: 'store.views.appointments.in-store.getAndDeletePendingWorkOrderLines',
	              }
			
			],
			
			ui: {
				/**
                 *@property {Integer} numberOfServicesSelected - Count of number of serrvices added by the user
                 */
				numberOfServicesSelected: 0,
				
				/**
                 *@property {Boolean} noServicesConfiguredForStore - Flag to indicate that there are no services configured for the store
                 */
				noServicesConfiguredForStore: false,
				
				/**
                 *@property {Array} addedServices - Array holding the information about all serrvices added by the user on the UI
                 */
				addedServices : [],
				
				/**
                 *@property {Array} modifiedServices - Array holding the information about all modified services by the user on the UI
                 */
				modifiedServices : [],
				
				/**
                 *@property {Array} servicesToBeDeleted -  Array holding the information about all deleted services by the user on the UI
                 */
				servicesToBeDeleted:[],
				
				/**
                 *@property {Object} selectedServiceMap - Map holding the information about selected services  by the user on the UI
                 */
				selectedServiceMap:{},
				
				/**
                 *@property {Object} modifiedWorkOrderInstructionMap - Map holding the information about selected services with instructions modified by the user on the UI
                 */
				modifiedWorkOrderInstructionMap:{},
				
				/**
                 *@property {Object} highlightedService - Object that contains information about the last added or clicked service and hence needs highlighting
                 */
				highlightedService: {},
				
				/**
                 *@property {Boolean} serviceClickedForMoreInfo - Flag to indicate that a service was clicked on UI to view its description
                 */
				serviceClickedForMoreInfo: false,
				
				/**
                 *@property {Boolean} isDraftAppointmentSalesOrder - 
                 */
				isDraftAppointmentSalesOrder:false,
				
				/**
                 *@property {Boolean} customerIdentified - Flag to indicate if a customer is already associated with the current appointment
                 */
				customerIdentified: false,
				
				currentStore:iscAppContext.getFromContext('storeName')
			},
			
			/**
			*@iscdoc viewinit
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@description Reads wizard model and loads customer details, unconfirmed service lines and work order details if applicable. Calls 'getCompleteItemList' mashup to load the list of all serrvices configured for the store.
			*/
			initialize: function() {
				
				var mashupArray = [];
				
				// Handling a scenario where user clicks back from appointment schedule screen
				var appointmentSalesOrder = iscWizard.getWizardModel('createAppointmentOrderModel');
				if(!iscCore.isVoid(appointmentSalesOrder) && !iscCore.isVoid(appointmentSalesOrder.Order) && !iscCore.isVoid(appointmentSalesOrder.Order.OrderHeaderKey)) {
            		mashupArray.push(iscMashup.getMashupRefObj(this,'getAppointmentSalesOrderDetails',{Order:{OrderHeaderKey:appointmentSalesOrder.Order.OrderHeaderKey}}));
            	}
				
				this.model.customerDetails = iscWizard.getWizardModel('createAppointmentCustomerModel');
				if(!iscCore.isVoid(this.model.customerDetails)){
					this.ui.customerIdentified = true;
				}
				
				mashupArray.push(iscMashup.getMashupRefObj(this,'getCompleteItemList',{Item:{}}));
				
				iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitMashupOutput.bind(this),angular.noop);
				
				 $scope.$watch('ui.highlightedService.ServiceInstructions',function(newData,oldData){
             		 $scope.uiIsExistingInstructionModified();
          		 });
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname handleInitMashupOutput
			*@description Callback handler for 'getCompleteItemList' API mashup call made from the 'initialize' method.
			*@param {Object} response - Output data of 'getCompleteItemList' mashup call
			*/
			handleInitMashupOutput: function(response) {
				
				if(!angular.isArray(this.model.configuredServices.ItemList.Item)) {
					this.ui.noServicesConfiguredForStore = true;
				} else {
					this.model.configuredServices.ItemList.Item = this.model.configuredServices.ItemList.Item.sort(this.sortServices);
				}
				
				// Handling a scenario where user clicks back from appointment schedule screen
				this.model.appointmentSalesOrderDetails = iscMashup.getMashupOutput(response,'getAppointmentSalesOrderDetails');
				if(!iscCore.isVoid(this.model.appointmentSalesOrderDetails) && !iscCore.isVoid(this.model.appointmentSalesOrderDetails.Order)) {
					iscWizard.setWizardModel('createAppointmentOrderModel',this.model.appointmentSalesOrderDetails);
					this.ui.isDraftAppointmentSalesOrder = iscInStoreAppointment.isDraftAppointmentSalesOrder(this.model.appointmentSalesOrderDetails);
					this.initializeAddedServices();
				}
				
			},
	        
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname sortServices
			*@description Sorts the serrvices based on alphabetical order.
			*@param {Object} serviceOne - First service out of the two to be compared with another for sorting.
			*@param {Object} serviceTwo - Second service out of the two to be compared with another for sorting.
			*/
			sortServices: function(serviceOne, serviceTwo) {
				var serviceOneDescription = serviceOne.PrimaryInformation.ShortDescription.toLowerCase().replace(/\s/g,'');
				var serviceTwoDescription = serviceTwo.PrimaryInformation.ShortDescription.toLowerCase().replace(/\s/g,'');
				if (serviceOneDescription < serviceTwoDescription) {
					return -1;
				}
				if (serviceOneDescription > serviceTwoDescription) {
					return 1;
				}
				return 0;
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname initializeAddedServices
			*@description ---.
			*/
			initializeAddedServices:function() {
				
				if(!iscCore.isVoid(this.model.appointmentSalesOrderDetails) && !iscCore.isVoid(this.model.appointmentSalesOrderDetails.Order) && !iscCore.isVoid(this.model.appointmentSalesOrderDetails.Order.WorkOrders) && !iscCore.isVoid(this.model.appointmentSalesOrderDetails.Order.WorkOrders.WorkOrder)) {
					
					var numOfWorkOrders = iscObjectUtility.isNumber(Number(this.model.appointmentSalesOrderDetails.Order.WorkOrders.WorkOrder.length)) ? Number(this.model.appointmentSalesOrderDetails.Order.WorkOrders.WorkOrder.length) : 0;
					if(numOfWorkOrders > 0) {
						
						for(var i=0;i<numOfWorkOrders;i++) {
							
							var workOrder = this.model.appointmentSalesOrderDetails.Order.WorkOrders.WorkOrder[i];
							
							if(!iscCore.isVoid(workOrder) && !iscInStoreAppointment.isWorkOrderOpen(workOrder) && !iscCore.isVoid(workOrder.WorkOrderServiceLines) && !iscCore.isVoid(workOrder.WorkOrderServiceLines.WorkOrderServiceLine[0])) {
								
								var appointmentService = {};
								appointmentService.WorkOrderKey = workOrder.WorkOrderKey;
								
								if(workOrder.WorkOrderAppointments && workOrder.WorkOrderAppointments.WorkOrderAppointment && workOrder.WorkOrderAppointments.WorkOrderAppointment[0]){
									appointmentService._hasConfirmedAppointment = true;
								} else {
									appointmentService._hasConfirmedAppointment = false;
								}
								
								var workOrderServiceLine = workOrder.WorkOrderServiceLines.WorkOrderServiceLine[0];
								
								if(workOrderServiceLine.OrderLine && workOrderServiceLine.OrderLine.ItemDetails) {
									
									appointmentService.OrderLineKey = workOrderServiceLine.OrderLine.OrderLineKey;
									appointmentService.ItemID = workOrderServiceLine.OrderLine.ItemDetails.ItemID;
									appointmentService.UnitOfMeasure = workOrderServiceLine.OrderLine.ItemDetails.UnitOfMeasure;
									appointmentService.DisplayUnitOfMeasure = workOrderServiceLine.OrderLine.ItemDetails.DisplayUnitOfMeasure;
									appointmentService.UOMDisplayFormat = workOrderServiceLine.OrderLine.ItemDetails.UOMDisplayFormat;
									
									appointmentService.ItemDetails = workOrderServiceLine.OrderLine.ItemDetails;
									
									if(workOrderServiceLine.OrderLine.LinePriceInfo) {
										appointmentService.ComputedPrice = {ListPrice:workOrderServiceLine.OrderLine.LinePriceInfo.ListPrice};
									}
									
									if(workOrderServiceLine.OrderLine.ItemDetails.PrimaryInformation) {
										
										appointmentService.PrimaryInformation = {
											ShortDescription : workOrderServiceLine.OrderLine.ItemDetails.PrimaryInformation.ShortDescription,
											ExtendedDescription : workOrderServiceLine.OrderLine.ItemDetails.PrimaryInformation.ExtendedDescription,
											FixedCapacityQtyPerLine : workOrderServiceLine.OrderLine.ItemDetails.PrimaryInformation.FixedCapacityQtyPerLine
										};
										
									}
									
									if(!iscCore.isVoid(workOrder.Instructions) && !iscCore.isVoid(workOrder.Instructions.Instruction[0])) {
										
										appointmentService.ServiceInstructions = workOrder.Instructions.Instruction[0].InstructionText;
										appointmentService.InstructionDetailKey = workOrder.Instructions.Instruction[0].InstructionDetailKey;
									}
									
									appointmentService.isServiceAdded = true;
									this.updateServiceAsAddedInConfiguredServiceModel(appointmentService.ItemID,appointmentService.UnitOfMeasure,appointmentService.ServiceInstructions,appointmentService.InstructionDetailKey);
									this.ui.addedServices.push(appointmentService);
									this.ui.numberOfServicesSelected++;
									this.ui.highlightedService = appointmentService;
									this.ui.selectedServiceMap[appointmentService.ItemID+appointmentService.UnitOfMeasure] = true;
									
								}
								
								
							}
							
						}
					}
					
				}
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname updateServiceAsAddedInConfiguredServiceModel
			*@description Updates the service information for the added service in the 'configuredServices' model 
			*@param {String} serviceItemId - ItemID of the added service
			*@param {String} serviceUOM - UOM of the added service
			*@param {Object} serviceInstructions - Instruction added by the user for the added service
			*@param {String} serviceInstructionDetailKey - Instruction key associated with the added service
			*/
			updateServiceAsAddedInConfiguredServiceModel : function(serviceItemId, serviceUOM,serviceInstructions,serviceInstructionDetailKey) {
				for(var i=0; i< this.model.configuredServices.ItemList.Item.length; i++) {
					var currentService = this.model.configuredServices.ItemList.Item[i];
					if(currentService.ItemID == serviceItemId && currentService.UnitOfMeasure == serviceUOM) {
						currentService.isServiceAdded = true;
						currentService.ServiceInstructions = serviceInstructions;
						currentService.InstructionDetailKey = serviceInstructionDetailKey;
						break;
					}
				}
			},
			
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			 *@methodname uiIsExistingInstructionModified
			 *@description ---.
			 */
			uiIsExistingInstructionModified:function() {
				
				if(!iscCore.isVoid(this.ui.highlightedService) && !iscCore.isVoid(this.ui.highlightedService.OrderLineKey)) {
					var modifiedService = angular.copy(this.ui.highlightedService);
					this.ui.modifiedWorkOrderInstructionMap[modifiedService.OrderLineKey] = modifiedService;
				}
				
			},
			
			/**
			 *@iscdoc uimethod
			 *@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			 *@methodname uiContinueAppointmentCreation
			 *@description Continues the appointment creation process by modifying changes to existing sales order associated with the appointment or by creating a new sales order for the appointment. Loads the 'Schedule Appointment' page at the end of modification/creation of sales order.
			 */
			uiContinueAppointmentCreation: function() {
				
				var appointmentSalesOrder = this.getAppointmentSalesOrderWizardModel();
				if(!iscCore.isVoid(appointmentSalesOrder) && !iscCore.isVoid(appointmentSalesOrder.Order) && !iscCore.isVoid(appointmentSalesOrder.Order.OrderHeaderKey)) {
					this.validatePendingChangesAndContinue();
				} else {
					iscMashup.callMashup(this,'createAppntSalesOrder',this.getCreateAppointmentSalesOrderInput()).then(this.postAppntSalesOrderCreation.bind(this));
				}
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname validatePendingChangesAndContinue
			*@description This method checks if user has added/removed services, modified existing instructions and invokes appropriates APIs .
			*/
			validatePendingChangesAndContinue:function() {
				
				var mashupArray = [];
				
				//get modified sales order line services which includes any new services added & removed services
				var modifyAppntSalesOrder = this.getModifyAppointmentSalesOrderInput();
				if(modifyAppntSalesOrder.Order.OrderLines.OrderLine.length > 0) {
					mashupArray.push(iscMashup.getMashupRefObj(this,'modifyAppntSalesOrder',modifyAppntSalesOrder));
				}
				
				//get modified sales order line services which includes any new services added & removed services
				for (var i in this.ui.modifiedWorkOrderInstructionMap) {
					mashupArray.push(iscMashup.getMashupRefObj(this,'updateInstructionsOnWorkOrder',this.getModifyWorkOrderInstructionsInput(this.ui.modifiedWorkOrderInstructionMap[i])));
				}
				
				if(this.ui.servicesToBeDeleted.length > 0) {
					this.appendDeleteOrderLineMashups(mashupArray);
				}
				
				if(mashupArray.length > 0) {
					iscMashup.callMashups(this,mashupArray,{}).then(this.postAppntSalesOrderModification.bind(this),angular.noop);
				} else {
					this.gotoNextPage(this.getAppointmentSalesOrderWizardModel());
				}
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname getModifyWorkOrderInstructionsInput
			*@description This method creates the API input for adding or removing instructions from work orders.
			*@param {Object} modifiedService - selected service by the user on UI
			*/
			getModifyWorkOrderInstructionsInput:function(modifiedService) {
				
				var workOrder = {WorkOrder:{WorkOrderKey:modifiedService.WorkOrderKey,Instructions:{Instruction:[]}}};
				workOrder.WorkOrder.Instructions.Instruction[0] = {Action:"Modify",InstructionDetailKey:modifiedService.InstructionDetailKey,InstructionText:modifiedService.ServiceInstructions};
				
				if(iscCore.isVoid(modifiedService.ServiceInstructions)) {
					workOrder.WorkOrder.Instructions.Instruction[0].Action = "Delete";
				}
				
				if(iscCore.isVoid(modifiedService.InstructionDetailKey)) {
					workOrder.WorkOrder.Instructions.Instruction[0].Action = "Create";
					workOrder.WorkOrder.Instructions.Instruction[0].InstructionType = "ISA_INS";
				}
				
				return workOrder;
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname getModifyAppointmentSalesOrderInput
			*@description  This method creates the API input for adding/removing sales order lines based on services selected by the user on UI.
			*/
			getModifyAppointmentSalesOrderInput:function() {
				
				var changeOrder = {Order:{OrderHeaderKey:this.getAppointmentSalesOrderWizardModel().Order.OrderHeaderKey}};
				
				changeOrder.Order.OrderLines = {};
				changeOrder.Order.OrderLines.OrderLine =[];
				
				for(var i=0; i<this.ui.addedServices.length; i++) {
					
					var currentService = this.ui.addedServices[i];
					
					if(!iscCore.isVoid(currentService) && iscCore.isVoid(currentService.OrderLineKey)) {
						
						currentServiceInput = {};
						currentServiceInput.Action = "CREATE";
						currentServiceInput.Item = {};
						currentServiceInput.Item.ItemID = currentService.ItemID;
						currentServiceInput.Item.UnitOfMeasure = currentService.UnitOfMeasure;
						currentServiceInput.OrderLineTranQuantity = {};
						currentServiceInput.OrderLineTranQuantity.TransactionalUOM = currentService.UnitOfMeasure;
						currentServiceInput.ServiceInstructions = currentService.ServiceInstructions!==undefined?currentService.ServiceInstructions.trim():"";
						
						currentServiceInput.PersonInfoShipTo = iscInStoreAppointment.getCurrentStoreAddress();
						
						changeOrder.Order.OrderLines.OrderLine.push(currentServiceInput);
						
					}
					
				}
				
				for(var i=0; i<this.ui.modifiedServices.length; i++) {
					
					var currentService = this.ui.modifiedServices[i];
					
					if(!iscCore.isVoid(currentService) && currentService.isDeleted && !currentService._hasConfirmedAppointment) {
						
						currentServiceInput = {};
						currentServiceInput.Action = "REMOVE";
						currentServiceInput.OrderLineKey = currentService.OrderLineKey;
						currentServiceInput.Item = {};
						currentServiceInput.Item.ItemID = currentService.ItemID;
						currentServiceInput.Item.UnitOfMeasure = currentService.UnitOfMeasure;
						currentServiceInput.OrderLineTranQuantity = {};
						currentServiceInput.OrderLineTranQuantity.TransactionalUOM = currentService.UnitOfMeasure;
						currentServiceInput.ServiceInstructions = currentService.ServiceInstructions!==undefined?currentService.ServiceInstructions.trim():"";
						changeOrder.Order.OrderLines.OrderLine.push(currentServiceInput);
						
					}
					
				}
				
				return changeOrder;
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname appendDeleteOrderLineMashups
			*@description This method is used to append sales order line mashup which is to deleted.
			*@param {Array} mashupArray - Array holding the mashup model
			*/
			appendDeleteOrderLineMashups:function(mashupArray) {
				
				for(var i=0;i<this.ui.servicesToBeDeleted.length;i++) {
					mashupArray.push(iscMashup.getMashupRefObj(this,'deleteServiceOrderLine',iscInStoreAppointment.getDeleteOrderLineInput(this.getAppointmentSalesOrderWizardModel().Order.OrderHeaderKey, this.ui.servicesToBeDeleted[i].OrderLineKey)));
				}
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname getCreateAppointmentSalesOrderInput
			*@description This mashup is used to create API input for creating sales order with sales order line for selected services.
			*/
			getCreateAppointmentSalesOrderInput:function() {
				
				var createOrderInput = {Order:{}};
				createOrderInput.Order.EntryType = iscAppContext.getFromContext('storeEntryType');
				
				var customerDetails = iscWizard.getWizardModel('createAppointmentCustomerModel');
				if(!iscCore.isVoid(customerDetails)){
					createOrderInput.Order.BillToID = customerDetails.Customer.CustomerID;
					
					if(!iscCore.isVoid(customerDetails.Customer.DisplayCustomerAddress)){
						createOrderInput.Order.PersonInfoBillTo={};
						createOrderInput.Order.PersonInfoBillTo = angular.copy(customerDetails.Customer.DisplayCustomerAddress);
						createOrderInput.Order.CustomerZipCode = customerDetails.Customer.DisplayCustomerAddress.ZipCode;
					}

					if(customerDetails.Customer.CustomerType === '02' || (customerDetails.Customer.CustomerContactList &&  customerDetails.Customer.CustomerContactList.CustomerContact && customerDetails.Customer.CustomerContactList.CustomerContact.length === 1)){
						createOrderInput.Order.CustomerContactID = customerDetails.Customer.CustomerContactList.CustomerContact[0].CustomerContactID;
						createOrderInput.Order.CustomerFirstName = customerDetails.Customer.CustomerContactList.CustomerContact[0].FirstName;
						createOrderInput.Order.CustomerLastName = customerDetails.Customer.CustomerContactList.CustomerContact[0].LastName;
						createOrderInput.Order.CustomerEMailID = customerDetails.Customer.CustomerContactList.CustomerContact[0].EmailID;
					}
				}
				
				createOrderInput.Order.PersonInfoShipTo = iscInStoreAppointment.getCurrentStoreAddress();
				 
				createOrderInput.Order.OrderLines = {};
				createOrderInput.Order.OrderLines.OrderLine =[];
				
				for(var i=0; i<this.ui.addedServices.length; i++) {
					var currentService = this.ui.addedServices[i];
					currentServiceInput = {};
					currentServiceInput.Item = {};
					currentServiceInput.Item.ItemID = currentService.ItemID;
					currentServiceInput.Item.UnitOfMeasure = currentService.UnitOfMeasure;
					currentServiceInput.OrderLineTranQuantity = {};
					currentServiceInput.OrderLineTranQuantity.TransactionalUOM = currentService.UnitOfMeasure;
					currentServiceInput.ServiceInstructions = currentService.ServiceInstructions!==undefined?currentService.ServiceInstructions.trim():"";
					
					currentServiceInput.PersonInfoShipTo = iscInStoreAppointment.getCurrentStoreAddress();
					
					createOrderInput.Order.OrderLines.OrderLine.push(currentServiceInput);
				}
				
				return createOrderInput;
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname postAppntSalesOrderCreation
			*@description This method is used to navigate to next page in the wizard after modifying sales order
			*@param {Object} response - API response JSON object
			*/
			postAppntSalesOrderCreation: function(response) {
				var mashupOutput = iscMashup.getMashupOutput(response,'createAppntSalesOrder');
				this.gotoNextPage(mashupOutput);
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname postAppntSalesOrderModification
			*@description  This method is used to navigate to next page in the wizard after creating draft sales order
			*@param {Object} response - API response JSON object
			*/
			postAppntSalesOrderModification: function(response) {
				this.gotoNextPage(this.getAppointmentSalesOrderWizardModel());
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname gotoNextPage
			*@description This method is used to navigate to next page in the wizard.
			*@param {Object} salesOrder - sales order model
			*/
			gotoNextPage:function(salesOrder) {
				
				if(salesOrder.Order.OrderHeaderKey) {
					var nextPageInput = {
						Order:{
							OrderHeaderKey:salesOrder.Order.OrderHeaderKey,
							DraftOrderFlag:salesOrder.Order.DraftOrderFlag
						}
					}
					iscWizard.setWizardModel('createAppointmentOrderModel',nextPageInput);
					iscWizard.gotoCustomPage('appointment-schedule',{},{});
				}
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname handleWizardExit
			*@description Thie method show appropriate message before exiting the wizard.
			*/
			handleWizardExit:function() {
				
				var that = this;
				
				var confirmationMsg = iscI18n.translate('instoreappointment.MSG_ExitAppointmentCreationFlow');
				iscModal.showConfirmationMessage(confirmationMsg).then(function(callBackAction){									
					if(callBackAction === 'YES'){
						that.cleanupPendingData();
					}
	       		});
				
				return true;
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname cleanupPendingData
			*@description This method deletes the draft sales order or deletes sales order lines with unconfirmed appointments before closing the wizard.
			*/
			cleanupPendingData:function() {
				
				var mashupArray = [];
				var salesOrder = iscWizard.getWizardModel('createAppointmentOrderModel');
				
				if(!iscCore.isVoid(salesOrder)) {

					if(iscInStoreAppointment.isDraftAppointmentSalesOrder()) {
						mashupArray.push(iscMashup.getMashupRefObj(this,'deleteDraftAppntSalesOrder',iscInStoreAppointment.getDeleteAppointmentSalesOrderInput(salesOrder)));
					} else {
						mashupArray.push(iscMashup.getMashupRefObj(this,'getAndDeletePendingWorkOrderLines',{WorkOrder:{OrderHeaderKey:salesOrder.Order.OrderHeaderKey}}));
					}
					
					if(mashupArray.length > 0) {
						iscMashup.callMashups(this,mashupArray,{}).then(function(response){									
							iscWizard.exitWizard();
			       		},angular.noop);
					} else {
						iscWizard.exitWizard();
					}
					
				} else {
					iscWizard.exitWizard();
				}
				
			},
			
			/**
			*@iscdoc uimethod
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname uiCancel
			*@description Cancels the appointment creation process when 'Close' button is clicked on UI. Any sales order associated with the appointment is deleted.
			*/
			uiCancel: function() {
				
				var confirmationMsg = iscI18n.translate('instoreappointment.MSG_ExitAppointmentCreationFlow');
				iscModal.showConfirmationMessage(confirmationMsg).then(function(callBackAction){									
					if(callBackAction === 'YES'){
						iscWizard.closeWizard();
					}
	       		});
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname handleWizardBack
			*@description This method handle the back link click. This method navigates to previous page in wizard or if its the first page then displays appropriate message before closing the wizard.
			*/
			handleWizardBack:function(){
				
				var isFirstPage = iscWizard.isFirstPage();
				
				if(isFirstPage) {	        		
					var confirmationMsg = iscI18n.translate('instoreappointment.MSG_ExitAppointmentCreationFlow');
					iscModal.showConfirmationMessage(confirmationMsg).then(function(callBackAction){									
						if(callBackAction === 'YES'){
							iscWizard.closeWizard();
						}
		       		});
					return true;
	        	} else {
	        		return false;
	        	}
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname confirmBeforeClose
			*@description This method invokes appropriate method based on wizard action close or exit.
			*@param {String} wizardAction - close or exit wizard action
			*/
			confirmBeforeClose: function(wizardAction) {
				wizardAction == 'close' ? iscWizard.closeWizard(): iscWizard.exitWizard();
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname getAppointmentSalesOrderWizardModel
			*@description This method returns sales order model stored in wizard.
			*/
			getAppointmentSalesOrderWizardModel:function() {
				return iscWizard.getWizardModel('createAppointmentOrderModel');
			},
			
			/**
			*@iscdoc uimethod
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname uiAddServiceToAppointment
			*@description Adds the service to the appointment when the 'Add' link is clicked on the UI.
			*@param {Object} service - Object containing the information about the service being added
			*/
			uiAddServiceToAppointment: function(service) {
				service.isServiceAdded = true;
				this.ui.addedServices.push(service);
				this.ui.numberOfServicesSelected++;
				this.ui.highlightedService = service;
				this.ui.selectedServiceMap[service.ItemID+service.UnitOfMeasure] = true;
				this.model.search = {};
			},
			
			/**
			*@iscdoc uimethod
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname uiIsServiceSelected
			*@description Shows the plus button if service is not added. Shows the tick mark for the added service.
			*@param {Object} service - Object containing the information about the service for which plus or tick mark needs to be shown
			*/
			uiIsServiceSelected:function(service) {
				return this.ui.selectedServiceMap[service.ItemID+service.UnitOfMeasure];
			},
			
			/**
			*@iscdoc uimethod
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname uiDeleteServiceToAppointment
			*@description Deletes the service when delete button is clicked on UI.
			*@param {Object} service - Object containing the information about the service being deleted
			*/
			uiDeleteServiceToAppointment: function(service) {
				
				var serviceToBeRemoved = this.getServiceObjectFromSelectedServices(service.ItemID);
				
				if(serviceToBeRemoved.model._hasConfirmedAppointment === true) {
					this.cancelService(serviceToBeRemoved);
				} else {
					this.removeServiceFromSelectedServices(serviceToBeRemoved);
				}
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname getServiceObjectFromSelectedServices
			*@description This method returns service model from selected services model based on item/service Id.
			*@param {String} itemId - service or item id
			*/
			getServiceObjectFromSelectedServices:function(itemId) {
				
				var service = {model:"",index:-1};
				
				for(var i = this.ui.addedServices.length - 1; i >= 0; i--) {
					var addedService = this.ui.addedServices[i];
					if(addedService.ItemID == itemId) {
						service.model = addedService;
						service.index = i;
						break;
					}
				}
				
				return service;
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname removeServiceFromSelectedServices
			*@description This method removes the services from internal selected services model and updates the internal model about cancelled service.
			*@param {Object} serviceToBeRemoved - service model
			*/
			removeServiceFromSelectedServices:function(serviceToBeRemoved) {
				
				serviceToBeRemoved.model.isServiceAdded = false;
				serviceToBeRemoved.model.ServiceInstructions = "";
				this.updateServiceAsDeletedInConfiguredServiceModel(serviceToBeRemoved.model.ItemID,serviceToBeRemoved.model.UnitOfMeasure);
				this.ui.selectedServiceMap[serviceToBeRemoved.model.ItemID+serviceToBeRemoved.model.UnitOfMeasure] = false;
				this.ui.addedServices.splice(serviceToBeRemoved.index, 1);
				
				this.ui.numberOfServicesSelected--;
				
				if(serviceToBeRemoved.index > this.ui.addedServices.length-1) {
					this.ui.highlightedService = this.ui.addedServices[this.ui.addedServices.length-1];
				} else {
					this.ui.highlightedService = this.ui.addedServices[serviceToBeRemoved.index];
				}
				
				if(this.ui.numberOfServicesSelected == 0) this.ui.serviceClickedForMoreInfo = false;
				
				if(serviceToBeRemoved.model.OrderLineKey) {
					serviceToBeRemoved.model.isDeleted = true;
					if(this.ui.isDraftAppointmentSalesOrder) {
						this.ui.modifiedServices.push(serviceToBeRemoved.model);
					} else if(!serviceToBeRemoved.model._hasConfirmedAppointment){
						this.ui.servicesToBeDeleted.push(serviceToBeRemoved.model);
					}
					  
				}
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname updateServiceAsDeletedInConfiguredServiceModel
			*@description Updates 'configuredServices' model when a service is deleted on UI.
			*@param {String} serviceItemId - ItemID of the service being deleted
			*@param {String} serviceUOM - UOM of the service being deleted
			*/
			updateServiceAsDeletedInConfiguredServiceModel : function(serviceItemId, serviceUOM) {
				for(var i=0; i< this.model.configuredServices.ItemList.Item.length; i++) {
					var currentService = this.model.configuredServices.ItemList.Item[i];
					if(currentService.ItemID == serviceItemId && currentService.UnitOfMeasure == serviceUOM) {
						currentService.isServiceAdded = false;
						currentService.ServiceInstructions = "";
						currentService.InstructionDetailKey = "";
						break;
					}
				}
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname cancelService
			*@description This method launches cancel appointment popup..
			*@param {Object} serviceToBeCancelled - service model
			*/
			cancelService:function(serviceToBeCancelled) {
				
				var that = this;
            	
				var popInput = {appointmentModel:{WorkOrderKey:serviceToBeCancelled.model.WorkOrderKey}};
				var cancelAppointmentPopupInput = {
					 modalInput: function(){
						return popInput;
					}   
				};
				iscModal.openModal('store.views.appointments.common.cancel-appointment.cancel-appointment',cancelAppointmentPopupInput,{}).then(function(callBackData){
					if(callBackData.data !== null && callBackData.data !== undefined && callBackData.data.markAsCancelSuccess){
						that.postServiceCancellation(serviceToBeCancelled);
					}
				},angular.noop);
				
				
			},
			
			/**
			*@iscdoc method
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname postServiceCancellation
			*@description This method is invoked after an service appointment is cancelled. This method removes the cancelled service from internal selected services model and 
			*checks if all services are cancelled/removed on the UI to show appropriate message
			*@param {Object} cancelledService - service model
			*/
			postServiceCancellation:function(cancelledService) {
				
				this.removeServiceFromSelectedServices(cancelledService);
         		
         		if(this.ui.addedServices.length == 0) {
         			iscModal.showWarningMessage("appointmentschedule.MESSAGE_AppointmentCancelled")
                    .then(function(action){
                        iscWizard.finishWizard();
                    }.bind(this),angular.noop);
         		}
				 
			 },
 			
			/**
			*@iscdoc uimethod
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname uiSelectAndLoadServiceDetails
			*@description Highlights the service being clicked in a different colour. Loads the service details for the clicked service.
			*@param {Object} service - Object containing the information about the service that is clicked
			*/
			uiSelectAndLoadServiceDetails: function(service) {
				this.ui.highlightedService = service;
			},
			
			/**
			*@iscdoc uimethod
			*@viewname store.views.appointments.in-store.manage-appointment.select-services.select-services
			*@methodname uiServiceSelectedForMoreInfo
			*@description Shows the instructions to add a service if none are added on the page. Shows the list of added services otherwise. In mobile resolution, shows a pop-up with service details so that the user can add the service from the pop-up after reading its details.
			*@param {Object} service - Object containing the information about the service that is clicked
			*/
			uiServiceSelectedForMoreInfo: function(service) {
				this.ui.serviceClickedForMoreInfo = true;
				this.ui.highlightedService = service;
				
				if(iscMedia.isMediaEnabled('xs')) {
					var that = this;
					var serviceModel = angular.copy(service);
					serviceModel.Currency = this.model.configuredServices.ItemList.Currency;
					var serviceDescriptionsModalInput = {
						modalInput: function(){
							return serviceModel;
						}
					};
					
					iscModal.openModal('store.views.appointments.common.service-description.service-description',serviceDescriptionsModalInput,{})
					 .then(function(callBackData){
						 if(callBackData && callBackData == 'ADD') {
							that.uiAddServiceToAppointment(service);
						 }
					},angular.noop);
				}
			}
			
			
		});
	}
]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.appointments.in-store.manage-appointment.wizard.manage-appointment-finish
 *@package store.views.appointments.in-store.manage-appointment.wizard
 *@class manage-appointment-finish
 *@description Finishes the Manage appointment wizard.
 *
 */

angular.module('store').controller('store.views.appointments.in-store.manage-appointment.wizard.manage-appointment-finish',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscStateParams','iscModal','iscI18n','iscInStoreAppointment','iscState',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscStateParams,iscModal, iscI18n, iscInStoreAppointment, iscState) {		
		iscWizard.initializeWizardPage($scope,{      
          model:{

          },
  		mashupRefs : [
  		    /**
			 * @description This mashup is used to delete draft sales order
			 */
              {
                mashupRefId: 'deleteDraftAppntSalesOrder',
                mashupId: 'store.views.appointments.in-store.deleteAppointmentSalesOrder',
              },
            /**
  			 * @description This mashup is used delete sales order lines with unconfirmed appointments.
  			 */
              {
                mashupRefId: 'getAndDeletePendingWorkOrderLines',
                mashupId: 'store.views.appointments.in-store.getAndDeletePendingWorkOrderLines',
              }

  		],
  		
  		ui:{
  			
  		},
  		
  		/**
		 * @description This method invokes appropriate methods for handling wizard CLOSE and FINISH actions.
		 */
        initialize : function(){

          if(iscWizard.getWizardAction() === "CLOSE"){
              this.handleWizardClose();
          } else if(iscWizard.getWizardAction()==="FINISH"){
              this.handleWizardFinish();
            }

        },
			
        /**
	    	   *@description This method opens the Appointment Summary after creating or modifying an appointment
         */
        gotoAppointmentSummary:function() {
            var input = iscWizard.getWizardModel('createAppointmentOrderModel');
            var appointmentWizardMode = iscWizard.getWizardModel('AppointmentWizardMode');
            iscState.goToState('appointment-summary',{input: {Order:input},message:(appointmentWizardMode == 'EDIT') ? "EDIT_SUCCESS" : (appointmentWizardMode == 'CREATE') ? "CREATED_SUCCESS" : {}},{});
        },
			
        /**
	     *@description This method invokes API for deleting sales order lines with unconfirmed appointments and navigates to appointment summary.
	     */
        handleWizardFinish:function() {

            var mashupArray = [];
            var salesOrder = iscWizard.getWizardModel('createAppointmentOrderModel');
            mashupArray.push(iscMashup.getMashupRefObj(this,'getAndDeletePendingWorkOrderLines',{WorkOrder:{OrderHeaderKey:salesOrder.Order.OrderHeaderKey}}));
            iscMashup.callMashups(this,mashupArray,{}).then(this.gotoAppointmentSummary.bind(this),angular.noop);

        },
			
		/**
	     *@description This method invokes API for deleting draft sales order if sales order or for deleting sales order lines with unconfirmed appointments (confirmed sales order)
	     *and closes the appointment wizard.
	     */
        handleWizardClose:function() {

            var mashupArray = [];
            var salesOrder = iscWizard.getWizardModel('createAppointmentOrderModel');

            if(!iscCore.isVoid(salesOrder)) {

                if(iscInStoreAppointment.isDraftAppointmentSalesOrder()) {
                    mashupArray.push(iscMashup.getMashupRefObj(this,'deleteDraftAppntSalesOrder',iscInStoreAppointment.getDeleteAppointmentSalesOrderInput(salesOrder)));
                } else {
                    mashupArray.push(iscMashup.getMashupRefObj(this,'getAndDeletePendingWorkOrderLines',{WorkOrder:{OrderHeaderKey:salesOrder.Order.OrderHeaderKey}}));
                }

                if(mashupArray.length > 0) {
                    iscMashup.callMashups(this,mashupArray,{}).then(this.closeWizard.bind(this),angular.noop);
                } else {
                    this.closeWizard();
                }

            } else {
                this.closeWizard();
            }

        },
        /**
         *@description Closes the wizard and navigates to previous page.
         */	
        closeWizard:function() {
            iscState.goToPreviousState();
        }
    });
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


/**
 *@iscdoc viewinfo
 *@viewname store.views.appointments.in-store.manage-appointment.wizard.manage-appointment-init
 *@package store.views.appointments.in-store.manage-appointment.wizard
 *@class manage-appointment-init
 *@description Initializes the Manage appointment wizard.
 *
 */

angular.module('store').controller('store.views.appointments.in-store.manage-appointment.wizard.manage-appointment-init',
  ['$scope','$rootScope','iscWizard','iscMashup','iscResourcePermission','iscModal','iscI18n','iscState','iscCustomer','$filter','iscStateParams',
	function($scope,$rootScope,iscWizard,iscMashup,iscResourcePermission,iscModal, iscI18n, iscState,iscCustomer,$filter,iscStateParams) {		
		iscWizard.initializeWizardPage($scope,{      
			model:{
    	 
			},
			
			mashupRefs : [          
			/**
			 *@description This mashup is used to get customer details by calling getCustomerDetials API.
			 */
			{
			    mashupRefId: "getCustomerDetails",
				mashupId: "store.views.appointments.in-store.getCustomerDetails"
			},
            /**
			 *@description This mashup is used to get appointment details by calling getCompleteOrderDetials API.
			 */
			{
				mashupRefId: "getSalesOrderDetails",
				mashupId: "store.views.appointments.in-store.getSalesOrderDetails"
			}
						
			],
  		
			ui:{
  			
			},
  		   
  		   /**
			 * @description This method invokes appropriate API based on wizard input. If no input is passed, it launches appointment wizard.
			 */
			initialize : function(){	
				var wizardInput = iscStateParams.params.input;
				
				if(!iscCore.isVoid(wizardInput) && !iscCore.isVoid(wizardInput.Customer) && !iscCore.isVoid(wizardInput.Customer.CustomerKey)) {
					this.getCustomerDetails(wizardInput);
				} else if(iscCore.getValueFromJsonPath(iscStateParams.params,"input.Order",false)){
					this.getSalesOrderDetails(iscStateParams.params.input);
				} else {
					this.startCreateAppointmentWizard();
				}
			},
			/**
			*@description Gets the Customer details.
            *@param {Object} wizardInput Wizard input/screen input
			*/
			getCustomerDetails:function(wizardInput) {
				var customerInput = {
					Customer:{
						CustomerKey:wizardInput.Customer.CustomerKey
                    }
				};
                
                var mashupArray = [];
                mashupArray.push(iscMashup.getMashupRefObj(this,'getCustomerDetails',customerInput));
				iscMashup.callMashups(this,mashupArray,{}).then(this.processCustomerDetails.bind(this),angular.noop);
			},
			/**
			*@description Start the manage appointment wizard and opens select-services page of the wizard.
			*/
			startCreateAppointmentWizard:function() {
				if(iscCore.isVoid(iscWizard.getWizardModel('AppointmentWizardMode'))) {
					iscWizard.setWizardModel('AppointmentWizardMode', "CREATE");
				}
				iscWizard.startCustomWizard('select-services', {}, {});
			},
			/**
			*@description Gets the Sales Order details.
			*/
			getSalesOrderDetails:function() {
				
				 var that = this;
				 var mashupArray = [];
				 mashupArray.push(iscMashup.getMashupRefObj(this,'getSalesOrderDetails',{Order:{OrderHeaderKey:iscStateParams.params.input.Order.OrderHeaderKey}}));
				 iscMashup.callMashups(this,mashupArray,{}).then(this.validateSalesOrderDetails.bind(this),function(errorResponse) {
					 console.log("Invalid sales order passed in input");
					 that.startCreateAppointmentWizard();
	            	}); 
				
			},
            /**
			 *@description Callback handler for 'getSalesOrderDetails' API mashup call made from the 'getSalesOrderDetails' method.
			 *@param {Object} response - Output data of 'getSalesOrderDetails' mashup call
			 */
			validateSalesOrderDetails:function(response) {
				
				var salesOrderDetails = iscMashup.getMashupOutput(response,"getSalesOrderDetails");
				if(salesOrderDetails.Order.MinOrderStatus.match("1100") || salesOrderDetails.Order.DraftOrderFlag == 'Y') {
					iscWizard.setWizardModel('createAppointmentOrderModel',{Order:{OrderHeaderKey:salesOrderDetails.Order.OrderHeaderKey}});
					iscWizard.setWizardModel('AppointmentWizardMode', (salesOrderDetails.Order.DraftOrderFlag == 'Y') ? "CREATE" : "EDIT");
					if(!iscCore.isVoid(salesOrderDetails.Order.BillToID)) {
						this.stampCustomerDetailsAndGotoWizard(salesOrderDetails.Order.BillToID);
					} else {
						this.startCreateAppointmentWizard();
					}
					
				} else if(salesOrderDetails.Order.MinOrderStatus.match("3700.7777")){
                    iscState.goToState('appointment-summary',{input: {Order:salesOrderDetails}},{});
				} else {
                    iscModal.showErrorMessage("instoreappointment.MESSAGE_InvalidAppointmentStatus",null,null).then(function(callbackData) {
                        iscWizard.closeWizard();
                    }.bind(this));
					
				}
			},
			/**
			 * @description Stamps Customer details and starts the wizard.
			 * @param {String} customerId Customer ID.
			 */
			stampCustomerDetailsAndGotoWizard:function(customerId) {
				
				var customerInput = {Customer:{CustomerID:customerId}};
				
                var mashupArray = [];
                mashupArray.push(iscMashup.getMashupRefObj(this,'getCustomerDetails',customerInput));
				iscMashup.callMashups(this,mashupArray,{}).then(this.processCustomerDetails.bind(this),angular.noop);
					
			},
			
			 /**
			 * @description Method called as a callback handler for init mashup calls.
			 * @param {Object} controllerData - Output of the mashup.
			 */
			processCustomerDetails : function(controllerData){
				var customerProfileDetails = iscMashup.getMashupOutput(controllerData,"getCustomerDetails");
                
                if(!iscCore.isVoid(customerProfileDetails)) {
                	customerProfileDetails = {Customer:iscCustomer.getDisplayAddressForCustomer(customerProfileDetails.Customer)};
                }
                
                iscWizard.setWizardModel('createAppointmentCustomerModel',customerProfileDetails);
                
                this.startCreateAppointmentWizard();
            }
		});
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.receiving.receive-shipment.common.multiple-shipments.multiple-receiving-shipments
 *@package store.views.receiving.receive-shipment.common.multiple-shipments
 *@class multiple-receiving-shipments
 *@description This popups displays list of shipments eligible for receiving
 */
angular.module('store').controller('store.views.receiving.receive-shipment.common.multiple-shipments.multiple-receiving-shipments',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{


  		model:{
  		 /**
         *@description This model contains receiving shipments list
         */
  		"shipmentList":{}
  		},

  		mashupRefs : [
  		  		
			],


			ui:{
				
				/**
    			 *@property {Number} shipmentShownCount - pageSize of the shipment list for continuous scrolling.
    			 */
				shipmentShownCount:10,
				/**
    			 *@property {String} entity - contains search entity value to display message in the popup. Possible values - PRODUCT, PACKAGE, ORDER & SHIPMENT 
    			 */
				entity:'',
				/**
    			 *@property {Object} selectedShipment - contains the shipment model object which is currently selected in the list
    			 */
				selectedShipment:'',
				/**
    			 *@property {String} refineResults - we fetch a fixed number of records (10). If actually there are more records this attribute will be set to Y and a message will be shown at the end, to refine the advance search criteria.
    			 */
				refineResults:'N'
			},
			

			/**
			 *@description This method initializes the shipment list. Also sets the first value as default selectedShipment in the list.
			 */
			initialize : function(){
				
				this.ui.entity = modalInput.entity;
				this.model.shipmentList = angular.copy(modalInput.shipmentList);
				this.ui.selectedShipment = this.model.shipmentList.Shipments.Shipment[0];
				
			},
			
			/**
			 *@description  Shows next set of shipments on scroll.
			 */
  			uiGetShipmentListNext: function(){
            	
  				if(this.ui.shipmentShownCount == this.model.shipmentList.Shipments.Shipment.length){
      				this.ui.refineResults = 'Y';
      			} else if(this.ui.shipmentShownCount <= this.model.shipmentList.Shipments.Shipment.length){
                  this.ui.shipmentShownCount+=5;
                } 
        	    
            },
            
            /**
			 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in cart details.
			 */
    		uiShipmentScrollActionValidator : function(){
             	return true;
             },
             
             /**
              * @description This method returns shipment status bundle key by replacing "." by "_"
              * Eg. If status is 1600.01, then this method will return "instorereceiving.LABEL_1600_01"
              * 
              * @param {String} status - contains shipment status value
              */
             uiGetShipmentDisplayStatusBundleKey:function(status) {
            	
            	 var tempStatus = angular.copy(status);
            	 
            	 if(!iscCore.isVoid(tempStatus)) {
            		 if(tempStatus.indexOf(".") > 0) {
            			 tempStatus = tempStatus.replace(/\./g, "_");
            		 }
            		 
            		 return "instorereceiving.LABEL_"+tempStatus;
            	 }
            	
             },
			
			 /**
			 *@description This method is called on click of Okay button. It returns selectedShipment model object to the parent screen.
			 */
			uiSubmit:function(){
				
				var resultdata = {data:this.ui.selectedShipment};
				$uibModalInstance.close(resultdata);
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.receiving.receive-shipment.common.receive-full.receive-full-shipment
 *@package store.views.receiving.receive-shipment.common.receive-full.
 *@class receive-full-shipment
 *@description Popup to receive all products/packages of the shipment without scanning.
 */
angular.module('store').controller('store.views.receiving.receive-shipment.common.receive-full.receive-full-shipment',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal','iscAppContext',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal,iscAppContext) {
		
		
		iscScreen.initializeModalScreen($scope,{


  		model:{
  		 /**
         *@description This model has the return reason list for the store
         */
  		"reasonList":{}
  		},

  		mashupRefs : [
  		              	
  		              	/**
  		              	 *@description This mashup gets the receive reason codes for receiving shipment in full 
  		              	 */
						{
							 mashupRefId: 'getFullShipmentReceiveReasonCode',
						    mashupId: 'store.views.receiving.getFullShipmentReceiveReasonCode'
						
						},
						/**
  		              	 *@description This mashup is used to receive all products of a shipment without scanning
  		              	 */
						{
							 mashupRefId: 'receiveAllItems',
						    mashupId: 'store.views.receiving.getShipmentLineListForFullReceiving'
						
						},
						/**
  		              	 *@description This mashup is used to receive all packages of a shipment without scanning
  		              	 */
						{
							 mashupRefId: 'receiveAllContainers',
						    mashupId: 'store.views.receiving.getShipmentContainerListForFullReceiving'
						
						}
  		  		
			],


			ui:{
				 /**
				*@property {Object}  selectedReason - contains the selected receive reason code model object
				*/
				selectedReason:{},
				 /**
				*@property {String}  isReceiveReasonConfigured - If receive full reason codes are configured, then isReceiveReasonConfigured = Y else is set to N
				*/
				isReceiveReasonConfigured : "N",
				 /**
				*@property {String}  mashupId - contains the mashupId to be called for receiving shipment in full. Depending on the ShipmentContainerizedFlag 
				*appropriate mashup will be invoked.   
				*/
				mashupId : 'receiveAllItems'
			},
			

			/**
			 *@description This method initializes the receive shipment full screen with reason codes
			 */
			initialize : function(){
				
				iscMashup.callMashup(this,"getFullShipmentReceiveReasonCode",{},{}).then(this.handleInitAPICalls.bind(this),angular.noop);
				
			},
			
			/**
			 *@description Callback handler for init APIs. Initialize the reasonList model and default the reason code selection.
			 *@param {Object} response - mashup response JSON object
			 */
			handleInitAPICalls:function(response) {
				
				this.model.reasonList = iscMashup.getMashupOutput(response,"getFullShipmentReceiveReasonCode");
				
				if(this.model.reasonList.CommonCodeList.CommonCode) {
					this.ui.isReceiveReasonConfigured = "Y";
					this.ui.selectedReason = this.model.reasonList.CommonCodeList.CommonCode[0].CodeShortDescription;
				} else {
					this.ui.isReceiveReasonConfigured = "N";
				}
				
			},
			
			 /**
			 *@description This method is called on click of Okay button. It invokes the mashup for receiving packages/products depending upon ShipmentContainerizedFlag.
			 */
			uiSubmit:function(){
				var contextParamName = "";
				if("0005" == modalInput.Shipment.DocumentType) {
					contextParamName = "defaultDispositionCodePO";
				} else if("0006" == modalInput.Shipment.DocumentType) {
					contextParamName = "defaultDispositionCodeTO";
				}
				var apiInput = {};
				var noteText = iscI18n.translate('instorereceiving.MSG_ShipmentFullReceived', {reason: this.ui.selectedReason, user:iscAppContext.getFromContext('currentLoginID')});
				if(modalInput.Shipment.ShipmentContainerizedFlag == '03'){
					this.ui.mashupId = 'receiveAllContainers';
					apiInput = {Container:
					{ShipmentKey:modalInput.Shipment.ShipmentKey, 
					DocumentType:modalInput.Shipment.DocumentType,
					DefaultDispositionCode:iscAppContext.getFromContext(contextParamName),
					NoteText:noteText}
					};
				}else{
					apiInput = {ShipmentLine:
					{ShipmentKey:modalInput.Shipment.ShipmentKey, 
					DocumentType:modalInput.Shipment.DocumentType,
					DefaultDispositionCode:iscAppContext.getFromContext(contextParamName),
					NoteText:noteText}
					};
				}
				iscMashup.callMashup(this,this.ui.mashupId,apiInput,{}).then(this.receiveOrderAPICallBack.bind(this),this.receiveOrderAPIErrorCallBack.bind(this));
				
			},
			
			 /**
			 *@description Success callback handler for receiveAllItems/receiveAllPackages mashup. 
			 *@param {Object} response - mashup response JSON object
			 */
			receiveOrderAPICallBack : function(response) {
				var apiOutput = iscMashup.getMashupOutput(response,this.ui.mashupId);
				var resultdata = {};
				resultdata.receiveOrderAPICallBack = {};
				if(apiOutput) {
					resultdata.receiveOrderAPICallBack.apiSuccess = true;
					resultdata.receiveOrderAPICallBack.apiOutput = apiOutput;
					if(modalInput.Shipment.ShipmentContainerizedFlag == '03'){
						resultdata.receiveOrderAPICallBack.apiOutput.ShipmentKey = resultdata.receiveOrderAPICallBack.apiOutput.Containers.ShipmentKey;
					}else{
						resultdata.receiveOrderAPICallBack.apiOutput.ShipmentKey = resultdata.receiveOrderAPICallBack.apiOutput.ShipmentLines.ShipmentKey;
					}
					
				}
				$uibModalInstance.close(resultdata);
			},
			
			 /**
			 *@description Error callback handler for receiveAllItems/receiveAllPackages mashup. This method is invoked when receiveOrder API throws error.
			 *Appropriate user friendly error messages are displayed on UI.   
			 @param {Object} response - mashup error response JSON object
			 */
			receiveOrderAPIErrorCallBack: function(response) {
				var errorMsg = response.Errors.Error[0].ErrorDescription;
	  			var errorCode = response.Errors.Error[0].ErrorCode;
	  			if(iscI18n.hasKey("apierror."+errorCode)){
	  				errorMsg = iscI18n.translate("apierror."+errorCode);
	  				iscModal.showErrorMessage(errorMsg,null,null);				
	  			}
	  			else{
	  				iscModal.showErrorMessage(errorMsg,null,null);
	  			}
				$uibModalInstance.dismiss(response);
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.receiving.receive-shipment.common.receive-later.receive-later
 *@package store.views.receiving.receive-shipment.common.receive-later
 *@class receive-later
 *@description Popup to mark receiving shipment as "Missing or Receive Later"
 */
angular.module('store').controller('store.views.receiving.receive-shipment.common.receive-later.receive-later',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{


  		model:{
  		 /**
         *@description This model has receiving shipment details model.
         */
  		"shipmentDetails":{},
  		 /**
         *@description This model has receiving shipment line list model.
         */
  		"shipmentLineList":{},
  		 /**
         *@description This model has receiving shipment packages model.
         */
  		"shipmentContainerList":{}
  		},

  		mashupRefs : [
  		              
	  		           /**
	  		           *@description This mashup is used to close a receipt
	  		           */
						{
							 mashupRefId: 'closeReceipt',
						    mashupId: 'store.views.receiving.closeReceipt'
						
						},
						 /**
		  		         *@description This mashup is used to update missing notes to shipment
		  		         */
						{
							 mashupRefId: 'changeShipment',
						    mashupId: 'store.views.receiving.changeShipmentForMissingNote'
						
						},
						 /**
		  		          *@description This mashup is used to start a receipt when marking an entire shipment as missing.
		  		          */
						{
							 mashupRefId: 'startReceipt',
						    mashupId: 'store.views.receiving.startReceipt'
						
						}
  		  		
			],


			ui:{
				 /**
				*@property {Object}  selectedReason - contains the selectedReason model object
				*/
				selectedReason:{},
				 /**
				*@property {Number}  pageSize - number of shipment lines/packages to be displayed on launch of popup.
				*/
				pageSize: 5,
				 /**
				*@property {Number}  recordShownCount - count of products/packages currently displayed in popup.
				*/
				recordShownCount:5,
				 /**
				*@property {boolean}  isShipmentContainerized - is false if shipment contains products else true if shipment contains packages
				*/
				isShipmentContainerized : false,
				 /**
				*@property {Number}  notReceivedCount - count of number of products/packages in shipment which are not received.
				*/
				notReceivedCount : 0 ,
				 /**
				*@property {String}  notReceivedMessageBundleKey - contains the bundle key for displaying count of product/package not received message
				*/
				notReceivedMessageBundleKey : '',
				 /**
				*@property {boolean}  isReceiptOpen - is true if shipment products/packages has any receipts associated with it
				*/
				isReceiptOpen : false
			},
			

			/**
			 *@description This method initializes the receive later shipment screen
			 */
			initialize : function(){
				this.ui.selectedReason = 'RECEIVE_LATER'
				console.log(modalInput);
				this.ui.isShipmentContainerized = modalInput.isShipmentContainerized;
				this.model.shipmentDetails = modalInput.shipmentDetails;
				if(this.ui.isShipmentContainerized){
					this.model.shipmentContainerList = modalInput.apiOutput;
					this.ui.notReceivedCount = this.model.shipmentContainerList.Containers.TotalNumberOfRecords;
					this.ui.notReceivedMessageBundleKey = "instorereceiving.MSG_ReceivingNotCompletePackage";
					if(this.model.shipmentContainerList.Containers.Receipt != undefined && this.model.shipmentContainerList.Containers.Receipt.ReceiptHeaderKey != undefined){
						this.ui.isReceiptOpen = true;
					}
				}else{
					this.model.shipmentLineList = modalInput.apiOutput;
					this.ui.notReceivedCount = this.model.shipmentLineList.ShipmentLines.TotalNumberOfRecords;
					this.ui.notReceivedMessageBundleKey = "instorereceiving.MSG_ReceivingNotCompleteProduct";
					if(this.model.shipmentLineList.ShipmentLines.Receipt != undefined && this.model.shipmentLineList.ShipmentLines.Receipt.ReceiptHeaderKey != undefined){
						this.ui.isReceiptOpen = true;
					}
					
				}
				
				//iscMashup.callMashup(this,"getFullShipmentReceiveReasonCode",{},{}).then(this.handleInitAPICalls.bind(this));
				
			},
			
			/**
			 *@description Callback handler for init API invoked in initialize() method. Initializes reasonList model and selects the default reason.
			 *@param {Object} response - mashup response JSON object
			 */
			handleInitAPICalls:function(response) {
				
				this.model.reasonList = iscMashup.getMashupOutput(response,"getFullShipmentReceiveReasonCode");
				
				if(this.model.reasonList.CommonCodeList.CommonCode) {
					this.ui.isReceiveReasonConfigured = "Y";
					this.ui.selectedReason = this.model.reasonList.CommonCodeList.CommonCode[0].CodeShortDescription;
				} else {
					this.ui.isReceiveReasonConfigured = "N";
				}
				
			},
			
			 /**
			 *@description This method is called on click of Okay button. It invokes appropriate mashups for marking the shipment as Receive Later/Missing depending on user selection.
			 */
			uiSubmit:function(){
				if(this.ui.selectedReason == 'RECEIVE_LATER'){
					//do nothing
					$uibModalInstance.close({});
				}else{
					//close the receipt
					var mashupArray = [];
					
					/*var receiptOpened = false;
					if(this.model.shipmentDetails.Shipment.Receipt != undefined && this.model.shipmentDetails.Shipment.Receipt.ReceiptHeaderKey != undefined){
						receiptOpened = true;
					}*/
					
					var apiInput = {Receipt:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,
						DocumentType:this.model.shipmentDetails.Shipment.DocumentType}};
					var changeShipmentInput = {Shipment:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,
												Notes:{Note:{NoteText:iscI18n.translate('instorereceiving.MSG_ShipmentMissingReceived')}}}};
					
					if(!this.ui.isReceiptOpen){
						var startReceiptInput = {Receipt:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,
							DocumentType:this.model.shipmentDetails.Shipment.DocumentType}};
						mashupArray.push(iscMashup.getMashupRefObj(this,'startReceipt',startReceiptInput));
					}
					mashupArray.push(iscMashup.getMashupRefObj(this,'closeReceipt',apiInput));
					mashupArray.push(iscMashup.getMashupRefObj(this,'changeShipment',changeShipmentInput));
					
					//iscMashup.callMashup(this,'closeReceipt',apiInput,{}).then(this.handleCloseReceipt.bind(this))
					iscMashup.callMashups(this,mashupArray,{isMultiAPICall:true}).then(this.handleCloseReceipt.bind(this),angular.noop);
				}
				
				
			},
			
			/**
			 *@description Callback handler invoked after marking the shipment as "Missing"
			 *@param {Object} response - mashup response JSON object
			 */
			handleCloseReceipt:function(response){
				$uibModalInstance.close({});
			},
			
			/**
			 *@description Shows next set of products/packages when the shipment panel is scrolled.
			 */
			uiGetNextList: function(){
	    		this.ui.recordShownCount+=this.ui.pageSize;
			},	
			
			 
	        /**
			 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
			 */
			uiScrollActionValidator: function(){
		        	return true;
		    },
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.receiving.receive-shipment.common.record-damage.record-damage
 *@package store.views.receiving.receive-shipment.common.record-damage
 *@class record-damage
 *@description Popup to mark receiving shipment quantity as damaged.
 */
angular.module('store').controller('store.views.receiving.receive-shipment.common.record-damage.record-damage',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','$filter', '$locale','iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,$filter,$locale,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{


  		model:{
  		 /**
         *@description This model has the damage disposition list
         */
  		"damageDispositionList":{},
  		/**
         *@description This model has the existing damaged receipt line list
         */
  		"damageReceiptLineList":{},
  		/**
         *@description This model is a copy of damageReceiptLineList model
         */
  		"_copyOfDamageReceiptLineList":{},
  		/**
         *@description This model contains shipment line details.
         */
  		"shipmentLine":{},
  		/**
         *@description This model contains damaged receipt lines model. This model will be updated baced on changes done in popup UI.
         */
  		"damagedReceiptLines":[],
  		/**
         *@description This model is set to N when an existing damaged receipt line is removed from UI 
         */
  		"removedExistingLine":"N",
  		/**
         *@description This model contains list of receipt lines which are removed from UI
         */
  		"unreceiveLines":{Receipt:{ReceiptLines:{ReceiptLine:[]}}},
  		/**
         *@description This model has default JSON object when new damage reason is added on UI
         */
  		"defaultDamageReceiptLine" : {
  			 "ReturnDisposition":{DispositionCode:""},
  			 "_originalDispositionCode":"",
  			 "Quantity":"0",
  			 "EditableQuantity":"0",
  			 "ItemDetails":"",
  			 "ReceiptLineKey":"",
  			 "ReceiptHeaderKey":"",
  			 "_isRemoved":"N",
  			 "_isQtyChanged":"N",
  			 "_isDamageReasonChanged":"N",
  			"_existingDamageLine":"N"
  			},
		/**
         *@description This model contains damage recipt line details for shipment container
         */
  		"containerDamagedReceiptLine":{},
  		/**
         *@description This model contains shipment details
         */
  		"shipmentDetails":{}
  		},

  		mashupRefs : [
  		              	
						/**
						 *@description This mashup is used fetch damage disposition list
						 */
						{
							 mashupRefId: 'getDamageDispositionListByDocType',
						    mashupId: 'store.views.receiving.getDamageDispositionListByDocType',
						    modelName : 'damageDispositionList'
						
						},
						/**
						 *@description This mashup is used to fetch damaged receipt lines of the shipment
						 */
						{
							mashupRefId: 'getDamagedReceiptLines',
							mashupId: 'store.views.receiving.getDamagedReceiptLines',
							modelName : 'damageReceiptLineList'
						},
						/**
						 *@description This mashup is used to unreceive good quantity received for shipment
						 */
						{
							 mashupRefId: 'unreceiveGoodReceiptLine',
							 mashupId: 'store.views.receiving.unreceiveShipmentLine'
						},
						/**
						 *@description This mashup is used to receive damaged quantity for shipment
						 */
						{
							mashupRefId: 'receiveDamageReceiptLine',
							mashupId: 'store.views.receiving.receiveDamageReceiptLine'
							
						},
						/**
						 *@descriptionThis mashup is used to unreceive all damaged quantity received for shipment
						 */
						{
							mashupRefId: 'unreceiveAllDamageReceiptLine',
							mashupId: 'store.views.receiving.unreceiveDamageShipmentLines'
						},
						/**
						 *@description This mashup is used fetch container damaged receipt line details
						 */
						{
							 mashupRefId: 'getContainerDamagedReceiptLine',
						    mashupId: 'store.views.receiving.getContainerDamagedReceiptLine',
						    modelName : 'containerDamagedReceiptLine'
						
						},
						/**
						 *@description This mashup is used to receive damaged quantity for shipment container
						 */
						{
							 mashupRefId: 'receiveDamagedContainer',
						    mashupId: 'store.views.receiving.receiveDamagedContainer'
						
						}
  		  		
			],


			ui:{
				/**
				*@property {Object}  containerDamagedReason - contains the damage reason marked for shipment container
				*/
				containerDamagedReason:'',
				/**
				*@property {String}  isDamageReasonConfigured - is N if damage disposition codes are configured and is Y otherwise
				*/
				isDamageReasonConfigured : "N",
				/**
				*@property {Number}  removedDamageLinesCount - keeps a count of removed damaged lines on UI
				*/
				removedDamageLinesCount: Number(0),
				/**
				*@property {boolean}  showAPIError - is false if unreceive/receive API throws any error and  is false otherwise
				*/
				showAPIError:false,
				/**
				*@property {String}  removedAllDamagedLines - is N if all damage lines are removed from UI and is Y otherwise.
				*/
				removedAllDamagedLines:"N",
				/**
				*@property {String}  errorMsg - contains the translated error message to be displayed
				*/
				errorMsg:"",
				/**
				*@property {boolean}  isShipmentContainerized - is false if shipment contains products. true if shipment contains container.
				*/
				isShipmentContainerized:false
			},
			
			/**
			 *@description This method initializes the record damage popup  
			 */
			initialize : function(){
				
				var documentType = '';
				 var mashupArray = [];
				 
				if(!iscCore.isVoid(modalInput) && !iscCore.isVoid(modalInput.isShipmentContainerized)) {
					this.ui.isShipmentContainerized = modalInput.isShipmentContainerized;
				}
				
				if(!iscCore.isVoid(modalInput) && !iscCore.isVoid(modalInput.ShipmentLine)) {
					this.model.shipmentLine = modalInput.ShipmentLine;
					this.model.shipmentDetails = modalInput.shipment;
					documentType = this.model.shipmentLine.DocumentType;
					mashupArray.push(iscMashup.getMashupRefObj(this,"getDamagedReceiptLines", {ReceiptLine:{ShipmentLineKey:this.model.shipmentLine.ShipmentLineKey, DocumentType:this.model.shipmentLine.DocumentType	}}));
				}
				
				if(!iscCore.isVoid(modalInput) && !iscCore.isVoid(modalInput.container)) {
					this.model.container = modalInput.container;
					this.model.shipmentDetails = modalInput.shipment;
					documentType = this.model.shipmentDetails.Shipment.DocumentType;
					//if the container is already marked damaged, show that disposition code
					if(this.model.container.ReceivedAsDamaged == 'Y'){
						var apiInput = {ReceiptLine:{ShipmentContainerKey:this.model.container.ShipmentContainerKey,
							 DocumentType:documentType}};
							mashupArray.push(iscMashup.getMashupRefObj(this,"getContainerDamagedReceiptLine", apiInput));
					}
					
				}
								 
				 
				 mashupArray.push(iscMashup.getMashupRefObj(this,"getDamageDispositionListByDocType", {ReturnDisposition:{DocumentType:documentType, CallingOrganizationCode:this.model.shipmentDetails.Shipment.EnterpriseCode}}));
				
				 
				 iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
			},
			
			/**
			 * @description - Callback handler for init APIs invoked in initialize() method. Initializes damageReceiptLineList model based on API output of getDamagedReceiptLines 
			 * @param {Object} response - mashup response JSON object
			 */
			handleInitApiCalls:function(response) {
				
				if(!iscCore.isVoid(this.model.damageDispositionList) && !iscCore.isVoid(this.model.damageDispositionList.ReturnDispositionList) 
						&& !iscCore.isVoid(this.model.damageDispositionList.ReturnDispositionList.ReturnDisposition) && !iscCore.isVoid(this.model.damageDispositionList.ReturnDispositionList.ReturnDisposition.length > 0)) {
					
					this.ui.isDamageReasonConfigured = "Y";
					
					if(!this.ui.isShipmentContainerized){
						this.initDamagedReceiptLines();
						if(this.model.shipmentLine.showUndoDamageQtyError) {
							this.ui.showUndoDamageQtyError = true;
						}
					}else{
						if(this.model.containerDamagedReceiptLine.ReceiptLineList && this.model.containerDamagedReceiptLine.ReceiptLineList.ReceiptLine){
							this.ui.containerDamagedReason = this.model.containerDamagedReceiptLine.ReceiptLineList.ReceiptLine[0].DispositionCode;
						}else{
							this.ui.containerDamagedReason = this.model.damageDispositionList.ReturnDispositionList.ReturnDisposition[0].DispositionCode;
						}
						
					}
					
					
				}
    			 
				
			},
			
			/**
			 * @description - Initializes damageReceiptLineList model based on API output of getDamagedReceiptLines 
			 */
			initDamagedReceiptLines:function() {
				
				if(!iscCore.isVoid(this.model.damageReceiptLineList) && !iscCore.isVoid(this.model.damageReceiptLineList.ReceiptLineList) && !iscCore.isVoid(this.model.damageReceiptLineList.ReceiptLineList.ReceiptLine) 
						&&  !iscCore.isVoid(this.model.damageReceiptLineList.ReceiptLineList.ReceiptLine.length > 0)) {
					
					var numOfDamagedReceiptLines = $filter('number')(this.model.damageReceiptLineList.ReceiptLineList.ReceiptLine.length);
					this.model._copyOfDamageReceiptLineList = angular.copy(this.model.damageReceiptLineList);
					if(!isNaN(numOfDamagedReceiptLines) && numOfDamagedReceiptLines > 0) {
						for(var i=0;i<numOfDamagedReceiptLines;i++) {
							
							var receiptLine = this.model.damageReceiptLineList.ReceiptLineList.ReceiptLine[i];
							
							receiptLine.EditableQuantity = $filter('number') (receiptLine.Quantity);
							receiptLine.ReturnDisposition = {DispositionCode:receiptLine.DispositionCode};
							receiptLine._existingDamageLine = "Y";
							receiptLine._originalDispositionCode = receiptLine.DispositionCode;
							receiptLine._isRemoved = "N";
							receiptLine._isQtyChanged = "N";
							receiptLine._isDamageReasonChanged = "N";
							receiptLine.ItemDetails = this.model.shipmentLine.OrderLine.ItemDetails;
							
						}
					}
				} else {
					this.model.damageReceiptLineList = {ReceiptLineList:{ReceiptLine:[]}};
					this.model.damageReceiptLineList.ReceiptLineList.ReceiptLine.push(this.getNewDamageReceiptLine());
				}
				
				
			},
			
			/**
			 * @description - onClick handler for Add Reason link on UI. Adds a new damage reason and quantity record on UI. 
			 */
			uiAddDamageReceiptLine:function() {
				this.model.damageReceiptLineList.ReceiptLineList.ReceiptLine.push(this.getNewDamageReceiptLine());
				this.toggleErrorAlert();
			},
			
			/**
			 * @description - Returns a default damage receipt line object  
			 */
			getNewDamageReceiptLine:function() {
				
				var damageReceiptLine = angular.copy(this.model.defaultDamageReceiptLine);
				if(this.ui.isDamageReasonConfigured == "Y") {
					
					damageReceiptLine.ReturnDisposition = this.model.damageDispositionList.ReturnDispositionList.ReturnDisposition[0];
					damageReceiptLine._originalDispositionCode = damageReceiptLine.ReturnDisposition.DispositionCode;
					damageReceiptLine.ItemDetails = this.model.shipmentLine.OrderLine.ItemDetails;
				}
				
				return damageReceiptLine;
				
				
			},
			
			/**
			 * @description - This method is used to hide damage receipt lines which are removed from UI
			 * @param {Object} damagedReceiptLine - damagedReceiptLine data as JSON object.
			 */
			uiHideDeletedDamageReceiptLines:function(damageReceiptLine) {
				if(damageReceiptLine._isRemoved == "Y") {
					if(damageReceiptLine._existingDamageLine == "Y") {
						this.ui.removedExistingLine = "Y";
					}
					return false;
				}
				return true;
			},
			
			/**
			 * @description - onCLick handler for delete icon. Sets _isRemoved=Y for the damagedReceiptLine.
			 * @param {Object} damagedReceiptLine - damagedReceiptLine data as JSON object. 
			 */
			uiRemoveDamageLine:function(damageReceiptLine) {
				damageReceiptLine._isRemoved = "Y";
				this.ui.removedDamageLinesCount += Number(1);
				this.toggleErrorAlert();
			},
			
			/**
			 * @description - This method is used to toggle error message when all damage receipt lines are removed from UI.
			 */
			toggleErrorAlert:function() {
				var numOfDamagedLines = $filter('number')(this.model.damageReceiptLineList.ReceiptLineList.ReceiptLine.length);
				if(Number(numOfDamagedLines) == Number(this.ui.removedDamageLinesCount)) {
					this.ui.showAPIError = false;
					this.ui.showUndoDamageQtyError = false;
					this.ui.removedAllDamagedLines = 'Y';
				} else {
					this.ui.removedAllDamagedLines = 'N';
				}
			},
			
			 /**
			 *@description This is a onFocus event handler of quantity field.
			 *@param {Object} qtyField - quantity field as JSON object. 
			 *@param {Object} damagedReceiptLine - damagedReceiptLine data as JSON object. 
			 */
			uiOnQuantityFieldFocus :function (qtyField,damagedReceiptLine) {
				if($scope.recordDamage.$valid)
				var formats = $locale.NUMBER_FORMATS;
	  			var oldQuantity = damagedReceiptLine.EditableQuantity;
	  			if(!iscCore.isVoid(oldQuantity)){
	  				oldQuantity=oldQuantity.replace(formats.GROUP_SEP, '');
	  				qtyField.oldQty = oldQuantity;
	  			} 
				
		    },
		    
		    /**
		     *@description This is a custom validator method for received quantity field
			 *@param {Object} validationResponseObj - default data type validation response JSON object
			 *@param {Object} angularErrorObject - datatype validation error JSON object
			 *@param {Object} modelValue - quantity field value
			 *@param {Object} viewValue - quantity value inputted in textfield
		     */
		    uiValidateQuantity : function(validationResponseObj, angularErrorObject, modelValue, viewValue){
            	
            	/* check if the DataType Validation is successful */
            	
            	if(!iscCore.isVoid(angularErrorObject) && angularErrorObject.iscDatatypeValidator)
            		return validationResponseObj;
            	else
            	var isQty_a_Number = !isNaN(viewValue);
            	if(!iscCore.isBooleanTrue(isQty_a_Number)  || iscCore.isVoid(viewValue)){
            		validationResponseObj.booleanResponse = !isNaN(viewValue) && !iscCore.isVoid(viewValue);
	            	validationResponseObj.errorMesssage = iscI18n.translate("globals.ERROR_invalid_input");
    			}
            	
            	return validationResponseObj;
            },
            
            /**
		     *@description onChange handler for received quantity field
			 *@param {Object} qtyField - quantity textfield JSON object
			 *@param {Object} damagedReceiptLine - damage receipt line model object
		     */
            uiIsQuantityChanged:function(qtyField,damagedReceiptLine){
					
				var formats = $locale.NUMBER_FORMATS;
	  			var newQuantity = damagedReceiptLine.EditableQuantity;
	  			if(newQuantity) {
	  				newQuantity=newQuantity.replace(formats.GROUP_SEP, '');
	  			}
	  			if((!iscCore.isVoid(newQuantity)) && qtyField.oldQty !== newQuantity && Number(damagedReceiptLine.Quantity) != Number(damagedReceiptLine.EditableQuantity)) {
	  				damagedReceiptLine._isQtyChanged ='Y';
	  			} else {
	  				damagedReceiptLine._isQtyChanged ='N';
	  			}
		
            },
            
            /**
		     *@description onChange handler for when user selects a damage reason code.
			 *@param {Object} selectedDispositionCode - selected reason code object
			 *@param {Object} damageReciptLine - damage receipt line model object
		     */
            uiOnDamageReasonChange:function(selectedDispositionCode, damageReciptLine){
				
            	console.log("selectedDispositionCode - ",selectedDispositionCode);
            	console.log("damageReciptLine - ",damageReciptLine);
            	
            	if(damageReciptLine._originalDispositionCode != selectedDispositionCode.DispositionCode) {
            		damageReciptLine._isDamageReasonChanged = "Y";
            	} else {
            		damageReciptLine._isDamageReasonChanged = "N";
            	}
            	
		
            },
			
			 /**
			 *@description This method is called on click of Okay button. It records for damage receipt lines by invoking appropriate mashups based on isShipmentContainerized flag
			 */
			uiSubmit:function(){
				
				if("Y" == this.ui.removedAllDamagedLines && "N" == this.ui.removedExistingLine) {
					$uibModalInstance.close({data:"NOUPDATE"});
				} else if(this.ui.isShipmentContainerized){
					var damagedRecLineList = this.model.containerDamagedReceiptLine.ReceiptLineList;
					if( damagedRecLineList && damagedRecLineList.ReceiptLine
							&& damagedRecLineList.ReceiptLine[0].DispositionCode == this.ui.containerDamagedReason){
						$uibModalInstance.close({data:"NOUPDATE"});
					}else{
						var apiInput = {Receipt:{ShipmentKey:this.model.shipmentDetails.Shipment.ShipmentKey,
							DocumentType:this.model.shipmentDetails.Shipment.DocumentType,
							CaseId:this.model.container.ContainerScm,
							DispositionCode:this.ui.containerDamagedReason,
							ShipmentContainerKey:this.model.container.ShipmentContainerKey,
							ContainerIsReceived:this.model.container.IsReceived}};
	
						iscMashup.callMashup(this,"receiveDamagedContainer",apiInput,{}).then(this.handleReceiveDamagedContainer.bind(this),angular.noop);
					}
					
				}else{
					this.prepareReceiptLinesForDamage();
				}
				
				
			},
			
			 /**
			 *@description This method is used to record damage receipt lines for shipment with products. This method calculates the total damage quantity to be received/unreceived,  
			 *forms the API inputs and invokes the mashup accordingly. If there is a received good quantity, then it is unreceived depending on total damage quantity to be received.
			 */
			prepareReceiptLinesForDamage:function() {
				
				this.ui.showAPIError = this.ui.showUndoDamageQtyError = false;
				
				var receivedDamagedQty = Number(this.model.shipmentLine.DamagedReceivedQty);
	  			var receivedGoodQty = Number(this.model.shipmentLine.GoodReceivedQty);
	  			var receivedQty = Number(this.model.shipmentLine.ReceivedQuantity);
	  			var shipmentQty = Number(this.model.shipmentLine.Quantity);
	  			
	  			var mashupName = "", mashupArray = [], mashupInput = "", action = "", invokedMashups = [], receiptHeaderKey="", toBeDamagedQty = 0, callAPICount = 0, totalToBeReceivedDamagedQty = 0, totalToBeUnreceivedDamagedQty = 0, unreceiveGoodQty = 0;
	  			var unreceiveDamageReceiptLines = {ReceiptLine:[]}, receiveDamageReceiptLines = {ReceiptLine:[]};
	  			
	  			if(!iscCore.isVoid(this.model.damageReceiptLineList) && !iscCore.isVoid(this.model.damageReceiptLineList.ReceiptLineList.ReceiptLine.length > 0)) {
					
					var numOfReceiptLinesToBeDamaged = $filter('number')(this.model.damageReceiptLineList.ReceiptLineList.ReceiptLine.length);
					if(!isNaN(numOfReceiptLinesToBeDamaged) && numOfReceiptLinesToBeDamaged > 0) {
						for(var i=0;i<numOfReceiptLinesToBeDamaged;i++) {
							
							var toBeDamagedReceiptLine = this.model.damageReceiptLineList.ReceiptLineList.ReceiptLine[i];
							
							toBeDamagedQty = Number(toBeDamagedReceiptLine.EditableQuantity);
							
							callAPICount = toBeDamagedReceiptLine._isDamageReasonChanged == 'Y' ||  toBeDamagedReceiptLine._isQtyChanged == 'Y' ? callAPICount + 1 : callAPICount;
							
							if("Y" == toBeDamagedReceiptLine._existingDamageLine && ("Y" == toBeDamagedReceiptLine._isRemoved || toBeDamagedQty == 0)) {
								
								callAPICount++;
								if("Y" == toBeDamagedReceiptLine._isRemoved) {
									totalToBeUnreceivedDamagedQty += toBeDamagedQty;
								} else {
									totalToBeUnreceivedDamagedQty += Number(toBeDamagedReceiptLine.Quantity) - toBeDamagedQty;
								}
								
								receiptHeaderKey = toBeDamagedReceiptLine.ReceiptHeaderKey;
								var receiptLine = {ReceiptLineKey:toBeDamagedReceiptLine.ReceiptLineKey,UnreceiveEntireLine:"Y"};
								unreceiveDamageReceiptLines.ReceiptLine.push(receiptLine);
								
							} else {
								
								if(toBeDamagedQty > 0) {
									totalToBeReceivedDamagedQty += toBeDamagedQty;
									var receiptLine = {ItemID:this.model.shipmentLine.OrderLine.ItemDetails.ItemID,ShipmentLineKey:this.model.shipmentLine.ShipmentLineKey,
										UnitOfMeasure:this.model.shipmentLine.OrderLine.ItemDetails.UnitOfMeasure,Quantity:toBeDamagedQty, DispositionCode:toBeDamagedReceiptLine.ReturnDisposition.DispositionCode};
									receiveDamageReceiptLines.ReceiptLine.push(receiptLine);
									
									if(!iscCore.isVoid(toBeDamagedReceiptLine.ReceiptLineKey)) {
										receiptHeaderKey = toBeDamagedReceiptLine.ReceiptHeaderKey;
										var receiptLine = {ReceiptLineKey:toBeDamagedReceiptLine.ReceiptLineKey,UnreceiveEntireLine:"Y"};
										unreceiveDamageReceiptLines.ReceiptLine.push(receiptLine);
									}
								}
								
								
							}
						}
						
					}
					
					if(callAPICount> 0 && (totalToBeReceivedDamagedQty > 0 || totalToBeUnreceivedDamagedQty > 0)) {
						
						if(receivedDamagedQty == 0) {
			  				
			  				if(receivedGoodQty > 0) {
			  					
			  					//unreceiveGoodQty
			  					action = "unreceiveGoodAndReceiveDamageQty";
			  					if(receivedGoodQty > totalToBeReceivedDamagedQty) {
			  						unreceiveGoodQty = totalToBeReceivedDamagedQty;
			  					} else {
			  						unreceiveGoodQty = receivedGoodQty;
			  					}
			  					
			  					
			  				} else {
			  					action = "unreceiveAndReceiveDamageQty";
			  				}
			  				
			  				
			  			} else {
			  				
			  				if(totalToBeReceivedDamagedQty == 0) {
			  					
			  					action = "unreceiveAllDamageQty";
			  					
			  				} else if(totalToBeReceivedDamagedQty > receivedDamagedQty) {
			  					
			  					var extraDamageQty = totalToBeReceivedDamagedQty - receivedDamagedQty;
			  					
			  					if(receivedGoodQty > 0) {
				  					
				  					//unreceiveGoodQty
				  					action = "unreceiveGoodAndReceiveDamageQty";
				  					if(receivedGoodQty > extraDamageQty) {
				  						unreceiveGoodQty = extraDamageQty;
				  					} else {
				  						unreceiveGoodQty = receivedGoodQty;
				  					}
				  					
				  				} else {
				  					action = "unreceiveAndReceiveDamageQty";
				  				}
			  					
			  					
			  				} else if (totalToBeReceivedDamagedQty < receivedDamagedQty ){
			  					
			  					action = "unreceiveAndReceiveDamageQty";
			  					
			  				}
		  				
			  			}
								
								
						if(unreceiveGoodQty > 0) {
							
			  				mashupArray.push(iscMashup.getMashupRefObj(this,"unreceiveGoodReceiptLine", {Receipt:{ShipmentLine:this.model.shipmentLine,ReceiptLines:{ReceiptLine:{Quantity:unreceiveGoodQty}}}}));
			  				invokedMashups.push("unreceiveGoodReceiptLine");
			  				
						}
						
						if(unreceiveDamageReceiptLines.ReceiptLine.length > 0) {
							
							mashupName = "unreceiveAllDamageReceiptLine";
							mashupInput = {Receipt:{ShipmentLine:this.model.shipmentLine,ReceiptHeaderKey:receiptHeaderKey,ReceiptLines:{ReceiptLine:unreceiveDamageReceiptLines.ReceiptLine}}};
							mashupArray.push(iscMashup.getMashupRefObj(this,mashupName, mashupInput));
							invokedMashups.push(mashupName);
							
						}
						
						if(receiveDamageReceiptLines.ReceiptLine.length > 0) {
							
							mashupName = "receiveDamageReceiptLine";
							mashupInput = {Receipt:{ShipmentLine:this.model.shipmentLine,ShipmentKey:this.model.shipmentLine.ShipmentKey,DocumentType:this.model.shipmentLine.DocumentType,ReceiptLines:{ReceiptLine:receiveDamageReceiptLines.ReceiptLine}}};
							mashupArray.push(iscMashup.getMashupRefObj(this,mashupName, mashupInput));
							invokedMashups.push(mashupName);
							
						} 
						
						iscMashup.callMashups(this,mashupArray,{isMultiAPICall:true}).then(this.handleRecordDamage.bind(this), this.handleRecordDamageError.bind(this, this.model.shipmentLine.ItemID));
						
					} else {
						$uibModalInstance.close({data:"NOUPDATE"});
					}
							
				}
				
			},
			
			/**
		     *@description Callback handler after recording damage for shipment with products. This method prepares the return object and goes back to parent screen.
			 *@param {Object} response - mashup response JSON object
		     */
			handleRecordDamage:function(response) {
				
				var apiOutput = iscMashup.getMashupOutput(response, "receiveDamageReceiptLine");
				if(iscCore.isVoid(apiOutput)) {
					apiOutput = iscMashup.getMashupOutput(response, "unreceiveAllDamageReceiptLine");
				}
				
				 if(!iscCore.isVoid(apiOutput) && !iscCore.isVoid(apiOutput.Receipt) && !iscCore.isVoid(apiOutput.Receipt.ReceiptLines) && !iscCore.isVoid(apiOutput.Receipt.ReceiptLines.ReceiptLine)
			  	       		&& !iscCore.isVoid(apiOutput.Receipt.ReceiptLines.ReceiptLine.length > 0)) {
	  	       		 var updatedShipmentLine = {ShipmentLine:apiOutput.Receipt.ReceiptLines.ReceiptLine[0].ShipmentLine};
	  	       		 //Defect 527239
	  	       		 $uibModalInstance.close({data:updatedShipmentLine,shipmentStatus:apiOutput.Receipt.ShipmentStatus});
	  	       	 }
				
			},
			
			/**
		     *@description Error callback handler for recording damage. This method is invoked when either receiveOrder/unreceiveOrder API throws any error.
			 *@param {Object} errors - mashup response JSON object
			 *@param {String} itemId - ItemId being marked as damage
		     */
			handleRecordDamageError:function(itemId,errors){
				
				if(!iscCore.isVoid(errors) && !iscCore.isVoid(errors.Errors) && !iscCore.isVoid(errors.Errors.Error) && !iscCore.isVoid(errors.Errors.Error.length > 0)) {
					
					this.ui.showAPIError = true;
					var errorBundleKey = "apierror.MSG_UnableToRecordDamage";
					var error = errors.Errors.Error[0];
					var errorCode = error.ErrorCode;
					var options = "";
					if("OMP10080" == errorCode) {
						options = {itemId:itemId}; 
						errorBundleKey = "apierror."+errorCode;
	     			} else {
	     				errorBundleKey = "apierror."+errorCode;
					}
					
					console.log("Record Damage failed due - ",error.ErrorDescription);
					
					this.ui.errorMsg = iscI18n.translate(errorBundleKey, options);
				}
				
			},
			
			/**
		     *@description Callback handler after recording damage for shipment with containers. This method prepares the return object and goes back to parent screen.
			 *@param {Object} response - mashup response JSON object
		     */
			handleReceiveDamagedContainer:function(response){
				var apiOutput = iscMashup.getMashupOutput(response,'receiveDamagedContainer');
				
				//var updatedContainer = apiOutput.Receipt.Container;
				//Defect 527239
				var resultData = {data:{container : apiOutput.Receipt.Container}, shipmentStatus:apiOutput.Receipt.ShipmentStatus};
				$uibModalInstance.close(resultData);
			},

			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2016, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.receiving.receive-shipment.common.view-container.view-container
 *@package store.views.receiving.receive-shipment.common.view-container
 *@class view-container
 *@description Popup to view shipment container details
 */
angular.module('store').controller('store.views.receiving.receive-shipment.common.view-container.view-container',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput','$filter', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,$filter,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{


  		model:{
  		 /**
         *@description This model contains shipment container details
         */
  		"container":{}
  		},

  		mashupRefs : [
  		              
						/**
						 *@description This mashup is used fetch shipment container details.
						 */
						{
							 mashupRefId: 'getContainerDetails',
						    mashupId: 'store.views.receiving.getShipmentContainerDetails'
						
						}
  		  		
			],


			ui:{
				/**
				*@property {Number}  pageSize - number of shipment packages to be displayed on launch of popup.
				*/
				pageSize: 5,
				 /**
				*@property {Number}  recordShownCount - count of packages currently displayed in popup.
				*/
				recordShownCount:5
			},
			

			/**
			 *@description This method initializes the view container screen with container details.
			 */
			initialize : function(){
				var apiInput = {Container:{ShipmentContainerKey:modalInput.ShipmentContainerKey}};
				iscMashup.callMashup(this,"getContainerDetails",apiInput,{}).then(this.handleInitAPICalls.bind(this),angular.noop);
				
			},
			
			/**
			 * @description Callback handler for initialize() method. Sets the container details model with API output.
			 * @param {Object} response - mashup response JSON object
			 */
			handleInitAPICalls:function(response) {
				
				this.model.container = iscMashup.getMashupOutput(response,"getContainerDetails");
				console.log("before array");
				console.log(this.model.container);
				if(parseInt(this.model.container.Container.ContainerDetails.TotalNumberOfRecords) == 1){
					var temp = this.model.container.Container.ContainerDetails.ContainerDetail;
					delete this.model.container.Container.ContainerDetails.ContainerDetail;
					 this.model.container.Container.ContainerDetails.ContainerDetail = [temp];
					 console.log("After making it an array");
					 console.log(this.model.container);
				}
			},
			
			/**
			 *@description Shows next set of packages when the shipment panel is scrolled.
			 */
			uiGetNextList: function(){
	    		this.ui.recordShownCount+=this.ui.pageSize;
			},	
			
			/**
			 *@description Validates if next page action should be performed by checking whether api call is in progress. The current implementation always returns true since the pagination is client side in order details.
			 */
			uiScrollActionValidator: function(){
		        	return true;
		    },
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			}
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.shipment.backroom-pick.common.print-pick-ticket.print-pick-ticket
 *@package store.views.shipment.backroom-pick.common.print-pick-ticket
 *@class print-pick-ticket
 */
angular.module('store').controller('store.views.shipment.backroom-pick.common.print-pick-ticket.print-pick-ticket',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscAppInfo','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscAppInfo,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{
			
  		model:{
		
  		},

  		mashupRefs : [

  		            /**
                     *@description This mashup is used to get the count of BOPIS Shipments for printing pick ticket which are not printed.
                     */
                    {
                    	 mashupRefId: 'getBOPISShipmentToBePrintedCount',
                         mashupId: 'store.views.shipment.backroom-pick.getBOPISShipmentPrintPickTicketCount'

                    },
                    {
                    	  /**
                         *@description This mashup is used to get the count of BOPIS Shipments for printing pick ticket which are printed.
                         */
                   	 	mashupRefId: 'getBOPISShipmentAlreadyPrintedCount',
                        mashupId: 'store.views.shipment.backroom-pick.getBOPISShipmentPrintPickTicketCount'

                   },
                   {
                	   /**
                        *@description This mashup is used to get the count of SFS Shipments for printing pick ticket which are not printed.
                        */
                   	 	mashupRefId: 'getSFSShipmentToBePrintedCount',
                        mashupId: 'store.views.shipment.backroom-pick.getSFSShipmentPrintPickTicketCount'

                   },
                   {
                	   /**
                        *@description This mashup is used to get the count of SFS Shipments for printing pick ticket which are printed.
                        */
                     	 mashupRefId: 'getSFSShipmentAlreadyPrintedCount',
                         mashupId: 'store.views.shipment.backroom-pick.getSFSShipmentPrintPickTicketCount'

                    }

  		              
			],


			ui:{
				/**
	  			*@property {Boolean} hasPermissionForBOPISShipment - True if user has permission for Picking BOPIS shipments, false otherwise.
	  			 */
				hasPermissionForBOPISShipment:iscResourcePermission.hasPermission("WSC000057"),
				/**
	  			*@property {Boolean} hasPermissionForSFSShipment - True if user has permission for Picking SFS shipments, false otherwise.
	  			 */
				hasPermissionForSFSShipment:iscResourcePermission.hasPermission("WSC000058"),
				/**
	  			*@property {Number} BOPISShipmentsToBePrinted - count of BOPIS shipments which are not printed
	  			 */
				BOPISShipmentsToBePrinted:0,
				/**
	  			*@property {Number} BOPISShipmentsAlreadyPrinted - count of BOPIS shipments which are printed
	  			 */
				BOPISShipmentsAlreadyPrinted:0,
				/**
	  			*@property {Number} totalBOPISShipmentsToBePicked - total count of BOPIS shipments ready for picking
	  			 */
				totalBOPISShipmentsToBePicked:0,
				/**
	  			*@property {Number} SFSShipmentsToBePrinted - count of SFS shipments which are not printed
	  			 */
				SFSShipmentsToBePrinted:0,
				/**
	  			*@property {Number} SFSShipmentsAlreadyPrinted - count of SFS shipments which are printed
	  			 */
				SFSShipmentsAlreadyPrinted:0,
				/**
	  			*@property {Number} totalSFSShipmentsToBePicked - total count of SFS shipments ready for picking
	  			 */
				totalSFSShipmentsToBePicked:0,
				/**
	  			*@property {Boolean} printBOPISShipments - True if Print BOPIS shipment checkbox is selected
	  			 */
				printBOPISShipments:false,
				/**
	  			*@property {Boolean} printSFSShipments - True if Print SFS shipment checkbox is selected
	  			 */
				printSFSShipments:false

			},
			
			initialize : function(){
				
				 var mashupArray = [];
				 var getShipmentToBePrintedInput = {Shipment:{PickTicketPrinted:'Y'}};
        		 var getShipmentAlreadyPrintedInput = {Shipment:{PickTicketPrinted:'N'}};
				 
	        	 if(this.ui.hasPermissionForBOPISShipment) {
	        		 
	        		 mashupArray.push(iscMashup.getMashupRefObj(this,'getBOPISShipmentToBePrintedCount',getShipmentToBePrintedInput));
	        		 mashupArray.push(iscMashup.getMashupRefObj(this,'getBOPISShipmentAlreadyPrintedCount',getShipmentAlreadyPrintedInput));
	        	 }
	        	 if(this.ui.hasPermissionForSFSShipment) {
	        		 
	        		 mashupArray.push(iscMashup.getMashupRefObj(this,'getSFSShipmentToBePrintedCount',getShipmentToBePrintedInput));
	        		 mashupArray.push(iscMashup.getMashupRefObj(this,'getSFSShipmentAlreadyPrintedCount',getShipmentAlreadyPrintedInput));
	        	 }
	        	 
	    		 iscMashup.callMashups(this,mashupArray,{}).then(this.handleInitApiCalls.bind(this),angular.noop);
				
				
			},
			
			  /**
	         *@description This method is a callback handler for mashups invoked in initialize method.
	         * This method initialize the ui objects with appropriate BOPISShipment count and SFSShipment count to be printed and already printed.
	         * 
	         *@param {Object} response - mashup output JSON object
	         */
			handleInitApiCalls:function(response) {
				
				var apiOutput = "";
				
				if(this.ui.hasPermissionForBOPISShipment) {
	        		 
					apiOutput =  iscMashup.getMashupOutput(response,"getBOPISShipmentToBePrintedCount");
					this.ui.BOPISShipmentsToBePrinted = Number(apiOutput.Shipments.TotalNumberOfRecords);
					apiOutput =  iscMashup.getMashupOutput(response,"getBOPISShipmentAlreadyPrintedCount");
	        		this.ui.BOPISShipmentsAlreadyPrinted = Number(apiOutput.Shipments.TotalNumberOfRecords);
	        		
	        		this.ui.totalBOPISShipmentsToBePicked = this.ui.BOPISShipmentsAlreadyPrinted + this.ui.BOPISShipmentsToBePrinted;
	
	        	 }
				
	        	if(this.ui.hasPermissionForSFSShipment) {
	        		 
		        	apiOutput =  iscMashup.getMashupOutput(response,"getSFSShipmentToBePrintedCount");
					this.ui.SFSShipmentsToBePrinted = Number(apiOutput.Shipments.TotalNumberOfRecords);
					apiOutput =  iscMashup.getMashupOutput(response,"getSFSShipmentAlreadyPrintedCount");
					this.ui.SFSShipmentsAlreadyPrinted = Number(apiOutput.Shipments.TotalNumberOfRecords);
        			
					this.ui.totalSFSShipmentsToBePicked = this.ui.SFSShipmentsAlreadyPrinted + this.ui.SFSShipmentsToBePrinted;
	        		 
	        	}
				
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({data : 'CANCEL'});
			},
			
			/**
			 *@description OnClick handler of "Apply" button, propagates the data back to invoking screen.
			 */
			uiSubmit : function (action) {
				
				var action = "PRINT_ALL";
				var isPrintingLargeShipments = false;
				
				if(this.ui.printBOPISShipments && !this.ui.printSFSShipments) {
					action = "PRINT_BOPIS";
					isPrintingLargeShipments = Number(this.ui.totalBOPISShipmentsToBePicked) > 100;
				} else if(this.ui.printSFSShipments && !this.ui.printBOPISShipments) {
					action = "PRINT_SFS"
					isPrintingLargeShipments = Number(this.ui.totalSFSShipmentsToBePicked) > 100;
				}
				
				
				if(action == "PRINT_ALL") {
					isPrintingLargeShipments = (Number(this.ui.totalBOPISShipmentsToBePicked) + Number(this.ui.totalSFSShipmentsToBePicked)) > 100;
				}
				
				var modalResponse = {};
				modalResponse = {
					data : {
						shipmentTypeToPrint : action,
						isPrintingLargeShipments:isPrintingLargeShipments
							}
						};
				
				
				$uibModalInstance.close(modalResponse);
			}
			
			
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.shipment.backroom-pick.common.shipment-in-batch.shipment-in-batch
 *@package store.views.shipment.backroom-pick.common.shipment-in-batch
 *@class shipment-in-batch
 */
angular.module('store').controller('store.views.shipment.backroom-pick.common.shipment-in-batch.shipment-in-batch',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','iscWizard','modalInput','$filter', 'iscMashup','iscAppInfo','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,iscWizard,modalInput,$filter,iscMashup,iscAppInfo,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{

  		model:{
  			 /**
	           *@description This model contains shipment details model.
	           */
         "shipmentDetails":{}
		
  		},

  		mashupRefs : [

			],


			ui:{

			},
			
			initialize : function(){
				this.model.shipmentDetails = modalInput.shipmentDetails;
			},
			
			uiGetDueInImageUrl:function(slaImageRelativePath) {
				
				var slaImageFullURL = "";
	  			if(slaImageRelativePath) {
					slaImageFullURL =  window.location.protocol+"//"+window.location.host+iscAppInfo.getApplicationContext()+"/"+slaImageRelativePath;
	  			}
	  			
	  			return slaImageFullURL;
	  			
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss({data:'CANCEL'});
			},

			
			
			/**
			 *@description OnClick handler of "Apply" button, propagates the data back to invoking screen.
			 */
			uiSubmit : function (action) {
				$uibModalInstance.close({data:action});
			}
			
			
			
			
  	});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.shipment.batchpick.batch-list.departments.batch-list-departments
 *@package store.views.shipment.batchpick.batch-list.departments
 *@class batch-list-departments
 *@description Popup to how department codes for a batch
 */
angular.module('store').controller('store.views.shipment.batchpick.batch-list.departments.batch-list-departments',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{

			model:{
			  
			},

			mashupRefs : [],


			ui:{
				batchNo:'',
				departmentDesc:''
			},
			

			/**
			 *@description This method initializes the department modal popup.
			 */
			initialize : function(){
				this.ui.batchNo = modalInput.DepData.BatchNo;
				this.ui.departmentDesc = modalInput.DepData.Departments;
			},
			
			/**
			 *@description OnClick handler of "Close" button, closes the modal popup.
			 */
			uiCloseModal : function () {
				$uibModalInstance.dismiss('close');
			}

			
  		});
		
		
		
	}
]);


/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

/**
 *@iscdoc viewmodal
 *@viewname store.views.shipment.batchpick.batch-list.pref.batch-list-preferences
 *@package store.views.shipment.batchpick.batch-list.pref
 *@class batch-list-preferences
 *@description Popup to set disposition codes for return order lines
 */
angular.module('store').controller('store.views.shipment.batchpick.batch-list.pref.batch-list-preferences',
  ['$scope','$rootScope','$uibModalInstance','iscScreen','modalInput', 'iscMashup','iscResourcePermission','iscI18n','iscModal',
	function($scope,$rootScope,$uibModalInstance,iscScreen,modalInput,iscMashup,iscResourcePermission,iscI18n,iscModal) {
		
		
		iscScreen.initializeModalScreen($scope,{

  		model:{
  		  /**
         *@description This model contains the list of disposition codes for the store.
         */
  		"userpref":{},
  		 /**
         *@description This model contains return order line list.
         */
  		"batchMaxSize":{}
  		},

  		mashupRefs : [
  		              {mashupRefId: 'manageBatchMaxSize',
		            mashupId: 'store.views.shipment.batchpick.batch-list.manageBatchMaxSize'
		  		},{
		  			mashupRefId: 'manageBatchSortMethod',
		            mashupId: 'store.views.shipment.batchpick.batch-list.manageBatchSortMethod'
		  		},
		  		 {
		  			mashupRefId: 'getUserUiStateList',
		            mashupId: 'store.views.shipment.batchpick.batch-list.getUserUiStateList'
		  		}
  		            
			],


			ui:{
				/**
    			 *@property {String} selectedDisposition - property to set first disposition code as selected one.
    			 */
				pickedFlag:'N'
			},
			

			/**
			 *@description This method initializes the return line list and disposition list. Also sets the first value as default in the disposition drop down.
			 */
			initialize : function(){
				var getUserPrefInput = {};
				iscMashup.callMashup(this,'getUserUiStateList',getUserPrefInput,{}).then(function(data){
            		var output = iscMashup.getMashupOutput(data,'getUserUiStateList');
            		this.handleGetUserUiStateListOutput(output);
            	}.bind(this),angular.noop);
			},
			
			handleGetUserUiStateListOutput:function(output){
				console.log(output);
				this.model.userpref = output;
			},
			uiUpdate:function(){
				var batchMaxSizeInput = {UserUiState:{Definition:this.model.userpref.UserPref.BatchMaxShipments}};
				var batchSortMethodInput = {UserUiState:{Definition:this.model.userpref.UserPref.BatchSortMethod}};
				var mashupArray = [];
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'manageBatchMaxSize',batchMaxSizeInput));
	        	mashupArray.push(iscMashup.getMashupRefObj(this,'manageBatchSortMethod',batchSortMethodInput));
	        	iscMashup.callMashups(this,mashupArray,{}).then(function(data){
	  				//var output = iscMashup.getMashupOutput(data,'getReturnOrderDetails');
	  				
            		this.handleManageBatchPreferences(data);
	            	}.bind(this),angular.noop);
				
			},
			
			handleManageBatchPreferences: function(){
				$uibModalInstance.close({});
			},
			
			/**
			 *@description OnClick handler of "Cancel" button, closes the modal popup.
			 */
			uiClose : function () {
				$uibModalInstance.dismiss('cancel');
			},

			
  	});
		
		
		
	}
]);


angular.module('store').config(['iscAppointmentStatusProvider',function(iscAppointmentStatusProvider){
	
	
	iscAppointmentStatusProvider.addAppointmentStatusConfig("OPEN","instoreappointment.LABEL_1100");
	iscAppointmentStatusProvider.addAppointmentStatusConfig("COMPLETE","instoreappointment.LABEL_1400");
	iscAppointmentStatusProvider.addAppointmentStatusConfig("CANCELED","instoreappointment.LABEL_1600");
	
	
}]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/*
	This file is used to configure focus logic for angular bootstrap directives. 

*/

angular.module('store').config(['iscAutofocusProvider',function(iscAutofocusProvider){
	var uibTabFocusConfig = {
		'focus' : function(scope,element,attributes){
				//if 'active' attribute is set for the uib-tabs, find the one that is actually active and set focus on that tab
				if(element[0].getAttribute('active')) { 
					if(scope.$$childHead.active) {
						var anchorElement = element[0].getElementsByTagName('a');
						anchorElement[0].setAttribute('autofocus',true);
					}
				} else {
					var anchorElement = element[0].getElementsByTagName('a');
					anchorElement[0].setAttribute('autofocus',true);
				}
      	}
	};
	iscAutofocusProvider.addFocusConfiguration('uib-tab',uibTabFocusConfig);
	
	var addressCaptureConfig = {
		'focus' : function(scope,element,attributes){
			var selectElement = element[0].getElementsByTagName('select');
			selectElement[0].setAttribute('autofocus',true);
		}
	};
	iscAutofocusProvider.addFocusConfiguration('isc-Address-Capture',addressCaptureConfig);
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10)
 * (C) Copyright IBM Corp.  2015, 2016 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/*
	This file is used to configure currency formatting information for various currency codes. Below are the formatting information for the ten
	currencies currently present in the YFS_CURRENCY table in the database. If a new currency is added to this table, add the formatting information for it here.
	
	'currencyCode' in the example JSON objects below should match the 'Currency' returned by the 'getCurrencyList' API.
	'currencyDescription' in the example JSON objects below are just for explanation. This key is not used anywhere else. 
	'NUMBER_FORMATS' for each of the currencies follow the angular i18n standards and the JSON objects below are copied from the respective angular-locale-<country_code>.js files present under angular-i18n folder. https://github.com/angular/angular.js/tree/master/i18n
	
	JSON objects are also added with currencyCode value as 'defaultPrefix' and 'defaultSuffix' in this file. Those two objects are used if no currency formatting information is found for a currency code returned by the 'getCurrencyList' API.

*/

angular.module('store').config(['iscCurrencyFormatProvider',function(iscCurrencyFormatProvider){
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "USD",
		"currencyDescription" : "US Dollar",
		"NUMBER_FORMATS" : {
			"CURRENCY_SYM": "$",
			"DECIMAL_SEP": ".",
			"GROUP_SEP": ",",
			"PATTERNS": 
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-\u00a4",
				"negSuf": "",
				"posPre": "\u00a4",
				"posSuf": ""
			}
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
                "currencyCode" : "GPB",
                "NUMBER_FORMATS" : {
                        "CURRENCY_SYM": "\u00a3",
                        "currencyDescription" : "GBP",
                        "DECIMAL_SEP": ",",
                        "GROUP_SEP": ".",
                        "PATTERNS":
                        {
                                "gSize": 3,
                                "lgSize": 3,
                                "maxFrac": 2,
                                "minFrac": 2,
                                "minInt": 1,
                                "negPre": "-",
                                "negSuf": "\u00a0\u00a4",
                                "posPre": "",
                                "posSuf": "\u00a0\u00a4"
                        }
                }
        });
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "EUR",
		"NUMBER_FORMATS" : {
			"CURRENCY_SYM": "\u20ac",
			"currencyDescription" : "Euro",
			"DECIMAL_SEP": ",",
			"GROUP_SEP": ".",
			"PATTERNS": 
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-",
				"negSuf": "\u00a0\u00a4",
				"posPre": "",
				"posSuf": "\u00a0\u00a4"
			}
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "INR",
		"currencyDescription" : "Indian Rupee",
		"NUMBER_FORMATS": {
			"CURRENCY_SYM": "\u20b9",
			"DECIMAL_SEP": ".",
			"GROUP_SEP": ",",
			"PATTERNS": 
			{
				"gSize": 2,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-\u00a4\u00a0",
				"negSuf": "",
				"posPre": "\u00a4\u00a0",
				"posSuf": ""
			}
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "CNY",
		"currencyDescription" : "Chinese Yuan",
		"NUMBER_FORMATS": {
			"CURRENCY_SYM": "\u00a5",
			"DECIMAL_SEP": ".",
			"GROUP_SEP": ",",
			"PATTERNS": 
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-\u00a4\u00a0",
				"negSuf": "",
				"posPre": "\u00a4\u00a0",
				"posSuf": ""
			}
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "JPY",
		"currencyDescription" : "Japanese Yen",
		"NUMBER_FORMATS": {
			"CURRENCY_SYM": "\u00a5",
			"DECIMAL_SEP": ".",
			"GROUP_SEP": ",",
			"PATTERNS": 
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-\u00a4",
				"negSuf": "",
				"posPre": "\u00a4",
				"posSuf": ""
			}
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "KRW",
		"currencyDescription" : "South Korean Won",
		"NUMBER_FORMATS": {
			"CURRENCY_SYM": "\u20a9",
			"DECIMAL_SEP": ".",
			"GROUP_SEP": ",",
			"PATTERNS": 
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-\u00a4",
				"negSuf": "",
				"posPre": "\u00a4",
				"posSuf": ""
			}	
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "BRL",
		"currencyDescription" : "Brazilian Real",
		"NUMBER_FORMATS": {
			"CURRENCY_SYM": "R$",
			"DECIMAL_SEP": ",",
			"GROUP_SEP": ".",
			"PATTERNS": 
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-\u00a4",
				"negSuf": "",
				"posPre": "\u00a4",
				"posSuf": ""
			}
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "PLN",
		"currencyDescription" : "Polish Zloty",
		"NUMBER_FORMATS": {
			"CURRENCY_SYM": "z\u0142",
			"DECIMAL_SEP": ",",
			"GROUP_SEP": "\u00a0",
			"PATTERNS": 
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-",
				"negSuf": "\u00a0\u00a4",
				"posPre": "",
				"posSuf": "\u00a0\u00a4"
			}
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "TRY",
		"currencyDescription" : "Turkish Lira",
		"NUMBER_FORMATS": {
			"CURRENCY_SYM": "TL",
			"DECIMAL_SEP": ",",
			"GROUP_SEP": ".",
			"PATTERNS":
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-",
				"negSuf": "\u00a0\u00a4",
				"posPre": "",
				"posSuf": "\u00a0\u00a4"
			}
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "RUB",
		"currencyDescription" : "Russian Ruble",
		"NUMBER_FORMATS": {
			"CURRENCY_SYM": "\u0440\u0443\u0431.",
			"DECIMAL_SEP": ",",
			"GROUP_SEP": "\u00a0",
			"PATTERNS":			  
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-",
				"negSuf": "\u00a0\u00a4",
				"posPre": "",
				"posSuf": "\u00a0\u00a4"
			}
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "defaultPrefix",
		"currencyDescription" : "Default currency format with currency symbol as prefix",
		"NUMBER_FORMATS" : {
			"CURRENCY_SYM": "",
			"DECIMAL_SEP": ".",
			"GROUP_SEP": ",",
			"PATTERNS": 
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-\u00a4",
				"negSuf": "",
				"posPre": "\u00a4",
				"posSuf": ""
			}
		}
	});
	iscCurrencyFormatProvider.addCurrencyFormat({
		"currencyCode" : "defaultSuffix",
		"currencyDescription" : "Default currency format with currency symbol as suffix",
		"NUMBER_FORMATS" : {
			"CURRENCY_SYM": "",
			"DECIMAL_SEP": ".",
			"GROUP_SEP": ",",
			"PATTERNS": 
			{
				"gSize": 3,
				"lgSize": 3,
				"maxFrac": 2,
				"minFrac": 2,
				"minInt": 1,
				"negPre": "-",
				"negSuf": "\u00a0\u00a4",
				"posPre": "",
				"posSuf": "\u00a0\u00a4"
			}
		}
	});
}]);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/

(function(i18n){
    angular.module('store').config(['iscI18nProvider',function(iscI18nProvider){
      iscI18nProvider.init({
        lngs:["de", "en", "es", "fr", "it", "ja",	"ko",	"pl",	"pt",	"ru",	"tr",	"zh",	"zh-tw"],
        fallbackLng: 'en',
        l10nKit:[
          {url:'./shared/nls/__lng__/shared.nls.json',ns:'app'},
          {url:'./store/nls/__lng__/login.nls.json',ns:'app'},
          {url:'./store/nls/__lng__/app.nls.json',ns:'app'},
          {url:'./store/nls/__lng__/app_a11y.nls.json',ns:'app'},
          {url:'./shared/nls/__lng__/shared_a11y.nls.json',ns:'app'}

          //{url:'./store/extn/nls/__lng__/extn.nls.json',ns:'app'}
        ]
      });

        i18n.on('initialized', function(options) {
            // RTC Defect: 516020 - Plurals not getting displayed properly for Russian and Polish locales
            var enRules = i18n.services.pluralResolver.rules['en'];
            var ruRules = i18n.services.pluralResolver.rules['ru'];
            var plRules = i18n.services.pluralResolver.rules['pl'];
            ruRules.numbers = plRules.numbers = enRules.numbers;
            ruRules.plurals = plRules.plurals = enRules.plurals;
        })
        

    }]);


})(window.i18next);

/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/*
	This file is used to configure the date format to be displayed in the date filter for a particular locale. 
	The application uses Angular bootstrap 'uib-datepicker-popup' directive to display the dates. The datepicker-popup expects the year format and date format be specified in lower case and month format in upper case.
	
	The configuration below is for all the locales supported currently by the IBM Sterling Order Management Store.
	
	TVT team agreed on a universal date format of yyyy/MM/dd for all locales. If any locale wishes to change this format, they have to do so below across their locale code.
*/

angular.module('store')

  .config(['iscDateFilterProvider',function(iscDateFilterProvider){
	iscDateFilterProvider.addDateFormatForLocale("de","dd.MM.yyyy");
	iscDateFilterProvider.addDateFormatForLocale("en","MMM dd,yyyy");
	iscDateFilterProvider.addDateFormatForLocale("es","yyyy/MM/dd");
	iscDateFilterProvider.addDateFormatForLocale("fr","yyyy/MM/dd");
	iscDateFilterProvider.addDateFormatForLocale("it","yyyy/MM/dd");
	iscDateFilterProvider.addDateFormatForLocale("ja","yyyy/MM/dd");
	iscDateFilterProvider.addDateFormatForLocale("ko","yyyy/MM/dd");
	iscDateFilterProvider.addDateFormatForLocale("pl","yyyy/MM/dd");
	iscDateFilterProvider.addDateFormatForLocale("pt","dd/MM/yyyy");
	iscDateFilterProvider.addDateFormatForLocale("ru","yyyy/MM/dd");
	iscDateFilterProvider.addDateFormatForLocale("tr","yyyy/MM/dd");
	iscDateFilterProvider.addDateFormatForLocale("zh","yyyy/MM/dd");
	iscDateFilterProvider.addDateFormatForLocale("zh-tw","yyyy/MM/dd");
	iscDateFilterProvider.addDateTimeFormatForLocale("de","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("en","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("es","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("fr","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("it","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("ja","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("ko","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("pl","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("pt","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("ru","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("tr","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("zh","dd.MM.yyyy,h:mm a");
	iscDateFilterProvider.addDateTimeFormatForLocale("zh-tw","dd.MM.yyyy,h:mm a");
   }])

   .run(['$rootScope','iscDateFilter','iscAppContext', function ($rootScope,iscDateFilter,iscAppContext) {
	   
	   var dateFormatForLocale = iscAppContext.getFromContext('localeCode');
	   $rootScope.dateTimeFormat =  iscDateFilter.getDateTimeFormatForLocale(dateFormatForLocale);
	   
    }]);
	
	





/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp.  2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/


angular.module('store').config(['iscMediaProvider',function(iscMediaProvider){
  iscMediaProvider.addMediaQuery("xs",null,768);
	iscMediaProvider.addMediaQuery("sm",768,992);
	iscMediaProvider.addMediaQuery("md",992,1200);
	iscMediaProvider.addMediaQuery("lg",1200,null);
	iscMediaProvider.addMediaQuery("lte-800",null,801);
	iscMediaProvider.addMediaQuery("gt-800",801,null);
    iscMediaProvider.addMediaQuery("lte-480",null,481);
    iscMediaProvider.addMediaQuery("gt-480",481,null);
    iscMediaProvider.addMediaQuery("gte-480",480,null);
    iscMediaProvider.addMediaQuery("gt-768",769,null);
    iscMediaProvider.addMediaQuery("lte-768",null,769);
	iscMediaProvider.addMediaQuery("gte-768",768,null);
}]);
/*******************************************************************************
 * IBM Confidential
 * OCO Source Materials
 * IBM Sterling Order Management Store (5725-D10), IBM Order Management (5737-D18), IBM Store Engagement (5737D58)
 * (C) Copyright IBM Corp. 2015, 2017 All Rights Reserved.
 * The source code for this program is not published or otherwise divested of its trade secrets, irrespective of what has been deposited with the U.S. Copyright Office.
 ******************************************************************************/
/*
	This file is used to configure the date range options inside the date filter pop-up for the 'Order List' screen. Other screens using a datefilter can configure their date range options based on this file.
	
	After confguring the options, call 'addComboOptions' method of the iscDateFilterComboBox service like this:
	iscDateFilterComboBox.addComboOptions('orderListDateFilter',dateComboOptions)
	Here, 'orderListDateFilter' is the unique key for the screen/directive configuring the date range options. The same key must be used while retrieving the options using the 'getComboOptions' method of 'iscDateFilterComboBox' service
	
	'dateComboOptions' is an array of objects containing the following key-value pairs:
	'labelBundleKey' is the bundle file key for the label to be displayed for the date range
	'startDateDisplay' is the display value for the start date of the date range. It should be localised and formatted in accordance to the dateDisplayFormat chosen for the date filter
	'startDate' is a javascript Date object for the start date of the date range that is not localised but is formatted in accordance to the dateDisplayFormat chosen for the date filter
	'endDateDisplay' is the display value for the end date of the date range. It should be localised and formatted in accordance to the dateDisplayFormat chosen for the date filter
	'endDate' is a javascript Date object for the end rate of the date range that is not localised but is formatted in accordance to the dateDisplayFormat chosen for the date filter

	The application uses Angular bootstrap 'uib-datepicker-popup' directive to display the dates. For this directive, date display format used by the application is configured by using 'addDateFormatForLocale' method of iscDateFilterProvider.
	AngularMoment.js is used to format the dates for the drop down. For the uib-datepicker-popup date format of 'yyyy/MM/dd', the corresponding AngularMoment format to be used is 'YYYY/MM/DD'. Hence 'toUpperCase' method of Javascript is called to change the format.
*/
angular.module('store').run(['amSubtractFilter','amAddFilter','iscAppContext','iscDateFilterComboBox','iscDateFilter','iscAppInfo',function(amSubtractFilter,amAddFilter,iscAppContext,iscDateFilterComboBox,iscDateFilter,iscAppInfo){
	var dateFormatForLocale = iscDateFilter.getDateFormatForLocale(iscAppContext.getFromContext('localeCode'));
	if(!dateFormatForLocale) dateFormatForLocale = 'yyyy/MM/dd';
	//if(isNaN(new Date(amSubtractFilter(new Date(),0,'days').format(dateFormatForLocale.toUpperCase())).getTime())) dateFormatForLocale = 'yyyy/MM/dd';
	var dateFormatForMomentCalculations = dateFormatForLocale.toUpperCase();
	var dateFormatFromToDates = 'MMM dd,yyyy'.toUpperCase();
	
    var today = {
			'labelBundleKey':'datefilter.LABEL_today',
			'startDateDisplay':amSubtractFilter(new Date(),0,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'startDate':amSubtractFilter(new Date(),0,'days').format(dateFormatFromToDates),
			'endDateDisplay':amSubtractFilter(new Date(),0,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'endDate':amSubtractFilter(new Date(),0,'days').format(dateFormatFromToDates)
		};
    
    var yesterday = {
			'labelBundleKey':'datefilter.LABEL_yesterday',
			'startDateDisplay':amSubtractFilter(new Date(),1,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'startDate':amSubtractFilter(new Date(),1,'days').format(dateFormatFromToDates),
			'endDateDisplay':amSubtractFilter(new Date(),1,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'endDate':amSubtractFilter(new Date(),1,'days').format(dateFormatFromToDates)
		};
    
    var lastWeek = {
			'labelBundleKey':'datefilter.LABEL_last7Days',
			'startDateDisplay':amSubtractFilter(new Date(),6,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'startDate':amSubtractFilter(new Date(),6,'days').format(dateFormatFromToDates),
			'endDateDisplay':amSubtractFilter(new Date()).locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'endDate':amSubtractFilter(new Date()).format(dateFormatFromToDates)
		};
    
    var lastMonth = {
			'labelBundleKey':'datefilter.LABEL_lastMonth',
			'startDateDisplay':amSubtractFilter(new Date(),29,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'startDate':amSubtractFilter(new Date(),29,'days').format(dateFormatFromToDates),
			'endDateDisplay':amSubtractFilter(new Date()).locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'endDate':amSubtractFilter(new Date()).format(dateFormatFromToDates)
		};
    
    /*var nextWeek = {
			'labelBundleKey':'datefilter.LABEL_next7Days',
			'startDateDisplay':amAddFilter(new Date(),0,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'startDate':amAddFilter(new Date(),0,'days').format(dateFormatFromToDates),
			'endDateDisplay':amAddFilter(new Date(),6,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'endDate':amAddFilter(new Date()).format(dateFormatFromToDates)
		};
    
    var nextMonth = {
			'labelBundleKey':'datefilter.LABEL_nextMonth',
			'startDateDisplay':amSubtractFilter(new Date(),29,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'startDate':amSubtractFilter(new Date(),29,'days').format(dateFormatFromToDates),
			'endDateDisplay':amSubtractFilter(new Date()).locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'endDate':amSubtractFilter(new Date()).format(dateFormatFromToDates)
		};*/
    
    var last3Months = {
			'labelBundleKey':'datefilter.LABEL_last3Months',
			'startDateDisplay':amSubtractFilter(new Date(),89,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'startDate':amSubtractFilter(new Date(),89,'days').format(dateFormatFromToDates),
			'endDateDisplay':amSubtractFilter(new Date()).locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'endDate':amSubtractFilter(new Date()).format(dateFormatFromToDates)
		};
    var last6Months = {
			'labelBundleKey':'datefilter.LABEL_last6Months',
			'startDateDisplay':amSubtractFilter(new Date(),179,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'startDate':amSubtractFilter(new Date(),179,'days').format(dateFormatFromToDates),
			'endDateDisplay':amSubtractFilter(new Date()).locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'endDate':amSubtractFilter(new Date()).format(dateFormatFromToDates)
		};
    
    var lastYear = {
			'labelBundleKey':'datefilter.LABEL_lastYear',
			'startDateDisplay':amSubtractFilter(new Date(),364,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'startDate':amSubtractFilter(new Date(),364,'days').format(dateFormatFromToDates),
			'endDateDisplay':amSubtractFilter(new Date()).locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
			'endDate':amSubtractFilter(new Date()).format(dateFormatFromToDates)
		};
    
    var tomorrow = {
		'labelBundleKey':'datefilter.LABEL_tomorrow',
		'startDateDisplay':amAddFilter(new Date(),1,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
		'startDate':amAddFilter(new Date(),1,'days').format(dateFormatFromToDates),
		'endDateDisplay':amAddFilter(new Date(),1,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
		'endDate':amAddFilter(new Date(),1,'days').format(dateFormatFromToDates)
	};
    
    var nextWeek = {
		'labelBundleKey':'datefilter.LABEL_next7Days',
		'startDateDisplay':amAddFilter(new Date()).locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
		'startDate':amAddFilter(new Date()).format(dateFormatFromToDates),
		'endDateDisplay':amAddFilter(new Date(),6,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
		'endDate':amAddFilter(new Date(),6,'days').format(dateFormatFromToDates)
	};
    
    var nextMonth = {
		'labelBundleKey':'datefilter.LABEL_nextMonth',
		'startDateDisplay':amAddFilter(new Date()).locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
		'startDate':amAddFilter(new Date()).format(dateFormatFromToDates),
		'endDateDisplay':amAddFilter(new Date(),29,'days').locale(iscAppInfo.getLocaleCodeForMoment(iscAppContext.getFromContext('localeCode'))).format(dateFormatForMomentCalculations),
		'endDate':amAddFilter(new Date(),29,'days').format(dateFormatFromToDates)
	};
    
    var orderDateFilterComboOptions = [];
    orderDateFilterComboOptions.push(lastWeek);
    orderDateFilterComboOptions.push(lastMonth);
    orderDateFilterComboOptions.push(last3Months);
    orderDateFilterComboOptions.push(last6Months);
    orderDateFilterComboOptions.push(lastYear);
    
    iscDateFilterComboBox.addComboOptions('orderListDateFilter',orderDateFilterComboOptions);
	iscDateFilterComboBox.addComboOptions('orderHistoryListDateFilter',orderDateFilterComboOptions);
    
    var shipmentDateFilterComboOptions = [];
    shipmentDateFilterComboOptions.push(today);  
    shipmentDateFilterComboOptions.push(yesterday);   
    shipmentDateFilterComboOptions.push(lastWeek); 
    shipmentDateFilterComboOptions.push(lastMonth); 

    iscDateFilterComboBox.addComboOptions('shipmentDateFilter',shipmentDateFilterComboOptions);
    
    var appointmentDateFilterComboOptions = [];
    appointmentDateFilterComboOptions.push(lastWeek); 
    appointmentDateFilterComboOptions.push(lastMonth);
    appointmentDateFilterComboOptions.push(nextWeek);  
    appointmentDateFilterComboOptions.push(nextMonth);  

    iscDateFilterComboBox.addComboOptions('appointmentDateFilter',appointmentDateFilterComboOptions);
    
    var shipmentDateFilter_incomingComboOptions = [];
    shipmentDateFilter_incomingComboOptions.push(today);
    shipmentDateFilter_incomingComboOptions.push(tomorrow);
    shipmentDateFilter_incomingComboOptions.push(nextWeek);
    shipmentDateFilter_incomingComboOptions.push(nextMonth);
    
    iscDateFilterComboBox.addComboOptions('shipmentDateFilter_incoming',shipmentDateFilter_incomingComboOptions);
}]);
			
angular.module('store').config(['iscShipmentStatusProvider',function(iscShipmentStatusProvider){
	
	
	iscShipmentStatusProvider.addShipmentStatusConfig("Pick","1100.70.06.10","shipmentList.LABEL_1100_70_06_10");
	iscShipmentStatusProvider.addShipmentStatusConfig("Pick","1100.70.06.20","shipmentList.LABEL_1100_70_06_20");
	iscShipmentStatusProvider.addShipmentStatusConfig("Pack","1100.70.06.50","shipmentList.LABEL_1100_70_06_50");
	iscShipmentStatusProvider.addShipmentStatusConfig("Pack","1100.70.06.70","shipmentList.LABEL_1100_70_06_70");
	iscShipmentStatusProvider.addShipmentStatusConfig("Pickup","1100.70.06.30","shipmentList.LABEL_1100_70_06_30");
	iscShipmentStatusProvider.addShipmentStatusConfig("All","1100.70.06.10","shipmentList.LABEL_1100_70_06_10");
	iscShipmentStatusProvider.addShipmentStatusConfig("All","1100.70.06.20","shipmentList.LABEL_1100_70_06_20");
	iscShipmentStatusProvider.addShipmentStatusConfig("All","1100.70.06.30","shipmentList.LABEL_1100_70_06_30");
	iscShipmentStatusProvider.addShipmentStatusConfig("All","1100.70.06.50","shipmentList.LABEL_1100_70_06_50");
	iscShipmentStatusProvider.addShipmentStatusConfig("All","1100.70.06.70","shipmentList.LABEL_1100_70_06_70");
	iscShipmentStatusProvider.addShipmentStatusConfig("All","1300","shipmentList.LABEL_1300");
	iscShipmentStatusProvider.addShipmentStatusConfig("All","1400","shipmentList.LABEL_1400");
	iscShipmentStatusProvider.addShipmentStatusConfig("All","9000","shipmentList.LABEL_9000");
	
	
}]);
angular.module("store").config(["iscCordovaProvider",function(iscCordovaProvider){
    // Cordova initialization start
    iscCordovaProvider.registerPluginInitialization(["iscBarcodeScanner",function(iscBarcodeScanner){
        if(window.Infinea){
            Infinea.init();
            Infinea.barcodeDataCallback = function(barcode, type, typeText){
                //alert(barcode);
                iscBarcodeScanner.placeBarcodeToElement(barcode);
            }
            Infinea.msrDataCallback = function(msrData){
                //alert(msrData);
                console.log(msrData);
            }
        }
    }]);
}]);





window.isCordovaInitialized = false;
window.isCordovaDeviceReady = false;

document.addEventListener("deviceready", function(){
    window.isCordovaDeviceReady = true;
    if(!window.isCordovaInitialized){
        window.isCordovaInitialized = true;
        setTimeout(function(){ 
            window.onCordovaDeviceReady();   
        }, 100);
        
    }
            
}, false);

angular.module("store").run(["iscCordova","$timeout",function(iscCordova,$timeout){
   
    window.onCordovaDeviceReady = function(){
        window.isCordovaInitialized = true;
        $timeout(function(){
            iscCordova.initializePlugins();
        },0);
        
    } 
    
    if(window.isCordovaDeviceReady && !window.isCordovaInitialized){
        window.onCordovaDeviceReady();
    }
    
}]);



    